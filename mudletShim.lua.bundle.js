const lua = {};
(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
const LuaVM = require('lua.vm.js');
const L = new LuaVM.Lua.State();

lua.execute = (code) => L.load(code).invoke(slice.call(arguments, 1))

lua.execute(`
-- table, (c|d|h)echo
send_command = js.global.send_command
display_notice = js.global.display_notice
reflex_enable = js.global.reflex_enable
reflex_disable = js.global.reflex_disable

--https://wiki.mudlet.org/w/Manual:Basic_Essentials#send

--Mudlet: send(command, showOnScreen)
--Nexus: send_command(input, noExpansion)

--noExpansion is more like send vs expandAlias
--no on-demand equivalent to showOnScreen in Nexus
function send(command, showOnScreen)
  send_command(command, true)
end

--https://wiki.mudlet.org/w/Manual:Lua_Functions#sendAll

--Mudlet: sendAll(list of things to send, echoBackOrNot)
--Nexus: send_command(input, noExpansion) (in a loop basically)

--noExpansion is more like send vs expandAlias
--no on-demand equivalent of echoBackOrNot in Nexus
function sendAll(args)
  local length = #args
  local lastArg = args[length]
  if not lastArg then length = length - 1 end

  for i, arg in pairs(args) do
    if i <= length then
      send_command(arg, true)
    end
  end
end

--https://wiki.mudlet.org/w/Manual:Miscellaneous_Functions#expandAlias

--Mudlet: expandAlias(command, echoBackToBuffer)
--Nexus: send_command(input, noExpansion)

--noExpansion is more like send vs expandAlias
--no on-demand equivalent to echoBackToBuffer in Nexus
function expandAlias(command, echoBackToBuffer)
  send_command(command, false)
end

--https://wiki.mudlet.org/w/Manual:Basic_Essentials#echo

--Mudlet: echo([miniconsoleName or labelName], text)
--Nexus: display_notice(text, fgcolor, bgcolor)

--miniconsole/label support is beyond the scope of this project
function echo(maybeText, maybeAlsoText)
  local text
  if not maybeAlsoText then text = maybeText else text = maybeAlsoText end
  display_notice(text)
end

--https://wiki.mudlet.org/w/Manual:Mudlet_Object_Functions#enableAlias
--https://wiki.mudlet.org/w/Manual:Mudlet_Object_Functions#enableKey
--https://wiki.mudlet.org/w/Manual:Mudlet_Object_Functions#enableTrigger

--https://wiki.mudlet.org/w/Manual:Mudlet_Object_Functions#disableAlias
--https://wiki.mudlet.org/w/Manual:Mudlet_Object_Functions#disableKey
--https://wiki.mudlet.org/w/Manual:Mudlet_Object_Functions#disableTrigger

--Example
--=======
--Mudlet: enableAlias(name)
--Nexus: reflex_enable(reflex_find_by_name('alias',
--                                         name,
--                                         // should search be case sensitive?
--                                         false,
--                                         // should we ignore disabled results?
--                                         false)
function enableAlias(name)
  reflex_enable(reflex_find_by_name('alias', name, false, false))
end
function disableAlias(name)
  reflex_disable(reflex_find_by_name('alias', name, false, true))
end
function enableKey(name)
  reflex_enable(reflex_find_by_name('keybind', name, false, false))
end
function disableKey(name)
  reflex_disable(reflex_find_by_name('keybind', name, false, true))
end
function enableTrigger(name)
  reflex_enable(reflex_find_by_name('trigger', name, false, false))
end
function disableTrigger(name)
  reflex_disable(reflex_find_by_name('trigger', name, false, true))
end
`)

},{"lua.vm.js":135}],2:[function(require,module,exports){
'use strict';

const asn1 = exports;

asn1.bignum = require('bn.js');

asn1.define = require('./asn1/api').define;
asn1.base = require('./asn1/base');
asn1.constants = require('./asn1/constants');
asn1.decoders = require('./asn1/decoders');
asn1.encoders = require('./asn1/encoders');

},{"./asn1/api":3,"./asn1/base":5,"./asn1/constants":9,"./asn1/decoders":11,"./asn1/encoders":14,"bn.js":16}],3:[function(require,module,exports){
'use strict';

const encoders = require('./encoders');
const decoders = require('./decoders');
const inherits = require('inherits');

const api = exports;

api.define = function define(name, body) {
  return new Entity(name, body);
};

function Entity(name, body) {
  this.name = name;
  this.body = body;

  this.decoders = {};
  this.encoders = {};
}

Entity.prototype._createNamed = function createNamed(Base) {
  const name = this.name;

  function Generated(entity) {
    this._initNamed(entity, name);
  }
  inherits(Generated, Base);
  Generated.prototype._initNamed = function _initNamed(entity, name) {
    Base.call(this, entity, name);
  };

  return new Generated(this);
};

Entity.prototype._getDecoder = function _getDecoder(enc) {
  enc = enc || 'der';
  // Lazily create decoder
  if (!this.decoders.hasOwnProperty(enc))
    this.decoders[enc] = this._createNamed(decoders[enc]);
  return this.decoders[enc];
};

Entity.prototype.decode = function decode(data, enc, options) {
  return this._getDecoder(enc).decode(data, options);
};

Entity.prototype._getEncoder = function _getEncoder(enc) {
  enc = enc || 'der';
  // Lazily create encoder
  if (!this.encoders.hasOwnProperty(enc))
    this.encoders[enc] = this._createNamed(encoders[enc]);
  return this.encoders[enc];
};

Entity.prototype.encode = function encode(data, enc, /* internal */ reporter) {
  return this._getEncoder(enc).encode(data, reporter);
};

},{"./decoders":11,"./encoders":14,"inherits":134}],4:[function(require,module,exports){
'use strict';

const inherits = require('inherits');
const Reporter = require('../base/reporter').Reporter;
const Buffer = require('safer-buffer').Buffer;

function DecoderBuffer(base, options) {
  Reporter.call(this, options);
  if (!Buffer.isBuffer(base)) {
    this.error('Input not Buffer');
    return;
  }

  this.base = base;
  this.offset = 0;
  this.length = base.length;
}
inherits(DecoderBuffer, Reporter);
exports.DecoderBuffer = DecoderBuffer;

DecoderBuffer.isDecoderBuffer = function isDecoderBuffer(data) {
  if (data instanceof DecoderBuffer) {
    return true;
  }

  // Or accept compatible API
  const isCompatible = typeof data === 'object' &&
    Buffer.isBuffer(data.base) &&
    data.constructor.name === 'DecoderBuffer' &&
    typeof data.offset === 'number' &&
    typeof data.length === 'number' &&
    typeof data.save === 'function' &&
    typeof data.restore === 'function' &&
    typeof data.isEmpty === 'function' &&
    typeof data.readUInt8 === 'function' &&
    typeof data.skip === 'function' &&
    typeof data.raw === 'function';

  return isCompatible;
};

DecoderBuffer.prototype.save = function save() {
  return { offset: this.offset, reporter: Reporter.prototype.save.call(this) };
};

DecoderBuffer.prototype.restore = function restore(save) {
  // Return skipped data
  const res = new DecoderBuffer(this.base);
  res.offset = save.offset;
  res.length = this.offset;

  this.offset = save.offset;
  Reporter.prototype.restore.call(this, save.reporter);

  return res;
};

DecoderBuffer.prototype.isEmpty = function isEmpty() {
  return this.offset === this.length;
};

DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
  if (this.offset + 1 <= this.length)
    return this.base.readUInt8(this.offset++, true);
  else
    return this.error(fail || 'DecoderBuffer overrun');
};

DecoderBuffer.prototype.skip = function skip(bytes, fail) {
  if (!(this.offset + bytes <= this.length))
    return this.error(fail || 'DecoderBuffer overrun');

  const res = new DecoderBuffer(this.base);

  // Share reporter state
  res._reporterState = this._reporterState;

  res.offset = this.offset;
  res.length = this.offset + bytes;
  this.offset += bytes;
  return res;
};

DecoderBuffer.prototype.raw = function raw(save) {
  return this.base.slice(save ? save.offset : this.offset, this.length);
};

function EncoderBuffer(value, reporter) {
  if (Array.isArray(value)) {
    this.length = 0;
    this.value = value.map(function(item) {
      if (!EncoderBuffer.isEncoderBuffer(item))
        item = new EncoderBuffer(item, reporter);
      this.length += item.length;
      return item;
    }, this);
  } else if (typeof value === 'number') {
    if (!(0 <= value && value <= 0xff))
      return reporter.error('non-byte EncoderBuffer value');
    this.value = value;
    this.length = 1;
  } else if (typeof value === 'string') {
    this.value = value;
    this.length = Buffer.byteLength(value);
  } else if (Buffer.isBuffer(value)) {
    this.value = value;
    this.length = value.length;
  } else {
    return reporter.error('Unsupported type: ' + typeof value);
  }
}
exports.EncoderBuffer = EncoderBuffer;

EncoderBuffer.isEncoderBuffer = function isEncoderBuffer(data) {
  if (data instanceof EncoderBuffer) {
    return true;
  }

  // Or accept compatible API
  const isCompatible = typeof data === 'object' &&
    data.constructor.name === 'EncoderBuffer' &&
    typeof data.length === 'number' &&
    typeof data.join === 'function';

  return isCompatible;
};

EncoderBuffer.prototype.join = function join(out, offset) {
  if (!out)
    out = Buffer.alloc(this.length);
  if (!offset)
    offset = 0;

  if (this.length === 0)
    return out;

  if (Array.isArray(this.value)) {
    this.value.forEach(function(item) {
      item.join(out, offset);
      offset += item.length;
    });
  } else {
    if (typeof this.value === 'number')
      out[offset] = this.value;
    else if (typeof this.value === 'string')
      out.write(this.value, offset);
    else if (Buffer.isBuffer(this.value))
      this.value.copy(out, offset);
    offset += this.length;
  }

  return out;
};

},{"../base/reporter":7,"inherits":134,"safer-buffer":165}],5:[function(require,module,exports){
'use strict';

const base = exports;

base.Reporter = require('./reporter').Reporter;
base.DecoderBuffer = require('./buffer').DecoderBuffer;
base.EncoderBuffer = require('./buffer').EncoderBuffer;
base.Node = require('./node');

},{"./buffer":4,"./node":6,"./reporter":7}],6:[function(require,module,exports){
'use strict';

const Reporter = require('../base/reporter').Reporter;
const EncoderBuffer = require('../base/buffer').EncoderBuffer;
const DecoderBuffer = require('../base/buffer').DecoderBuffer;
const assert = require('minimalistic-assert');

// Supported tags
const tags = [
  'seq', 'seqof', 'set', 'setof', 'objid', 'bool',
  'gentime', 'utctime', 'null_', 'enum', 'int', 'objDesc',
  'bitstr', 'bmpstr', 'charstr', 'genstr', 'graphstr', 'ia5str', 'iso646str',
  'numstr', 'octstr', 'printstr', 't61str', 'unistr', 'utf8str', 'videostr'
];

// Public methods list
const methods = [
  'key', 'obj', 'use', 'optional', 'explicit', 'implicit', 'def', 'choice',
  'any', 'contains'
].concat(tags);

// Overrided methods list
const overrided = [
  '_peekTag', '_decodeTag', '_use',
  '_decodeStr', '_decodeObjid', '_decodeTime',
  '_decodeNull', '_decodeInt', '_decodeBool', '_decodeList',

  '_encodeComposite', '_encodeStr', '_encodeObjid', '_encodeTime',
  '_encodeNull', '_encodeInt', '_encodeBool'
];

function Node(enc, parent, name) {
  const state = {};
  this._baseState = state;

  state.name = name;
  state.enc = enc;

  state.parent = parent || null;
  state.children = null;

  // State
  state.tag = null;
  state.args = null;
  state.reverseArgs = null;
  state.choice = null;
  state.optional = false;
  state.any = false;
  state.obj = false;
  state.use = null;
  state.useDecoder = null;
  state.key = null;
  state['default'] = null;
  state.explicit = null;
  state.implicit = null;
  state.contains = null;

  // Should create new instance on each method
  if (!state.parent) {
    state.children = [];
    this._wrap();
  }
}
module.exports = Node;

const stateProps = [
  'enc', 'parent', 'children', 'tag', 'args', 'reverseArgs', 'choice',
  'optional', 'any', 'obj', 'use', 'alteredUse', 'key', 'default', 'explicit',
  'implicit', 'contains'
];

Node.prototype.clone = function clone() {
  const state = this._baseState;
  const cstate = {};
  stateProps.forEach(function(prop) {
    cstate[prop] = state[prop];
  });
  const res = new this.constructor(cstate.parent);
  res._baseState = cstate;
  return res;
};

Node.prototype._wrap = function wrap() {
  const state = this._baseState;
  methods.forEach(function(method) {
    this[method] = function _wrappedMethod() {
      const clone = new this.constructor(this);
      state.children.push(clone);
      return clone[method].apply(clone, arguments);
    };
  }, this);
};

Node.prototype._init = function init(body) {
  const state = this._baseState;

  assert(state.parent === null);
  body.call(this);

  // Filter children
  state.children = state.children.filter(function(child) {
    return child._baseState.parent === this;
  }, this);
  assert.equal(state.children.length, 1, 'Root node can have only one child');
};

Node.prototype._useArgs = function useArgs(args) {
  const state = this._baseState;

  // Filter children and args
  const children = args.filter(function(arg) {
    return arg instanceof this.constructor;
  }, this);
  args = args.filter(function(arg) {
    return !(arg instanceof this.constructor);
  }, this);

  if (children.length !== 0) {
    assert(state.children === null);
    state.children = children;

    // Replace parent to maintain backward link
    children.forEach(function(child) {
      child._baseState.parent = this;
    }, this);
  }
  if (args.length !== 0) {
    assert(state.args === null);
    state.args = args;
    state.reverseArgs = args.map(function(arg) {
      if (typeof arg !== 'object' || arg.constructor !== Object)
        return arg;

      const res = {};
      Object.keys(arg).forEach(function(key) {
        if (key == (key | 0))
          key |= 0;
        const value = arg[key];
        res[value] = key;
      });
      return res;
    });
  }
};

//
// Overrided methods
//

overrided.forEach(function(method) {
  Node.prototype[method] = function _overrided() {
    const state = this._baseState;
    throw new Error(method + ' not implemented for encoding: ' + state.enc);
  };
});

//
// Public methods
//

tags.forEach(function(tag) {
  Node.prototype[tag] = function _tagMethod() {
    const state = this._baseState;
    const args = Array.prototype.slice.call(arguments);

    assert(state.tag === null);
    state.tag = tag;

    this._useArgs(args);

    return this;
  };
});

Node.prototype.use = function use(item) {
  assert(item);
  const state = this._baseState;

  assert(state.use === null);
  state.use = item;

  return this;
};

Node.prototype.optional = function optional() {
  const state = this._baseState;

  state.optional = true;

  return this;
};

Node.prototype.def = function def(val) {
  const state = this._baseState;

  assert(state['default'] === null);
  state['default'] = val;
  state.optional = true;

  return this;
};

Node.prototype.explicit = function explicit(num) {
  const state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.explicit = num;

  return this;
};

Node.prototype.implicit = function implicit(num) {
  const state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.implicit = num;

  return this;
};

Node.prototype.obj = function obj() {
  const state = this._baseState;
  const args = Array.prototype.slice.call(arguments);

  state.obj = true;

  if (args.length !== 0)
    this._useArgs(args);

  return this;
};

Node.prototype.key = function key(newKey) {
  const state = this._baseState;

  assert(state.key === null);
  state.key = newKey;

  return this;
};

Node.prototype.any = function any() {
  const state = this._baseState;

  state.any = true;

  return this;
};

Node.prototype.choice = function choice(obj) {
  const state = this._baseState;

  assert(state.choice === null);
  state.choice = obj;
  this._useArgs(Object.keys(obj).map(function(key) {
    return obj[key];
  }));

  return this;
};

Node.prototype.contains = function contains(item) {
  const state = this._baseState;

  assert(state.use === null);
  state.contains = item;

  return this;
};

//
// Decoding
//

Node.prototype._decode = function decode(input, options) {
  const state = this._baseState;

  // Decode root node
  if (state.parent === null)
    return input.wrapResult(state.children[0]._decode(input, options));

  let result = state['default'];
  let present = true;

  let prevKey = null;
  if (state.key !== null)
    prevKey = input.enterKey(state.key);

  // Check if tag is there
  if (state.optional) {
    let tag = null;
    if (state.explicit !== null)
      tag = state.explicit;
    else if (state.implicit !== null)
      tag = state.implicit;
    else if (state.tag !== null)
      tag = state.tag;

    if (tag === null && !state.any) {
      // Trial and Error
      const save = input.save();
      try {
        if (state.choice === null)
          this._decodeGeneric(state.tag, input, options);
        else
          this._decodeChoice(input, options);
        present = true;
      } catch (e) {
        present = false;
      }
      input.restore(save);
    } else {
      present = this._peekTag(input, tag, state.any);

      if (input.isError(present))
        return present;
    }
  }

  // Push object on stack
  let prevObj;
  if (state.obj && present)
    prevObj = input.enterObject();

  if (present) {
    // Unwrap explicit values
    if (state.explicit !== null) {
      const explicit = this._decodeTag(input, state.explicit);
      if (input.isError(explicit))
        return explicit;
      input = explicit;
    }

    const start = input.offset;

    // Unwrap implicit and normal values
    if (state.use === null && state.choice === null) {
      let save;
      if (state.any)
        save = input.save();
      const body = this._decodeTag(
        input,
        state.implicit !== null ? state.implicit : state.tag,
        state.any
      );
      if (input.isError(body))
        return body;

      if (state.any)
        result = input.raw(save);
      else
        input = body;
    }

    if (options && options.track && state.tag !== null)
      options.track(input.path(), start, input.length, 'tagged');

    if (options && options.track && state.tag !== null)
      options.track(input.path(), input.offset, input.length, 'content');

    // Select proper method for tag
    if (state.any) {
      // no-op
    } else if (state.choice === null) {
      result = this._decodeGeneric(state.tag, input, options);
    } else {
      result = this._decodeChoice(input, options);
    }

    if (input.isError(result))
      return result;

    // Decode children
    if (!state.any && state.choice === null && state.children !== null) {
      state.children.forEach(function decodeChildren(child) {
        // NOTE: We are ignoring errors here, to let parser continue with other
        // parts of encoded data
        child._decode(input, options);
      });
    }

    // Decode contained/encoded by schema, only in bit or octet strings
    if (state.contains && (state.tag === 'octstr' || state.tag === 'bitstr')) {
      const data = new DecoderBuffer(result);
      result = this._getUse(state.contains, input._reporterState.obj)
        ._decode(data, options);
    }
  }

  // Pop object
  if (state.obj && present)
    result = input.leaveObject(prevObj);

  // Set key
  if (state.key !== null && (result !== null || present === true))
    input.leaveKey(prevKey, state.key, result);
  else if (prevKey !== null)
    input.exitKey(prevKey);

  return result;
};

Node.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {
  const state = this._baseState;

  if (tag === 'seq' || tag === 'set')
    return null;
  if (tag === 'seqof' || tag === 'setof')
    return this._decodeList(input, tag, state.args[0], options);
  else if (/str$/.test(tag))
    return this._decodeStr(input, tag, options);
  else if (tag === 'objid' && state.args)
    return this._decodeObjid(input, state.args[0], state.args[1], options);
  else if (tag === 'objid')
    return this._decodeObjid(input, null, null, options);
  else if (tag === 'gentime' || tag === 'utctime')
    return this._decodeTime(input, tag, options);
  else if (tag === 'null_')
    return this._decodeNull(input, options);
  else if (tag === 'bool')
    return this._decodeBool(input, options);
  else if (tag === 'objDesc')
    return this._decodeStr(input, tag, options);
  else if (tag === 'int' || tag === 'enum')
    return this._decodeInt(input, state.args && state.args[0], options);

  if (state.use !== null) {
    return this._getUse(state.use, input._reporterState.obj)
      ._decode(input, options);
  } else {
    return input.error('unknown tag: ' + tag);
  }
};

Node.prototype._getUse = function _getUse(entity, obj) {

  const state = this._baseState;
  // Create altered use decoder if implicit is set
  state.useDecoder = this._use(entity, obj);
  assert(state.useDecoder._baseState.parent === null);
  state.useDecoder = state.useDecoder._baseState.children[0];
  if (state.implicit !== state.useDecoder._baseState.implicit) {
    state.useDecoder = state.useDecoder.clone();
    state.useDecoder._baseState.implicit = state.implicit;
  }
  return state.useDecoder;
};

Node.prototype._decodeChoice = function decodeChoice(input, options) {
  const state = this._baseState;
  let result = null;
  let match = false;

  Object.keys(state.choice).some(function(key) {
    const save = input.save();
    const node = state.choice[key];
    try {
      const value = node._decode(input, options);
      if (input.isError(value))
        return false;

      result = { type: key, value: value };
      match = true;
    } catch (e) {
      input.restore(save);
      return false;
    }
    return true;
  }, this);

  if (!match)
    return input.error('Choice not matched');

  return result;
};

//
// Encoding
//

Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
  return new EncoderBuffer(data, this.reporter);
};

Node.prototype._encode = function encode(data, reporter, parent) {
  const state = this._baseState;
  if (state['default'] !== null && state['default'] === data)
    return;

  const result = this._encodeValue(data, reporter, parent);
  if (result === undefined)
    return;

  if (this._skipDefault(result, reporter, parent))
    return;

  return result;
};

Node.prototype._encodeValue = function encode(data, reporter, parent) {
  const state = this._baseState;

  // Decode root node
  if (state.parent === null)
    return state.children[0]._encode(data, reporter || new Reporter());

  let result = null;

  // Set reporter to share it with a child class
  this.reporter = reporter;

  // Check if data is there
  if (state.optional && data === undefined) {
    if (state['default'] !== null)
      data = state['default'];
    else
      return;
  }

  // Encode children first
  let content = null;
  let primitive = false;
  if (state.any) {
    // Anything that was given is translated to buffer
    result = this._createEncoderBuffer(data);
  } else if (state.choice) {
    result = this._encodeChoice(data, reporter);
  } else if (state.contains) {
    content = this._getUse(state.contains, parent)._encode(data, reporter);
    primitive = true;
  } else if (state.children) {
    content = state.children.map(function(child) {
      if (child._baseState.tag === 'null_')
        return child._encode(null, reporter, data);

      if (child._baseState.key === null)
        return reporter.error('Child should have a key');
      const prevKey = reporter.enterKey(child._baseState.key);

      if (typeof data !== 'object')
        return reporter.error('Child expected, but input is not object');

      const res = child._encode(data[child._baseState.key], reporter, data);
      reporter.leaveKey(prevKey);

      return res;
    }, this).filter(function(child) {
      return child;
    });
    content = this._createEncoderBuffer(content);
  } else {
    if (state.tag === 'seqof' || state.tag === 'setof') {
      // TODO(indutny): this should be thrown on DSL level
      if (!(state.args && state.args.length === 1))
        return reporter.error('Too many args for : ' + state.tag);

      if (!Array.isArray(data))
        return reporter.error('seqof/setof, but data is not Array');

      const child = this.clone();
      child._baseState.implicit = null;
      content = this._createEncoderBuffer(data.map(function(item) {
        const state = this._baseState;

        return this._getUse(state.args[0], data)._encode(item, reporter);
      }, child));
    } else if (state.use !== null) {
      result = this._getUse(state.use, parent)._encode(data, reporter);
    } else {
      content = this._encodePrimitive(state.tag, data);
      primitive = true;
    }
  }

  // Encode data itself
  if (!state.any && state.choice === null) {
    const tag = state.implicit !== null ? state.implicit : state.tag;
    const cls = state.implicit === null ? 'universal' : 'context';

    if (tag === null) {
      if (state.use === null)
        reporter.error('Tag could be omitted only for .use()');
    } else {
      if (state.use === null)
        result = this._encodeComposite(tag, primitive, cls, content);
    }
  }

  // Wrap in explicit
  if (state.explicit !== null)
    result = this._encodeComposite(state.explicit, false, 'context', result);

  return result;
};

Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
  const state = this._baseState;

  const node = state.choice[data.type];
  if (!node) {
    assert(
      false,
      data.type + ' not found in ' +
            JSON.stringify(Object.keys(state.choice)));
  }
  return node._encode(data.value, reporter);
};

Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
  const state = this._baseState;

  if (/str$/.test(tag))
    return this._encodeStr(data, tag);
  else if (tag === 'objid' && state.args)
    return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);
  else if (tag === 'objid')
    return this._encodeObjid(data, null, null);
  else if (tag === 'gentime' || tag === 'utctime')
    return this._encodeTime(data, tag);
  else if (tag === 'null_')
    return this._encodeNull();
  else if (tag === 'int' || tag === 'enum')
    return this._encodeInt(data, state.args && state.reverseArgs[0]);
  else if (tag === 'bool')
    return this._encodeBool(data);
  else if (tag === 'objDesc')
    return this._encodeStr(data, tag);
  else
    throw new Error('Unsupported tag: ' + tag);
};

Node.prototype._isNumstr = function isNumstr(str) {
  return /^[0-9 ]*$/.test(str);
};

Node.prototype._isPrintstr = function isPrintstr(str) {
  return /^[A-Za-z0-9 '()+,-./:=?]*$/.test(str);
};

},{"../base/buffer":4,"../base/reporter":7,"minimalistic-assert":139}],7:[function(require,module,exports){
'use strict';

const inherits = require('inherits');

function Reporter(options) {
  this._reporterState = {
    obj: null,
    path: [],
    options: options || {},
    errors: []
  };
}
exports.Reporter = Reporter;

Reporter.prototype.isError = function isError(obj) {
  return obj instanceof ReporterError;
};

Reporter.prototype.save = function save() {
  const state = this._reporterState;

  return { obj: state.obj, pathLen: state.path.length };
};

Reporter.prototype.restore = function restore(data) {
  const state = this._reporterState;

  state.obj = data.obj;
  state.path = state.path.slice(0, data.pathLen);
};

Reporter.prototype.enterKey = function enterKey(key) {
  return this._reporterState.path.push(key);
};

Reporter.prototype.exitKey = function exitKey(index) {
  const state = this._reporterState;

  state.path = state.path.slice(0, index - 1);
};

Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
  const state = this._reporterState;

  this.exitKey(index);
  if (state.obj !== null)
    state.obj[key] = value;
};

Reporter.prototype.path = function path() {
  return this._reporterState.path.join('/');
};

Reporter.prototype.enterObject = function enterObject() {
  const state = this._reporterState;

  const prev = state.obj;
  state.obj = {};
  return prev;
};

Reporter.prototype.leaveObject = function leaveObject(prev) {
  const state = this._reporterState;

  const now = state.obj;
  state.obj = prev;
  return now;
};

Reporter.prototype.error = function error(msg) {
  let err;
  const state = this._reporterState;

  const inherited = msg instanceof ReporterError;
  if (inherited) {
    err = msg;
  } else {
    err = new ReporterError(state.path.map(function(elem) {
      return '[' + JSON.stringify(elem) + ']';
    }).join(''), msg.message || msg, msg.stack);
  }

  if (!state.options.partial)
    throw err;

  if (!inherited)
    state.errors.push(err);

  return err;
};

Reporter.prototype.wrapResult = function wrapResult(result) {
  const state = this._reporterState;
  if (!state.options.partial)
    return result;

  return {
    result: this.isError(result) ? null : result,
    errors: state.errors
  };
};

function ReporterError(path, msg) {
  this.path = path;
  this.rethrow(msg);
}
inherits(ReporterError, Error);

ReporterError.prototype.rethrow = function rethrow(msg) {
  this.message = msg + ' at: ' + (this.path || '(shallow)');
  if (Error.captureStackTrace)
    Error.captureStackTrace(this, ReporterError);

  if (!this.stack) {
    try {
      // IE only adds stack when thrown
      throw new Error(this.message);
    } catch (e) {
      this.stack = e.stack;
    }
  }
  return this;
};

},{"inherits":134}],8:[function(require,module,exports){
'use strict';

// Helper
function reverse(map) {
  const res = {};

  Object.keys(map).forEach(function(key) {
    // Convert key to integer if it is stringified
    if ((key | 0) == key)
      key = key | 0;

    const value = map[key];
    res[value] = key;
  });

  return res;
}

exports.tagClass = {
  0: 'universal',
  1: 'application',
  2: 'context',
  3: 'private'
};
exports.tagClassByName = reverse(exports.tagClass);

exports.tag = {
  0x00: 'end',
  0x01: 'bool',
  0x02: 'int',
  0x03: 'bitstr',
  0x04: 'octstr',
  0x05: 'null_',
  0x06: 'objid',
  0x07: 'objDesc',
  0x08: 'external',
  0x09: 'real',
  0x0a: 'enum',
  0x0b: 'embed',
  0x0c: 'utf8str',
  0x0d: 'relativeOid',
  0x10: 'seq',
  0x11: 'set',
  0x12: 'numstr',
  0x13: 'printstr',
  0x14: 't61str',
  0x15: 'videostr',
  0x16: 'ia5str',
  0x17: 'utctime',
  0x18: 'gentime',
  0x19: 'graphstr',
  0x1a: 'iso646str',
  0x1b: 'genstr',
  0x1c: 'unistr',
  0x1d: 'charstr',
  0x1e: 'bmpstr'
};
exports.tagByName = reverse(exports.tag);

},{}],9:[function(require,module,exports){
'use strict';

const constants = exports;

// Helper
constants._reverse = function reverse(map) {
  const res = {};

  Object.keys(map).forEach(function(key) {
    // Convert key to integer if it is stringified
    if ((key | 0) == key)
      key = key | 0;

    const value = map[key];
    res[value] = key;
  });

  return res;
};

constants.der = require('./der');

},{"./der":8}],10:[function(require,module,exports){
'use strict';

const inherits = require('inherits');

const bignum = require('bn.js');
const DecoderBuffer = require('../base/buffer').DecoderBuffer;
const Node = require('../base/node');

// Import DER constants
const der = require('../constants/der');

function DERDecoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
}
module.exports = DERDecoder;

DERDecoder.prototype.decode = function decode(data, options) {
  if (!DecoderBuffer.isDecoderBuffer(data)) {
    data = new DecoderBuffer(data, options);
  }

  return this.tree._decode(data, options);
};

// Tree methods

function DERNode(parent) {
  Node.call(this, 'der', parent);
}
inherits(DERNode, Node);

DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
  if (buffer.isEmpty())
    return false;

  const state = buffer.save();
  const decodedTag = derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
  if (buffer.isError(decodedTag))
    return decodedTag;

  buffer.restore(state);

  return decodedTag.tag === tag || decodedTag.tagStr === tag ||
    (decodedTag.tagStr + 'of') === tag || any;
};

DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
  const decodedTag = derDecodeTag(buffer,
    'Failed to decode tag of "' + tag + '"');
  if (buffer.isError(decodedTag))
    return decodedTag;

  let len = derDecodeLen(buffer,
    decodedTag.primitive,
    'Failed to get length of "' + tag + '"');

  // Failure
  if (buffer.isError(len))
    return len;

  if (!any &&
      decodedTag.tag !== tag &&
      decodedTag.tagStr !== tag &&
      decodedTag.tagStr + 'of' !== tag) {
    return buffer.error('Failed to match tag: "' + tag + '"');
  }

  if (decodedTag.primitive || len !== null)
    return buffer.skip(len, 'Failed to match body of: "' + tag + '"');

  // Indefinite length... find END tag
  const state = buffer.save();
  const res = this._skipUntilEnd(
    buffer,
    'Failed to skip indefinite length body: "' + this.tag + '"');
  if (buffer.isError(res))
    return res;

  len = buffer.offset - state.offset;
  buffer.restore(state);
  return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
};

DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
  for (;;) {
    const tag = derDecodeTag(buffer, fail);
    if (buffer.isError(tag))
      return tag;
    const len = derDecodeLen(buffer, tag.primitive, fail);
    if (buffer.isError(len))
      return len;

    let res;
    if (tag.primitive || len !== null)
      res = buffer.skip(len);
    else
      res = this._skipUntilEnd(buffer, fail);

    // Failure
    if (buffer.isError(res))
      return res;

    if (tag.tagStr === 'end')
      break;
  }
};

DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder,
  options) {
  const result = [];
  while (!buffer.isEmpty()) {
    const possibleEnd = this._peekTag(buffer, 'end');
    if (buffer.isError(possibleEnd))
      return possibleEnd;

    const res = decoder.decode(buffer, 'der', options);
    if (buffer.isError(res) && possibleEnd)
      break;
    result.push(res);
  }
  return result;
};

DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
  if (tag === 'bitstr') {
    const unused = buffer.readUInt8();
    if (buffer.isError(unused))
      return unused;
    return { unused: unused, data: buffer.raw() };
  } else if (tag === 'bmpstr') {
    const raw = buffer.raw();
    if (raw.length % 2 === 1)
      return buffer.error('Decoding of string type: bmpstr length mismatch');

    let str = '';
    for (let i = 0; i < raw.length / 2; i++) {
      str += String.fromCharCode(raw.readUInt16BE(i * 2));
    }
    return str;
  } else if (tag === 'numstr') {
    const numstr = buffer.raw().toString('ascii');
    if (!this._isNumstr(numstr)) {
      return buffer.error('Decoding of string type: ' +
                          'numstr unsupported characters');
    }
    return numstr;
  } else if (tag === 'octstr') {
    return buffer.raw();
  } else if (tag === 'objDesc') {
    return buffer.raw();
  } else if (tag === 'printstr') {
    const printstr = buffer.raw().toString('ascii');
    if (!this._isPrintstr(printstr)) {
      return buffer.error('Decoding of string type: ' +
                          'printstr unsupported characters');
    }
    return printstr;
  } else if (/str$/.test(tag)) {
    return buffer.raw().toString();
  } else {
    return buffer.error('Decoding of string type: ' + tag + ' unsupported');
  }
};

DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
  let result;
  const identifiers = [];
  let ident = 0;
  let subident = 0;
  while (!buffer.isEmpty()) {
    subident = buffer.readUInt8();
    ident <<= 7;
    ident |= subident & 0x7f;
    if ((subident & 0x80) === 0) {
      identifiers.push(ident);
      ident = 0;
    }
  }
  if (subident & 0x80)
    identifiers.push(ident);

  const first = (identifiers[0] / 40) | 0;
  const second = identifiers[0] % 40;

  if (relative)
    result = identifiers;
  else
    result = [first, second].concat(identifiers.slice(1));

  if (values) {
    let tmp = values[result.join(' ')];
    if (tmp === undefined)
      tmp = values[result.join('.')];
    if (tmp !== undefined)
      result = tmp;
  }

  return result;
};

DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
  const str = buffer.raw().toString();

  let year;
  let mon;
  let day;
  let hour;
  let min;
  let sec;
  if (tag === 'gentime') {
    year = str.slice(0, 4) | 0;
    mon = str.slice(4, 6) | 0;
    day = str.slice(6, 8) | 0;
    hour = str.slice(8, 10) | 0;
    min = str.slice(10, 12) | 0;
    sec = str.slice(12, 14) | 0;
  } else if (tag === 'utctime') {
    year = str.slice(0, 2) | 0;
    mon = str.slice(2, 4) | 0;
    day = str.slice(4, 6) | 0;
    hour = str.slice(6, 8) | 0;
    min = str.slice(8, 10) | 0;
    sec = str.slice(10, 12) | 0;
    if (year < 70)
      year = 2000 + year;
    else
      year = 1900 + year;
  } else {
    return buffer.error('Decoding ' + tag + ' time is not supported yet');
  }

  return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
};

DERNode.prototype._decodeNull = function decodeNull() {
  return null;
};

DERNode.prototype._decodeBool = function decodeBool(buffer) {
  const res = buffer.readUInt8();
  if (buffer.isError(res))
    return res;
  else
    return res !== 0;
};

DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
  // Bigint, return as it is (assume big endian)
  const raw = buffer.raw();
  let res = new bignum(raw);

  if (values)
    res = values[res.toString(10)] || res;

  return res;
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function')
    entity = entity(obj);
  return entity._getDecoder('der').tree;
};

// Utility methods

function derDecodeTag(buf, fail) {
  let tag = buf.readUInt8(fail);
  if (buf.isError(tag))
    return tag;

  const cls = der.tagClass[tag >> 6];
  const primitive = (tag & 0x20) === 0;

  // Multi-octet tag - load
  if ((tag & 0x1f) === 0x1f) {
    let oct = tag;
    tag = 0;
    while ((oct & 0x80) === 0x80) {
      oct = buf.readUInt8(fail);
      if (buf.isError(oct))
        return oct;

      tag <<= 7;
      tag |= oct & 0x7f;
    }
  } else {
    tag &= 0x1f;
  }
  const tagStr = der.tag[tag];

  return {
    cls: cls,
    primitive: primitive,
    tag: tag,
    tagStr: tagStr
  };
}

function derDecodeLen(buf, primitive, fail) {
  let len = buf.readUInt8(fail);
  if (buf.isError(len))
    return len;

  // Indefinite form
  if (!primitive && len === 0x80)
    return null;

  // Definite form
  if ((len & 0x80) === 0) {
    // Short form
    return len;
  }

  // Long form
  const num = len & 0x7f;
  if (num > 4)
    return buf.error('length octect is too long');

  len = 0;
  for (let i = 0; i < num; i++) {
    len <<= 8;
    const j = buf.readUInt8(fail);
    if (buf.isError(j))
      return j;
    len |= j;
  }

  return len;
}

},{"../base/buffer":4,"../base/node":6,"../constants/der":8,"bn.js":16,"inherits":134}],11:[function(require,module,exports){
'use strict';

const decoders = exports;

decoders.der = require('./der');
decoders.pem = require('./pem');

},{"./der":10,"./pem":12}],12:[function(require,module,exports){
'use strict';

const inherits = require('inherits');
const Buffer = require('safer-buffer').Buffer;

const DERDecoder = require('./der');

function PEMDecoder(entity) {
  DERDecoder.call(this, entity);
  this.enc = 'pem';
}
inherits(PEMDecoder, DERDecoder);
module.exports = PEMDecoder;

PEMDecoder.prototype.decode = function decode(data, options) {
  const lines = data.toString().split(/[\r\n]+/g);

  const label = options.label.toUpperCase();

  const re = /^-----(BEGIN|END) ([^-]+)-----$/;
  let start = -1;
  let end = -1;
  for (let i = 0; i < lines.length; i++) {
    const match = lines[i].match(re);
    if (match === null)
      continue;

    if (match[2] !== label)
      continue;

    if (start === -1) {
      if (match[1] !== 'BEGIN')
        break;
      start = i;
    } else {
      if (match[1] !== 'END')
        break;
      end = i;
      break;
    }
  }
  if (start === -1 || end === -1)
    throw new Error('PEM section not found for: ' + label);

  const base64 = lines.slice(start + 1, end).join('');
  // Remove excessive symbols
  base64.replace(/[^a-z0-9+/=]+/gi, '');

  const input = Buffer.from(base64, 'base64');
  return DERDecoder.prototype.decode.call(this, input, options);
};

},{"./der":10,"inherits":134,"safer-buffer":165}],13:[function(require,module,exports){
'use strict';

const inherits = require('inherits');
const Buffer = require('safer-buffer').Buffer;
const Node = require('../base/node');

// Import DER constants
const der = require('../constants/der');

function DEREncoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
}
module.exports = DEREncoder;

DEREncoder.prototype.encode = function encode(data, reporter) {
  return this.tree._encode(data, reporter).join();
};

// Tree methods

function DERNode(parent) {
  Node.call(this, 'der', parent);
}
inherits(DERNode, Node);

DERNode.prototype._encodeComposite = function encodeComposite(tag,
  primitive,
  cls,
  content) {
  const encodedTag = encodeTag(tag, primitive, cls, this.reporter);

  // Short form
  if (content.length < 0x80) {
    const header = Buffer.alloc(2);
    header[0] = encodedTag;
    header[1] = content.length;
    return this._createEncoderBuffer([ header, content ]);
  }

  // Long form
  // Count octets required to store length
  let lenOctets = 1;
  for (let i = content.length; i >= 0x100; i >>= 8)
    lenOctets++;

  const header = Buffer.alloc(1 + 1 + lenOctets);
  header[0] = encodedTag;
  header[1] = 0x80 | lenOctets;

  for (let i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8)
    header[i] = j & 0xff;

  return this._createEncoderBuffer([ header, content ]);
};

DERNode.prototype._encodeStr = function encodeStr(str, tag) {
  if (tag === 'bitstr') {
    return this._createEncoderBuffer([ str.unused | 0, str.data ]);
  } else if (tag === 'bmpstr') {
    const buf = Buffer.alloc(str.length * 2);
    for (let i = 0; i < str.length; i++) {
      buf.writeUInt16BE(str.charCodeAt(i), i * 2);
    }
    return this._createEncoderBuffer(buf);
  } else if (tag === 'numstr') {
    if (!this._isNumstr(str)) {
      return this.reporter.error('Encoding of string type: numstr supports ' +
                                 'only digits and space');
    }
    return this._createEncoderBuffer(str);
  } else if (tag === 'printstr') {
    if (!this._isPrintstr(str)) {
      return this.reporter.error('Encoding of string type: printstr supports ' +
                                 'only latin upper and lower case letters, ' +
                                 'digits, space, apostrophe, left and rigth ' +
                                 'parenthesis, plus sign, comma, hyphen, ' +
                                 'dot, slash, colon, equal sign, ' +
                                 'question mark');
    }
    return this._createEncoderBuffer(str);
  } else if (/str$/.test(tag)) {
    return this._createEncoderBuffer(str);
  } else if (tag === 'objDesc') {
    return this._createEncoderBuffer(str);
  } else {
    return this.reporter.error('Encoding of string type: ' + tag +
                               ' unsupported');
  }
};

DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
  if (typeof id === 'string') {
    if (!values)
      return this.reporter.error('string objid given, but no values map found');
    if (!values.hasOwnProperty(id))
      return this.reporter.error('objid not found in values map');
    id = values[id].split(/[\s.]+/g);
    for (let i = 0; i < id.length; i++)
      id[i] |= 0;
  } else if (Array.isArray(id)) {
    id = id.slice();
    for (let i = 0; i < id.length; i++)
      id[i] |= 0;
  }

  if (!Array.isArray(id)) {
    return this.reporter.error('objid() should be either array or string, ' +
                               'got: ' + JSON.stringify(id));
  }

  if (!relative) {
    if (id[1] >= 40)
      return this.reporter.error('Second objid identifier OOB');
    id.splice(0, 2, id[0] * 40 + id[1]);
  }

  // Count number of octets
  let size = 0;
  for (let i = 0; i < id.length; i++) {
    let ident = id[i];
    for (size++; ident >= 0x80; ident >>= 7)
      size++;
  }

  const objid = Buffer.alloc(size);
  let offset = objid.length - 1;
  for (let i = id.length - 1; i >= 0; i--) {
    let ident = id[i];
    objid[offset--] = ident & 0x7f;
    while ((ident >>= 7) > 0)
      objid[offset--] = 0x80 | (ident & 0x7f);
  }

  return this._createEncoderBuffer(objid);
};

function two(num) {
  if (num < 10)
    return '0' + num;
  else
    return num;
}

DERNode.prototype._encodeTime = function encodeTime(time, tag) {
  let str;
  const date = new Date(time);

  if (tag === 'gentime') {
    str = [
      two(date.getUTCFullYear()),
      two(date.getUTCMonth() + 1),
      two(date.getUTCDate()),
      two(date.getUTCHours()),
      two(date.getUTCMinutes()),
      two(date.getUTCSeconds()),
      'Z'
    ].join('');
  } else if (tag === 'utctime') {
    str = [
      two(date.getUTCFullYear() % 100),
      two(date.getUTCMonth() + 1),
      two(date.getUTCDate()),
      two(date.getUTCHours()),
      two(date.getUTCMinutes()),
      two(date.getUTCSeconds()),
      'Z'
    ].join('');
  } else {
    this.reporter.error('Encoding ' + tag + ' time is not supported yet');
  }

  return this._encodeStr(str, 'octstr');
};

DERNode.prototype._encodeNull = function encodeNull() {
  return this._createEncoderBuffer('');
};

DERNode.prototype._encodeInt = function encodeInt(num, values) {
  if (typeof num === 'string') {
    if (!values)
      return this.reporter.error('String int or enum given, but no values map');
    if (!values.hasOwnProperty(num)) {
      return this.reporter.error('Values map doesn\'t contain: ' +
                                 JSON.stringify(num));
    }
    num = values[num];
  }

  // Bignum, assume big endian
  if (typeof num !== 'number' && !Buffer.isBuffer(num)) {
    const numArray = num.toArray();
    if (!num.sign && numArray[0] & 0x80) {
      numArray.unshift(0);
    }
    num = Buffer.from(numArray);
  }

  if (Buffer.isBuffer(num)) {
    let size = num.length;
    if (num.length === 0)
      size++;

    const out = Buffer.alloc(size);
    num.copy(out);
    if (num.length === 0)
      out[0] = 0;
    return this._createEncoderBuffer(out);
  }

  if (num < 0x80)
    return this._createEncoderBuffer(num);

  if (num < 0x100)
    return this._createEncoderBuffer([0, num]);

  let size = 1;
  for (let i = num; i >= 0x100; i >>= 8)
    size++;

  const out = new Array(size);
  for (let i = out.length - 1; i >= 0; i--) {
    out[i] = num & 0xff;
    num >>= 8;
  }
  if(out[0] & 0x80) {
    out.unshift(0);
  }

  return this._createEncoderBuffer(Buffer.from(out));
};

DERNode.prototype._encodeBool = function encodeBool(value) {
  return this._createEncoderBuffer(value ? 0xff : 0);
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function')
    entity = entity(obj);
  return entity._getEncoder('der').tree;
};

DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
  const state = this._baseState;
  let i;
  if (state['default'] === null)
    return false;

  const data = dataBuffer.join();
  if (state.defaultBuffer === undefined)
    state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();

  if (data.length !== state.defaultBuffer.length)
    return false;

  for (i=0; i < data.length; i++)
    if (data[i] !== state.defaultBuffer[i])
      return false;

  return true;
};

// Utility methods

function encodeTag(tag, primitive, cls, reporter) {
  let res;

  if (tag === 'seqof')
    tag = 'seq';
  else if (tag === 'setof')
    tag = 'set';

  if (der.tagByName.hasOwnProperty(tag))
    res = der.tagByName[tag];
  else if (typeof tag === 'number' && (tag | 0) === tag)
    res = tag;
  else
    return reporter.error('Unknown tag: ' + tag);

  if (res >= 0x1f)
    return reporter.error('Multi-octet tag encoding unsupported');

  if (!primitive)
    res |= 0x20;

  res |= (der.tagClassByName[cls || 'universal'] << 6);

  return res;
}

},{"../base/node":6,"../constants/der":8,"inherits":134,"safer-buffer":165}],14:[function(require,module,exports){
'use strict';

const encoders = exports;

encoders.der = require('./der');
encoders.pem = require('./pem');

},{"./der":13,"./pem":15}],15:[function(require,module,exports){
'use strict';

const inherits = require('inherits');

const DEREncoder = require('./der');

function PEMEncoder(entity) {
  DEREncoder.call(this, entity);
  this.enc = 'pem';
}
inherits(PEMEncoder, DEREncoder);
module.exports = PEMEncoder;

PEMEncoder.prototype.encode = function encode(data, options) {
  const buf = DEREncoder.prototype.encode.call(this, data);

  const p = buf.toString('base64');
  const out = [ '-----BEGIN ' + options.label + '-----' ];
  for (let i = 0; i < p.length; i += 64)
    out.push(p.slice(i, i + 64));
  out.push('-----END ' + options.label + '-----');
  return out.join('\n');
};

},{"./der":13,"inherits":134}],16:[function(require,module,exports){
(function (module, exports) {
  'use strict';

  // Utils
  function assert (val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits (ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN (number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
      Buffer = window.Buffer;
    } else {
      Buffer = require('buffer').Buffer;
    }
  } catch (e) {
  }

  BN.isBN = function isBN (num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && typeof num === 'object' &&
      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max (left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min (left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init (number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
      this.negative = 1;
    }

    if (start < number.length) {
      if (base === 16) {
        this._parseHex(number, start, endian);
      } else {
        this._parseBase(number, base, start);
        if (endian === 'le') {
          this._initArray(this.toArray(), base, endian);
        }
      }
    }
  };

  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [ number & 0x3ffffff ];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray (number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [ 0 ];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this.strip();
  };

  function parseHex4Bits (string, index) {
    var c = string.charCodeAt(index);
    // 'A' - 'F'
    if (c >= 65 && c <= 70) {
      return c - 55;
    // 'a' - 'f'
    } else if (c >= 97 && c <= 102) {
      return c - 87;
    // '0' - '9'
    } else {
      return (c - 48) & 0xf;
    }
  }

  function parseHexByte (string, lowerBound, index) {
    var r = parseHex4Bits(string, index);
    if (index - 1 >= lowerBound) {
      r |= parseHex4Bits(string, index - 1) << 4;
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex (number, start, endian) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    // 24-bits chunks
    var off = 0;
    var j = 0;

    var w;
    if (endian === 'be') {
      for (i = number.length - 1; i >= start; i -= 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    } else {
      var parseLength = number.length - start;
      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    }

    this.strip();
  };

  function parseBase (str, start, end, mul) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        r += c - 49 + 0xa;

      // 'A'
      } else if (c >= 17) {
        r += c - 17 + 0xa;

      // '0' - '9'
      } else {
        r += c;
      }
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase (number, base, start) {
    // Initialize as zero
    this.words = [ 0 ];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    this.strip();
  };

  BN.prototype.copy = function copy (dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  BN.prototype.clone = function clone () {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand (size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype.strip = function strip () {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign () {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  BN.prototype.inspect = function inspect () {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  };

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString (base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber () {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return (this.negative !== 0) ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON () {
    return this.toString(16);
  };

  BN.prototype.toBuffer = function toBuffer (endian, length) {
    assert(typeof Buffer !== 'undefined');
    return this.toArrayLike(Buffer, endian, length);
  };

  BN.prototype.toArray = function toArray (endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    this.strip();
    var littleEndian = endian === 'le';
    var res = new ArrayType(reqLength);

    var b, i;
    var q = this.clone();
    if (!littleEndian) {
      // Assume big-endian
      for (i = 0; i < reqLength - byteLength; i++) {
        res[i] = 0;
      }

      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[reqLength - i - 1] = b;
      }
    } else {
      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[i] = b;
      }

      for (; i < reqLength; i++) {
        res[i] = 0;
      }
    }

    return res;
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits (w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits (w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits (w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength () {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray (num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits () {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength () {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos (width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos (width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg () {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg () {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg () {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor (num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this.strip();
  };

  BN.prototype.ior = function ior (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or (num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor (num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand (num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this.strip();
  };

  BN.prototype.iand = function iand (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and (num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand (num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor (num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this.strip();
  };

  BN.prototype.ixor = function ixor (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor (num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor (num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn (width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    }

    // And remove leading zeroes
    return this.strip();
  };

  BN.prototype.notn = function notn (width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn (bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | (1 << wbit);
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this.strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd (num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

    // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add (num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub (num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this.strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub (num) {
    return this.clone().isub(num);
  };

  function smallMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = (self.length + num.length) | 0;
    out.length = len;
    len = (len - 1) | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = (r / 0x4000000) | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = (k - j) | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += (r / 0x4000000) | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out.strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo (self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = (mid + Math.imul(ah0, bl0)) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = (mid + Math.imul(ah1, bl0)) | 0;
    hi = Math.imul(ah1, bh0);
    lo = (lo + Math.imul(al0, bl1)) | 0;
    mid = (mid + Math.imul(al0, bh1)) | 0;
    mid = (mid + Math.imul(ah0, bl1)) | 0;
    hi = (hi + Math.imul(ah0, bh1)) | 0;
    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = (mid + Math.imul(ah2, bl0)) | 0;
    hi = Math.imul(ah2, bh0);
    lo = (lo + Math.imul(al1, bl1)) | 0;
    mid = (mid + Math.imul(al1, bh1)) | 0;
    mid = (mid + Math.imul(ah1, bl1)) | 0;
    hi = (hi + Math.imul(ah1, bh1)) | 0;
    lo = (lo + Math.imul(al0, bl2)) | 0;
    mid = (mid + Math.imul(al0, bh2)) | 0;
    mid = (mid + Math.imul(ah0, bl2)) | 0;
    hi = (hi + Math.imul(ah0, bh2)) | 0;
    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = (mid + Math.imul(ah3, bl0)) | 0;
    hi = Math.imul(ah3, bh0);
    lo = (lo + Math.imul(al2, bl1)) | 0;
    mid = (mid + Math.imul(al2, bh1)) | 0;
    mid = (mid + Math.imul(ah2, bl1)) | 0;
    hi = (hi + Math.imul(ah2, bh1)) | 0;
    lo = (lo + Math.imul(al1, bl2)) | 0;
    mid = (mid + Math.imul(al1, bh2)) | 0;
    mid = (mid + Math.imul(ah1, bl2)) | 0;
    hi = (hi + Math.imul(ah1, bh2)) | 0;
    lo = (lo + Math.imul(al0, bl3)) | 0;
    mid = (mid + Math.imul(al0, bh3)) | 0;
    mid = (mid + Math.imul(ah0, bl3)) | 0;
    hi = (hi + Math.imul(ah0, bh3)) | 0;
    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = (mid + Math.imul(ah4, bl0)) | 0;
    hi = Math.imul(ah4, bh0);
    lo = (lo + Math.imul(al3, bl1)) | 0;
    mid = (mid + Math.imul(al3, bh1)) | 0;
    mid = (mid + Math.imul(ah3, bl1)) | 0;
    hi = (hi + Math.imul(ah3, bh1)) | 0;
    lo = (lo + Math.imul(al2, bl2)) | 0;
    mid = (mid + Math.imul(al2, bh2)) | 0;
    mid = (mid + Math.imul(ah2, bl2)) | 0;
    hi = (hi + Math.imul(ah2, bh2)) | 0;
    lo = (lo + Math.imul(al1, bl3)) | 0;
    mid = (mid + Math.imul(al1, bh3)) | 0;
    mid = (mid + Math.imul(ah1, bl3)) | 0;
    hi = (hi + Math.imul(ah1, bh3)) | 0;
    lo = (lo + Math.imul(al0, bl4)) | 0;
    mid = (mid + Math.imul(al0, bh4)) | 0;
    mid = (mid + Math.imul(ah0, bl4)) | 0;
    hi = (hi + Math.imul(ah0, bh4)) | 0;
    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = (mid + Math.imul(ah5, bl0)) | 0;
    hi = Math.imul(ah5, bh0);
    lo = (lo + Math.imul(al4, bl1)) | 0;
    mid = (mid + Math.imul(al4, bh1)) | 0;
    mid = (mid + Math.imul(ah4, bl1)) | 0;
    hi = (hi + Math.imul(ah4, bh1)) | 0;
    lo = (lo + Math.imul(al3, bl2)) | 0;
    mid = (mid + Math.imul(al3, bh2)) | 0;
    mid = (mid + Math.imul(ah3, bl2)) | 0;
    hi = (hi + Math.imul(ah3, bh2)) | 0;
    lo = (lo + Math.imul(al2, bl3)) | 0;
    mid = (mid + Math.imul(al2, bh3)) | 0;
    mid = (mid + Math.imul(ah2, bl3)) | 0;
    hi = (hi + Math.imul(ah2, bh3)) | 0;
    lo = (lo + Math.imul(al1, bl4)) | 0;
    mid = (mid + Math.imul(al1, bh4)) | 0;
    mid = (mid + Math.imul(ah1, bl4)) | 0;
    hi = (hi + Math.imul(ah1, bh4)) | 0;
    lo = (lo + Math.imul(al0, bl5)) | 0;
    mid = (mid + Math.imul(al0, bh5)) | 0;
    mid = (mid + Math.imul(ah0, bl5)) | 0;
    hi = (hi + Math.imul(ah0, bh5)) | 0;
    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = (mid + Math.imul(ah6, bl0)) | 0;
    hi = Math.imul(ah6, bh0);
    lo = (lo + Math.imul(al5, bl1)) | 0;
    mid = (mid + Math.imul(al5, bh1)) | 0;
    mid = (mid + Math.imul(ah5, bl1)) | 0;
    hi = (hi + Math.imul(ah5, bh1)) | 0;
    lo = (lo + Math.imul(al4, bl2)) | 0;
    mid = (mid + Math.imul(al4, bh2)) | 0;
    mid = (mid + Math.imul(ah4, bl2)) | 0;
    hi = (hi + Math.imul(ah4, bh2)) | 0;
    lo = (lo + Math.imul(al3, bl3)) | 0;
    mid = (mid + Math.imul(al3, bh3)) | 0;
    mid = (mid + Math.imul(ah3, bl3)) | 0;
    hi = (hi + Math.imul(ah3, bh3)) | 0;
    lo = (lo + Math.imul(al2, bl4)) | 0;
    mid = (mid + Math.imul(al2, bh4)) | 0;
    mid = (mid + Math.imul(ah2, bl4)) | 0;
    hi = (hi + Math.imul(ah2, bh4)) | 0;
    lo = (lo + Math.imul(al1, bl5)) | 0;
    mid = (mid + Math.imul(al1, bh5)) | 0;
    mid = (mid + Math.imul(ah1, bl5)) | 0;
    hi = (hi + Math.imul(ah1, bh5)) | 0;
    lo = (lo + Math.imul(al0, bl6)) | 0;
    mid = (mid + Math.imul(al0, bh6)) | 0;
    mid = (mid + Math.imul(ah0, bl6)) | 0;
    hi = (hi + Math.imul(ah0, bh6)) | 0;
    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = (mid + Math.imul(ah7, bl0)) | 0;
    hi = Math.imul(ah7, bh0);
    lo = (lo + Math.imul(al6, bl1)) | 0;
    mid = (mid + Math.imul(al6, bh1)) | 0;
    mid = (mid + Math.imul(ah6, bl1)) | 0;
    hi = (hi + Math.imul(ah6, bh1)) | 0;
    lo = (lo + Math.imul(al5, bl2)) | 0;
    mid = (mid + Math.imul(al5, bh2)) | 0;
    mid = (mid + Math.imul(ah5, bl2)) | 0;
    hi = (hi + Math.imul(ah5, bh2)) | 0;
    lo = (lo + Math.imul(al4, bl3)) | 0;
    mid = (mid + Math.imul(al4, bh3)) | 0;
    mid = (mid + Math.imul(ah4, bl3)) | 0;
    hi = (hi + Math.imul(ah4, bh3)) | 0;
    lo = (lo + Math.imul(al3, bl4)) | 0;
    mid = (mid + Math.imul(al3, bh4)) | 0;
    mid = (mid + Math.imul(ah3, bl4)) | 0;
    hi = (hi + Math.imul(ah3, bh4)) | 0;
    lo = (lo + Math.imul(al2, bl5)) | 0;
    mid = (mid + Math.imul(al2, bh5)) | 0;
    mid = (mid + Math.imul(ah2, bl5)) | 0;
    hi = (hi + Math.imul(ah2, bh5)) | 0;
    lo = (lo + Math.imul(al1, bl6)) | 0;
    mid = (mid + Math.imul(al1, bh6)) | 0;
    mid = (mid + Math.imul(ah1, bl6)) | 0;
    hi = (hi + Math.imul(ah1, bh6)) | 0;
    lo = (lo + Math.imul(al0, bl7)) | 0;
    mid = (mid + Math.imul(al0, bh7)) | 0;
    mid = (mid + Math.imul(ah0, bl7)) | 0;
    hi = (hi + Math.imul(ah0, bh7)) | 0;
    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = (mid + Math.imul(ah8, bl0)) | 0;
    hi = Math.imul(ah8, bh0);
    lo = (lo + Math.imul(al7, bl1)) | 0;
    mid = (mid + Math.imul(al7, bh1)) | 0;
    mid = (mid + Math.imul(ah7, bl1)) | 0;
    hi = (hi + Math.imul(ah7, bh1)) | 0;
    lo = (lo + Math.imul(al6, bl2)) | 0;
    mid = (mid + Math.imul(al6, bh2)) | 0;
    mid = (mid + Math.imul(ah6, bl2)) | 0;
    hi = (hi + Math.imul(ah6, bh2)) | 0;
    lo = (lo + Math.imul(al5, bl3)) | 0;
    mid = (mid + Math.imul(al5, bh3)) | 0;
    mid = (mid + Math.imul(ah5, bl3)) | 0;
    hi = (hi + Math.imul(ah5, bh3)) | 0;
    lo = (lo + Math.imul(al4, bl4)) | 0;
    mid = (mid + Math.imul(al4, bh4)) | 0;
    mid = (mid + Math.imul(ah4, bl4)) | 0;
    hi = (hi + Math.imul(ah4, bh4)) | 0;
    lo = (lo + Math.imul(al3, bl5)) | 0;
    mid = (mid + Math.imul(al3, bh5)) | 0;
    mid = (mid + Math.imul(ah3, bl5)) | 0;
    hi = (hi + Math.imul(ah3, bh5)) | 0;
    lo = (lo + Math.imul(al2, bl6)) | 0;
    mid = (mid + Math.imul(al2, bh6)) | 0;
    mid = (mid + Math.imul(ah2, bl6)) | 0;
    hi = (hi + Math.imul(ah2, bh6)) | 0;
    lo = (lo + Math.imul(al1, bl7)) | 0;
    mid = (mid + Math.imul(al1, bh7)) | 0;
    mid = (mid + Math.imul(ah1, bl7)) | 0;
    hi = (hi + Math.imul(ah1, bh7)) | 0;
    lo = (lo + Math.imul(al0, bl8)) | 0;
    mid = (mid + Math.imul(al0, bh8)) | 0;
    mid = (mid + Math.imul(ah0, bl8)) | 0;
    hi = (hi + Math.imul(ah0, bh8)) | 0;
    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = (mid + Math.imul(ah9, bl0)) | 0;
    hi = Math.imul(ah9, bh0);
    lo = (lo + Math.imul(al8, bl1)) | 0;
    mid = (mid + Math.imul(al8, bh1)) | 0;
    mid = (mid + Math.imul(ah8, bl1)) | 0;
    hi = (hi + Math.imul(ah8, bh1)) | 0;
    lo = (lo + Math.imul(al7, bl2)) | 0;
    mid = (mid + Math.imul(al7, bh2)) | 0;
    mid = (mid + Math.imul(ah7, bl2)) | 0;
    hi = (hi + Math.imul(ah7, bh2)) | 0;
    lo = (lo + Math.imul(al6, bl3)) | 0;
    mid = (mid + Math.imul(al6, bh3)) | 0;
    mid = (mid + Math.imul(ah6, bl3)) | 0;
    hi = (hi + Math.imul(ah6, bh3)) | 0;
    lo = (lo + Math.imul(al5, bl4)) | 0;
    mid = (mid + Math.imul(al5, bh4)) | 0;
    mid = (mid + Math.imul(ah5, bl4)) | 0;
    hi = (hi + Math.imul(ah5, bh4)) | 0;
    lo = (lo + Math.imul(al4, bl5)) | 0;
    mid = (mid + Math.imul(al4, bh5)) | 0;
    mid = (mid + Math.imul(ah4, bl5)) | 0;
    hi = (hi + Math.imul(ah4, bh5)) | 0;
    lo = (lo + Math.imul(al3, bl6)) | 0;
    mid = (mid + Math.imul(al3, bh6)) | 0;
    mid = (mid + Math.imul(ah3, bl6)) | 0;
    hi = (hi + Math.imul(ah3, bh6)) | 0;
    lo = (lo + Math.imul(al2, bl7)) | 0;
    mid = (mid + Math.imul(al2, bh7)) | 0;
    mid = (mid + Math.imul(ah2, bl7)) | 0;
    hi = (hi + Math.imul(ah2, bh7)) | 0;
    lo = (lo + Math.imul(al1, bl8)) | 0;
    mid = (mid + Math.imul(al1, bh8)) | 0;
    mid = (mid + Math.imul(ah1, bl8)) | 0;
    hi = (hi + Math.imul(ah1, bh8)) | 0;
    lo = (lo + Math.imul(al0, bl9)) | 0;
    mid = (mid + Math.imul(al0, bh9)) | 0;
    mid = (mid + Math.imul(ah0, bl9)) | 0;
    hi = (hi + Math.imul(ah0, bh9)) | 0;
    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = (mid + Math.imul(ah9, bl1)) | 0;
    hi = Math.imul(ah9, bh1);
    lo = (lo + Math.imul(al8, bl2)) | 0;
    mid = (mid + Math.imul(al8, bh2)) | 0;
    mid = (mid + Math.imul(ah8, bl2)) | 0;
    hi = (hi + Math.imul(ah8, bh2)) | 0;
    lo = (lo + Math.imul(al7, bl3)) | 0;
    mid = (mid + Math.imul(al7, bh3)) | 0;
    mid = (mid + Math.imul(ah7, bl3)) | 0;
    hi = (hi + Math.imul(ah7, bh3)) | 0;
    lo = (lo + Math.imul(al6, bl4)) | 0;
    mid = (mid + Math.imul(al6, bh4)) | 0;
    mid = (mid + Math.imul(ah6, bl4)) | 0;
    hi = (hi + Math.imul(ah6, bh4)) | 0;
    lo = (lo + Math.imul(al5, bl5)) | 0;
    mid = (mid + Math.imul(al5, bh5)) | 0;
    mid = (mid + Math.imul(ah5, bl5)) | 0;
    hi = (hi + Math.imul(ah5, bh5)) | 0;
    lo = (lo + Math.imul(al4, bl6)) | 0;
    mid = (mid + Math.imul(al4, bh6)) | 0;
    mid = (mid + Math.imul(ah4, bl6)) | 0;
    hi = (hi + Math.imul(ah4, bh6)) | 0;
    lo = (lo + Math.imul(al3, bl7)) | 0;
    mid = (mid + Math.imul(al3, bh7)) | 0;
    mid = (mid + Math.imul(ah3, bl7)) | 0;
    hi = (hi + Math.imul(ah3, bh7)) | 0;
    lo = (lo + Math.imul(al2, bl8)) | 0;
    mid = (mid + Math.imul(al2, bh8)) | 0;
    mid = (mid + Math.imul(ah2, bl8)) | 0;
    hi = (hi + Math.imul(ah2, bh8)) | 0;
    lo = (lo + Math.imul(al1, bl9)) | 0;
    mid = (mid + Math.imul(al1, bh9)) | 0;
    mid = (mid + Math.imul(ah1, bl9)) | 0;
    hi = (hi + Math.imul(ah1, bh9)) | 0;
    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = (mid + Math.imul(ah9, bl2)) | 0;
    hi = Math.imul(ah9, bh2);
    lo = (lo + Math.imul(al8, bl3)) | 0;
    mid = (mid + Math.imul(al8, bh3)) | 0;
    mid = (mid + Math.imul(ah8, bl3)) | 0;
    hi = (hi + Math.imul(ah8, bh3)) | 0;
    lo = (lo + Math.imul(al7, bl4)) | 0;
    mid = (mid + Math.imul(al7, bh4)) | 0;
    mid = (mid + Math.imul(ah7, bl4)) | 0;
    hi = (hi + Math.imul(ah7, bh4)) | 0;
    lo = (lo + Math.imul(al6, bl5)) | 0;
    mid = (mid + Math.imul(al6, bh5)) | 0;
    mid = (mid + Math.imul(ah6, bl5)) | 0;
    hi = (hi + Math.imul(ah6, bh5)) | 0;
    lo = (lo + Math.imul(al5, bl6)) | 0;
    mid = (mid + Math.imul(al5, bh6)) | 0;
    mid = (mid + Math.imul(ah5, bl6)) | 0;
    hi = (hi + Math.imul(ah5, bh6)) | 0;
    lo = (lo + Math.imul(al4, bl7)) | 0;
    mid = (mid + Math.imul(al4, bh7)) | 0;
    mid = (mid + Math.imul(ah4, bl7)) | 0;
    hi = (hi + Math.imul(ah4, bh7)) | 0;
    lo = (lo + Math.imul(al3, bl8)) | 0;
    mid = (mid + Math.imul(al3, bh8)) | 0;
    mid = (mid + Math.imul(ah3, bl8)) | 0;
    hi = (hi + Math.imul(ah3, bh8)) | 0;
    lo = (lo + Math.imul(al2, bl9)) | 0;
    mid = (mid + Math.imul(al2, bh9)) | 0;
    mid = (mid + Math.imul(ah2, bl9)) | 0;
    hi = (hi + Math.imul(ah2, bh9)) | 0;
    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = (mid + Math.imul(ah9, bl3)) | 0;
    hi = Math.imul(ah9, bh3);
    lo = (lo + Math.imul(al8, bl4)) | 0;
    mid = (mid + Math.imul(al8, bh4)) | 0;
    mid = (mid + Math.imul(ah8, bl4)) | 0;
    hi = (hi + Math.imul(ah8, bh4)) | 0;
    lo = (lo + Math.imul(al7, bl5)) | 0;
    mid = (mid + Math.imul(al7, bh5)) | 0;
    mid = (mid + Math.imul(ah7, bl5)) | 0;
    hi = (hi + Math.imul(ah7, bh5)) | 0;
    lo = (lo + Math.imul(al6, bl6)) | 0;
    mid = (mid + Math.imul(al6, bh6)) | 0;
    mid = (mid + Math.imul(ah6, bl6)) | 0;
    hi = (hi + Math.imul(ah6, bh6)) | 0;
    lo = (lo + Math.imul(al5, bl7)) | 0;
    mid = (mid + Math.imul(al5, bh7)) | 0;
    mid = (mid + Math.imul(ah5, bl7)) | 0;
    hi = (hi + Math.imul(ah5, bh7)) | 0;
    lo = (lo + Math.imul(al4, bl8)) | 0;
    mid = (mid + Math.imul(al4, bh8)) | 0;
    mid = (mid + Math.imul(ah4, bl8)) | 0;
    hi = (hi + Math.imul(ah4, bh8)) | 0;
    lo = (lo + Math.imul(al3, bl9)) | 0;
    mid = (mid + Math.imul(al3, bh9)) | 0;
    mid = (mid + Math.imul(ah3, bl9)) | 0;
    hi = (hi + Math.imul(ah3, bh9)) | 0;
    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = (mid + Math.imul(ah9, bl4)) | 0;
    hi = Math.imul(ah9, bh4);
    lo = (lo + Math.imul(al8, bl5)) | 0;
    mid = (mid + Math.imul(al8, bh5)) | 0;
    mid = (mid + Math.imul(ah8, bl5)) | 0;
    hi = (hi + Math.imul(ah8, bh5)) | 0;
    lo = (lo + Math.imul(al7, bl6)) | 0;
    mid = (mid + Math.imul(al7, bh6)) | 0;
    mid = (mid + Math.imul(ah7, bl6)) | 0;
    hi = (hi + Math.imul(ah7, bh6)) | 0;
    lo = (lo + Math.imul(al6, bl7)) | 0;
    mid = (mid + Math.imul(al6, bh7)) | 0;
    mid = (mid + Math.imul(ah6, bl7)) | 0;
    hi = (hi + Math.imul(ah6, bh7)) | 0;
    lo = (lo + Math.imul(al5, bl8)) | 0;
    mid = (mid + Math.imul(al5, bh8)) | 0;
    mid = (mid + Math.imul(ah5, bl8)) | 0;
    hi = (hi + Math.imul(ah5, bh8)) | 0;
    lo = (lo + Math.imul(al4, bl9)) | 0;
    mid = (mid + Math.imul(al4, bh9)) | 0;
    mid = (mid + Math.imul(ah4, bl9)) | 0;
    hi = (hi + Math.imul(ah4, bh9)) | 0;
    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = (mid + Math.imul(ah9, bl5)) | 0;
    hi = Math.imul(ah9, bh5);
    lo = (lo + Math.imul(al8, bl6)) | 0;
    mid = (mid + Math.imul(al8, bh6)) | 0;
    mid = (mid + Math.imul(ah8, bl6)) | 0;
    hi = (hi + Math.imul(ah8, bh6)) | 0;
    lo = (lo + Math.imul(al7, bl7)) | 0;
    mid = (mid + Math.imul(al7, bh7)) | 0;
    mid = (mid + Math.imul(ah7, bl7)) | 0;
    hi = (hi + Math.imul(ah7, bh7)) | 0;
    lo = (lo + Math.imul(al6, bl8)) | 0;
    mid = (mid + Math.imul(al6, bh8)) | 0;
    mid = (mid + Math.imul(ah6, bl8)) | 0;
    hi = (hi + Math.imul(ah6, bh8)) | 0;
    lo = (lo + Math.imul(al5, bl9)) | 0;
    mid = (mid + Math.imul(al5, bh9)) | 0;
    mid = (mid + Math.imul(ah5, bl9)) | 0;
    hi = (hi + Math.imul(ah5, bh9)) | 0;
    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = (mid + Math.imul(ah9, bl6)) | 0;
    hi = Math.imul(ah9, bh6);
    lo = (lo + Math.imul(al8, bl7)) | 0;
    mid = (mid + Math.imul(al8, bh7)) | 0;
    mid = (mid + Math.imul(ah8, bl7)) | 0;
    hi = (hi + Math.imul(ah8, bh7)) | 0;
    lo = (lo + Math.imul(al7, bl8)) | 0;
    mid = (mid + Math.imul(al7, bh8)) | 0;
    mid = (mid + Math.imul(ah7, bl8)) | 0;
    hi = (hi + Math.imul(ah7, bh8)) | 0;
    lo = (lo + Math.imul(al6, bl9)) | 0;
    mid = (mid + Math.imul(al6, bh9)) | 0;
    mid = (mid + Math.imul(ah6, bl9)) | 0;
    hi = (hi + Math.imul(ah6, bh9)) | 0;
    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = (mid + Math.imul(ah9, bl7)) | 0;
    hi = Math.imul(ah9, bh7);
    lo = (lo + Math.imul(al8, bl8)) | 0;
    mid = (mid + Math.imul(al8, bh8)) | 0;
    mid = (mid + Math.imul(ah8, bl8)) | 0;
    hi = (hi + Math.imul(ah8, bh8)) | 0;
    lo = (lo + Math.imul(al7, bl9)) | 0;
    mid = (mid + Math.imul(al7, bh9)) | 0;
    mid = (mid + Math.imul(ah7, bl9)) | 0;
    hi = (hi + Math.imul(ah7, bh9)) | 0;
    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = (mid + Math.imul(ah9, bl8)) | 0;
    hi = Math.imul(ah9, bh8);
    lo = (lo + Math.imul(al8, bl9)) | 0;
    mid = (mid + Math.imul(al8, bh9)) | 0;
    mid = (mid + Math.imul(ah8, bl9)) | 0;
    hi = (hi + Math.imul(ah8, bh9)) | 0;
    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = (mid + Math.imul(ah9, bl9)) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out.strip();
  }

  function jumboMulTo (self, num, out) {
    var fftm = new FFTM();
    return fftm.mulp(self, num, out);
  }

  BN.prototype.mulTo = function mulTo (num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM (x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT (N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin (x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << (l - i - 1);
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
        Math.round(ws[2 * i] / N) +
        carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub (N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp (x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out.strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul (num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return this;
  };

  BN.prototype.muln = function muln (num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr () {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr () {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow (num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = ((this.words[i] | 0) - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this.strip();
  };

  BN.prototype.ishln = function ishln (bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - (hint % 26)) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this.strip();
  };

  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln (bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln (bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn (bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn (bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn (bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this.strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn (bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) < num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn (num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this.strip();
  };

  BN.prototype.addn = function addn (num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn (num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs () {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs () {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this.strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this.strip();
  };

  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
        (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q.strip();
    }
    a.strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod (num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div (num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod (num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod (num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound (num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modn = function modn (num) {
    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return acc;
  };

  // In-place division by number
  BN.prototype.idivn = function idivn (num) {
    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    return this.strip();
  };

  BN.prototype.divn = function divn (num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd (num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm (num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven () {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd () {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln (num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn (bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero () {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn (num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this.strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp (num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp (num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn (num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt (num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten (num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte (num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn (num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt (num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten (num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte (num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn (num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq (num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red (num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed () {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed (ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd (num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd (num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub (num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub (num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl (num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr () {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr () {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt () {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm () {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg () {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow (num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime (name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp () {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce (num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      if (r.strip !== undefined) {
        // r is BN v4 instance
        r.strip();
      } else {
        // r is BN v5 instance
        r._strip();
      }
    }

    return r;
  };

  MPrime.prototype.split = function split (input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK (num) {
    return num.imul(this.k);
  };

  function K256 () {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split (input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK (num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224 () {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192 () {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519 () {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK (num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime (name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red (m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1 (a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2 (a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red,
      'red works only with red numbers');
  };

  Red.prototype.imod = function imod (a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
    return a.umod(this.m)._forceRed(this);
  };

  Red.prototype.neg = function neg (a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add (a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd (a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub (a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub (a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl (a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul (a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul (a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr (a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr (a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt (a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm (a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow (a, num) {
    if (num.isZero()) return new BN(1).toRed(this);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = (word >> j) & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo (num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom (num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont (num) {
    return new Mont(num);
  };

  function Mont (m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - (this.shift % 26);
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo (num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom (num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul (a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul (a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm (a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})(typeof module === 'undefined' || module, this);

},{"buffer":20}],17:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

},{}],18:[function(require,module,exports){
(function (module, exports) {
  'use strict';

  // Utils
  function assert (val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits (ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN (number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
      Buffer = window.Buffer;
    } else {
      Buffer = require('buffer').Buffer;
    }
  } catch (e) {
  }

  BN.isBN = function isBN (num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && typeof num === 'object' &&
      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max (left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min (left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init (number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
      this.negative = 1;
    }

    if (start < number.length) {
      if (base === 16) {
        this._parseHex(number, start, endian);
      } else {
        this._parseBase(number, base, start);
        if (endian === 'le') {
          this._initArray(this.toArray(), base, endian);
        }
      }
    }
  };

  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [number & 0x3ffffff];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray (number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [0];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this._strip();
  };

  function parseHex4Bits (string, index) {
    var c = string.charCodeAt(index);
    // '0' - '9'
    if (c >= 48 && c <= 57) {
      return c - 48;
    // 'A' - 'F'
    } else if (c >= 65 && c <= 70) {
      return c - 55;
    // 'a' - 'f'
    } else if (c >= 97 && c <= 102) {
      return c - 87;
    } else {
      assert(false, 'Invalid character in ' + string);
    }
  }

  function parseHexByte (string, lowerBound, index) {
    var r = parseHex4Bits(string, index);
    if (index - 1 >= lowerBound) {
      r |= parseHex4Bits(string, index - 1) << 4;
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex (number, start, endian) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    // 24-bits chunks
    var off = 0;
    var j = 0;

    var w;
    if (endian === 'be') {
      for (i = number.length - 1; i >= start; i -= 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    } else {
      var parseLength = number.length - start;
      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    }

    this._strip();
  };

  function parseBase (str, start, end, mul) {
    var r = 0;
    var b = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        b = c - 49 + 0xa;

      // 'A'
      } else if (c >= 17) {
        b = c - 17 + 0xa;

      // '0' - '9'
      } else {
        b = c;
      }
      assert(c >= 0 && b < mul, 'Invalid character');
      r += b;
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase (number, base, start) {
    // Initialize as zero
    this.words = [0];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    this._strip();
  };

  BN.prototype.copy = function copy (dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  function move (dest, src) {
    dest.words = src.words;
    dest.length = src.length;
    dest.negative = src.negative;
    dest.red = src.red;
  }

  BN.prototype._move = function _move (dest) {
    move(dest, this);
  };

  BN.prototype.clone = function clone () {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand (size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype._strip = function strip () {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign () {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  // Check Symbol.for because not everywhere where Symbol defined
  // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
  if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') {
    try {
      BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;
    } catch (e) {
      BN.prototype.inspect = inspect;
    }
  } else {
    BN.prototype.inspect = inspect;
  }

  function inspect () {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  }

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString (base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modrn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber () {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return (this.negative !== 0) ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON () {
    return this.toString(16, 2);
  };

  if (Buffer) {
    BN.prototype.toBuffer = function toBuffer (endian, length) {
      return this.toArrayLike(Buffer, endian, length);
    };
  }

  BN.prototype.toArray = function toArray (endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  var allocate = function allocate (ArrayType, size) {
    if (ArrayType.allocUnsafe) {
      return ArrayType.allocUnsafe(size);
    }
    return new ArrayType(size);
  };

  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    this._strip();

    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    var res = allocate(ArrayType, reqLength);
    var postfix = endian === 'le' ? 'LE' : 'BE';
    this['_toArrayLike' + postfix](res, byteLength);
    return res;
  };

  BN.prototype._toArrayLikeLE = function _toArrayLikeLE (res, byteLength) {
    var position = 0;
    var carry = 0;

    for (var i = 0, shift = 0; i < this.length; i++) {
      var word = (this.words[i] << shift) | carry;

      res[position++] = word & 0xff;
      if (position < res.length) {
        res[position++] = (word >> 8) & 0xff;
      }
      if (position < res.length) {
        res[position++] = (word >> 16) & 0xff;
      }

      if (shift === 6) {
        if (position < res.length) {
          res[position++] = (word >> 24) & 0xff;
        }
        carry = 0;
        shift = 0;
      } else {
        carry = word >>> 24;
        shift += 2;
      }
    }

    if (position < res.length) {
      res[position++] = carry;

      while (position < res.length) {
        res[position++] = 0;
      }
    }
  };

  BN.prototype._toArrayLikeBE = function _toArrayLikeBE (res, byteLength) {
    var position = res.length - 1;
    var carry = 0;

    for (var i = 0, shift = 0; i < this.length; i++) {
      var word = (this.words[i] << shift) | carry;

      res[position--] = word & 0xff;
      if (position >= 0) {
        res[position--] = (word >> 8) & 0xff;
      }
      if (position >= 0) {
        res[position--] = (word >> 16) & 0xff;
      }

      if (shift === 6) {
        if (position >= 0) {
          res[position--] = (word >> 24) & 0xff;
        }
        carry = 0;
        shift = 0;
      } else {
        carry = word >>> 24;
        shift += 2;
      }
    }

    if (position >= 0) {
      res[position--] = carry;

      while (position >= 0) {
        res[position--] = 0;
      }
    }
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits (w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits (w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits (w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength () {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray (num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] >>> wbit) & 0x01;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits () {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength () {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos (width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos (width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg () {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg () {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg () {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor (num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this._strip();
  };

  BN.prototype.ior = function ior (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or (num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor (num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand (num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this._strip();
  };

  BN.prototype.iand = function iand (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and (num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand (num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor (num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this._strip();
  };

  BN.prototype.ixor = function ixor (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor (num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor (num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn (width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    }

    // And remove leading zeroes
    return this._strip();
  };

  BN.prototype.notn = function notn (width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn (bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | (1 << wbit);
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this._strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd (num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

    // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add (num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub (num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this._strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub (num) {
    return this.clone().isub(num);
  };

  function smallMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = (self.length + num.length) | 0;
    out.length = len;
    len = (len - 1) | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = (r / 0x4000000) | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = (k - j) | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += (r / 0x4000000) | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out._strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo (self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = (mid + Math.imul(ah0, bl0)) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = (mid + Math.imul(ah1, bl0)) | 0;
    hi = Math.imul(ah1, bh0);
    lo = (lo + Math.imul(al0, bl1)) | 0;
    mid = (mid + Math.imul(al0, bh1)) | 0;
    mid = (mid + Math.imul(ah0, bl1)) | 0;
    hi = (hi + Math.imul(ah0, bh1)) | 0;
    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = (mid + Math.imul(ah2, bl0)) | 0;
    hi = Math.imul(ah2, bh0);
    lo = (lo + Math.imul(al1, bl1)) | 0;
    mid = (mid + Math.imul(al1, bh1)) | 0;
    mid = (mid + Math.imul(ah1, bl1)) | 0;
    hi = (hi + Math.imul(ah1, bh1)) | 0;
    lo = (lo + Math.imul(al0, bl2)) | 0;
    mid = (mid + Math.imul(al0, bh2)) | 0;
    mid = (mid + Math.imul(ah0, bl2)) | 0;
    hi = (hi + Math.imul(ah0, bh2)) | 0;
    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = (mid + Math.imul(ah3, bl0)) | 0;
    hi = Math.imul(ah3, bh0);
    lo = (lo + Math.imul(al2, bl1)) | 0;
    mid = (mid + Math.imul(al2, bh1)) | 0;
    mid = (mid + Math.imul(ah2, bl1)) | 0;
    hi = (hi + Math.imul(ah2, bh1)) | 0;
    lo = (lo + Math.imul(al1, bl2)) | 0;
    mid = (mid + Math.imul(al1, bh2)) | 0;
    mid = (mid + Math.imul(ah1, bl2)) | 0;
    hi = (hi + Math.imul(ah1, bh2)) | 0;
    lo = (lo + Math.imul(al0, bl3)) | 0;
    mid = (mid + Math.imul(al0, bh3)) | 0;
    mid = (mid + Math.imul(ah0, bl3)) | 0;
    hi = (hi + Math.imul(ah0, bh3)) | 0;
    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = (mid + Math.imul(ah4, bl0)) | 0;
    hi = Math.imul(ah4, bh0);
    lo = (lo + Math.imul(al3, bl1)) | 0;
    mid = (mid + Math.imul(al3, bh1)) | 0;
    mid = (mid + Math.imul(ah3, bl1)) | 0;
    hi = (hi + Math.imul(ah3, bh1)) | 0;
    lo = (lo + Math.imul(al2, bl2)) | 0;
    mid = (mid + Math.imul(al2, bh2)) | 0;
    mid = (mid + Math.imul(ah2, bl2)) | 0;
    hi = (hi + Math.imul(ah2, bh2)) | 0;
    lo = (lo + Math.imul(al1, bl3)) | 0;
    mid = (mid + Math.imul(al1, bh3)) | 0;
    mid = (mid + Math.imul(ah1, bl3)) | 0;
    hi = (hi + Math.imul(ah1, bh3)) | 0;
    lo = (lo + Math.imul(al0, bl4)) | 0;
    mid = (mid + Math.imul(al0, bh4)) | 0;
    mid = (mid + Math.imul(ah0, bl4)) | 0;
    hi = (hi + Math.imul(ah0, bh4)) | 0;
    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = (mid + Math.imul(ah5, bl0)) | 0;
    hi = Math.imul(ah5, bh0);
    lo = (lo + Math.imul(al4, bl1)) | 0;
    mid = (mid + Math.imul(al4, bh1)) | 0;
    mid = (mid + Math.imul(ah4, bl1)) | 0;
    hi = (hi + Math.imul(ah4, bh1)) | 0;
    lo = (lo + Math.imul(al3, bl2)) | 0;
    mid = (mid + Math.imul(al3, bh2)) | 0;
    mid = (mid + Math.imul(ah3, bl2)) | 0;
    hi = (hi + Math.imul(ah3, bh2)) | 0;
    lo = (lo + Math.imul(al2, bl3)) | 0;
    mid = (mid + Math.imul(al2, bh3)) | 0;
    mid = (mid + Math.imul(ah2, bl3)) | 0;
    hi = (hi + Math.imul(ah2, bh3)) | 0;
    lo = (lo + Math.imul(al1, bl4)) | 0;
    mid = (mid + Math.imul(al1, bh4)) | 0;
    mid = (mid + Math.imul(ah1, bl4)) | 0;
    hi = (hi + Math.imul(ah1, bh4)) | 0;
    lo = (lo + Math.imul(al0, bl5)) | 0;
    mid = (mid + Math.imul(al0, bh5)) | 0;
    mid = (mid + Math.imul(ah0, bl5)) | 0;
    hi = (hi + Math.imul(ah0, bh5)) | 0;
    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = (mid + Math.imul(ah6, bl0)) | 0;
    hi = Math.imul(ah6, bh0);
    lo = (lo + Math.imul(al5, bl1)) | 0;
    mid = (mid + Math.imul(al5, bh1)) | 0;
    mid = (mid + Math.imul(ah5, bl1)) | 0;
    hi = (hi + Math.imul(ah5, bh1)) | 0;
    lo = (lo + Math.imul(al4, bl2)) | 0;
    mid = (mid + Math.imul(al4, bh2)) | 0;
    mid = (mid + Math.imul(ah4, bl2)) | 0;
    hi = (hi + Math.imul(ah4, bh2)) | 0;
    lo = (lo + Math.imul(al3, bl3)) | 0;
    mid = (mid + Math.imul(al3, bh3)) | 0;
    mid = (mid + Math.imul(ah3, bl3)) | 0;
    hi = (hi + Math.imul(ah3, bh3)) | 0;
    lo = (lo + Math.imul(al2, bl4)) | 0;
    mid = (mid + Math.imul(al2, bh4)) | 0;
    mid = (mid + Math.imul(ah2, bl4)) | 0;
    hi = (hi + Math.imul(ah2, bh4)) | 0;
    lo = (lo + Math.imul(al1, bl5)) | 0;
    mid = (mid + Math.imul(al1, bh5)) | 0;
    mid = (mid + Math.imul(ah1, bl5)) | 0;
    hi = (hi + Math.imul(ah1, bh5)) | 0;
    lo = (lo + Math.imul(al0, bl6)) | 0;
    mid = (mid + Math.imul(al0, bh6)) | 0;
    mid = (mid + Math.imul(ah0, bl6)) | 0;
    hi = (hi + Math.imul(ah0, bh6)) | 0;
    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = (mid + Math.imul(ah7, bl0)) | 0;
    hi = Math.imul(ah7, bh0);
    lo = (lo + Math.imul(al6, bl1)) | 0;
    mid = (mid + Math.imul(al6, bh1)) | 0;
    mid = (mid + Math.imul(ah6, bl1)) | 0;
    hi = (hi + Math.imul(ah6, bh1)) | 0;
    lo = (lo + Math.imul(al5, bl2)) | 0;
    mid = (mid + Math.imul(al5, bh2)) | 0;
    mid = (mid + Math.imul(ah5, bl2)) | 0;
    hi = (hi + Math.imul(ah5, bh2)) | 0;
    lo = (lo + Math.imul(al4, bl3)) | 0;
    mid = (mid + Math.imul(al4, bh3)) | 0;
    mid = (mid + Math.imul(ah4, bl3)) | 0;
    hi = (hi + Math.imul(ah4, bh3)) | 0;
    lo = (lo + Math.imul(al3, bl4)) | 0;
    mid = (mid + Math.imul(al3, bh4)) | 0;
    mid = (mid + Math.imul(ah3, bl4)) | 0;
    hi = (hi + Math.imul(ah3, bh4)) | 0;
    lo = (lo + Math.imul(al2, bl5)) | 0;
    mid = (mid + Math.imul(al2, bh5)) | 0;
    mid = (mid + Math.imul(ah2, bl5)) | 0;
    hi = (hi + Math.imul(ah2, bh5)) | 0;
    lo = (lo + Math.imul(al1, bl6)) | 0;
    mid = (mid + Math.imul(al1, bh6)) | 0;
    mid = (mid + Math.imul(ah1, bl6)) | 0;
    hi = (hi + Math.imul(ah1, bh6)) | 0;
    lo = (lo + Math.imul(al0, bl7)) | 0;
    mid = (mid + Math.imul(al0, bh7)) | 0;
    mid = (mid + Math.imul(ah0, bl7)) | 0;
    hi = (hi + Math.imul(ah0, bh7)) | 0;
    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = (mid + Math.imul(ah8, bl0)) | 0;
    hi = Math.imul(ah8, bh0);
    lo = (lo + Math.imul(al7, bl1)) | 0;
    mid = (mid + Math.imul(al7, bh1)) | 0;
    mid = (mid + Math.imul(ah7, bl1)) | 0;
    hi = (hi + Math.imul(ah7, bh1)) | 0;
    lo = (lo + Math.imul(al6, bl2)) | 0;
    mid = (mid + Math.imul(al6, bh2)) | 0;
    mid = (mid + Math.imul(ah6, bl2)) | 0;
    hi = (hi + Math.imul(ah6, bh2)) | 0;
    lo = (lo + Math.imul(al5, bl3)) | 0;
    mid = (mid + Math.imul(al5, bh3)) | 0;
    mid = (mid + Math.imul(ah5, bl3)) | 0;
    hi = (hi + Math.imul(ah5, bh3)) | 0;
    lo = (lo + Math.imul(al4, bl4)) | 0;
    mid = (mid + Math.imul(al4, bh4)) | 0;
    mid = (mid + Math.imul(ah4, bl4)) | 0;
    hi = (hi + Math.imul(ah4, bh4)) | 0;
    lo = (lo + Math.imul(al3, bl5)) | 0;
    mid = (mid + Math.imul(al3, bh5)) | 0;
    mid = (mid + Math.imul(ah3, bl5)) | 0;
    hi = (hi + Math.imul(ah3, bh5)) | 0;
    lo = (lo + Math.imul(al2, bl6)) | 0;
    mid = (mid + Math.imul(al2, bh6)) | 0;
    mid = (mid + Math.imul(ah2, bl6)) | 0;
    hi = (hi + Math.imul(ah2, bh6)) | 0;
    lo = (lo + Math.imul(al1, bl7)) | 0;
    mid = (mid + Math.imul(al1, bh7)) | 0;
    mid = (mid + Math.imul(ah1, bl7)) | 0;
    hi = (hi + Math.imul(ah1, bh7)) | 0;
    lo = (lo + Math.imul(al0, bl8)) | 0;
    mid = (mid + Math.imul(al0, bh8)) | 0;
    mid = (mid + Math.imul(ah0, bl8)) | 0;
    hi = (hi + Math.imul(ah0, bh8)) | 0;
    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = (mid + Math.imul(ah9, bl0)) | 0;
    hi = Math.imul(ah9, bh0);
    lo = (lo + Math.imul(al8, bl1)) | 0;
    mid = (mid + Math.imul(al8, bh1)) | 0;
    mid = (mid + Math.imul(ah8, bl1)) | 0;
    hi = (hi + Math.imul(ah8, bh1)) | 0;
    lo = (lo + Math.imul(al7, bl2)) | 0;
    mid = (mid + Math.imul(al7, bh2)) | 0;
    mid = (mid + Math.imul(ah7, bl2)) | 0;
    hi = (hi + Math.imul(ah7, bh2)) | 0;
    lo = (lo + Math.imul(al6, bl3)) | 0;
    mid = (mid + Math.imul(al6, bh3)) | 0;
    mid = (mid + Math.imul(ah6, bl3)) | 0;
    hi = (hi + Math.imul(ah6, bh3)) | 0;
    lo = (lo + Math.imul(al5, bl4)) | 0;
    mid = (mid + Math.imul(al5, bh4)) | 0;
    mid = (mid + Math.imul(ah5, bl4)) | 0;
    hi = (hi + Math.imul(ah5, bh4)) | 0;
    lo = (lo + Math.imul(al4, bl5)) | 0;
    mid = (mid + Math.imul(al4, bh5)) | 0;
    mid = (mid + Math.imul(ah4, bl5)) | 0;
    hi = (hi + Math.imul(ah4, bh5)) | 0;
    lo = (lo + Math.imul(al3, bl6)) | 0;
    mid = (mid + Math.imul(al3, bh6)) | 0;
    mid = (mid + Math.imul(ah3, bl6)) | 0;
    hi = (hi + Math.imul(ah3, bh6)) | 0;
    lo = (lo + Math.imul(al2, bl7)) | 0;
    mid = (mid + Math.imul(al2, bh7)) | 0;
    mid = (mid + Math.imul(ah2, bl7)) | 0;
    hi = (hi + Math.imul(ah2, bh7)) | 0;
    lo = (lo + Math.imul(al1, bl8)) | 0;
    mid = (mid + Math.imul(al1, bh8)) | 0;
    mid = (mid + Math.imul(ah1, bl8)) | 0;
    hi = (hi + Math.imul(ah1, bh8)) | 0;
    lo = (lo + Math.imul(al0, bl9)) | 0;
    mid = (mid + Math.imul(al0, bh9)) | 0;
    mid = (mid + Math.imul(ah0, bl9)) | 0;
    hi = (hi + Math.imul(ah0, bh9)) | 0;
    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = (mid + Math.imul(ah9, bl1)) | 0;
    hi = Math.imul(ah9, bh1);
    lo = (lo + Math.imul(al8, bl2)) | 0;
    mid = (mid + Math.imul(al8, bh2)) | 0;
    mid = (mid + Math.imul(ah8, bl2)) | 0;
    hi = (hi + Math.imul(ah8, bh2)) | 0;
    lo = (lo + Math.imul(al7, bl3)) | 0;
    mid = (mid + Math.imul(al7, bh3)) | 0;
    mid = (mid + Math.imul(ah7, bl3)) | 0;
    hi = (hi + Math.imul(ah7, bh3)) | 0;
    lo = (lo + Math.imul(al6, bl4)) | 0;
    mid = (mid + Math.imul(al6, bh4)) | 0;
    mid = (mid + Math.imul(ah6, bl4)) | 0;
    hi = (hi + Math.imul(ah6, bh4)) | 0;
    lo = (lo + Math.imul(al5, bl5)) | 0;
    mid = (mid + Math.imul(al5, bh5)) | 0;
    mid = (mid + Math.imul(ah5, bl5)) | 0;
    hi = (hi + Math.imul(ah5, bh5)) | 0;
    lo = (lo + Math.imul(al4, bl6)) | 0;
    mid = (mid + Math.imul(al4, bh6)) | 0;
    mid = (mid + Math.imul(ah4, bl6)) | 0;
    hi = (hi + Math.imul(ah4, bh6)) | 0;
    lo = (lo + Math.imul(al3, bl7)) | 0;
    mid = (mid + Math.imul(al3, bh7)) | 0;
    mid = (mid + Math.imul(ah3, bl7)) | 0;
    hi = (hi + Math.imul(ah3, bh7)) | 0;
    lo = (lo + Math.imul(al2, bl8)) | 0;
    mid = (mid + Math.imul(al2, bh8)) | 0;
    mid = (mid + Math.imul(ah2, bl8)) | 0;
    hi = (hi + Math.imul(ah2, bh8)) | 0;
    lo = (lo + Math.imul(al1, bl9)) | 0;
    mid = (mid + Math.imul(al1, bh9)) | 0;
    mid = (mid + Math.imul(ah1, bl9)) | 0;
    hi = (hi + Math.imul(ah1, bh9)) | 0;
    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = (mid + Math.imul(ah9, bl2)) | 0;
    hi = Math.imul(ah9, bh2);
    lo = (lo + Math.imul(al8, bl3)) | 0;
    mid = (mid + Math.imul(al8, bh3)) | 0;
    mid = (mid + Math.imul(ah8, bl3)) | 0;
    hi = (hi + Math.imul(ah8, bh3)) | 0;
    lo = (lo + Math.imul(al7, bl4)) | 0;
    mid = (mid + Math.imul(al7, bh4)) | 0;
    mid = (mid + Math.imul(ah7, bl4)) | 0;
    hi = (hi + Math.imul(ah7, bh4)) | 0;
    lo = (lo + Math.imul(al6, bl5)) | 0;
    mid = (mid + Math.imul(al6, bh5)) | 0;
    mid = (mid + Math.imul(ah6, bl5)) | 0;
    hi = (hi + Math.imul(ah6, bh5)) | 0;
    lo = (lo + Math.imul(al5, bl6)) | 0;
    mid = (mid + Math.imul(al5, bh6)) | 0;
    mid = (mid + Math.imul(ah5, bl6)) | 0;
    hi = (hi + Math.imul(ah5, bh6)) | 0;
    lo = (lo + Math.imul(al4, bl7)) | 0;
    mid = (mid + Math.imul(al4, bh7)) | 0;
    mid = (mid + Math.imul(ah4, bl7)) | 0;
    hi = (hi + Math.imul(ah4, bh7)) | 0;
    lo = (lo + Math.imul(al3, bl8)) | 0;
    mid = (mid + Math.imul(al3, bh8)) | 0;
    mid = (mid + Math.imul(ah3, bl8)) | 0;
    hi = (hi + Math.imul(ah3, bh8)) | 0;
    lo = (lo + Math.imul(al2, bl9)) | 0;
    mid = (mid + Math.imul(al2, bh9)) | 0;
    mid = (mid + Math.imul(ah2, bl9)) | 0;
    hi = (hi + Math.imul(ah2, bh9)) | 0;
    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = (mid + Math.imul(ah9, bl3)) | 0;
    hi = Math.imul(ah9, bh3);
    lo = (lo + Math.imul(al8, bl4)) | 0;
    mid = (mid + Math.imul(al8, bh4)) | 0;
    mid = (mid + Math.imul(ah8, bl4)) | 0;
    hi = (hi + Math.imul(ah8, bh4)) | 0;
    lo = (lo + Math.imul(al7, bl5)) | 0;
    mid = (mid + Math.imul(al7, bh5)) | 0;
    mid = (mid + Math.imul(ah7, bl5)) | 0;
    hi = (hi + Math.imul(ah7, bh5)) | 0;
    lo = (lo + Math.imul(al6, bl6)) | 0;
    mid = (mid + Math.imul(al6, bh6)) | 0;
    mid = (mid + Math.imul(ah6, bl6)) | 0;
    hi = (hi + Math.imul(ah6, bh6)) | 0;
    lo = (lo + Math.imul(al5, bl7)) | 0;
    mid = (mid + Math.imul(al5, bh7)) | 0;
    mid = (mid + Math.imul(ah5, bl7)) | 0;
    hi = (hi + Math.imul(ah5, bh7)) | 0;
    lo = (lo + Math.imul(al4, bl8)) | 0;
    mid = (mid + Math.imul(al4, bh8)) | 0;
    mid = (mid + Math.imul(ah4, bl8)) | 0;
    hi = (hi + Math.imul(ah4, bh8)) | 0;
    lo = (lo + Math.imul(al3, bl9)) | 0;
    mid = (mid + Math.imul(al3, bh9)) | 0;
    mid = (mid + Math.imul(ah3, bl9)) | 0;
    hi = (hi + Math.imul(ah3, bh9)) | 0;
    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = (mid + Math.imul(ah9, bl4)) | 0;
    hi = Math.imul(ah9, bh4);
    lo = (lo + Math.imul(al8, bl5)) | 0;
    mid = (mid + Math.imul(al8, bh5)) | 0;
    mid = (mid + Math.imul(ah8, bl5)) | 0;
    hi = (hi + Math.imul(ah8, bh5)) | 0;
    lo = (lo + Math.imul(al7, bl6)) | 0;
    mid = (mid + Math.imul(al7, bh6)) | 0;
    mid = (mid + Math.imul(ah7, bl6)) | 0;
    hi = (hi + Math.imul(ah7, bh6)) | 0;
    lo = (lo + Math.imul(al6, bl7)) | 0;
    mid = (mid + Math.imul(al6, bh7)) | 0;
    mid = (mid + Math.imul(ah6, bl7)) | 0;
    hi = (hi + Math.imul(ah6, bh7)) | 0;
    lo = (lo + Math.imul(al5, bl8)) | 0;
    mid = (mid + Math.imul(al5, bh8)) | 0;
    mid = (mid + Math.imul(ah5, bl8)) | 0;
    hi = (hi + Math.imul(ah5, bh8)) | 0;
    lo = (lo + Math.imul(al4, bl9)) | 0;
    mid = (mid + Math.imul(al4, bh9)) | 0;
    mid = (mid + Math.imul(ah4, bl9)) | 0;
    hi = (hi + Math.imul(ah4, bh9)) | 0;
    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = (mid + Math.imul(ah9, bl5)) | 0;
    hi = Math.imul(ah9, bh5);
    lo = (lo + Math.imul(al8, bl6)) | 0;
    mid = (mid + Math.imul(al8, bh6)) | 0;
    mid = (mid + Math.imul(ah8, bl6)) | 0;
    hi = (hi + Math.imul(ah8, bh6)) | 0;
    lo = (lo + Math.imul(al7, bl7)) | 0;
    mid = (mid + Math.imul(al7, bh7)) | 0;
    mid = (mid + Math.imul(ah7, bl7)) | 0;
    hi = (hi + Math.imul(ah7, bh7)) | 0;
    lo = (lo + Math.imul(al6, bl8)) | 0;
    mid = (mid + Math.imul(al6, bh8)) | 0;
    mid = (mid + Math.imul(ah6, bl8)) | 0;
    hi = (hi + Math.imul(ah6, bh8)) | 0;
    lo = (lo + Math.imul(al5, bl9)) | 0;
    mid = (mid + Math.imul(al5, bh9)) | 0;
    mid = (mid + Math.imul(ah5, bl9)) | 0;
    hi = (hi + Math.imul(ah5, bh9)) | 0;
    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = (mid + Math.imul(ah9, bl6)) | 0;
    hi = Math.imul(ah9, bh6);
    lo = (lo + Math.imul(al8, bl7)) | 0;
    mid = (mid + Math.imul(al8, bh7)) | 0;
    mid = (mid + Math.imul(ah8, bl7)) | 0;
    hi = (hi + Math.imul(ah8, bh7)) | 0;
    lo = (lo + Math.imul(al7, bl8)) | 0;
    mid = (mid + Math.imul(al7, bh8)) | 0;
    mid = (mid + Math.imul(ah7, bl8)) | 0;
    hi = (hi + Math.imul(ah7, bh8)) | 0;
    lo = (lo + Math.imul(al6, bl9)) | 0;
    mid = (mid + Math.imul(al6, bh9)) | 0;
    mid = (mid + Math.imul(ah6, bl9)) | 0;
    hi = (hi + Math.imul(ah6, bh9)) | 0;
    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = (mid + Math.imul(ah9, bl7)) | 0;
    hi = Math.imul(ah9, bh7);
    lo = (lo + Math.imul(al8, bl8)) | 0;
    mid = (mid + Math.imul(al8, bh8)) | 0;
    mid = (mid + Math.imul(ah8, bl8)) | 0;
    hi = (hi + Math.imul(ah8, bh8)) | 0;
    lo = (lo + Math.imul(al7, bl9)) | 0;
    mid = (mid + Math.imul(al7, bh9)) | 0;
    mid = (mid + Math.imul(ah7, bl9)) | 0;
    hi = (hi + Math.imul(ah7, bh9)) | 0;
    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = (mid + Math.imul(ah9, bl8)) | 0;
    hi = Math.imul(ah9, bh8);
    lo = (lo + Math.imul(al8, bl9)) | 0;
    mid = (mid + Math.imul(al8, bh9)) | 0;
    mid = (mid + Math.imul(ah8, bl9)) | 0;
    hi = (hi + Math.imul(ah8, bh9)) | 0;
    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = (mid + Math.imul(ah9, bl9)) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out._strip();
  }

  function jumboMulTo (self, num, out) {
    // Temporary disable, see https://github.com/indutny/bn.js/issues/211
    // var fftm = new FFTM();
    // return fftm.mulp(self, num, out);
    return bigMulTo(self, num, out);
  }

  BN.prototype.mulTo = function mulTo (num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM (x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT (N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin (x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << (l - i - 1);
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
        Math.round(ws[2 * i] / N) +
        carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub (N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp (x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out._strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul (num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln (num) {
    var isNegNum = num < 0;
    if (isNegNum) num = -num;

    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return isNegNum ? this.ineg() : this;
  };

  BN.prototype.muln = function muln (num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr () {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr () {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow (num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = ((this.words[i] | 0) - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this._strip();
  };

  BN.prototype.ishln = function ishln (bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - (hint % 26)) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this._strip();
  };

  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln (bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln (bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn (bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn (bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn (bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this._strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn (bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) <= num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn (num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this._strip();
  };

  BN.prototype.addn = function addn (num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn (num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs () {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs () {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this._strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this._strip();
  };

  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
        (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q._strip();
    }
    a._strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod (num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modrn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modrn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div (num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod (num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod (num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound (num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || (r2 === 1 && cmp === 0)) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modrn = function modrn (num) {
    var isNegNum = num < 0;
    if (isNegNum) num = -num;

    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return isNegNum ? -acc : acc;
  };

  // WARNING: DEPRECATED
  BN.prototype.modn = function modn (num) {
    return this.modrn(num);
  };

  // In-place division by number
  BN.prototype.idivn = function idivn (num) {
    var isNegNum = num < 0;
    if (isNegNum) num = -num;

    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    this._strip();
    return isNegNum ? this.ineg() : this;
  };

  BN.prototype.divn = function divn (num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd (num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm (num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven () {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd () {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln (num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn (bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero () {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn (num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this._strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp (num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp (num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn (num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt (num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten (num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte (num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn (num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt (num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten (num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte (num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn (num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq (num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red (num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed () {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed (ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd (num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd (num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub (num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub (num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl (num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr () {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr () {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt () {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm () {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg () {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow (num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime (name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp () {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce (num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      if (r.strip !== undefined) {
        // r is a BN v4 instance
        r.strip();
      } else {
        // r is a BN v5 instance
        r._strip();
      }
    }

    return r;
  };

  MPrime.prototype.split = function split (input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK (num) {
    return num.imul(this.k);
  };

  function K256 () {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split (input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK (num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224 () {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192 () {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519 () {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK (num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime (name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red (m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1 (a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2 (a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red,
      'red works only with red numbers');
  };

  Red.prototype.imod = function imod (a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);

    move(a, a.umod(this.m)._forceRed(this));
    return a;
  };

  Red.prototype.neg = function neg (a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add (a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd (a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub (a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub (a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl (a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul (a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul (a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr (a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr (a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt (a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm (a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow (a, num) {
    if (num.isZero()) return new BN(1).toRed(this);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = (word >> j) & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo (num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom (num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont (num) {
    return new Mont(num);
  };

  function Mont (m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - (this.shift % 26);
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo (num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom (num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul (a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul (a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm (a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})(typeof module === 'undefined' || module, this);

},{"buffer":20}],19:[function(require,module,exports){
var r;

module.exports = function rand(len) {
  if (!r)
    r = new Rand(null);

  return r.generate(len);
};

function Rand(rand) {
  this.rand = rand;
}
module.exports.Rand = Rand;

Rand.prototype.generate = function generate(len) {
  return this._rand(len);
};

// Emulate crypto API using randy
Rand.prototype._rand = function _rand(n) {
  if (this.rand.getBytes)
    return this.rand.getBytes(n);

  var res = new Uint8Array(n);
  for (var i = 0; i < res.length; i++)
    res[i] = this.rand.getByte();
  return res;
};

if (typeof self === 'object') {
  if (self.crypto && self.crypto.getRandomValues) {
    // Modern browsers
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.crypto.getRandomValues(arr);
      return arr;
    };
  } else if (self.msCrypto && self.msCrypto.getRandomValues) {
    // IE
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.msCrypto.getRandomValues(arr);
      return arr;
    };

  // Safari's WebWorkers do not have `crypto`
  } else if (typeof window === 'object') {
    // Old junk
    Rand.prototype._rand = function() {
      throw new Error('Not implemented yet');
    };
  }
} else {
  // Node.js or Web worker with no crypto support
  try {
    var crypto = require('crypto');
    if (typeof crypto.randomBytes !== 'function')
      throw new Error('Not supported');

    Rand.prototype._rand = function _rand(n) {
      return crypto.randomBytes(n);
    };
  } catch (e) {
  }
}

},{"crypto":20}],20:[function(require,module,exports){

},{}],21:[function(require,module,exports){
// based on the aes implimentation in triple sec
// https://github.com/keybase/triplesec
// which is in turn based on the one from crypto-js
// https://code.google.com/p/crypto-js/

var Buffer = require('safe-buffer').Buffer

function asUInt32Array (buf) {
  if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)

  var len = (buf.length / 4) | 0
  var out = new Array(len)

  for (var i = 0; i < len; i++) {
    out[i] = buf.readUInt32BE(i * 4)
  }

  return out
}

function scrubVec (v) {
  for (var i = 0; i < v.length; v++) {
    v[i] = 0
  }
}

function cryptBlock (M, keySchedule, SUB_MIX, SBOX, nRounds) {
  var SUB_MIX0 = SUB_MIX[0]
  var SUB_MIX1 = SUB_MIX[1]
  var SUB_MIX2 = SUB_MIX[2]
  var SUB_MIX3 = SUB_MIX[3]

  var s0 = M[0] ^ keySchedule[0]
  var s1 = M[1] ^ keySchedule[1]
  var s2 = M[2] ^ keySchedule[2]
  var s3 = M[3] ^ keySchedule[3]
  var t0, t1, t2, t3
  var ksRow = 4

  for (var round = 1; round < nRounds; round++) {
    t0 = SUB_MIX0[s0 >>> 24] ^ SUB_MIX1[(s1 >>> 16) & 0xff] ^ SUB_MIX2[(s2 >>> 8) & 0xff] ^ SUB_MIX3[s3 & 0xff] ^ keySchedule[ksRow++]
    t1 = SUB_MIX0[s1 >>> 24] ^ SUB_MIX1[(s2 >>> 16) & 0xff] ^ SUB_MIX2[(s3 >>> 8) & 0xff] ^ SUB_MIX3[s0 & 0xff] ^ keySchedule[ksRow++]
    t2 = SUB_MIX0[s2 >>> 24] ^ SUB_MIX1[(s3 >>> 16) & 0xff] ^ SUB_MIX2[(s0 >>> 8) & 0xff] ^ SUB_MIX3[s1 & 0xff] ^ keySchedule[ksRow++]
    t3 = SUB_MIX0[s3 >>> 24] ^ SUB_MIX1[(s0 >>> 16) & 0xff] ^ SUB_MIX2[(s1 >>> 8) & 0xff] ^ SUB_MIX3[s2 & 0xff] ^ keySchedule[ksRow++]
    s0 = t0
    s1 = t1
    s2 = t2
    s3 = t3
  }

  t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++]
  t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++]
  t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++]
  t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++]
  t0 = t0 >>> 0
  t1 = t1 >>> 0
  t2 = t2 >>> 0
  t3 = t3 >>> 0

  return [t0, t1, t2, t3]
}

// AES constants
var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36]
var G = (function () {
  // Compute double table
  var d = new Array(256)
  for (var j = 0; j < 256; j++) {
    if (j < 128) {
      d[j] = j << 1
    } else {
      d[j] = (j << 1) ^ 0x11b
    }
  }

  var SBOX = []
  var INV_SBOX = []
  var SUB_MIX = [[], [], [], []]
  var INV_SUB_MIX = [[], [], [], []]

  // Walk GF(2^8)
  var x = 0
  var xi = 0
  for (var i = 0; i < 256; ++i) {
    // Compute sbox
    var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4)
    sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63
    SBOX[x] = sx
    INV_SBOX[sx] = x

    // Compute multiplication
    var x2 = d[x]
    var x4 = d[x2]
    var x8 = d[x4]

    // Compute sub bytes, mix columns tables
    var t = (d[sx] * 0x101) ^ (sx * 0x1010100)
    SUB_MIX[0][x] = (t << 24) | (t >>> 8)
    SUB_MIX[1][x] = (t << 16) | (t >>> 16)
    SUB_MIX[2][x] = (t << 8) | (t >>> 24)
    SUB_MIX[3][x] = t

    // Compute inv sub bytes, inv mix columns tables
    t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100)
    INV_SUB_MIX[0][sx] = (t << 24) | (t >>> 8)
    INV_SUB_MIX[1][sx] = (t << 16) | (t >>> 16)
    INV_SUB_MIX[2][sx] = (t << 8) | (t >>> 24)
    INV_SUB_MIX[3][sx] = t

    if (x === 0) {
      x = xi = 1
    } else {
      x = x2 ^ d[d[d[x8 ^ x2]]]
      xi ^= d[d[xi]]
    }
  }

  return {
    SBOX: SBOX,
    INV_SBOX: INV_SBOX,
    SUB_MIX: SUB_MIX,
    INV_SUB_MIX: INV_SUB_MIX
  }
})()

function AES (key) {
  this._key = asUInt32Array(key)
  this._reset()
}

AES.blockSize = 4 * 4
AES.keySize = 256 / 8
AES.prototype.blockSize = AES.blockSize
AES.prototype.keySize = AES.keySize
AES.prototype._reset = function () {
  var keyWords = this._key
  var keySize = keyWords.length
  var nRounds = keySize + 6
  var ksRows = (nRounds + 1) * 4

  var keySchedule = []
  for (var k = 0; k < keySize; k++) {
    keySchedule[k] = keyWords[k]
  }

  for (k = keySize; k < ksRows; k++) {
    var t = keySchedule[k - 1]

    if (k % keySize === 0) {
      t = (t << 8) | (t >>> 24)
      t =
        (G.SBOX[t >>> 24] << 24) |
        (G.SBOX[(t >>> 16) & 0xff] << 16) |
        (G.SBOX[(t >>> 8) & 0xff] << 8) |
        (G.SBOX[t & 0xff])

      t ^= RCON[(k / keySize) | 0] << 24
    } else if (keySize > 6 && k % keySize === 4) {
      t =
        (G.SBOX[t >>> 24] << 24) |
        (G.SBOX[(t >>> 16) & 0xff] << 16) |
        (G.SBOX[(t >>> 8) & 0xff] << 8) |
        (G.SBOX[t & 0xff])
    }

    keySchedule[k] = keySchedule[k - keySize] ^ t
  }

  var invKeySchedule = []
  for (var ik = 0; ik < ksRows; ik++) {
    var ksR = ksRows - ik
    var tt = keySchedule[ksR - (ik % 4 ? 0 : 4)]

    if (ik < 4 || ksR <= 4) {
      invKeySchedule[ik] = tt
    } else {
      invKeySchedule[ik] =
        G.INV_SUB_MIX[0][G.SBOX[tt >>> 24]] ^
        G.INV_SUB_MIX[1][G.SBOX[(tt >>> 16) & 0xff]] ^
        G.INV_SUB_MIX[2][G.SBOX[(tt >>> 8) & 0xff]] ^
        G.INV_SUB_MIX[3][G.SBOX[tt & 0xff]]
    }
  }

  this._nRounds = nRounds
  this._keySchedule = keySchedule
  this._invKeySchedule = invKeySchedule
}

AES.prototype.encryptBlockRaw = function (M) {
  M = asUInt32Array(M)
  return cryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX, this._nRounds)
}

AES.prototype.encryptBlock = function (M) {
  var out = this.encryptBlockRaw(M)
  var buf = Buffer.allocUnsafe(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[1], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[3], 12)
  return buf
}

AES.prototype.decryptBlock = function (M) {
  M = asUInt32Array(M)

  // swap
  var m1 = M[1]
  M[1] = M[3]
  M[3] = m1

  var out = cryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX, this._nRounds)
  var buf = Buffer.allocUnsafe(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[3], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[1], 12)
  return buf
}

AES.prototype.scrub = function () {
  scrubVec(this._keySchedule)
  scrubVec(this._invKeySchedule)
  scrubVec(this._key)
}

module.exports.AES = AES

},{"safe-buffer":164}],22:[function(require,module,exports){
var aes = require('./aes')
var Buffer = require('safe-buffer').Buffer
var Transform = require('cipher-base')
var inherits = require('inherits')
var GHASH = require('./ghash')
var xor = require('buffer-xor')
var incr32 = require('./incr32')

function xorTest (a, b) {
  var out = 0
  if (a.length !== b.length) out++

  var len = Math.min(a.length, b.length)
  for (var i = 0; i < len; ++i) {
    out += (a[i] ^ b[i])
  }

  return out
}

function calcIv (self, iv, ck) {
  if (iv.length === 12) {
    self._finID = Buffer.concat([iv, Buffer.from([0, 0, 0, 1])])
    return Buffer.concat([iv, Buffer.from([0, 0, 0, 2])])
  }
  var ghash = new GHASH(ck)
  var len = iv.length
  var toPad = len % 16
  ghash.update(iv)
  if (toPad) {
    toPad = 16 - toPad
    ghash.update(Buffer.alloc(toPad, 0))
  }
  ghash.update(Buffer.alloc(8, 0))
  var ivBits = len * 8
  var tail = Buffer.alloc(8)
  tail.writeUIntBE(ivBits, 0, 8)
  ghash.update(tail)
  self._finID = ghash.state
  var out = Buffer.from(self._finID)
  incr32(out)
  return out
}
function StreamCipher (mode, key, iv, decrypt) {
  Transform.call(this)

  var h = Buffer.alloc(4, 0)

  this._cipher = new aes.AES(key)
  var ck = this._cipher.encryptBlock(h)
  this._ghash = new GHASH(ck)
  iv = calcIv(this, iv, ck)

  this._prev = Buffer.from(iv)
  this._cache = Buffer.allocUnsafe(0)
  this._secCache = Buffer.allocUnsafe(0)
  this._decrypt = decrypt
  this._alen = 0
  this._len = 0
  this._mode = mode

  this._authTag = null
  this._called = false
}

inherits(StreamCipher, Transform)

StreamCipher.prototype._update = function (chunk) {
  if (!this._called && this._alen) {
    var rump = 16 - (this._alen % 16)
    if (rump < 16) {
      rump = Buffer.alloc(rump, 0)
      this._ghash.update(rump)
    }
  }

  this._called = true
  var out = this._mode.encrypt(this, chunk)
  if (this._decrypt) {
    this._ghash.update(chunk)
  } else {
    this._ghash.update(out)
  }
  this._len += chunk.length
  return out
}

StreamCipher.prototype._final = function () {
  if (this._decrypt && !this._authTag) throw new Error('Unsupported state or unable to authenticate data')

  var tag = xor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID))
  if (this._decrypt && xorTest(tag, this._authTag)) throw new Error('Unsupported state or unable to authenticate data')

  this._authTag = tag
  this._cipher.scrub()
}

StreamCipher.prototype.getAuthTag = function getAuthTag () {
  if (this._decrypt || !Buffer.isBuffer(this._authTag)) throw new Error('Attempting to get auth tag in unsupported state')

  return this._authTag
}

StreamCipher.prototype.setAuthTag = function setAuthTag (tag) {
  if (!this._decrypt) throw new Error('Attempting to set auth tag in unsupported state')

  this._authTag = tag
}

StreamCipher.prototype.setAAD = function setAAD (buf) {
  if (this._called) throw new Error('Attempting to set AAD in unsupported state')

  this._ghash.update(buf)
  this._alen += buf.length
}

module.exports = StreamCipher

},{"./aes":21,"./ghash":26,"./incr32":27,"buffer-xor":64,"cipher-base":66,"inherits":134,"safe-buffer":164}],23:[function(require,module,exports){
var ciphers = require('./encrypter')
var deciphers = require('./decrypter')
var modes = require('./modes/list.json')

function getCiphers () {
  return Object.keys(modes)
}

exports.createCipher = exports.Cipher = ciphers.createCipher
exports.createCipheriv = exports.Cipheriv = ciphers.createCipheriv
exports.createDecipher = exports.Decipher = deciphers.createDecipher
exports.createDecipheriv = exports.Decipheriv = deciphers.createDecipheriv
exports.listCiphers = exports.getCiphers = getCiphers

},{"./decrypter":24,"./encrypter":25,"./modes/list.json":35}],24:[function(require,module,exports){
var AuthCipher = require('./authCipher')
var Buffer = require('safe-buffer').Buffer
var MODES = require('./modes')
var StreamCipher = require('./streamCipher')
var Transform = require('cipher-base')
var aes = require('./aes')
var ebtk = require('evp_bytestokey')
var inherits = require('inherits')

function Decipher (mode, key, iv) {
  Transform.call(this)

  this._cache = new Splitter()
  this._last = void 0
  this._cipher = new aes.AES(key)
  this._prev = Buffer.from(iv)
  this._mode = mode
  this._autopadding = true
}

inherits(Decipher, Transform)

Decipher.prototype._update = function (data) {
  this._cache.add(data)
  var chunk
  var thing
  var out = []
  while ((chunk = this._cache.get(this._autopadding))) {
    thing = this._mode.decrypt(this, chunk)
    out.push(thing)
  }
  return Buffer.concat(out)
}

Decipher.prototype._final = function () {
  var chunk = this._cache.flush()
  if (this._autopadding) {
    return unpad(this._mode.decrypt(this, chunk))
  } else if (chunk) {
    throw new Error('data not multiple of block length')
  }
}

Decipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo
  return this
}

function Splitter () {
  this.cache = Buffer.allocUnsafe(0)
}

Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data])
}

Splitter.prototype.get = function (autoPadding) {
  var out
  if (autoPadding) {
    if (this.cache.length > 16) {
      out = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      return out
    }
  } else {
    if (this.cache.length >= 16) {
      out = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      return out
    }
  }

  return null
}

Splitter.prototype.flush = function () {
  if (this.cache.length) return this.cache
}

function unpad (last) {
  var padded = last[15]
  if (padded < 1 || padded > 16) {
    throw new Error('unable to decrypt data')
  }
  var i = -1
  while (++i < padded) {
    if (last[(i + (16 - padded))] !== padded) {
      throw new Error('unable to decrypt data')
    }
  }
  if (padded === 16) return

  return last.slice(0, 16 - padded)
}

function createDecipheriv (suite, password, iv) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  if (typeof iv === 'string') iv = Buffer.from(iv)
  if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length)

  if (typeof password === 'string') password = Buffer.from(password)
  if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length)

  if (config.type === 'stream') {
    return new StreamCipher(config.module, password, iv, true)
  } else if (config.type === 'auth') {
    return new AuthCipher(config.module, password, iv, true)
  }

  return new Decipher(config.module, password, iv)
}

function createDecipher (suite, password) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  var keys = ebtk(password, false, config.key, config.iv)
  return createDecipheriv(suite, keys.key, keys.iv)
}

exports.createDecipher = createDecipher
exports.createDecipheriv = createDecipheriv

},{"./aes":21,"./authCipher":22,"./modes":34,"./streamCipher":37,"cipher-base":66,"evp_bytestokey":103,"inherits":134,"safe-buffer":164}],25:[function(require,module,exports){
var MODES = require('./modes')
var AuthCipher = require('./authCipher')
var Buffer = require('safe-buffer').Buffer
var StreamCipher = require('./streamCipher')
var Transform = require('cipher-base')
var aes = require('./aes')
var ebtk = require('evp_bytestokey')
var inherits = require('inherits')

function Cipher (mode, key, iv) {
  Transform.call(this)

  this._cache = new Splitter()
  this._cipher = new aes.AES(key)
  this._prev = Buffer.from(iv)
  this._mode = mode
  this._autopadding = true
}

inherits(Cipher, Transform)

Cipher.prototype._update = function (data) {
  this._cache.add(data)
  var chunk
  var thing
  var out = []

  while ((chunk = this._cache.get())) {
    thing = this._mode.encrypt(this, chunk)
    out.push(thing)
  }

  return Buffer.concat(out)
}

var PADDING = Buffer.alloc(16, 0x10)

Cipher.prototype._final = function () {
  var chunk = this._cache.flush()
  if (this._autopadding) {
    chunk = this._mode.encrypt(this, chunk)
    this._cipher.scrub()
    return chunk
  }

  if (!chunk.equals(PADDING)) {
    this._cipher.scrub()
    throw new Error('data not multiple of block length')
  }
}

Cipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo
  return this
}

function Splitter () {
  this.cache = Buffer.allocUnsafe(0)
}

Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data])
}

Splitter.prototype.get = function () {
  if (this.cache.length > 15) {
    var out = this.cache.slice(0, 16)
    this.cache = this.cache.slice(16)
    return out
  }
  return null
}

Splitter.prototype.flush = function () {
  var len = 16 - this.cache.length
  var padBuff = Buffer.allocUnsafe(len)

  var i = -1
  while (++i < len) {
    padBuff.writeUInt8(len, i)
  }

  return Buffer.concat([this.cache, padBuff])
}

function createCipheriv (suite, password, iv) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  if (typeof password === 'string') password = Buffer.from(password)
  if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length)

  if (typeof iv === 'string') iv = Buffer.from(iv)
  if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length)

  if (config.type === 'stream') {
    return new StreamCipher(config.module, password, iv)
  } else if (config.type === 'auth') {
    return new AuthCipher(config.module, password, iv)
  }

  return new Cipher(config.module, password, iv)
}

function createCipher (suite, password) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  var keys = ebtk(password, false, config.key, config.iv)
  return createCipheriv(suite, keys.key, keys.iv)
}

exports.createCipheriv = createCipheriv
exports.createCipher = createCipher

},{"./aes":21,"./authCipher":22,"./modes":34,"./streamCipher":37,"cipher-base":66,"evp_bytestokey":103,"inherits":134,"safe-buffer":164}],26:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer
var ZEROES = Buffer.alloc(16, 0)

function toArray (buf) {
  return [
    buf.readUInt32BE(0),
    buf.readUInt32BE(4),
    buf.readUInt32BE(8),
    buf.readUInt32BE(12)
  ]
}

function fromArray (out) {
  var buf = Buffer.allocUnsafe(16)
  buf.writeUInt32BE(out[0] >>> 0, 0)
  buf.writeUInt32BE(out[1] >>> 0, 4)
  buf.writeUInt32BE(out[2] >>> 0, 8)
  buf.writeUInt32BE(out[3] >>> 0, 12)
  return buf
}

function GHASH (key) {
  this.h = key
  this.state = Buffer.alloc(16, 0)
  this.cache = Buffer.allocUnsafe(0)
}

// from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html
// by Juho Vähä-Herttua
GHASH.prototype.ghash = function (block) {
  var i = -1
  while (++i < block.length) {
    this.state[i] ^= block[i]
  }
  this._multiply()
}

GHASH.prototype._multiply = function () {
  var Vi = toArray(this.h)
  var Zi = [0, 0, 0, 0]
  var j, xi, lsbVi
  var i = -1
  while (++i < 128) {
    xi = (this.state[~~(i / 8)] & (1 << (7 - (i % 8)))) !== 0
    if (xi) {
      // Z_i+1 = Z_i ^ V_i
      Zi[0] ^= Vi[0]
      Zi[1] ^= Vi[1]
      Zi[2] ^= Vi[2]
      Zi[3] ^= Vi[3]
    }

    // Store the value of LSB(V_i)
    lsbVi = (Vi[3] & 1) !== 0

    // V_i+1 = V_i >> 1
    for (j = 3; j > 0; j--) {
      Vi[j] = (Vi[j] >>> 1) | ((Vi[j - 1] & 1) << 31)
    }
    Vi[0] = Vi[0] >>> 1

    // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R
    if (lsbVi) {
      Vi[0] = Vi[0] ^ (0xe1 << 24)
    }
  }
  this.state = fromArray(Zi)
}

GHASH.prototype.update = function (buf) {
  this.cache = Buffer.concat([this.cache, buf])
  var chunk
  while (this.cache.length >= 16) {
    chunk = this.cache.slice(0, 16)
    this.cache = this.cache.slice(16)
    this.ghash(chunk)
  }
}

GHASH.prototype.final = function (abl, bl) {
  if (this.cache.length) {
    this.ghash(Buffer.concat([this.cache, ZEROES], 16))
  }

  this.ghash(fromArray([0, abl, 0, bl]))
  return this.state
}

module.exports = GHASH

},{"safe-buffer":164}],27:[function(require,module,exports){
function incr32 (iv) {
  var len = iv.length
  var item
  while (len--) {
    item = iv.readUInt8(len)
    if (item === 255) {
      iv.writeUInt8(0, len)
    } else {
      item++
      iv.writeUInt8(item, len)
      break
    }
  }
}
module.exports = incr32

},{}],28:[function(require,module,exports){
var xor = require('buffer-xor')

exports.encrypt = function (self, block) {
  var data = xor(block, self._prev)

  self._prev = self._cipher.encryptBlock(data)
  return self._prev
}

exports.decrypt = function (self, block) {
  var pad = self._prev

  self._prev = block
  var out = self._cipher.decryptBlock(block)

  return xor(out, pad)
}

},{"buffer-xor":64}],29:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer
var xor = require('buffer-xor')

function encryptStart (self, data, decrypt) {
  var len = data.length
  var out = xor(data, self._cache)
  self._cache = self._cache.slice(len)
  self._prev = Buffer.concat([self._prev, decrypt ? data : out])
  return out
}

exports.encrypt = function (self, data, decrypt) {
  var out = Buffer.allocUnsafe(0)
  var len

  while (data.length) {
    if (self._cache.length === 0) {
      self._cache = self._cipher.encryptBlock(self._prev)
      self._prev = Buffer.allocUnsafe(0)
    }

    if (self._cache.length <= data.length) {
      len = self._cache.length
      out = Buffer.concat([out, encryptStart(self, data.slice(0, len), decrypt)])
      data = data.slice(len)
    } else {
      out = Buffer.concat([out, encryptStart(self, data, decrypt)])
      break
    }
  }

  return out
}

},{"buffer-xor":64,"safe-buffer":164}],30:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer

function encryptByte (self, byteParam, decrypt) {
  var pad
  var i = -1
  var len = 8
  var out = 0
  var bit, value
  while (++i < len) {
    pad = self._cipher.encryptBlock(self._prev)
    bit = (byteParam & (1 << (7 - i))) ? 0x80 : 0
    value = pad[0] ^ bit
    out += ((value & 0x80) >> (i % 8))
    self._prev = shiftIn(self._prev, decrypt ? bit : value)
  }
  return out
}

function shiftIn (buffer, value) {
  var len = buffer.length
  var i = -1
  var out = Buffer.allocUnsafe(buffer.length)
  buffer = Buffer.concat([buffer, Buffer.from([value])])

  while (++i < len) {
    out[i] = buffer[i] << 1 | buffer[i + 1] >> (7)
  }

  return out
}

exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length
  var out = Buffer.allocUnsafe(len)
  var i = -1

  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt)
  }

  return out
}

},{"safe-buffer":164}],31:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer

function encryptByte (self, byteParam, decrypt) {
  var pad = self._cipher.encryptBlock(self._prev)
  var out = pad[0] ^ byteParam

  self._prev = Buffer.concat([
    self._prev.slice(1),
    Buffer.from([decrypt ? byteParam : out])
  ])

  return out
}

exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length
  var out = Buffer.allocUnsafe(len)
  var i = -1

  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt)
  }

  return out
}

},{"safe-buffer":164}],32:[function(require,module,exports){
var xor = require('buffer-xor')
var Buffer = require('safe-buffer').Buffer
var incr32 = require('../incr32')

function getBlock (self) {
  var out = self._cipher.encryptBlockRaw(self._prev)
  incr32(self._prev)
  return out
}

var blockSize = 16
exports.encrypt = function (self, chunk) {
  var chunkNum = Math.ceil(chunk.length / blockSize)
  var start = self._cache.length
  self._cache = Buffer.concat([
    self._cache,
    Buffer.allocUnsafe(chunkNum * blockSize)
  ])
  for (var i = 0; i < chunkNum; i++) {
    var out = getBlock(self)
    var offset = start + i * blockSize
    self._cache.writeUInt32BE(out[0], offset + 0)
    self._cache.writeUInt32BE(out[1], offset + 4)
    self._cache.writeUInt32BE(out[2], offset + 8)
    self._cache.writeUInt32BE(out[3], offset + 12)
  }
  var pad = self._cache.slice(0, chunk.length)
  self._cache = self._cache.slice(chunk.length)
  return xor(chunk, pad)
}

},{"../incr32":27,"buffer-xor":64,"safe-buffer":164}],33:[function(require,module,exports){
exports.encrypt = function (self, block) {
  return self._cipher.encryptBlock(block)
}

exports.decrypt = function (self, block) {
  return self._cipher.decryptBlock(block)
}

},{}],34:[function(require,module,exports){
var modeModules = {
  ECB: require('./ecb'),
  CBC: require('./cbc'),
  CFB: require('./cfb'),
  CFB8: require('./cfb8'),
  CFB1: require('./cfb1'),
  OFB: require('./ofb'),
  CTR: require('./ctr'),
  GCM: require('./ctr')
}

var modes = require('./list.json')

for (var key in modes) {
  modes[key].module = modeModules[modes[key].mode]
}

module.exports = modes

},{"./cbc":28,"./cfb":29,"./cfb1":30,"./cfb8":31,"./ctr":32,"./ecb":33,"./list.json":35,"./ofb":36}],35:[function(require,module,exports){
module.exports={
  "aes-128-ecb": {
    "cipher": "AES",
    "key": 128,
    "iv": 0,
    "mode": "ECB",
    "type": "block"
  },
  "aes-192-ecb": {
    "cipher": "AES",
    "key": 192,
    "iv": 0,
    "mode": "ECB",
    "type": "block"
  },
  "aes-256-ecb": {
    "cipher": "AES",
    "key": 256,
    "iv": 0,
    "mode": "ECB",
    "type": "block"
  },
  "aes-128-cbc": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes-192-cbc": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes-256-cbc": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes128": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes192": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes256": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes-128-cfb": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CFB",
    "type": "stream"
  },
  "aes-192-cfb": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CFB",
    "type": "stream"
  },
  "aes-256-cfb": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CFB",
    "type": "stream"
  },
  "aes-128-cfb8": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CFB8",
    "type": "stream"
  },
  "aes-192-cfb8": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CFB8",
    "type": "stream"
  },
  "aes-256-cfb8": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CFB8",
    "type": "stream"
  },
  "aes-128-cfb1": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CFB1",
    "type": "stream"
  },
  "aes-192-cfb1": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CFB1",
    "type": "stream"
  },
  "aes-256-cfb1": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CFB1",
    "type": "stream"
  },
  "aes-128-ofb": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "OFB",
    "type": "stream"
  },
  "aes-192-ofb": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "OFB",
    "type": "stream"
  },
  "aes-256-ofb": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "OFB",
    "type": "stream"
  },
  "aes-128-ctr": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CTR",
    "type": "stream"
  },
  "aes-192-ctr": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CTR",
    "type": "stream"
  },
  "aes-256-ctr": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CTR",
    "type": "stream"
  },
  "aes-128-gcm": {
    "cipher": "AES",
    "key": 128,
    "iv": 12,
    "mode": "GCM",
    "type": "auth"
  },
  "aes-192-gcm": {
    "cipher": "AES",
    "key": 192,
    "iv": 12,
    "mode": "GCM",
    "type": "auth"
  },
  "aes-256-gcm": {
    "cipher": "AES",
    "key": 256,
    "iv": 12,
    "mode": "GCM",
    "type": "auth"
  }
}

},{}],36:[function(require,module,exports){
(function (Buffer){(function (){
var xor = require('buffer-xor')

function getBlock (self) {
  self._prev = self._cipher.encryptBlock(self._prev)
  return self._prev
}

exports.encrypt = function (self, chunk) {
  while (self._cache.length < chunk.length) {
    self._cache = Buffer.concat([self._cache, getBlock(self)])
  }

  var pad = self._cache.slice(0, chunk.length)
  self._cache = self._cache.slice(chunk.length)
  return xor(chunk, pad)
}

}).call(this)}).call(this,require("buffer").Buffer)
},{"buffer":65,"buffer-xor":64}],37:[function(require,module,exports){
var aes = require('./aes')
var Buffer = require('safe-buffer').Buffer
var Transform = require('cipher-base')
var inherits = require('inherits')

function StreamCipher (mode, key, iv, decrypt) {
  Transform.call(this)

  this._cipher = new aes.AES(key)
  this._prev = Buffer.from(iv)
  this._cache = Buffer.allocUnsafe(0)
  this._secCache = Buffer.allocUnsafe(0)
  this._decrypt = decrypt
  this._mode = mode
}

inherits(StreamCipher, Transform)

StreamCipher.prototype._update = function (chunk) {
  return this._mode.encrypt(this, chunk, this._decrypt)
}

StreamCipher.prototype._final = function () {
  this._cipher.scrub()
}

module.exports = StreamCipher

},{"./aes":21,"cipher-base":66,"inherits":134,"safe-buffer":164}],38:[function(require,module,exports){
var DES = require('browserify-des')
var aes = require('browserify-aes/browser')
var aesModes = require('browserify-aes/modes')
var desModes = require('browserify-des/modes')
var ebtk = require('evp_bytestokey')

function createCipher (suite, password) {
  suite = suite.toLowerCase()

  var keyLen, ivLen
  if (aesModes[suite]) {
    keyLen = aesModes[suite].key
    ivLen = aesModes[suite].iv
  } else if (desModes[suite]) {
    keyLen = desModes[suite].key * 8
    ivLen = desModes[suite].iv
  } else {
    throw new TypeError('invalid suite type')
  }

  var keys = ebtk(password, false, keyLen, ivLen)
  return createCipheriv(suite, keys.key, keys.iv)
}

function createDecipher (suite, password) {
  suite = suite.toLowerCase()

  var keyLen, ivLen
  if (aesModes[suite]) {
    keyLen = aesModes[suite].key
    ivLen = aesModes[suite].iv
  } else if (desModes[suite]) {
    keyLen = desModes[suite].key * 8
    ivLen = desModes[suite].iv
  } else {
    throw new TypeError('invalid suite type')
  }

  var keys = ebtk(password, false, keyLen, ivLen)
  return createDecipheriv(suite, keys.key, keys.iv)
}

function createCipheriv (suite, key, iv) {
  suite = suite.toLowerCase()
  if (aesModes[suite]) return aes.createCipheriv(suite, key, iv)
  if (desModes[suite]) return new DES({ key: key, iv: iv, mode: suite })

  throw new TypeError('invalid suite type')
}

function createDecipheriv (suite, key, iv) {
  suite = suite.toLowerCase()
  if (aesModes[suite]) return aes.createDecipheriv(suite, key, iv)
  if (desModes[suite]) return new DES({ key: key, iv: iv, mode: suite, decrypt: true })

  throw new TypeError('invalid suite type')
}

function getCiphers () {
  return Object.keys(desModes).concat(aes.getCiphers())
}

exports.createCipher = exports.Cipher = createCipher
exports.createCipheriv = exports.Cipheriv = createCipheriv
exports.createDecipher = exports.Decipher = createDecipher
exports.createDecipheriv = exports.Decipheriv = createDecipheriv
exports.listCiphers = exports.getCiphers = getCiphers

},{"browserify-aes/browser":23,"browserify-aes/modes":34,"browserify-des":39,"browserify-des/modes":40,"evp_bytestokey":103}],39:[function(require,module,exports){
var CipherBase = require('cipher-base')
var des = require('des.js')
var inherits = require('inherits')
var Buffer = require('safe-buffer').Buffer

var modes = {
  'des-ede3-cbc': des.CBC.instantiate(des.EDE),
  'des-ede3': des.EDE,
  'des-ede-cbc': des.CBC.instantiate(des.EDE),
  'des-ede': des.EDE,
  'des-cbc': des.CBC.instantiate(des.DES),
  'des-ecb': des.DES
}
modes.des = modes['des-cbc']
modes.des3 = modes['des-ede3-cbc']
module.exports = DES
inherits(DES, CipherBase)
function DES (opts) {
  CipherBase.call(this)
  var modeName = opts.mode.toLowerCase()
  var mode = modes[modeName]
  var type
  if (opts.decrypt) {
    type = 'decrypt'
  } else {
    type = 'encrypt'
  }
  var key = opts.key
  if (!Buffer.isBuffer(key)) {
    key = Buffer.from(key)
  }
  if (modeName === 'des-ede' || modeName === 'des-ede-cbc') {
    key = Buffer.concat([key, key.slice(0, 8)])
  }
  var iv = opts.iv
  if (!Buffer.isBuffer(iv)) {
    iv = Buffer.from(iv)
  }
  this._des = mode.create({
    key: key,
    iv: iv,
    type: type
  })
}
DES.prototype._update = function (data) {
  return Buffer.from(this._des.update(data))
}
DES.prototype._final = function () {
  return Buffer.from(this._des.final())
}

},{"cipher-base":66,"des.js":74,"inherits":134,"safe-buffer":164}],40:[function(require,module,exports){
exports['des-ecb'] = {
  key: 8,
  iv: 0
}
exports['des-cbc'] = exports.des = {
  key: 8,
  iv: 8
}
exports['des-ede3-cbc'] = exports.des3 = {
  key: 24,
  iv: 8
}
exports['des-ede3'] = {
  key: 24,
  iv: 0
}
exports['des-ede-cbc'] = {
  key: 16,
  iv: 8
}
exports['des-ede'] = {
  key: 16,
  iv: 0
}

},{}],41:[function(require,module,exports){
(function (Buffer){(function (){
var BN = require('bn.js')
var randomBytes = require('randombytes')

function blind (priv) {
  var r = getr(priv)
  var blinder = r.toRed(BN.mont(priv.modulus)).redPow(new BN(priv.publicExponent)).fromRed()
  return { blinder: blinder, unblinder: r.invm(priv.modulus) }
}

function getr (priv) {
  var len = priv.modulus.byteLength()
  var r
  do {
    r = new BN(randomBytes(len))
  } while (r.cmp(priv.modulus) >= 0 || !r.umod(priv.prime1) || !r.umod(priv.prime2))
  return r
}

function crt (msg, priv) {
  var blinds = blind(priv)
  var len = priv.modulus.byteLength()
  var blinded = new BN(msg).mul(blinds.blinder).umod(priv.modulus)
  var c1 = blinded.toRed(BN.mont(priv.prime1))
  var c2 = blinded.toRed(BN.mont(priv.prime2))
  var qinv = priv.coefficient
  var p = priv.prime1
  var q = priv.prime2
  var m1 = c1.redPow(priv.exponent1).fromRed()
  var m2 = c2.redPow(priv.exponent2).fromRed()
  var h = m1.isub(m2).imul(qinv).umod(p).imul(q)
  return m2.iadd(h).imul(blinds.unblinder).umod(priv.modulus).toArrayLike(Buffer, 'be', len)
}
crt.getr = getr

module.exports = crt

}).call(this)}).call(this,require("buffer").Buffer)
},{"bn.js":18,"buffer":65,"randombytes":161}],42:[function(require,module,exports){
module.exports = require('./browser/algorithms.json')

},{"./browser/algorithms.json":43}],43:[function(require,module,exports){
module.exports={
  "sha224WithRSAEncryption": {
    "sign": "rsa",
    "hash": "sha224",
    "id": "302d300d06096086480165030402040500041c"
  },
  "RSA-SHA224": {
    "sign": "ecdsa/rsa",
    "hash": "sha224",
    "id": "302d300d06096086480165030402040500041c"
  },
  "sha256WithRSAEncryption": {
    "sign": "rsa",
    "hash": "sha256",
    "id": "3031300d060960864801650304020105000420"
  },
  "RSA-SHA256": {
    "sign": "ecdsa/rsa",
    "hash": "sha256",
    "id": "3031300d060960864801650304020105000420"
  },
  "sha384WithRSAEncryption": {
    "sign": "rsa",
    "hash": "sha384",
    "id": "3041300d060960864801650304020205000430"
  },
  "RSA-SHA384": {
    "sign": "ecdsa/rsa",
    "hash": "sha384",
    "id": "3041300d060960864801650304020205000430"
  },
  "sha512WithRSAEncryption": {
    "sign": "rsa",
    "hash": "sha512",
    "id": "3051300d060960864801650304020305000440"
  },
  "RSA-SHA512": {
    "sign": "ecdsa/rsa",
    "hash": "sha512",
    "id": "3051300d060960864801650304020305000440"
  },
  "RSA-SHA1": {
    "sign": "rsa",
    "hash": "sha1",
    "id": "3021300906052b0e03021a05000414"
  },
  "ecdsa-with-SHA1": {
    "sign": "ecdsa",
    "hash": "sha1",
    "id": ""
  },
  "sha256": {
    "sign": "ecdsa",
    "hash": "sha256",
    "id": ""
  },
  "sha224": {
    "sign": "ecdsa",
    "hash": "sha224",
    "id": ""
  },
  "sha384": {
    "sign": "ecdsa",
    "hash": "sha384",
    "id": ""
  },
  "sha512": {
    "sign": "ecdsa",
    "hash": "sha512",
    "id": ""
  },
  "DSA-SHA": {
    "sign": "dsa",
    "hash": "sha1",
    "id": ""
  },
  "DSA-SHA1": {
    "sign": "dsa",
    "hash": "sha1",
    "id": ""
  },
  "DSA": {
    "sign": "dsa",
    "hash": "sha1",
    "id": ""
  },
  "DSA-WITH-SHA224": {
    "sign": "dsa",
    "hash": "sha224",
    "id": ""
  },
  "DSA-SHA224": {
    "sign": "dsa",
    "hash": "sha224",
    "id": ""
  },
  "DSA-WITH-SHA256": {
    "sign": "dsa",
    "hash": "sha256",
    "id": ""
  },
  "DSA-SHA256": {
    "sign": "dsa",
    "hash": "sha256",
    "id": ""
  },
  "DSA-WITH-SHA384": {
    "sign": "dsa",
    "hash": "sha384",
    "id": ""
  },
  "DSA-SHA384": {
    "sign": "dsa",
    "hash": "sha384",
    "id": ""
  },
  "DSA-WITH-SHA512": {
    "sign": "dsa",
    "hash": "sha512",
    "id": ""
  },
  "DSA-SHA512": {
    "sign": "dsa",
    "hash": "sha512",
    "id": ""
  },
  "DSA-RIPEMD160": {
    "sign": "dsa",
    "hash": "rmd160",
    "id": ""
  },
  "ripemd160WithRSA": {
    "sign": "rsa",
    "hash": "rmd160",
    "id": "3021300906052b2403020105000414"
  },
  "RSA-RIPEMD160": {
    "sign": "rsa",
    "hash": "rmd160",
    "id": "3021300906052b2403020105000414"
  },
  "md5WithRSAEncryption": {
    "sign": "rsa",
    "hash": "md5",
    "id": "3020300c06082a864886f70d020505000410"
  },
  "RSA-MD5": {
    "sign": "rsa",
    "hash": "md5",
    "id": "3020300c06082a864886f70d020505000410"
  }
}

},{}],44:[function(require,module,exports){
module.exports={
  "1.3.132.0.10": "secp256k1",
  "1.3.132.0.33": "p224",
  "1.2.840.10045.3.1.1": "p192",
  "1.2.840.10045.3.1.7": "p256",
  "1.3.132.0.34": "p384",
  "1.3.132.0.35": "p521"
}

},{}],45:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer
var createHash = require('create-hash')
var stream = require('readable-stream')
var inherits = require('inherits')
var sign = require('./sign')
var verify = require('./verify')

var algorithms = require('./algorithms.json')
Object.keys(algorithms).forEach(function (key) {
  algorithms[key].id = Buffer.from(algorithms[key].id, 'hex')
  algorithms[key.toLowerCase()] = algorithms[key]
})

function Sign (algorithm) {
  stream.Writable.call(this)

  var data = algorithms[algorithm]
  if (!data) throw new Error('Unknown message digest')

  this._hashType = data.hash
  this._hash = createHash(data.hash)
  this._tag = data.id
  this._signType = data.sign
}
inherits(Sign, stream.Writable)

Sign.prototype._write = function _write (data, _, done) {
  this._hash.update(data)
  done()
}

Sign.prototype.update = function update (data, enc) {
  if (typeof data === 'string') data = Buffer.from(data, enc)

  this._hash.update(data)
  return this
}

Sign.prototype.sign = function signMethod (key, enc) {
  this.end()
  var hash = this._hash.digest()
  var sig = sign(hash, key, this._hashType, this._signType, this._tag)

  return enc ? sig.toString(enc) : sig
}

function Verify (algorithm) {
  stream.Writable.call(this)

  var data = algorithms[algorithm]
  if (!data) throw new Error('Unknown message digest')

  this._hash = createHash(data.hash)
  this._tag = data.id
  this._signType = data.sign
}
inherits(Verify, stream.Writable)

Verify.prototype._write = function _write (data, _, done) {
  this._hash.update(data)
  done()
}

Verify.prototype.update = function update (data, enc) {
  if (typeof data === 'string') data = Buffer.from(data, enc)

  this._hash.update(data)
  return this
}

Verify.prototype.verify = function verifyMethod (key, sig, enc) {
  if (typeof sig === 'string') sig = Buffer.from(sig, enc)

  this.end()
  var hash = this._hash.digest()
  return verify(sig, hash, key, this._signType, this._tag)
}

function createSign (algorithm) {
  return new Sign(algorithm)
}

function createVerify (algorithm) {
  return new Verify(algorithm)
}

module.exports = {
  Sign: createSign,
  Verify: createVerify,
  createSign: createSign,
  createVerify: createVerify
}

},{"./algorithms.json":43,"./sign":46,"./verify":47,"create-hash":69,"inherits":134,"readable-stream":62,"safe-buffer":164}],46:[function(require,module,exports){
// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var Buffer = require('safe-buffer').Buffer
var createHmac = require('create-hmac')
var crt = require('browserify-rsa')
var EC = require('elliptic').ec
var BN = require('bn.js')
var parseKeys = require('parse-asn1')
var curves = require('./curves.json')

function sign (hash, key, hashType, signType, tag) {
  var priv = parseKeys(key)
  if (priv.curve) {
    // rsa keys can be interpreted as ecdsa ones in openssl
    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type')
    return ecSign(hash, priv)
  } else if (priv.type === 'dsa') {
    if (signType !== 'dsa') throw new Error('wrong private key type')
    return dsaSign(hash, priv, hashType)
  } else {
    if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type')
  }
  hash = Buffer.concat([tag, hash])
  var len = priv.modulus.byteLength()
  var pad = [0, 1]
  while (hash.length + pad.length + 1 < len) pad.push(0xff)
  pad.push(0x00)
  var i = -1
  while (++i < hash.length) pad.push(hash[i])

  var out = crt(pad, priv)
  return out
}

function ecSign (hash, priv) {
  var curveId = curves[priv.curve.join('.')]
  if (!curveId) throw new Error('unknown curve ' + priv.curve.join('.'))

  var curve = new EC(curveId)
  var key = curve.keyFromPrivate(priv.privateKey)
  var out = key.sign(hash)

  return Buffer.from(out.toDER())
}

function dsaSign (hash, priv, algo) {
  var x = priv.params.priv_key
  var p = priv.params.p
  var q = priv.params.q
  var g = priv.params.g
  var r = new BN(0)
  var k
  var H = bits2int(hash, q).mod(q)
  var s = false
  var kv = getKey(x, q, hash, algo)
  while (s === false) {
    k = makeKey(q, kv, algo)
    r = makeR(g, k, p, q)
    s = k.invm(q).imul(H.add(x.mul(r))).mod(q)
    if (s.cmpn(0) === 0) {
      s = false
      r = new BN(0)
    }
  }
  return toDER(r, s)
}

function toDER (r, s) {
  r = r.toArray()
  s = s.toArray()

  // Pad values
  if (r[0] & 0x80) r = [0].concat(r)
  if (s[0] & 0x80) s = [0].concat(s)

  var total = r.length + s.length + 4
  var res = [0x30, total, 0x02, r.length]
  res = res.concat(r, [0x02, s.length], s)
  return Buffer.from(res)
}

function getKey (x, q, hash, algo) {
  x = Buffer.from(x.toArray())
  if (x.length < q.byteLength()) {
    var zeros = Buffer.alloc(q.byteLength() - x.length)
    x = Buffer.concat([zeros, x])
  }
  var hlen = hash.length
  var hbits = bits2octets(hash, q)
  var v = Buffer.alloc(hlen)
  v.fill(1)
  var k = Buffer.alloc(hlen)
  k = createHmac(algo, k).update(v).update(Buffer.from([0])).update(x).update(hbits).digest()
  v = createHmac(algo, k).update(v).digest()
  k = createHmac(algo, k).update(v).update(Buffer.from([1])).update(x).update(hbits).digest()
  v = createHmac(algo, k).update(v).digest()
  return { k: k, v: v }
}

function bits2int (obits, q) {
  var bits = new BN(obits)
  var shift = (obits.length << 3) - q.bitLength()
  if (shift > 0) bits.ishrn(shift)
  return bits
}

function bits2octets (bits, q) {
  bits = bits2int(bits, q)
  bits = bits.mod(q)
  var out = Buffer.from(bits.toArray())
  if (out.length < q.byteLength()) {
    var zeros = Buffer.alloc(q.byteLength() - out.length)
    out = Buffer.concat([zeros, out])
  }
  return out
}

function makeKey (q, kv, algo) {
  var t
  var k

  do {
    t = Buffer.alloc(0)

    while (t.length * 8 < q.bitLength()) {
      kv.v = createHmac(algo, kv.k).update(kv.v).digest()
      t = Buffer.concat([t, kv.v])
    }

    k = bits2int(t, q)
    kv.k = createHmac(algo, kv.k).update(kv.v).update(Buffer.from([0])).digest()
    kv.v = createHmac(algo, kv.k).update(kv.v).digest()
  } while (k.cmp(q) !== -1)

  return k
}

function makeR (g, k, p, q) {
  return g.toRed(BN.mont(p)).redPow(k).fromRed().mod(q)
}

module.exports = sign
module.exports.getKey = getKey
module.exports.makeKey = makeKey

},{"./curves.json":44,"bn.js":18,"browserify-rsa":41,"create-hmac":71,"elliptic":85,"parse-asn1":145,"safe-buffer":164}],47:[function(require,module,exports){
// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var Buffer = require('safe-buffer').Buffer
var BN = require('bn.js')
var EC = require('elliptic').ec
var parseKeys = require('parse-asn1')
var curves = require('./curves.json')

function verify (sig, hash, key, signType, tag) {
  var pub = parseKeys(key)
  if (pub.type === 'ec') {
    // rsa keys can be interpreted as ecdsa ones in openssl
    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')
    return ecVerify(sig, hash, pub)
  } else if (pub.type === 'dsa') {
    if (signType !== 'dsa') throw new Error('wrong public key type')
    return dsaVerify(sig, hash, pub)
  } else {
    if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')
  }
  hash = Buffer.concat([tag, hash])
  var len = pub.modulus.byteLength()
  var pad = [1]
  var padNum = 0
  while (hash.length + pad.length + 2 < len) {
    pad.push(0xff)
    padNum++
  }
  pad.push(0x00)
  var i = -1
  while (++i < hash.length) {
    pad.push(hash[i])
  }
  pad = Buffer.from(pad)
  var red = BN.mont(pub.modulus)
  sig = new BN(sig).toRed(red)

  sig = sig.redPow(new BN(pub.publicExponent))
  sig = Buffer.from(sig.fromRed().toArray())
  var out = padNum < 8 ? 1 : 0
  len = Math.min(sig.length, pad.length)
  if (sig.length !== pad.length) out = 1

  i = -1
  while (++i < len) out |= sig[i] ^ pad[i]
  return out === 0
}

function ecVerify (sig, hash, pub) {
  var curveId = curves[pub.data.algorithm.curve.join('.')]
  if (!curveId) throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.'))

  var curve = new EC(curveId)
  var pubkey = pub.data.subjectPrivateKey.data

  return curve.verify(hash, sig, pubkey)
}

function dsaVerify (sig, hash, pub) {
  var p = pub.data.p
  var q = pub.data.q
  var g = pub.data.g
  var y = pub.data.pub_key
  var unpacked = parseKeys.signature.decode(sig, 'der')
  var s = unpacked.s
  var r = unpacked.r
  checkValue(s, q)
  checkValue(r, q)
  var montp = BN.mont(p)
  var w = s.invm(q)
  var v = g.toRed(montp)
    .redPow(new BN(hash).mul(w).mod(q))
    .fromRed()
    .mul(y.toRed(montp).redPow(r.mul(w).mod(q)).fromRed())
    .mod(p)
    .mod(q)
  return v.cmp(r) === 0
}

function checkValue (b, q) {
  if (b.cmpn(0) <= 0) throw new Error('invalid sig')
  if (b.cmp(q) >= q) throw new Error('invalid sig')
}

module.exports = verify

},{"./curves.json":44,"bn.js":18,"elliptic":85,"parse-asn1":145,"safe-buffer":164}],48:[function(require,module,exports){
'use strict';

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var codes = {};

function createErrorType(code, message, Base) {
  if (!Base) {
    Base = Error;
  }

  function getMessage(arg1, arg2, arg3) {
    if (typeof message === 'string') {
      return message;
    } else {
      return message(arg1, arg2, arg3);
    }
  }

  var NodeError =
  /*#__PURE__*/
  function (_Base) {
    _inheritsLoose(NodeError, _Base);

    function NodeError(arg1, arg2, arg3) {
      return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
    }

    return NodeError;
  }(Base);

  NodeError.prototype.name = Base.name;
  NodeError.prototype.code = code;
  codes[code] = NodeError;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js


function oneOf(expected, thing) {
  if (Array.isArray(expected)) {
    var len = expected.length;
    expected = expected.map(function (i) {
      return String(i);
    });

    if (len > 2) {
      return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
    } else if (len === 2) {
      return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
    } else {
      return "of ".concat(thing, " ").concat(expected[0]);
    }
  } else {
    return "of ".concat(thing, " ").concat(String(expected));
  }
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith


function startsWith(str, search, pos) {
  return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith


function endsWith(str, search, this_len) {
  if (this_len === undefined || this_len > str.length) {
    this_len = str.length;
  }

  return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes


function includes(str, search, start) {
  if (typeof start !== 'number') {
    start = 0;
  }

  if (start + search.length > str.length) {
    return false;
  } else {
    return str.indexOf(search, start) !== -1;
  }
}

createErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {
  return 'The value "' + value + '" is invalid for option "' + name + '"';
}, TypeError);
createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
  // determiner: 'must be' or 'must not be'
  var determiner;

  if (typeof expected === 'string' && startsWith(expected, 'not ')) {
    determiner = 'must not be';
    expected = expected.replace(/^not /, '');
  } else {
    determiner = 'must be';
  }

  var msg;

  if (endsWith(name, ' argument')) {
    // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  } else {
    var type = includes(name, '.') ? 'property' : 'argument';
    msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  }

  msg += ". Received type ".concat(typeof actual);
  return msg;
}, TypeError);
createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {
  return 'The ' + name + ' method is not implemented';
});
createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
createErrorType('ERR_STREAM_DESTROYED', function (name) {
  return 'Cannot call ' + name + ' after a stream was destroyed';
});
createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
createErrorType('ERR_UNKNOWN_ENCODING', function (arg) {
  return 'Unknown encoding: ' + arg;
}, TypeError);
createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');
module.exports.codes = codes;

},{}],49:[function(require,module,exports){
(function (process){(function (){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.
'use strict';
/*<replacement>*/

var objectKeys = Object.keys || function (obj) {
  var keys = [];

  for (var key in obj) {
    keys.push(key);
  }

  return keys;
};
/*</replacement>*/


module.exports = Duplex;

var Readable = require('./_stream_readable');

var Writable = require('./_stream_writable');

require('inherits')(Duplex, Readable);

{
  // Allow the keys array to be GC'ed.
  var keys = objectKeys(Writable.prototype);

  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);
  Readable.call(this, options);
  Writable.call(this, options);
  this.allowHalfOpen = true;

  if (options) {
    if (options.readable === false) this.readable = false;
    if (options.writable === false) this.writable = false;

    if (options.allowHalfOpen === false) {
      this.allowHalfOpen = false;
      this.once('end', onend);
    }
  }
}

Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
});
Object.defineProperty(Duplex.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});
Object.defineProperty(Duplex.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
}); // the no-half-open enforcer

function onend() {
  // If the writable side ended, then we're ok.
  if (this._writableState.ended) return; // no more data can be written.
  // But allow more writes to happen in this tick.

  process.nextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }

    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});
}).call(this)}).call(this,require('_process'))
},{"./_stream_readable":51,"./_stream_writable":53,"_process":153,"inherits":134}],50:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.
'use strict';

module.exports = PassThrough;

var Transform = require('./_stream_transform');

require('inherits')(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);
  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};
},{"./_stream_transform":52,"inherits":134}],51:[function(require,module,exports){
(function (process,global){(function (){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';

module.exports = Readable;
/*<replacement>*/

var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;
/*<replacement>*/

var EE = require('events').EventEmitter;

var EElistenerCount = function EElistenerCount(emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/


var Stream = require('./internal/streams/stream');
/*</replacement>*/


var Buffer = require('buffer').Buffer;

var OurUint8Array = global.Uint8Array || function () {};

function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}

function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*<replacement>*/


var debugUtil = require('util');

var debug;

if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function debug() {};
}
/*</replacement>*/


var BufferList = require('./internal/streams/buffer_list');

var destroyImpl = require('./internal/streams/destroy');

var _require = require('./internal/streams/state'),
    getHighWaterMark = _require.getHighWaterMark;

var _require$codes = require('../errors').codes,
    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
    ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.


var StringDecoder;
var createReadableStreamAsyncIterator;
var from;

require('inherits')(Readable, Stream);

var errorOrDestroy = destroyImpl.errorOrDestroy;
var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.

  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}

function ReadableState(options, stream, isDuplex) {
  Duplex = Duplex || require('./_stream_duplex');
  options = options || {}; // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.

  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away

  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"

  this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex); // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()

  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.

  this.sync = true; // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.

  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;
  this.paused = true; // Should close be emitted on destroy. Defaults to true.

  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')

  this.autoDestroy = !!options.autoDestroy; // has it been destroyed

  this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.

  this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s

  this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled

  this.readingMore = false;
  this.decoder = null;
  this.encoding = null;

  if (options.encoding) {
    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || require('./_stream_duplex');
  if (!(this instanceof Readable)) return new Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside
  // the ReadableState constructor, at least with V8 6.5

  var isDuplex = this instanceof Duplex;
  this._readableState = new ReadableState(options, this, isDuplex); // legacy

  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined) {
      return false;
    }

    return this._readableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._readableState.destroyed = value;
  }
});
Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;

Readable.prototype._destroy = function (err, cb) {
  cb(err);
}; // Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.


Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;

      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }

      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
}; // Unshift should *always* be something directly out of read()


Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  debug('readableAddChunk', chunk);
  var state = stream._readableState;

  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);

    if (er) {
      errorOrDestroy(stream, er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
      } else if (state.destroyed) {
        return false;
      } else {
        state.reading = false;

        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
      maybeReadMore(stream, state);
    }
  } // We can push more data if we are below the highWaterMark.
  // Also, if we have no data yet, we can stand some more bytes.
  // This is to work around cases where hwm=0, such as the repl.


  return !state.ended && (state.length < state.highWaterMark || state.length === 0);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    state.awaitDrain = 0;
    stream.emit('data', chunk);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
    if (state.needReadable) emitReadable(stream);
  }

  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;

  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);
  }

  return er;
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
}; // backwards compatibility.


Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
  var decoder = new StringDecoder(enc);
  this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8

  this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:

  var p = this._readableState.buffer.head;
  var content = '';

  while (p !== null) {
    content += decoder.write(p.data);
    p = p.next;
  }

  this._readableState.buffer.clear();

  if (content !== '') this._readableState.buffer.push(content);
  this._readableState.length = content.length;
  return this;
}; // Don't raise the hwm > 1GB


var MAX_HWM = 0x40000000;

function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }

  return n;
} // This function is designed to be inlinable, so please take care when making
// changes to the function body.


function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;

  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  } // If we're asking for more than the current hwm, then raise the hwm.


  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n; // Don't have enough

  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }

  return state.length;
} // you can override either this method, or the async _read(n) below.


Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;
  if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.

  if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.

  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  } // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.
  // if we need a readable event, then we need to do some reading.


  var doRead = state.needReadable;
  debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some

  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  } // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.


  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true; // if the length is currently zero, then we *need* a readable event.

    if (state.length === 0) state.needReadable = true; // call internal read method

    this._read(state.highWaterMark);

    state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.

    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = state.length <= state.highWaterMark;
    n = 0;
  } else {
    state.length -= n;
    state.awaitDrain = 0;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.

    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);
  return ret;
};

function onEofChunk(stream, state) {
  debug('onEofChunk');
  if (state.ended) return;

  if (state.decoder) {
    var chunk = state.decoder.end();

    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }

  state.ended = true;

  if (state.sync) {
    // if we are sync, wait until next tick to emit the data.
    // Otherwise we risk emitting data in the flow()
    // the readable code triggers during a read() call
    emitReadable(stream);
  } else {
    // emit 'readable' now to make sure it gets picked up.
    state.needReadable = false;

    if (!state.emittedReadable) {
      state.emittedReadable = true;
      emitReadable_(stream);
    }
  }
} // Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.


function emitReadable(stream) {
  var state = stream._readableState;
  debug('emitReadable', state.needReadable, state.emittedReadable);
  state.needReadable = false;

  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    process.nextTick(emitReadable_, stream);
  }
}

function emitReadable_(stream) {
  var state = stream._readableState;
  debug('emitReadable_', state.destroyed, state.length, state.ended);

  if (!state.destroyed && (state.length || state.ended)) {
    stream.emit('readable');
    state.emittedReadable = false;
  } // The stream needs another readable event if
  // 1. It is not flowing, as the flow mechanism will take
  //    care of it.
  // 2. It is not ended.
  // 3. It is below the highWaterMark, so we can schedule
  //    another readable later.


  state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
  flow(stream);
} // at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.


function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    process.nextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  // Attempt to read more data if we should.
  //
  // The conditions for reading more data are (one of):
  // - Not enough data buffered (state.length < state.highWaterMark). The loop
  //   is responsible for filling the buffer with enough data if such data
  //   is available. If highWaterMark is 0 and we are not in the flowing mode
  //   we should _not_ attempt to buffer any extra data. We'll get more data
  //   when the stream consumer calls read() instead.
  // - No data in the buffer, and the stream is in flowing mode. In this mode
  //   the loop below is responsible for ensuring read() is called. Failing to
  //   call read here would abort the flow and there's no other mechanism for
  //   continuing the flow if the stream consumer has just subscribed to the
  //   'data' event.
  //
  // In addition to the above conditions to keep reading data, the following
  // conditions prevent the data from being read:
  // - The stream has ended (state.ended).
  // - There is already a pending 'read' operation (state.reading). This is a
  //   case where the the stream has called the implementation defined _read()
  //   method, but they are processing the call asynchronously and have _not_
  //   called push() with new data. In this case we skip performing more
  //   read()s. The execution ends in this method again after the _read() ends
  //   up calling push() with more data.
  while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
    var len = state.length;
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length) // didn't get any data, stop spinning.
      break;
  }

  state.readingMore = false;
} // abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.


Readable.prototype._read = function (n) {
  errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;

    case 1:
      state.pipes = [state.pipes, dest];
      break;

    default:
      state.pipes.push(dest);
      break;
  }

  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);
  dest.on('unpipe', onunpipe);

  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');

    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  } // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.


  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);
  var cleanedUp = false;

  function cleanup() {
    debug('cleanup'); // cleanup event handlers once the pipe is broken

    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);
    cleanedUp = true; // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.

    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  src.on('data', ondata);

  function ondata(chunk) {
    debug('ondata');
    var ret = dest.write(chunk);
    debug('dest.write', ret);

    if (ret === false) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', state.awaitDrain);
        state.awaitDrain++;
      }

      src.pause();
    }
  } // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.


  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);
  } // Make sure our error handler is attached before userland ones.


  prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.

  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }

  dest.once('close', onclose);

  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }

  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  } // tell the dest that it's being piped to


  dest.emit('pipe', src); // start the flow if it hasn't been started already.

  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function pipeOnDrainFunctionResult() {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;

    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = {
    hasUnpiped: false
  }; // if we're not piping anywhere, then do nothing.

  if (state.pipesCount === 0) return this; // just one destination.  most common case.

  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;
    if (!dest) dest = state.pipes; // got a match.

    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  } // slow case. multiple pipe destinations.


  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, {
        hasUnpiped: false
      });
    }

    return this;
  } // try to find the right one.


  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;
  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];
  dest.emit('unpipe', this, unpipeInfo);
  return this;
}; // set up data events if they are asked for
// Ensure readable listeners eventually get something


Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);
  var state = this._readableState;

  if (ev === 'data') {
    // update readableListening so that resume() may be a no-op
    // a few lines down. This is needed to support once('readable').
    state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused

    if (state.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.flowing = false;
      state.emittedReadable = false;
      debug('on readable', state.length, state.reading);

      if (state.length) {
        emitReadable(this);
      } else if (!state.reading) {
        process.nextTick(nReadingNextTick, this);
      }
    }
  }

  return res;
};

Readable.prototype.addListener = Readable.prototype.on;

Readable.prototype.removeListener = function (ev, fn) {
  var res = Stream.prototype.removeListener.call(this, ev, fn);

  if (ev === 'readable') {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }

  return res;
};

Readable.prototype.removeAllListeners = function (ev) {
  var res = Stream.prototype.removeAllListeners.apply(this, arguments);

  if (ev === 'readable' || ev === undefined) {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }

  return res;
};

function updateReadableListening(self) {
  var state = self._readableState;
  state.readableListening = self.listenerCount('readable') > 0;

  if (state.resumeScheduled && !state.paused) {
    // flowing needs to be set to true now, otherwise
    // the upcoming resume will not flow.
    state.flowing = true; // crude way to check if we should resume
  } else if (self.listenerCount('data') > 0) {
    self.resume();
  }
}

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
} // pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.


Readable.prototype.resume = function () {
  var state = this._readableState;

  if (!state.flowing) {
    debug('resume'); // we flow only if there is no one listening
    // for readable, but we still have to call
    // resume()

    state.flowing = !state.readableListening;
    resume(this, state);
  }

  state.paused = false;
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    process.nextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  debug('resume', state.reading);

  if (!state.reading) {
    stream.read(0);
  }

  state.resumeScheduled = false;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);

  if (this._readableState.flowing !== false) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }

  this._readableState.paused = true;
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);

  while (state.flowing && stream.read() !== null) {
    ;
  }
} // wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.


Readable.prototype.wrap = function (stream) {
  var _this = this;

  var state = this._readableState;
  var paused = false;
  stream.on('end', function () {
    debug('wrapped end');

    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }

    _this.push(null);
  });
  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode

    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = _this.push(chunk);

    if (!ret) {
      paused = true;
      stream.pause();
    }
  }); // proxy all the other methods.
  // important when wrapping filters and duplexes.

  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function methodWrap(method) {
        return function methodWrapReturnFunction() {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  } // proxy certain important events.


  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  } // when we try to consume some more bytes, simply unpause the
  // underlying stream.


  this._read = function (n) {
    debug('wrapped _read', n);

    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return this;
};

if (typeof Symbol === 'function') {
  Readable.prototype[Symbol.asyncIterator] = function () {
    if (createReadableStreamAsyncIterator === undefined) {
      createReadableStreamAsyncIterator = require('./internal/streams/async_iterator');
    }

    return createReadableStreamAsyncIterator(this);
  };
}

Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.highWaterMark;
  }
});
Object.defineProperty(Readable.prototype, 'readableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState && this._readableState.buffer;
  }
});
Object.defineProperty(Readable.prototype, 'readableFlowing', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.flowing;
  },
  set: function set(state) {
    if (this._readableState) {
      this._readableState.flowing = state;
    }
  }
}); // exposed for testing purposes only.

Readable._fromList = fromList;
Object.defineProperty(Readable.prototype, 'readableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.length;
  }
}); // Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.

function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;
  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = state.buffer.consume(n, state.decoder);
  }
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;
  debug('endReadable', state.endEmitted);

  if (!state.endEmitted) {
    state.ended = true;
    process.nextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  debug('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.

  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');

    if (state.autoDestroy) {
      // In case of duplex streams we need a way to detect
      // if the writable side is ready for autoDestroy as well
      var wState = stream._writableState;

      if (!wState || wState.autoDestroy && wState.finished) {
        stream.destroy();
      }
    }
  }
}

if (typeof Symbol === 'function') {
  Readable.from = function (iterable, opts) {
    if (from === undefined) {
      from = require('./internal/streams/from');
    }

    return from(Readable, iterable, opts);
  };
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }

  return -1;
}
}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../errors":48,"./_stream_duplex":49,"./internal/streams/async_iterator":54,"./internal/streams/buffer_list":55,"./internal/streams/destroy":56,"./internal/streams/from":58,"./internal/streams/state":60,"./internal/streams/stream":61,"_process":153,"buffer":65,"events":102,"inherits":134,"string_decoder/":189,"util":20}],52:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.
'use strict';

module.exports = Transform;

var _require$codes = require('../errors').codes,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
    ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING,
    ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;

var Duplex = require('./_stream_duplex');

require('inherits')(Transform, Duplex);

function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;
  var cb = ts.writecb;

  if (cb === null) {
    return this.emit('error', new ERR_MULTIPLE_CALLBACK());
  }

  ts.writechunk = null;
  ts.writecb = null;
  if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);
  cb(er);
  var rs = this._readableState;
  rs.reading = false;

  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);
  Duplex.call(this, options);
  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  }; // start out asking for a readable event once data is transformed.

  this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.

  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;
    if (typeof options.flush === 'function') this._flush = options.flush;
  } // When the writable side finishes, then flush out anything remaining.


  this.on('prefinish', prefinish);
}

function prefinish() {
  var _this = this;

  if (typeof this._flush === 'function' && !this._readableState.destroyed) {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
}; // This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.


Transform.prototype._transform = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;

  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
}; // Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.


Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && !ts.transforming) {
    ts.transforming = true;

    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);
  if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data); // TODO(BridgeAR): Write a test for these two error cases
  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided

  if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
  if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
  return stream.push(null);
}
},{"../errors":48,"./_stream_duplex":49,"inherits":134}],53:[function(require,module,exports){
(function (process,global){(function (){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.
'use strict';

module.exports = Writable;
/* <replacement> */

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
} // It seems a linked list but it is not
// there will be only 2 of these for each stream


function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;

  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/


var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;
/*<replacement>*/

var internalUtil = {
  deprecate: require('util-deprecate')
};
/*</replacement>*/

/*<replacement>*/

var Stream = require('./internal/streams/stream');
/*</replacement>*/


var Buffer = require('buffer').Buffer;

var OurUint8Array = global.Uint8Array || function () {};

function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}

function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

var destroyImpl = require('./internal/streams/destroy');

var _require = require('./internal/streams/state'),
    getHighWaterMark = _require.getHighWaterMark;

var _require$codes = require('../errors').codes,
    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
    ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,
    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,
    ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,
    ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,
    ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;

var errorOrDestroy = destroyImpl.errorOrDestroy;

require('inherits')(Writable, Stream);

function nop() {}

function WritableState(options, stream, isDuplex) {
  Duplex = Duplex || require('./_stream_duplex');
  options = options || {}; // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream,
  // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.

  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream
  // contains buffers or objects.

  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()

  this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called

  this.finalCalled = false; // drain event flag.

  this.needDrain = false; // at the start of calling end()

  this.ending = false; // when end() has been called, and returned

  this.ended = false; // when 'finish' is emitted

  this.finished = false; // has it been destroyed

  this.destroyed = false; // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.

  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.

  this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.

  this.length = 0; // a flag to see when we're in the middle of a write.

  this.writing = false; // when true all writes will be buffered until .uncork() call

  this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.

  this.sync = true; // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.

  this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)

  this.onwrite = function (er) {
    onwrite(stream, er);
  }; // the callback that the user supplies to write(chunk,encoding,cb)


  this.writecb = null; // the amount that is being written when _write is called.

  this.writelen = 0;
  this.bufferedRequest = null;
  this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted

  this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams

  this.prefinished = false; // True if the error was already emitted and should not be thrown again

  this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.

  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')

  this.autoDestroy = !!options.autoDestroy; // count buffered requests

  this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two

  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];

  while (current) {
    out.push(current);
    current = current.next;
  }

  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function writableStateBufferGetter() {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})(); // Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.


var realHasInstance;

if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function value(object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;
      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function realHasInstance(object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || require('./_stream_duplex'); // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.
  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  // Checking for a Stream.Duplex instance is faster here instead of inside
  // the WritableState constructor, at least with V8 6.5

  var isDuplex = this instanceof Duplex;
  if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
  this._writableState = new WritableState(options, this, isDuplex); // legacy.

  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;
    if (typeof options.writev === 'function') this._writev = options.writev;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
} // Otherwise people can pipe Writable streams, which is just wrong.


Writable.prototype.pipe = function () {
  errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
};

function writeAfterEnd(stream, cb) {
  var er = new ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb

  errorOrDestroy(stream, er);
  process.nextTick(cb, er);
} // Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.


function validChunk(stream, state, chunk, cb) {
  var er;

  if (chunk === null) {
    er = new ERR_STREAM_NULL_VALUES();
  } else if (typeof chunk !== 'string' && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);
  }

  if (er) {
    errorOrDestroy(stream, er);
    process.nextTick(cb, er);
    return false;
  }

  return true;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;

  var isBuf = !state.objectMode && _isUint8Array(chunk);

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
  if (typeof cb !== 'function') cb = nop;
  if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }
  return ret;
};

Writable.prototype.cork = function () {
  this._writableState.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;
    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

Object.defineProperty(Writable.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }

  return chunk;
}

Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
}); // if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.

function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);

    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }

  var len = state.objectMode ? 1 : chunk.length;
  state.length += len;
  var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.

  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };

    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }

    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    process.nextTick(cb, er); // this can emit finish, and it will always happen
    // after error

    process.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    errorOrDestroy(stream, er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    errorOrDestroy(stream, er); // this can emit finish, but finish must
    // always follow error

    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;
  if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();
  onwriteStateUpdate(state);
  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state) || stream.destroyed;

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      process.nextTick(afterWrite, stream, state, finished, cb);
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
} // Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.


function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
} // if there's something in the buffer waiting, then process it


function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;
    var count = 0;
    var allBuffers = true;

    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }

    buffer.allBuffers = allBuffers;
    doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite

    state.pendingcb++;
    state.lastBufferedRequest = null;

    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }

    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;
      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.

      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks

  if (state.corked) {
    state.corked = 1;
    this.uncork();
  } // ignore unnecessary end() calls.


  if (!state.ending) endWritable(this, state, cb);
  return this;
};

Object.defineProperty(Writable.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
});

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}

function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;

    if (err) {
      errorOrDestroy(stream, err);
    }

    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}

function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function' && !state.destroyed) {
      state.pendingcb++;
      state.finalCalled = true;
      process.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);

  if (need) {
    prefinish(stream, state);

    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');

      if (state.autoDestroy) {
        // In case of duplex streams we need a way to detect
        // if the readable side is ready for autoDestroy as well
        var rState = stream._readableState;

        if (!rState || rState.autoDestroy && rState.endEmitted) {
          stream.destroy();
        }
      }
    }
  }

  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);

  if (cb) {
    if (state.finished) process.nextTick(cb);else stream.once('finish', cb);
  }

  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;

  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  } // reuse the free corkReq.


  state.corkedRequestsFree.next = corkReq;
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._writableState === undefined) {
      return false;
    }

    return this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._writableState.destroyed = value;
  }
});
Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;

Writable.prototype._destroy = function (err, cb) {
  cb(err);
};
}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../errors":48,"./_stream_duplex":49,"./internal/streams/destroy":56,"./internal/streams/state":60,"./internal/streams/stream":61,"_process":153,"buffer":65,"inherits":134,"util-deprecate":190}],54:[function(require,module,exports){
(function (process){(function (){
'use strict';

var _Object$setPrototypeO;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var finished = require('./end-of-stream');

var kLastResolve = Symbol('lastResolve');
var kLastReject = Symbol('lastReject');
var kError = Symbol('error');
var kEnded = Symbol('ended');
var kLastPromise = Symbol('lastPromise');
var kHandlePromise = Symbol('handlePromise');
var kStream = Symbol('stream');

function createIterResult(value, done) {
  return {
    value: value,
    done: done
  };
}

function readAndResolve(iter) {
  var resolve = iter[kLastResolve];

  if (resolve !== null) {
    var data = iter[kStream].read(); // we defer if data is null
    // we can be expecting either 'end' or
    // 'error'

    if (data !== null) {
      iter[kLastPromise] = null;
      iter[kLastResolve] = null;
      iter[kLastReject] = null;
      resolve(createIterResult(data, false));
    }
  }
}

function onReadable(iter) {
  // we wait for the next tick, because it might
  // emit an error with process.nextTick
  process.nextTick(readAndResolve, iter);
}

function wrapForNext(lastPromise, iter) {
  return function (resolve, reject) {
    lastPromise.then(function () {
      if (iter[kEnded]) {
        resolve(createIterResult(undefined, true));
        return;
      }

      iter[kHandlePromise](resolve, reject);
    }, reject);
  };
}

var AsyncIteratorPrototype = Object.getPrototypeOf(function () {});
var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
  get stream() {
    return this[kStream];
  },

  next: function next() {
    var _this = this;

    // if we have detected an error in the meanwhile
    // reject straight away
    var error = this[kError];

    if (error !== null) {
      return Promise.reject(error);
    }

    if (this[kEnded]) {
      return Promise.resolve(createIterResult(undefined, true));
    }

    if (this[kStream].destroyed) {
      // We need to defer via nextTick because if .destroy(err) is
      // called, the error will be emitted via nextTick, and
      // we cannot guarantee that there is no error lingering around
      // waiting to be emitted.
      return new Promise(function (resolve, reject) {
        process.nextTick(function () {
          if (_this[kError]) {
            reject(_this[kError]);
          } else {
            resolve(createIterResult(undefined, true));
          }
        });
      });
    } // if we have multiple next() calls
    // we will wait for the previous Promise to finish
    // this logic is optimized to support for await loops,
    // where next() is only called once at a time


    var lastPromise = this[kLastPromise];
    var promise;

    if (lastPromise) {
      promise = new Promise(wrapForNext(lastPromise, this));
    } else {
      // fast path needed to support multiple this.push()
      // without triggering the next() queue
      var data = this[kStream].read();

      if (data !== null) {
        return Promise.resolve(createIterResult(data, false));
      }

      promise = new Promise(this[kHandlePromise]);
    }

    this[kLastPromise] = promise;
    return promise;
  }
}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {
  return this;
}), _defineProperty(_Object$setPrototypeO, "return", function _return() {
  var _this2 = this;

  // destroy(err, cb) is a private API
  // we can guarantee we have that here, because we control the
  // Readable class this is attached to
  return new Promise(function (resolve, reject) {
    _this2[kStream].destroy(null, function (err) {
      if (err) {
        reject(err);
        return;
      }

      resolve(createIterResult(undefined, true));
    });
  });
}), _Object$setPrototypeO), AsyncIteratorPrototype);

var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
  var _Object$create;

  var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
    value: stream,
    writable: true
  }), _defineProperty(_Object$create, kLastResolve, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kLastReject, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kError, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kEnded, {
    value: stream._readableState.endEmitted,
    writable: true
  }), _defineProperty(_Object$create, kHandlePromise, {
    value: function value(resolve, reject) {
      var data = iterator[kStream].read();

      if (data) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        resolve(createIterResult(data, false));
      } else {
        iterator[kLastResolve] = resolve;
        iterator[kLastReject] = reject;
      }
    },
    writable: true
  }), _Object$create));
  iterator[kLastPromise] = null;
  finished(stream, function (err) {
    if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
      var reject = iterator[kLastReject]; // reject if we are waiting for data in the Promise
      // returned by next() and store the error

      if (reject !== null) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        reject(err);
      }

      iterator[kError] = err;
      return;
    }

    var resolve = iterator[kLastResolve];

    if (resolve !== null) {
      iterator[kLastPromise] = null;
      iterator[kLastResolve] = null;
      iterator[kLastReject] = null;
      resolve(createIterResult(undefined, true));
    }

    iterator[kEnded] = true;
  });
  stream.on('readable', onReadable.bind(null, iterator));
  return iterator;
};

module.exports = createReadableStreamAsyncIterator;
}).call(this)}).call(this,require('_process'))
},{"./end-of-stream":57,"_process":153}],55:[function(require,module,exports){
'use strict';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = require('buffer'),
    Buffer = _require.Buffer;

var _require2 = require('util'),
    inspect = _require2.inspect;

var custom = inspect && inspect.custom || 'inspect';

function copyBuffer(src, target, offset) {
  Buffer.prototype.copy.call(src, target, offset);
}

module.exports =
/*#__PURE__*/
function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  _createClass(BufferList, [{
    key: "push",
    value: function push(v) {
      var entry = {
        data: v,
        next: null
      };
      if (this.length > 0) this.tail.next = entry;else this.head = entry;
      this.tail = entry;
      ++this.length;
    }
  }, {
    key: "unshift",
    value: function unshift(v) {
      var entry = {
        data: v,
        next: this.head
      };
      if (this.length === 0) this.tail = entry;
      this.head = entry;
      ++this.length;
    }
  }, {
    key: "shift",
    value: function shift() {
      if (this.length === 0) return;
      var ret = this.head.data;
      if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
      --this.length;
      return ret;
    }
  }, {
    key: "clear",
    value: function clear() {
      this.head = this.tail = null;
      this.length = 0;
    }
  }, {
    key: "join",
    value: function join(s) {
      if (this.length === 0) return '';
      var p = this.head;
      var ret = '' + p.data;

      while (p = p.next) {
        ret += s + p.data;
      }

      return ret;
    }
  }, {
    key: "concat",
    value: function concat(n) {
      if (this.length === 0) return Buffer.alloc(0);
      var ret = Buffer.allocUnsafe(n >>> 0);
      var p = this.head;
      var i = 0;

      while (p) {
        copyBuffer(p.data, ret, i);
        i += p.data.length;
        p = p.next;
      }

      return ret;
    } // Consumes a specified amount of bytes or characters from the buffered data.

  }, {
    key: "consume",
    value: function consume(n, hasStrings) {
      var ret;

      if (n < this.head.data.length) {
        // `slice` is the same for buffers and strings.
        ret = this.head.data.slice(0, n);
        this.head.data = this.head.data.slice(n);
      } else if (n === this.head.data.length) {
        // First chunk is a perfect match.
        ret = this.shift();
      } else {
        // Result spans more than one buffer.
        ret = hasStrings ? this._getString(n) : this._getBuffer(n);
      }

      return ret;
    }
  }, {
    key: "first",
    value: function first() {
      return this.head.data;
    } // Consumes a specified amount of characters from the buffered data.

  }, {
    key: "_getString",
    value: function _getString(n) {
      var p = this.head;
      var c = 1;
      var ret = p.data;
      n -= ret.length;

      while (p = p.next) {
        var str = p.data;
        var nb = n > str.length ? str.length : n;
        if (nb === str.length) ret += str;else ret += str.slice(0, n);
        n -= nb;

        if (n === 0) {
          if (nb === str.length) {
            ++c;
            if (p.next) this.head = p.next;else this.head = this.tail = null;
          } else {
            this.head = p;
            p.data = str.slice(nb);
          }

          break;
        }

        ++c;
      }

      this.length -= c;
      return ret;
    } // Consumes a specified amount of bytes from the buffered data.

  }, {
    key: "_getBuffer",
    value: function _getBuffer(n) {
      var ret = Buffer.allocUnsafe(n);
      var p = this.head;
      var c = 1;
      p.data.copy(ret);
      n -= p.data.length;

      while (p = p.next) {
        var buf = p.data;
        var nb = n > buf.length ? buf.length : n;
        buf.copy(ret, ret.length - n, 0, nb);
        n -= nb;

        if (n === 0) {
          if (nb === buf.length) {
            ++c;
            if (p.next) this.head = p.next;else this.head = this.tail = null;
          } else {
            this.head = p;
            p.data = buf.slice(nb);
          }

          break;
        }

        ++c;
      }

      this.length -= c;
      return ret;
    } // Make sure the linked list only shows the minimal necessary information.

  }, {
    key: custom,
    value: function value(_, options) {
      return inspect(this, _objectSpread({}, options, {
        // Only inspect one level.
        depth: 0,
        // It should not recurse.
        customInspect: false
      }));
    }
  }]);

  return BufferList;
}();
},{"buffer":65,"util":20}],56:[function(require,module,exports){
(function (process){(function (){
'use strict'; // undocumented cb() API, needed for core, not for public API

function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err) {
      if (!this._writableState) {
        process.nextTick(emitErrorNT, this, err);
      } else if (!this._writableState.errorEmitted) {
        this._writableState.errorEmitted = true;
        process.nextTick(emitErrorNT, this, err);
      }
    }

    return this;
  } // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks


  if (this._readableState) {
    this._readableState.destroyed = true;
  } // if this is a duplex stream mark the writable part as destroyed as well


  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      if (!_this._writableState) {
        process.nextTick(emitErrorAndCloseNT, _this, err);
      } else if (!_this._writableState.errorEmitted) {
        _this._writableState.errorEmitted = true;
        process.nextTick(emitErrorAndCloseNT, _this, err);
      } else {
        process.nextTick(emitCloseNT, _this);
      }
    } else if (cb) {
      process.nextTick(emitCloseNT, _this);
      cb(err);
    } else {
      process.nextTick(emitCloseNT, _this);
    }
  });

  return this;
}

function emitErrorAndCloseNT(self, err) {
  emitErrorNT(self, err);
  emitCloseNT(self);
}

function emitCloseNT(self) {
  if (self._writableState && !self._writableState.emitClose) return;
  if (self._readableState && !self._readableState.emitClose) return;
  self.emit('close');
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finalCalled = false;
    this._writableState.prefinished = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

function errorOrDestroy(stream, err) {
  // We have tests that rely on errors being emitted
  // in the same tick, so changing this is semver major.
  // For now when you opt-in to autoDestroy we allow
  // the error to be emitted nextTick. In a future
  // semver major update we should change the default to this.
  var rState = stream._readableState;
  var wState = stream._writableState;
  if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);else stream.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy,
  errorOrDestroy: errorOrDestroy
};
}).call(this)}).call(this,require('_process'))
},{"_process":153}],57:[function(require,module,exports){
// Ported from https://github.com/mafintosh/end-of-stream with
// permission from the author, Mathias Buus (@mafintosh).
'use strict';

var ERR_STREAM_PREMATURE_CLOSE = require('../../../errors').codes.ERR_STREAM_PREMATURE_CLOSE;

function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    callback.apply(this, args);
  };
}

function noop() {}

function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}

function eos(stream, opts, callback) {
  if (typeof opts === 'function') return eos(stream, null, opts);
  if (!opts) opts = {};
  callback = once(callback || noop);
  var readable = opts.readable || opts.readable !== false && stream.readable;
  var writable = opts.writable || opts.writable !== false && stream.writable;

  var onlegacyfinish = function onlegacyfinish() {
    if (!stream.writable) onfinish();
  };

  var writableEnded = stream._writableState && stream._writableState.finished;

  var onfinish = function onfinish() {
    writable = false;
    writableEnded = true;
    if (!readable) callback.call(stream);
  };

  var readableEnded = stream._readableState && stream._readableState.endEmitted;

  var onend = function onend() {
    readable = false;
    readableEnded = true;
    if (!writable) callback.call(stream);
  };

  var onerror = function onerror(err) {
    callback.call(stream, err);
  };

  var onclose = function onclose() {
    var err;

    if (readable && !readableEnded) {
      if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }

    if (writable && !writableEnded) {
      if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }
  };

  var onrequest = function onrequest() {
    stream.req.on('finish', onfinish);
  };

  if (isRequest(stream)) {
    stream.on('complete', onfinish);
    stream.on('abort', onclose);
    if (stream.req) onrequest();else stream.on('request', onrequest);
  } else if (writable && !stream._writableState) {
    // legacy streams
    stream.on('end', onlegacyfinish);
    stream.on('close', onlegacyfinish);
  }

  stream.on('end', onend);
  stream.on('finish', onfinish);
  if (opts.error !== false) stream.on('error', onerror);
  stream.on('close', onclose);
  return function () {
    stream.removeListener('complete', onfinish);
    stream.removeListener('abort', onclose);
    stream.removeListener('request', onrequest);
    if (stream.req) stream.req.removeListener('finish', onfinish);
    stream.removeListener('end', onlegacyfinish);
    stream.removeListener('close', onlegacyfinish);
    stream.removeListener('finish', onfinish);
    stream.removeListener('end', onend);
    stream.removeListener('error', onerror);
    stream.removeListener('close', onclose);
  };
}

module.exports = eos;
},{"../../../errors":48}],58:[function(require,module,exports){
module.exports = function () {
  throw new Error('Readable.from is not available in the browser')
};

},{}],59:[function(require,module,exports){
// Ported from https://github.com/mafintosh/pump with
// permission from the author, Mathias Buus (@mafintosh).
'use strict';

var eos;

function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;
    callback.apply(void 0, arguments);
  };
}

var _require$codes = require('../../../errors').codes,
    ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,
    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;

function noop(err) {
  // Rethrow the error if it exists to avoid swallowing it
  if (err) throw err;
}

function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}

function destroyer(stream, reading, writing, callback) {
  callback = once(callback);
  var closed = false;
  stream.on('close', function () {
    closed = true;
  });
  if (eos === undefined) eos = require('./end-of-stream');
  eos(stream, {
    readable: reading,
    writable: writing
  }, function (err) {
    if (err) return callback(err);
    closed = true;
    callback();
  });
  var destroyed = false;
  return function (err) {
    if (closed) return;
    if (destroyed) return;
    destroyed = true; // request.destroy just do .end - .abort is what we want

    if (isRequest(stream)) return stream.abort();
    if (typeof stream.destroy === 'function') return stream.destroy();
    callback(err || new ERR_STREAM_DESTROYED('pipe'));
  };
}

function call(fn) {
  fn();
}

function pipe(from, to) {
  return from.pipe(to);
}

function popCallback(streams) {
  if (!streams.length) return noop;
  if (typeof streams[streams.length - 1] !== 'function') return noop;
  return streams.pop();
}

function pipeline() {
  for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
    streams[_key] = arguments[_key];
  }

  var callback = popCallback(streams);
  if (Array.isArray(streams[0])) streams = streams[0];

  if (streams.length < 2) {
    throw new ERR_MISSING_ARGS('streams');
  }

  var error;
  var destroys = streams.map(function (stream, i) {
    var reading = i < streams.length - 1;
    var writing = i > 0;
    return destroyer(stream, reading, writing, function (err) {
      if (!error) error = err;
      if (err) destroys.forEach(call);
      if (reading) return;
      destroys.forEach(call);
      callback(error);
    });
  });
  return streams.reduce(pipe);
}

module.exports = pipeline;
},{"../../../errors":48,"./end-of-stream":57}],60:[function(require,module,exports){
'use strict';

var ERR_INVALID_OPT_VALUE = require('../../../errors').codes.ERR_INVALID_OPT_VALUE;

function highWaterMarkFrom(options, isDuplex, duplexKey) {
  return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}

function getHighWaterMark(state, options, duplexKey, isDuplex) {
  var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);

  if (hwm != null) {
    if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
      var name = isDuplex ? duplexKey : 'highWaterMark';
      throw new ERR_INVALID_OPT_VALUE(name, hwm);
    }

    return Math.floor(hwm);
  } // Default value


  return state.objectMode ? 16 : 16 * 1024;
}

module.exports = {
  getHighWaterMark: getHighWaterMark
};
},{"../../../errors":48}],61:[function(require,module,exports){
module.exports = require('events').EventEmitter;

},{"events":102}],62:[function(require,module,exports){
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');
exports.finished = require('./lib/internal/streams/end-of-stream.js');
exports.pipeline = require('./lib/internal/streams/pipeline.js');

},{"./lib/_stream_duplex.js":49,"./lib/_stream_passthrough.js":50,"./lib/_stream_readable.js":51,"./lib/_stream_transform.js":52,"./lib/_stream_writable.js":53,"./lib/internal/streams/end-of-stream.js":57,"./lib/internal/streams/pipeline.js":59}],63:[function(require,module,exports){
arguments[4][20][0].apply(exports,arguments)
},{"dup":20}],64:[function(require,module,exports){
(function (Buffer){(function (){
module.exports = function xor (a, b) {
  var length = Math.min(a.length, b.length)
  var buffer = new Buffer(length)

  for (var i = 0; i < length; ++i) {
    buffer[i] = a[i] ^ b[i]
  }

  return buffer
}

}).call(this)}).call(this,require("buffer").Buffer)
},{"buffer":65}],65:[function(require,module,exports){
(function (Buffer){(function (){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function () { return 42 } }
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.buffer
  }
})

Object.defineProperty(Buffer.prototype, 'offset', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.byteOffset
  }
})

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('The value "' + length + '" is invalid for option "size"')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  buf.__proto__ = Buffer.prototype
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new TypeError(
        'The "string" argument must be of type string. Received type number'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species != null &&
    Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  })
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  if (ArrayBuffer.isView(value)) {
    return fromArrayLike(value)
  }

  if (value == null) {
    throw TypeError(
      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
      'or Array-like Object. Received type ' + (typeof value)
    )
  }

  if (isInstance(value, ArrayBuffer) ||
      (value && isInstance(value.buffer, ArrayBuffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'number') {
    throw new TypeError(
      'The "value" argument must not be of type number. Received type number'
    )
  }

  var valueOf = value.valueOf && value.valueOf()
  if (valueOf != null && valueOf !== value) {
    return Buffer.from(valueOf, encodingOrOffset, length)
  }

  var b = fromObject(value)
  if (b) return b

  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
      typeof value[Symbol.toPrimitive] === 'function') {
    return Buffer.from(
      value[Symbol.toPrimitive]('string'), encodingOrOffset, length
    )
  }

  throw new TypeError(
    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
    'or Array-like Object. Received type ' + (typeof value)
  )
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Buffer.prototype.__proto__ = Uint8Array.prototype
Buffer.__proto__ = Uint8Array

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number')
  } else if (size < 0) {
    throw new RangeError('The value "' + size + '" is invalid for option "size"')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding)
  }

  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)

  var actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds')
  }

  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  buf.__proto__ = Buffer.prototype
  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj.length !== undefined) {
    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
      return createBuffer(0)
    }
    return fromArrayLike(obj)
  }

  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
    return fromArrayLike(obj.data)
  }
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true &&
    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
}

Buffer.compare = function compare (a, b) {
  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError(
      'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
    )
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (isInstance(buf, Uint8Array)) {
      buf = Buffer.from(buf)
    }
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    throw new TypeError(
      'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
      'Received type ' + typeof string
    )
  }

  var len = string.length
  var mustMatch = (arguments.length > 2 && arguments[2] === true)
  if (!mustMatch && len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) {
          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
        }
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.toLocaleString = Buffer.prototype.toString

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
  if (this.length > max) str += ' ... '
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (isInstance(target, Uint8Array)) {
    target = Buffer.from(target, target.offset, target.byteLength)
  }
  if (!Buffer.isBuffer(target)) {
    throw new TypeError(
      'The "target" argument must be one of type Buffer or Uint8Array. ' +
      'Received type ' + (typeof target)
    )
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  var strLen = string.length

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
        : (firstByte > 0xBF) ? 2
          : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  newBuf.__proto__ = Buffer.prototype
  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end)
  } else if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (var i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, end),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if ((encoding === 'utf8' && code < 128) ||
          encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : Buffer.from(val, encoding)
    var len = bytes.length
    if (len === 0) {
      throw new TypeError('The value "' + val +
        '" is invalid for argument "value"')
    }
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance (obj, type) {
  return obj instanceof type ||
    (obj != null && obj.constructor != null && obj.constructor.name != null &&
      obj.constructor.name === type.name)
}
function numberIsNaN (obj) {
  // For IE11 support
  return obj !== obj // eslint-disable-line no-self-compare
}

}).call(this)}).call(this,require("buffer").Buffer)
},{"base64-js":17,"buffer":65,"ieee754":133}],66:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer
var Transform = require('stream').Transform
var StringDecoder = require('string_decoder').StringDecoder
var inherits = require('inherits')

function CipherBase (hashMode) {
  Transform.call(this)
  this.hashMode = typeof hashMode === 'string'
  if (this.hashMode) {
    this[hashMode] = this._finalOrDigest
  } else {
    this.final = this._finalOrDigest
  }
  if (this._final) {
    this.__final = this._final
    this._final = null
  }
  this._decoder = null
  this._encoding = null
}
inherits(CipherBase, Transform)

CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
  if (typeof data === 'string') {
    data = Buffer.from(data, inputEnc)
  }

  var outData = this._update(data)
  if (this.hashMode) return this

  if (outputEnc) {
    outData = this._toString(outData, outputEnc)
  }

  return outData
}

CipherBase.prototype.setAutoPadding = function () {}
CipherBase.prototype.getAuthTag = function () {
  throw new Error('trying to get auth tag in unsupported state')
}

CipherBase.prototype.setAuthTag = function () {
  throw new Error('trying to set auth tag in unsupported state')
}

CipherBase.prototype.setAAD = function () {
  throw new Error('trying to set aad in unsupported state')
}

CipherBase.prototype._transform = function (data, _, next) {
  var err
  try {
    if (this.hashMode) {
      this._update(data)
    } else {
      this.push(this._update(data))
    }
  } catch (e) {
    err = e
  } finally {
    next(err)
  }
}
CipherBase.prototype._flush = function (done) {
  var err
  try {
    this.push(this.__final())
  } catch (e) {
    err = e
  }

  done(err)
}
CipherBase.prototype._finalOrDigest = function (outputEnc) {
  var outData = this.__final() || Buffer.alloc(0)
  if (outputEnc) {
    outData = this._toString(outData, outputEnc, true)
  }
  return outData
}

CipherBase.prototype._toString = function (value, enc, fin) {
  if (!this._decoder) {
    this._decoder = new StringDecoder(enc)
    this._encoding = enc
  }

  if (this._encoding !== enc) throw new Error('can\'t switch encodings')

  var out = this._decoder.write(value)
  if (fin) {
    out += this._decoder.end()
  }

  return out
}

module.exports = CipherBase

},{"inherits":134,"safe-buffer":164,"stream":174,"string_decoder":189}],67:[function(require,module,exports){
(function (Buffer){(function (){
var elliptic = require('elliptic')
var BN = require('bn.js')

module.exports = function createECDH (curve) {
  return new ECDH(curve)
}

var aliases = {
  secp256k1: {
    name: 'secp256k1',
    byteLength: 32
  },
  secp224r1: {
    name: 'p224',
    byteLength: 28
  },
  prime256v1: {
    name: 'p256',
    byteLength: 32
  },
  prime192v1: {
    name: 'p192',
    byteLength: 24
  },
  ed25519: {
    name: 'ed25519',
    byteLength: 32
  },
  secp384r1: {
    name: 'p384',
    byteLength: 48
  },
  secp521r1: {
    name: 'p521',
    byteLength: 66
  }
}

aliases.p224 = aliases.secp224r1
aliases.p256 = aliases.secp256r1 = aliases.prime256v1
aliases.p192 = aliases.secp192r1 = aliases.prime192v1
aliases.p384 = aliases.secp384r1
aliases.p521 = aliases.secp521r1

function ECDH (curve) {
  this.curveType = aliases[curve]
  if (!this.curveType) {
    this.curveType = {
      name: curve
    }
  }
  this.curve = new elliptic.ec(this.curveType.name) // eslint-disable-line new-cap
  this.keys = void 0
}

ECDH.prototype.generateKeys = function (enc, format) {
  this.keys = this.curve.genKeyPair()
  return this.getPublicKey(enc, format)
}

ECDH.prototype.computeSecret = function (other, inenc, enc) {
  inenc = inenc || 'utf8'
  if (!Buffer.isBuffer(other)) {
    other = new Buffer(other, inenc)
  }
  var otherPub = this.curve.keyFromPublic(other).getPublic()
  var out = otherPub.mul(this.keys.getPrivate()).getX()
  return formatReturnValue(out, enc, this.curveType.byteLength)
}

ECDH.prototype.getPublicKey = function (enc, format) {
  var key = this.keys.getPublic(format === 'compressed', true)
  if (format === 'hybrid') {
    if (key[key.length - 1] % 2) {
      key[0] = 7
    } else {
      key[0] = 6
    }
  }
  return formatReturnValue(key, enc)
}

ECDH.prototype.getPrivateKey = function (enc) {
  return formatReturnValue(this.keys.getPrivate(), enc)
}

ECDH.prototype.setPublicKey = function (pub, enc) {
  enc = enc || 'utf8'
  if (!Buffer.isBuffer(pub)) {
    pub = new Buffer(pub, enc)
  }
  this.keys._importPublic(pub)
  return this
}

ECDH.prototype.setPrivateKey = function (priv, enc) {
  enc = enc || 'utf8'
  if (!Buffer.isBuffer(priv)) {
    priv = new Buffer(priv, enc)
  }

  var _priv = new BN(priv)
  _priv = _priv.toString(16)
  this.keys = this.curve.genKeyPair()
  this.keys._importPrivate(_priv)
  return this
}

function formatReturnValue (bn, enc, len) {
  if (!Array.isArray(bn)) {
    bn = bn.toArray()
  }
  var buf = new Buffer(bn)
  if (len && buf.length < len) {
    var zeros = new Buffer(len - buf.length)
    zeros.fill(0)
    buf = Buffer.concat([zeros, buf])
  }
  if (!enc) {
    return buf
  } else {
    return buf.toString(enc)
  }
}

}).call(this)}).call(this,require("buffer").Buffer)
},{"bn.js":68,"buffer":65,"elliptic":85}],68:[function(require,module,exports){
arguments[4][16][0].apply(exports,arguments)
},{"buffer":20,"dup":16}],69:[function(require,module,exports){
'use strict'
var inherits = require('inherits')
var MD5 = require('md5.js')
var RIPEMD160 = require('ripemd160')
var sha = require('sha.js')
var Base = require('cipher-base')

function Hash (hash) {
  Base.call(this, 'digest')

  this._hash = hash
}

inherits(Hash, Base)

Hash.prototype._update = function (data) {
  this._hash.update(data)
}

Hash.prototype._final = function () {
  return this._hash.digest()
}

module.exports = function createHash (alg) {
  alg = alg.toLowerCase()
  if (alg === 'md5') return new MD5()
  if (alg === 'rmd160' || alg === 'ripemd160') return new RIPEMD160()

  return new Hash(sha(alg))
}

},{"cipher-base":66,"inherits":134,"md5.js":136,"ripemd160":163,"sha.js":167}],70:[function(require,module,exports){
var MD5 = require('md5.js')

module.exports = function (buffer) {
  return new MD5().update(buffer).digest()
}

},{"md5.js":136}],71:[function(require,module,exports){
'use strict'
var inherits = require('inherits')
var Legacy = require('./legacy')
var Base = require('cipher-base')
var Buffer = require('safe-buffer').Buffer
var md5 = require('create-hash/md5')
var RIPEMD160 = require('ripemd160')

var sha = require('sha.js')

var ZEROS = Buffer.alloc(128)

function Hmac (alg, key) {
  Base.call(this, 'digest')
  if (typeof key === 'string') {
    key = Buffer.from(key)
  }

  var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64

  this._alg = alg
  this._key = key
  if (key.length > blocksize) {
    var hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg)
    key = hash.update(key).digest()
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = this._ipad = Buffer.allocUnsafe(blocksize)
  var opad = this._opad = Buffer.allocUnsafe(blocksize)

  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }
  this._hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg)
  this._hash.update(ipad)
}

inherits(Hmac, Base)

Hmac.prototype._update = function (data) {
  this._hash.update(data)
}

Hmac.prototype._final = function () {
  var h = this._hash.digest()
  var hash = this._alg === 'rmd160' ? new RIPEMD160() : sha(this._alg)
  return hash.update(this._opad).update(h).digest()
}

module.exports = function createHmac (alg, key) {
  alg = alg.toLowerCase()
  if (alg === 'rmd160' || alg === 'ripemd160') {
    return new Hmac('rmd160', key)
  }
  if (alg === 'md5') {
    return new Legacy(md5, key)
  }
  return new Hmac(alg, key)
}

},{"./legacy":72,"cipher-base":66,"create-hash/md5":70,"inherits":134,"ripemd160":163,"safe-buffer":164,"sha.js":167}],72:[function(require,module,exports){
'use strict'
var inherits = require('inherits')
var Buffer = require('safe-buffer').Buffer

var Base = require('cipher-base')

var ZEROS = Buffer.alloc(128)
var blocksize = 64

function Hmac (alg, key) {
  Base.call(this, 'digest')
  if (typeof key === 'string') {
    key = Buffer.from(key)
  }

  this._alg = alg
  this._key = key

  if (key.length > blocksize) {
    key = alg(key)
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = this._ipad = Buffer.allocUnsafe(blocksize)
  var opad = this._opad = Buffer.allocUnsafe(blocksize)

  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }

  this._hash = [ipad]
}

inherits(Hmac, Base)

Hmac.prototype._update = function (data) {
  this._hash.push(data)
}

Hmac.prototype._final = function () {
  var h = this._alg(Buffer.concat(this._hash))
  return this._alg(Buffer.concat([this._opad, h]))
}
module.exports = Hmac

},{"cipher-base":66,"inherits":134,"safe-buffer":164}],73:[function(require,module,exports){
'use strict'

exports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = require('randombytes')
exports.createHash = exports.Hash = require('create-hash')
exports.createHmac = exports.Hmac = require('create-hmac')

var algos = require('browserify-sign/algos')
var algoKeys = Object.keys(algos)
var hashes = ['sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'md5', 'rmd160'].concat(algoKeys)
exports.getHashes = function () {
  return hashes
}

var p = require('pbkdf2')
exports.pbkdf2 = p.pbkdf2
exports.pbkdf2Sync = p.pbkdf2Sync

var aes = require('browserify-cipher')

exports.Cipher = aes.Cipher
exports.createCipher = aes.createCipher
exports.Cipheriv = aes.Cipheriv
exports.createCipheriv = aes.createCipheriv
exports.Decipher = aes.Decipher
exports.createDecipher = aes.createDecipher
exports.Decipheriv = aes.Decipheriv
exports.createDecipheriv = aes.createDecipheriv
exports.getCiphers = aes.getCiphers
exports.listCiphers = aes.listCiphers

var dh = require('diffie-hellman')

exports.DiffieHellmanGroup = dh.DiffieHellmanGroup
exports.createDiffieHellmanGroup = dh.createDiffieHellmanGroup
exports.getDiffieHellman = dh.getDiffieHellman
exports.createDiffieHellman = dh.createDiffieHellman
exports.DiffieHellman = dh.DiffieHellman

var sign = require('browserify-sign')

exports.createSign = sign.createSign
exports.Sign = sign.Sign
exports.createVerify = sign.createVerify
exports.Verify = sign.Verify

exports.createECDH = require('create-ecdh')

var publicEncrypt = require('public-encrypt')

exports.publicEncrypt = publicEncrypt.publicEncrypt
exports.privateEncrypt = publicEncrypt.privateEncrypt
exports.publicDecrypt = publicEncrypt.publicDecrypt
exports.privateDecrypt = publicEncrypt.privateDecrypt

// the least I can do is make error messages for the rest of the node.js/crypto api.
// ;[
//   'createCredentials'
// ].forEach(function (name) {
//   exports[name] = function () {
//     throw new Error([
//       'sorry, ' + name + ' is not implemented yet',
//       'we accept pull requests',
//       'https://github.com/crypto-browserify/crypto-browserify'
//     ].join('\n'))
//   }
// })

var rf = require('randomfill')

exports.randomFill = rf.randomFill
exports.randomFillSync = rf.randomFillSync

exports.createCredentials = function () {
  throw new Error([
    'sorry, createCredentials is not implemented yet',
    'we accept pull requests',
    'https://github.com/crypto-browserify/crypto-browserify'
  ].join('\n'))
}

exports.constants = {
  'DH_CHECK_P_NOT_SAFE_PRIME': 2,
  'DH_CHECK_P_NOT_PRIME': 1,
  'DH_UNABLE_TO_CHECK_GENERATOR': 4,
  'DH_NOT_SUITABLE_GENERATOR': 8,
  'NPN_ENABLED': 1,
  'ALPN_ENABLED': 1,
  'RSA_PKCS1_PADDING': 1,
  'RSA_SSLV23_PADDING': 2,
  'RSA_NO_PADDING': 3,
  'RSA_PKCS1_OAEP_PADDING': 4,
  'RSA_X931_PADDING': 5,
  'RSA_PKCS1_PSS_PADDING': 6,
  'POINT_CONVERSION_COMPRESSED': 2,
  'POINT_CONVERSION_UNCOMPRESSED': 4,
  'POINT_CONVERSION_HYBRID': 6
}

},{"browserify-cipher":38,"browserify-sign":45,"browserify-sign/algos":42,"create-ecdh":67,"create-hash":69,"create-hmac":71,"diffie-hellman":80,"pbkdf2":147,"public-encrypt":154,"randombytes":161,"randomfill":162}],74:[function(require,module,exports){
'use strict';

exports.utils = require('./des/utils');
exports.Cipher = require('./des/cipher');
exports.DES = require('./des/des');
exports.CBC = require('./des/cbc');
exports.EDE = require('./des/ede');

},{"./des/cbc":75,"./des/cipher":76,"./des/des":77,"./des/ede":78,"./des/utils":79}],75:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

var proto = {};

function CBCState(iv) {
  assert.equal(iv.length, 8, 'Invalid IV length');

  this.iv = new Array(8);
  for (var i = 0; i < this.iv.length; i++)
    this.iv[i] = iv[i];
}

function instantiate(Base) {
  function CBC(options) {
    Base.call(this, options);
    this._cbcInit();
  }
  inherits(CBC, Base);

  var keys = Object.keys(proto);
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    CBC.prototype[key] = proto[key];
  }

  CBC.create = function create(options) {
    return new CBC(options);
  };

  return CBC;
}

exports.instantiate = instantiate;

proto._cbcInit = function _cbcInit() {
  var state = new CBCState(this.options.iv);
  this._cbcState = state;
};

proto._update = function _update(inp, inOff, out, outOff) {
  var state = this._cbcState;
  var superProto = this.constructor.super_.prototype;

  var iv = state.iv;
  if (this.type === 'encrypt') {
    for (var i = 0; i < this.blockSize; i++)
      iv[i] ^= inp[inOff + i];

    superProto._update.call(this, iv, 0, out, outOff);

    for (var i = 0; i < this.blockSize; i++)
      iv[i] = out[outOff + i];
  } else {
    superProto._update.call(this, inp, inOff, out, outOff);

    for (var i = 0; i < this.blockSize; i++)
      out[outOff + i] ^= iv[i];

    for (var i = 0; i < this.blockSize; i++)
      iv[i] = inp[inOff + i];
  }
};

},{"inherits":134,"minimalistic-assert":139}],76:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');

function Cipher(options) {
  this.options = options;

  this.type = this.options.type;
  this.blockSize = 8;
  this._init();

  this.buffer = new Array(this.blockSize);
  this.bufferOff = 0;
}
module.exports = Cipher;

Cipher.prototype._init = function _init() {
  // Might be overrided
};

Cipher.prototype.update = function update(data) {
  if (data.length === 0)
    return [];

  if (this.type === 'decrypt')
    return this._updateDecrypt(data);
  else
    return this._updateEncrypt(data);
};

Cipher.prototype._buffer = function _buffer(data, off) {
  // Append data to buffer
  var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);
  for (var i = 0; i < min; i++)
    this.buffer[this.bufferOff + i] = data[off + i];
  this.bufferOff += min;

  // Shift next
  return min;
};

Cipher.prototype._flushBuffer = function _flushBuffer(out, off) {
  this._update(this.buffer, 0, out, off);
  this.bufferOff = 0;
  return this.blockSize;
};

Cipher.prototype._updateEncrypt = function _updateEncrypt(data) {
  var inputOff = 0;
  var outputOff = 0;

  var count = ((this.bufferOff + data.length) / this.blockSize) | 0;
  var out = new Array(count * this.blockSize);

  if (this.bufferOff !== 0) {
    inputOff += this._buffer(data, inputOff);

    if (this.bufferOff === this.buffer.length)
      outputOff += this._flushBuffer(out, outputOff);
  }

  // Write blocks
  var max = data.length - ((data.length - inputOff) % this.blockSize);
  for (; inputOff < max; inputOff += this.blockSize) {
    this._update(data, inputOff, out, outputOff);
    outputOff += this.blockSize;
  }

  // Queue rest
  for (; inputOff < data.length; inputOff++, this.bufferOff++)
    this.buffer[this.bufferOff] = data[inputOff];

  return out;
};

Cipher.prototype._updateDecrypt = function _updateDecrypt(data) {
  var inputOff = 0;
  var outputOff = 0;

  var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;
  var out = new Array(count * this.blockSize);

  // TODO(indutny): optimize it, this is far from optimal
  for (; count > 0; count--) {
    inputOff += this._buffer(data, inputOff);
    outputOff += this._flushBuffer(out, outputOff);
  }

  // Buffer rest of the input
  inputOff += this._buffer(data, inputOff);

  return out;
};

Cipher.prototype.final = function final(buffer) {
  var first;
  if (buffer)
    first = this.update(buffer);

  var last;
  if (this.type === 'encrypt')
    last = this._finalEncrypt();
  else
    last = this._finalDecrypt();

  if (first)
    return first.concat(last);
  else
    return last;
};

Cipher.prototype._pad = function _pad(buffer, off) {
  if (off === 0)
    return false;

  while (off < buffer.length)
    buffer[off++] = 0;

  return true;
};

Cipher.prototype._finalEncrypt = function _finalEncrypt() {
  if (!this._pad(this.buffer, this.bufferOff))
    return [];

  var out = new Array(this.blockSize);
  this._update(this.buffer, 0, out, 0);
  return out;
};

Cipher.prototype._unpad = function _unpad(buffer) {
  return buffer;
};

Cipher.prototype._finalDecrypt = function _finalDecrypt() {
  assert.equal(this.bufferOff, this.blockSize, 'Not enough data to decrypt');
  var out = new Array(this.blockSize);
  this._flushBuffer(out, 0);

  return this._unpad(out);
};

},{"minimalistic-assert":139}],77:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

var utils = require('./utils');
var Cipher = require('./cipher');

function DESState() {
  this.tmp = new Array(2);
  this.keys = null;
}

function DES(options) {
  Cipher.call(this, options);

  var state = new DESState();
  this._desState = state;

  this.deriveKeys(state, options.key);
}
inherits(DES, Cipher);
module.exports = DES;

DES.create = function create(options) {
  return new DES(options);
};

var shiftTable = [
  1, 1, 2, 2, 2, 2, 2, 2,
  1, 2, 2, 2, 2, 2, 2, 1
];

DES.prototype.deriveKeys = function deriveKeys(state, key) {
  state.keys = new Array(16 * 2);

  assert.equal(key.length, this.blockSize, 'Invalid key length');

  var kL = utils.readUInt32BE(key, 0);
  var kR = utils.readUInt32BE(key, 4);

  utils.pc1(kL, kR, state.tmp, 0);
  kL = state.tmp[0];
  kR = state.tmp[1];
  for (var i = 0; i < state.keys.length; i += 2) {
    var shift = shiftTable[i >>> 1];
    kL = utils.r28shl(kL, shift);
    kR = utils.r28shl(kR, shift);
    utils.pc2(kL, kR, state.keys, i);
  }
};

DES.prototype._update = function _update(inp, inOff, out, outOff) {
  var state = this._desState;

  var l = utils.readUInt32BE(inp, inOff);
  var r = utils.readUInt32BE(inp, inOff + 4);

  // Initial Permutation
  utils.ip(l, r, state.tmp, 0);
  l = state.tmp[0];
  r = state.tmp[1];

  if (this.type === 'encrypt')
    this._encrypt(state, l, r, state.tmp, 0);
  else
    this._decrypt(state, l, r, state.tmp, 0);

  l = state.tmp[0];
  r = state.tmp[1];

  utils.writeUInt32BE(out, l, outOff);
  utils.writeUInt32BE(out, r, outOff + 4);
};

DES.prototype._pad = function _pad(buffer, off) {
  var value = buffer.length - off;
  for (var i = off; i < buffer.length; i++)
    buffer[i] = value;

  return true;
};

DES.prototype._unpad = function _unpad(buffer) {
  var pad = buffer[buffer.length - 1];
  for (var i = buffer.length - pad; i < buffer.length; i++)
    assert.equal(buffer[i], pad);

  return buffer.slice(0, buffer.length - pad);
};

DES.prototype._encrypt = function _encrypt(state, lStart, rStart, out, off) {
  var l = lStart;
  var r = rStart;

  // Apply f() x16 times
  for (var i = 0; i < state.keys.length; i += 2) {
    var keyL = state.keys[i];
    var keyR = state.keys[i + 1];

    // f(r, k)
    utils.expand(r, state.tmp, 0);

    keyL ^= state.tmp[0];
    keyR ^= state.tmp[1];
    var s = utils.substitute(keyL, keyR);
    var f = utils.permute(s);

    var t = r;
    r = (l ^ f) >>> 0;
    l = t;
  }

  // Reverse Initial Permutation
  utils.rip(r, l, out, off);
};

DES.prototype._decrypt = function _decrypt(state, lStart, rStart, out, off) {
  var l = rStart;
  var r = lStart;

  // Apply f() x16 times
  for (var i = state.keys.length - 2; i >= 0; i -= 2) {
    var keyL = state.keys[i];
    var keyR = state.keys[i + 1];

    // f(r, k)
    utils.expand(l, state.tmp, 0);

    keyL ^= state.tmp[0];
    keyR ^= state.tmp[1];
    var s = utils.substitute(keyL, keyR);
    var f = utils.permute(s);

    var t = l;
    l = (r ^ f) >>> 0;
    r = t;
  }

  // Reverse Initial Permutation
  utils.rip(l, r, out, off);
};

},{"./cipher":76,"./utils":79,"inherits":134,"minimalistic-assert":139}],78:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

var Cipher = require('./cipher');
var DES = require('./des');

function EDEState(type, key) {
  assert.equal(key.length, 24, 'Invalid key length');

  var k1 = key.slice(0, 8);
  var k2 = key.slice(8, 16);
  var k3 = key.slice(16, 24);

  if (type === 'encrypt') {
    this.ciphers = [
      DES.create({ type: 'encrypt', key: k1 }),
      DES.create({ type: 'decrypt', key: k2 }),
      DES.create({ type: 'encrypt', key: k3 })
    ];
  } else {
    this.ciphers = [
      DES.create({ type: 'decrypt', key: k3 }),
      DES.create({ type: 'encrypt', key: k2 }),
      DES.create({ type: 'decrypt', key: k1 })
    ];
  }
}

function EDE(options) {
  Cipher.call(this, options);

  var state = new EDEState(this.type, this.options.key);
  this._edeState = state;
}
inherits(EDE, Cipher);

module.exports = EDE;

EDE.create = function create(options) {
  return new EDE(options);
};

EDE.prototype._update = function _update(inp, inOff, out, outOff) {
  var state = this._edeState;

  state.ciphers[0]._update(inp, inOff, out, outOff);
  state.ciphers[1]._update(out, outOff, out, outOff);
  state.ciphers[2]._update(out, outOff, out, outOff);
};

EDE.prototype._pad = DES.prototype._pad;
EDE.prototype._unpad = DES.prototype._unpad;

},{"./cipher":76,"./des":77,"inherits":134,"minimalistic-assert":139}],79:[function(require,module,exports){
'use strict';

exports.readUInt32BE = function readUInt32BE(bytes, off) {
  var res =  (bytes[0 + off] << 24) |
             (bytes[1 + off] << 16) |
             (bytes[2 + off] << 8) |
             bytes[3 + off];
  return res >>> 0;
};

exports.writeUInt32BE = function writeUInt32BE(bytes, value, off) {
  bytes[0 + off] = value >>> 24;
  bytes[1 + off] = (value >>> 16) & 0xff;
  bytes[2 + off] = (value >>> 8) & 0xff;
  bytes[3 + off] = value & 0xff;
};

exports.ip = function ip(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  for (var i = 6; i >= 0; i -= 2) {
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inR >>> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inL >>> (j + i)) & 1;
    }
  }

  for (var i = 6; i >= 0; i -= 2) {
    for (var j = 1; j <= 25; j += 8) {
      outR <<= 1;
      outR |= (inR >>> (j + i)) & 1;
    }
    for (var j = 1; j <= 25; j += 8) {
      outR <<= 1;
      outR |= (inL >>> (j + i)) & 1;
    }
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.rip = function rip(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  for (var i = 0; i < 4; i++) {
    for (var j = 24; j >= 0; j -= 8) {
      outL <<= 1;
      outL |= (inR >>> (j + i)) & 1;
      outL <<= 1;
      outL |= (inL >>> (j + i)) & 1;
    }
  }
  for (var i = 4; i < 8; i++) {
    for (var j = 24; j >= 0; j -= 8) {
      outR <<= 1;
      outR |= (inR >>> (j + i)) & 1;
      outR <<= 1;
      outR |= (inL >>> (j + i)) & 1;
    }
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.pc1 = function pc1(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  // 7, 15, 23, 31, 39, 47, 55, 63
  // 6, 14, 22, 30, 39, 47, 55, 63
  // 5, 13, 21, 29, 39, 47, 55, 63
  // 4, 12, 20, 28
  for (var i = 7; i >= 5; i--) {
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inR >> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inL >> (j + i)) & 1;
    }
  }
  for (var j = 0; j <= 24; j += 8) {
    outL <<= 1;
    outL |= (inR >> (j + i)) & 1;
  }

  // 1, 9, 17, 25, 33, 41, 49, 57
  // 2, 10, 18, 26, 34, 42, 50, 58
  // 3, 11, 19, 27, 35, 43, 51, 59
  // 36, 44, 52, 60
  for (var i = 1; i <= 3; i++) {
    for (var j = 0; j <= 24; j += 8) {
      outR <<= 1;
      outR |= (inR >> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outR <<= 1;
      outR |= (inL >> (j + i)) & 1;
    }
  }
  for (var j = 0; j <= 24; j += 8) {
    outR <<= 1;
    outR |= (inL >> (j + i)) & 1;
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.r28shl = function r28shl(num, shift) {
  return ((num << shift) & 0xfffffff) | (num >>> (28 - shift));
};

var pc2table = [
  // inL => outL
  14, 11, 17, 4, 27, 23, 25, 0,
  13, 22, 7, 18, 5, 9, 16, 24,
  2, 20, 12, 21, 1, 8, 15, 26,

  // inR => outR
  15, 4, 25, 19, 9, 1, 26, 16,
  5, 11, 23, 8, 12, 7, 17, 0,
  22, 3, 10, 14, 6, 20, 27, 24
];

exports.pc2 = function pc2(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  var len = pc2table.length >>> 1;
  for (var i = 0; i < len; i++) {
    outL <<= 1;
    outL |= (inL >>> pc2table[i]) & 0x1;
  }
  for (var i = len; i < pc2table.length; i++) {
    outR <<= 1;
    outR |= (inR >>> pc2table[i]) & 0x1;
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.expand = function expand(r, out, off) {
  var outL = 0;
  var outR = 0;

  outL = ((r & 1) << 5) | (r >>> 27);
  for (var i = 23; i >= 15; i -= 4) {
    outL <<= 6;
    outL |= (r >>> i) & 0x3f;
  }
  for (var i = 11; i >= 3; i -= 4) {
    outR |= (r >>> i) & 0x3f;
    outR <<= 6;
  }
  outR |= ((r & 0x1f) << 1) | (r >>> 31);

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

var sTable = [
  14, 0, 4, 15, 13, 7, 1, 4, 2, 14, 15, 2, 11, 13, 8, 1,
  3, 10, 10, 6, 6, 12, 12, 11, 5, 9, 9, 5, 0, 3, 7, 8,
  4, 15, 1, 12, 14, 8, 8, 2, 13, 4, 6, 9, 2, 1, 11, 7,
  15, 5, 12, 11, 9, 3, 7, 14, 3, 10, 10, 0, 5, 6, 0, 13,

  15, 3, 1, 13, 8, 4, 14, 7, 6, 15, 11, 2, 3, 8, 4, 14,
  9, 12, 7, 0, 2, 1, 13, 10, 12, 6, 0, 9, 5, 11, 10, 5,
  0, 13, 14, 8, 7, 10, 11, 1, 10, 3, 4, 15, 13, 4, 1, 2,
  5, 11, 8, 6, 12, 7, 6, 12, 9, 0, 3, 5, 2, 14, 15, 9,

  10, 13, 0, 7, 9, 0, 14, 9, 6, 3, 3, 4, 15, 6, 5, 10,
  1, 2, 13, 8, 12, 5, 7, 14, 11, 12, 4, 11, 2, 15, 8, 1,
  13, 1, 6, 10, 4, 13, 9, 0, 8, 6, 15, 9, 3, 8, 0, 7,
  11, 4, 1, 15, 2, 14, 12, 3, 5, 11, 10, 5, 14, 2, 7, 12,

  7, 13, 13, 8, 14, 11, 3, 5, 0, 6, 6, 15, 9, 0, 10, 3,
  1, 4, 2, 7, 8, 2, 5, 12, 11, 1, 12, 10, 4, 14, 15, 9,
  10, 3, 6, 15, 9, 0, 0, 6, 12, 10, 11, 1, 7, 13, 13, 8,
  15, 9, 1, 4, 3, 5, 14, 11, 5, 12, 2, 7, 8, 2, 4, 14,

  2, 14, 12, 11, 4, 2, 1, 12, 7, 4, 10, 7, 11, 13, 6, 1,
  8, 5, 5, 0, 3, 15, 15, 10, 13, 3, 0, 9, 14, 8, 9, 6,
  4, 11, 2, 8, 1, 12, 11, 7, 10, 1, 13, 14, 7, 2, 8, 13,
  15, 6, 9, 15, 12, 0, 5, 9, 6, 10, 3, 4, 0, 5, 14, 3,

  12, 10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12, 6, 9, 8, 5,
  0, 6, 13, 1, 3, 13, 4, 14, 14, 0, 7, 11, 5, 3, 11, 8,
  9, 4, 14, 3, 15, 2, 5, 12, 2, 9, 8, 5, 12, 15, 3, 10,
  7, 11, 0, 14, 4, 1, 10, 7, 1, 6, 13, 0, 11, 8, 6, 13,

  4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10,
  3, 14, 12, 3, 9, 5, 7, 12, 5, 2, 10, 15, 6, 8, 1, 6,
  1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4, 7, 10, 14, 7,
  10, 9, 15, 5, 6, 0, 8, 15, 0, 14, 5, 2, 9, 3, 2, 12,

  13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7, 1, 4,
  10, 12, 9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2,
  7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8, 2, 13,
  0, 15, 6, 12, 10, 9, 13, 0, 15, 3, 3, 5, 5, 6, 8, 11
];

exports.substitute = function substitute(inL, inR) {
  var out = 0;
  for (var i = 0; i < 4; i++) {
    var b = (inL >>> (18 - i * 6)) & 0x3f;
    var sb = sTable[i * 0x40 + b];

    out <<= 4;
    out |= sb;
  }
  for (var i = 0; i < 4; i++) {
    var b = (inR >>> (18 - i * 6)) & 0x3f;
    var sb = sTable[4 * 0x40 + i * 0x40 + b];

    out <<= 4;
    out |= sb;
  }
  return out >>> 0;
};

var permuteTable = [
  16, 25, 12, 11, 3, 20, 4, 15, 31, 17, 9, 6, 27, 14, 1, 22,
  30, 24, 8, 18, 0, 5, 29, 23, 13, 19, 2, 26, 10, 21, 28, 7
];

exports.permute = function permute(num) {
  var out = 0;
  for (var i = 0; i < permuteTable.length; i++) {
    out <<= 1;
    out |= (num >>> permuteTable[i]) & 0x1;
  }
  return out >>> 0;
};

exports.padSplit = function padSplit(num, size, group) {
  var str = num.toString(2);
  while (str.length < size)
    str = '0' + str;

  var out = [];
  for (var i = 0; i < size; i += group)
    out.push(str.slice(i, i + group));
  return out.join(' ');
};

},{}],80:[function(require,module,exports){
(function (Buffer){(function (){
var generatePrime = require('./lib/generatePrime')
var primes = require('./lib/primes.json')

var DH = require('./lib/dh')

function getDiffieHellman (mod) {
  var prime = new Buffer(primes[mod].prime, 'hex')
  var gen = new Buffer(primes[mod].gen, 'hex')

  return new DH(prime, gen)
}

var ENCODINGS = {
  'binary': true, 'hex': true, 'base64': true
}

function createDiffieHellman (prime, enc, generator, genc) {
  if (Buffer.isBuffer(enc) || ENCODINGS[enc] === undefined) {
    return createDiffieHellman(prime, 'binary', enc, generator)
  }

  enc = enc || 'binary'
  genc = genc || 'binary'
  generator = generator || new Buffer([2])

  if (!Buffer.isBuffer(generator)) {
    generator = new Buffer(generator, genc)
  }

  if (typeof prime === 'number') {
    return new DH(generatePrime(prime, generator), generator, true)
  }

  if (!Buffer.isBuffer(prime)) {
    prime = new Buffer(prime, enc)
  }

  return new DH(prime, generator, true)
}

exports.DiffieHellmanGroup = exports.createDiffieHellmanGroup = exports.getDiffieHellman = getDiffieHellman
exports.createDiffieHellman = exports.DiffieHellman = createDiffieHellman

}).call(this)}).call(this,require("buffer").Buffer)
},{"./lib/dh":81,"./lib/generatePrime":82,"./lib/primes.json":83,"buffer":65}],81:[function(require,module,exports){
(function (Buffer){(function (){
var BN = require('bn.js');
var MillerRabin = require('miller-rabin');
var millerRabin = new MillerRabin();
var TWENTYFOUR = new BN(24);
var ELEVEN = new BN(11);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var primes = require('./generatePrime');
var randomBytes = require('randombytes');
module.exports = DH;

function setPublicKey(pub, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(pub)) {
    pub = new Buffer(pub, enc);
  }
  this._pub = new BN(pub);
  return this;
}

function setPrivateKey(priv, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(priv)) {
    priv = new Buffer(priv, enc);
  }
  this._priv = new BN(priv);
  return this;
}

var primeCache = {};
function checkPrime(prime, generator) {
  var gen = generator.toString('hex');
  var hex = [gen, prime.toString(16)].join('_');
  if (hex in primeCache) {
    return primeCache[hex];
  }
  var error = 0;

  if (prime.isEven() ||
    !primes.simpleSieve ||
    !primes.fermatTest(prime) ||
    !millerRabin.test(prime)) {
    //not a prime so +1
    error += 1;

    if (gen === '02' || gen === '05') {
      // we'd be able to check the generator
      // it would fail so +8
      error += 8;
    } else {
      //we wouldn't be able to test the generator
      // so +4
      error += 4;
    }
    primeCache[hex] = error;
    return error;
  }
  if (!millerRabin.test(prime.shrn(1))) {
    //not a safe prime
    error += 2;
  }
  var rem;
  switch (gen) {
    case '02':
      if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) {
        // unsuidable generator
        error += 8;
      }
      break;
    case '05':
      rem = prime.mod(TEN);
      if (rem.cmp(THREE) && rem.cmp(SEVEN)) {
        // prime mod 10 needs to equal 3 or 7
        error += 8;
      }
      break;
    default:
      error += 4;
  }
  primeCache[hex] = error;
  return error;
}

function DH(prime, generator, malleable) {
  this.setGenerator(generator);
  this.__prime = new BN(prime);
  this._prime = BN.mont(this.__prime);
  this._primeLen = prime.length;
  this._pub = undefined;
  this._priv = undefined;
  this._primeCode = undefined;
  if (malleable) {
    this.setPublicKey = setPublicKey;
    this.setPrivateKey = setPrivateKey;
  } else {
    this._primeCode = 8;
  }
}
Object.defineProperty(DH.prototype, 'verifyError', {
  enumerable: true,
  get: function () {
    if (typeof this._primeCode !== 'number') {
      this._primeCode = checkPrime(this.__prime, this.__gen);
    }
    return this._primeCode;
  }
});
DH.prototype.generateKeys = function () {
  if (!this._priv) {
    this._priv = new BN(randomBytes(this._primeLen));
  }
  this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
  return this.getPublicKey();
};

DH.prototype.computeSecret = function (other) {
  other = new BN(other);
  other = other.toRed(this._prime);
  var secret = other.redPow(this._priv).fromRed();
  var out = new Buffer(secret.toArray());
  var prime = this.getPrime();
  if (out.length < prime.length) {
    var front = new Buffer(prime.length - out.length);
    front.fill(0);
    out = Buffer.concat([front, out]);
  }
  return out;
};

DH.prototype.getPublicKey = function getPublicKey(enc) {
  return formatReturnValue(this._pub, enc);
};

DH.prototype.getPrivateKey = function getPrivateKey(enc) {
  return formatReturnValue(this._priv, enc);
};

DH.prototype.getPrime = function (enc) {
  return formatReturnValue(this.__prime, enc);
};

DH.prototype.getGenerator = function (enc) {
  return formatReturnValue(this._gen, enc);
};

DH.prototype.setGenerator = function (gen, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(gen)) {
    gen = new Buffer(gen, enc);
  }
  this.__gen = gen;
  this._gen = new BN(gen);
  return this;
};

function formatReturnValue(bn, enc) {
  var buf = new Buffer(bn.toArray());
  if (!enc) {
    return buf;
  } else {
    return buf.toString(enc);
  }
}

}).call(this)}).call(this,require("buffer").Buffer)
},{"./generatePrime":82,"bn.js":84,"buffer":65,"miller-rabin":137,"randombytes":161}],82:[function(require,module,exports){
var randomBytes = require('randombytes');
module.exports = findPrime;
findPrime.simpleSieve = simpleSieve;
findPrime.fermatTest = fermatTest;
var BN = require('bn.js');
var TWENTYFOUR = new BN(24);
var MillerRabin = require('miller-rabin');
var millerRabin = new MillerRabin();
var ONE = new BN(1);
var TWO = new BN(2);
var FIVE = new BN(5);
var SIXTEEN = new BN(16);
var EIGHT = new BN(8);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var ELEVEN = new BN(11);
var FOUR = new BN(4);
var TWELVE = new BN(12);
var primes = null;

function _getPrimes() {
  if (primes !== null)
    return primes;

  var limit = 0x100000;
  var res = [];
  res[0] = 2;
  for (var i = 1, k = 3; k < limit; k += 2) {
    var sqrt = Math.ceil(Math.sqrt(k));
    for (var j = 0; j < i && res[j] <= sqrt; j++)
      if (k % res[j] === 0)
        break;

    if (i !== j && res[j] <= sqrt)
      continue;

    res[i++] = k;
  }
  primes = res;
  return res;
}

function simpleSieve(p) {
  var primes = _getPrimes();

  for (var i = 0; i < primes.length; i++)
    if (p.modn(primes[i]) === 0) {
      if (p.cmpn(primes[i]) === 0) {
        return true;
      } else {
        return false;
      }
    }

  return true;
}

function fermatTest(p) {
  var red = BN.mont(p);
  return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;
}

function findPrime(bits, gen) {
  if (bits < 16) {
    // this is what openssl does
    if (gen === 2 || gen === 5) {
      return new BN([0x8c, 0x7b]);
    } else {
      return new BN([0x8c, 0x27]);
    }
  }
  gen = new BN(gen);

  var num, n2;

  while (true) {
    num = new BN(randomBytes(Math.ceil(bits / 8)));
    while (num.bitLength() > bits) {
      num.ishrn(1);
    }
    if (num.isEven()) {
      num.iadd(ONE);
    }
    if (!num.testn(1)) {
      num.iadd(TWO);
    }
    if (!gen.cmp(TWO)) {
      while (num.mod(TWENTYFOUR).cmp(ELEVEN)) {
        num.iadd(FOUR);
      }
    } else if (!gen.cmp(FIVE)) {
      while (num.mod(TEN).cmp(THREE)) {
        num.iadd(FOUR);
      }
    }
    n2 = num.shrn(1);
    if (simpleSieve(n2) && simpleSieve(num) &&
      fermatTest(n2) && fermatTest(num) &&
      millerRabin.test(n2) && millerRabin.test(num)) {
      return num;
    }
  }

}

},{"bn.js":84,"miller-rabin":137,"randombytes":161}],83:[function(require,module,exports){
module.exports={
    "modp1": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"
    },
    "modp2": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"
    },
    "modp5": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"
    },
    "modp14": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"
    },
    "modp15": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"
    },
    "modp16": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"
    },
    "modp17": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"
    },
    "modp18": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"
    }
}
},{}],84:[function(require,module,exports){
arguments[4][16][0].apply(exports,arguments)
},{"buffer":20,"dup":16}],85:[function(require,module,exports){
'use strict';

var elliptic = exports;

elliptic.version = require('../package.json').version;
elliptic.utils = require('./elliptic/utils');
elliptic.rand = require('brorand');
elliptic.curve = require('./elliptic/curve');
elliptic.curves = require('./elliptic/curves');

// Protocols
elliptic.ec = require('./elliptic/ec');
elliptic.eddsa = require('./elliptic/eddsa');

},{"../package.json":101,"./elliptic/curve":88,"./elliptic/curves":91,"./elliptic/ec":92,"./elliptic/eddsa":95,"./elliptic/utils":99,"brorand":19}],86:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var utils = require('../utils');
var getNAF = utils.getNAF;
var getJSF = utils.getJSF;
var assert = utils.assert;

function BaseCurve(type, conf) {
  this.type = type;
  this.p = new BN(conf.p, 16);

  // Use Montgomery, when there is no fast reduction for the prime
  this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);

  // Useful for many curves
  this.zero = new BN(0).toRed(this.red);
  this.one = new BN(1).toRed(this.red);
  this.two = new BN(2).toRed(this.red);

  // Curve configuration, optional
  this.n = conf.n && new BN(conf.n, 16);
  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

  // Temporary arrays
  this._wnafT1 = new Array(4);
  this._wnafT2 = new Array(4);
  this._wnafT3 = new Array(4);
  this._wnafT4 = new Array(4);

  this._bitLength = this.n ? this.n.bitLength() : 0;

  // Generalized Greg Maxwell's trick
  var adjustCount = this.n && this.p.div(this.n);
  if (!adjustCount || adjustCount.cmpn(100) > 0) {
    this.redN = null;
  } else {
    this._maxwellTrick = true;
    this.redN = this.n.toRed(this.red);
  }
}
module.exports = BaseCurve;

BaseCurve.prototype.point = function point() {
  throw new Error('Not implemented');
};

BaseCurve.prototype.validate = function validate() {
  throw new Error('Not implemented');
};

BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
  assert(p.precomputed);
  var doubles = p._getDoubles();

  var naf = getNAF(k, 1, this._bitLength);
  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
  I /= 3;

  // Translate into more windowed form
  var repr = [];
  var j;
  var nafW;
  for (j = 0; j < naf.length; j += doubles.step) {
    nafW = 0;
    for (var l = j + doubles.step - 1; l >= j; l--)
      nafW = (nafW << 1) + naf[l];
    repr.push(nafW);
  }

  var a = this.jpoint(null, null, null);
  var b = this.jpoint(null, null, null);
  for (var i = I; i > 0; i--) {
    for (j = 0; j < repr.length; j++) {
      nafW = repr[j];
      if (nafW === i)
        b = b.mixedAdd(doubles.points[j]);
      else if (nafW === -i)
        b = b.mixedAdd(doubles.points[j].neg());
    }
    a = a.add(b);
  }
  return a.toP();
};

BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
  var w = 4;

  // Precompute window
  var nafPoints = p._getNAFPoints(w);
  w = nafPoints.wnd;
  var wnd = nafPoints.points;

  // Get NAF form
  var naf = getNAF(k, w, this._bitLength);

  // Add `this`*(N+1) for every w-NAF index
  var acc = this.jpoint(null, null, null);
  for (var i = naf.length - 1; i >= 0; i--) {
    // Count zeroes
    for (var l = 0; i >= 0 && naf[i] === 0; i--)
      l++;
    if (i >= 0)
      l++;
    acc = acc.dblp(l);

    if (i < 0)
      break;
    var z = naf[i];
    assert(z !== 0);
    if (p.type === 'affine') {
      // J +- P
      if (z > 0)
        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
      else
        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
    } else {
      // J +- J
      if (z > 0)
        acc = acc.add(wnd[(z - 1) >> 1]);
      else
        acc = acc.add(wnd[(-z - 1) >> 1].neg());
    }
  }
  return p.type === 'affine' ? acc.toP() : acc;
};

BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
  points,
  coeffs,
  len,
  jacobianResult) {
  var wndWidth = this._wnafT1;
  var wnd = this._wnafT2;
  var naf = this._wnafT3;

  // Fill all arrays
  var max = 0;
  var i;
  var j;
  var p;
  for (i = 0; i < len; i++) {
    p = points[i];
    var nafPoints = p._getNAFPoints(defW);
    wndWidth[i] = nafPoints.wnd;
    wnd[i] = nafPoints.points;
  }

  // Comb small window NAFs
  for (i = len - 1; i >= 1; i -= 2) {
    var a = i - 1;
    var b = i;
    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
      naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
      naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
      max = Math.max(naf[a].length, max);
      max = Math.max(naf[b].length, max);
      continue;
    }

    var comb = [
      points[a], /* 1 */
      null, /* 3 */
      null, /* 5 */
      points[b], /* 7 */
    ];

    // Try to avoid Projective points, if possible
    if (points[a].y.cmp(points[b].y) === 0) {
      comb[1] = points[a].add(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].add(points[b].neg());
    } else {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    }

    var index = [
      -3, /* -1 -1 */
      -1, /* -1 0 */
      -5, /* -1 1 */
      -7, /* 0 -1 */
      0, /* 0 0 */
      7, /* 0 1 */
      5, /* 1 -1 */
      1, /* 1 0 */
      3,  /* 1 1 */
    ];

    var jsf = getJSF(coeffs[a], coeffs[b]);
    max = Math.max(jsf[0].length, max);
    naf[a] = new Array(max);
    naf[b] = new Array(max);
    for (j = 0; j < max; j++) {
      var ja = jsf[0][j] | 0;
      var jb = jsf[1][j] | 0;

      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
      naf[b][j] = 0;
      wnd[a] = comb;
    }
  }

  var acc = this.jpoint(null, null, null);
  var tmp = this._wnafT4;
  for (i = max; i >= 0; i--) {
    var k = 0;

    while (i >= 0) {
      var zero = true;
      for (j = 0; j < len; j++) {
        tmp[j] = naf[j][i] | 0;
        if (tmp[j] !== 0)
          zero = false;
      }
      if (!zero)
        break;
      k++;
      i--;
    }
    if (i >= 0)
      k++;
    acc = acc.dblp(k);
    if (i < 0)
      break;

    for (j = 0; j < len; j++) {
      var z = tmp[j];
      p;
      if (z === 0)
        continue;
      else if (z > 0)
        p = wnd[j][(z - 1) >> 1];
      else if (z < 0)
        p = wnd[j][(-z - 1) >> 1].neg();

      if (p.type === 'affine')
        acc = acc.mixedAdd(p);
      else
        acc = acc.add(p);
    }
  }
  // Zeroify references
  for (i = 0; i < len; i++)
    wnd[i] = null;

  if (jacobianResult)
    return acc;
  else
    return acc.toP();
};

function BasePoint(curve, type) {
  this.curve = curve;
  this.type = type;
  this.precomputed = null;
}
BaseCurve.BasePoint = BasePoint;

BasePoint.prototype.eq = function eq(/*other*/) {
  throw new Error('Not implemented');
};

BasePoint.prototype.validate = function validate() {
  return this.curve.validate(this);
};

BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  bytes = utils.toArray(bytes, enc);

  var len = this.p.byteLength();

  // uncompressed, hybrid-odd, hybrid-even
  if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
      bytes.length - 1 === 2 * len) {
    if (bytes[0] === 0x06)
      assert(bytes[bytes.length - 1] % 2 === 0);
    else if (bytes[0] === 0x07)
      assert(bytes[bytes.length - 1] % 2 === 1);

    var res =  this.point(bytes.slice(1, 1 + len),
      bytes.slice(1 + len, 1 + 2 * len));

    return res;
  } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
              bytes.length - 1 === len) {
    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
  }
  throw new Error('Unknown point format');
};

BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
  return this.encode(enc, true);
};

BasePoint.prototype._encode = function _encode(compact) {
  var len = this.curve.p.byteLength();
  var x = this.getX().toArray('be', len);

  if (compact)
    return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);

  return [ 0x04 ].concat(x, this.getY().toArray('be', len));
};

BasePoint.prototype.encode = function encode(enc, compact) {
  return utils.encode(this._encode(compact), enc);
};

BasePoint.prototype.precompute = function precompute(power) {
  if (this.precomputed)
    return this;

  var precomputed = {
    doubles: null,
    naf: null,
    beta: null,
  };
  precomputed.naf = this._getNAFPoints(8);
  precomputed.doubles = this._getDoubles(4, power);
  precomputed.beta = this._getBeta();
  this.precomputed = precomputed;

  return this;
};

BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
  if (!this.precomputed)
    return false;

  var doubles = this.precomputed.doubles;
  if (!doubles)
    return false;

  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
};

BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
  if (this.precomputed && this.precomputed.doubles)
    return this.precomputed.doubles;

  var doubles = [ this ];
  var acc = this;
  for (var i = 0; i < power; i += step) {
    for (var j = 0; j < step; j++)
      acc = acc.dbl();
    doubles.push(acc);
  }
  return {
    step: step,
    points: doubles,
  };
};

BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
  if (this.precomputed && this.precomputed.naf)
    return this.precomputed.naf;

  var res = [ this ];
  var max = (1 << wnd) - 1;
  var dbl = max === 1 ? null : this.dbl();
  for (var i = 1; i < max; i++)
    res[i] = res[i - 1].add(dbl);
  return {
    wnd: wnd,
    points: res,
  };
};

BasePoint.prototype._getBeta = function _getBeta() {
  return null;
};

BasePoint.prototype.dblp = function dblp(k) {
  var r = this;
  for (var i = 0; i < k; i++)
    r = r.dbl();
  return r;
};

},{"../utils":99,"bn.js":100}],87:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var BN = require('bn.js');
var inherits = require('inherits');
var Base = require('./base');

var assert = utils.assert;

function EdwardsCurve(conf) {
  // NOTE: Important as we are creating point in Base.call()
  this.twisted = (conf.a | 0) !== 1;
  this.mOneA = this.twisted && (conf.a | 0) === -1;
  this.extended = this.mOneA;

  Base.call(this, 'edwards', conf);

  this.a = new BN(conf.a, 16).umod(this.red.m);
  this.a = this.a.toRed(this.red);
  this.c = new BN(conf.c, 16).toRed(this.red);
  this.c2 = this.c.redSqr();
  this.d = new BN(conf.d, 16).toRed(this.red);
  this.dd = this.d.redAdd(this.d);

  assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
  this.oneC = (conf.c | 0) === 1;
}
inherits(EdwardsCurve, Base);
module.exports = EdwardsCurve;

EdwardsCurve.prototype._mulA = function _mulA(num) {
  if (this.mOneA)
    return num.redNeg();
  else
    return this.a.redMul(num);
};

EdwardsCurve.prototype._mulC = function _mulC(num) {
  if (this.oneC)
    return num;
  else
    return this.c.redMul(num);
};

// Just for compatibility with Short curve
EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
  return this.point(x, y, z, t);
};

EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var x2 = x.redSqr();
  var rhs = this.c2.redSub(this.a.redMul(x2));
  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

  var y2 = rhs.redMul(lhs.redInvm());
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
  y = new BN(y, 16);
  if (!y.red)
    y = y.toRed(this.red);

  // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)
  var y2 = y.redSqr();
  var lhs = y2.redSub(this.c2);
  var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
  var x2 = lhs.redMul(rhs.redInvm());

  if (x2.cmp(this.zero) === 0) {
    if (odd)
      throw new Error('invalid point');
    else
      return this.point(this.zero, y);
  }

  var x = x2.redSqrt();
  if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  if (x.fromRed().isOdd() !== odd)
    x = x.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.validate = function validate(point) {
  if (point.isInfinity())
    return true;

  // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
  point.normalize();

  var x2 = point.x.redSqr();
  var y2 = point.y.redSqr();
  var lhs = x2.redMul(this.a).redAdd(y2);
  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

  return lhs.cmp(rhs) === 0;
};

function Point(curve, x, y, z, t) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && y === null && z === null) {
    this.x = this.curve.zero;
    this.y = this.curve.one;
    this.z = this.curve.one;
    this.t = this.curve.zero;
    this.zOne = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = z ? new BN(z, 16) : this.curve.one;
    this.t = t && new BN(t, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
    if (this.t && !this.t.red)
      this.t = this.t.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;

    // Use extended coordinates
    if (this.curve.extended && !this.t) {
      this.t = this.x.redMul(this.y);
      if (!this.zOne)
        this.t = this.t.redMul(this.z.redInvm());
    }
  }
}
inherits(Point, Base.BasePoint);

EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

EdwardsCurve.prototype.point = function point(x, y, z, t) {
  return new Point(this, x, y, z, t);
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1], obj[2]);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.x.cmpn(0) === 0 &&
    (this.y.cmp(this.z) === 0 ||
    (this.zOne && this.y.cmp(this.curve.c) === 0));
};

Point.prototype._extDbl = function _extDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #doubling-dbl-2008-hwcd
  // 4M + 4S

  // A = X1^2
  var a = this.x.redSqr();
  // B = Y1^2
  var b = this.y.redSqr();
  // C = 2 * Z1^2
  var c = this.z.redSqr();
  c = c.redIAdd(c);
  // D = a * A
  var d = this.curve._mulA(a);
  // E = (X1 + Y1)^2 - A - B
  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
  // G = D + B
  var g = d.redAdd(b);
  // F = G - C
  var f = g.redSub(c);
  // H = D - B
  var h = d.redSub(b);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projDbl = function _projDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #doubling-dbl-2008-bbjlp
  //     #doubling-dbl-2007-bl
  // and others
  // Generally 3M + 4S or 2M + 4S

  // B = (X1 + Y1)^2
  var b = this.x.redAdd(this.y).redSqr();
  // C = X1^2
  var c = this.x.redSqr();
  // D = Y1^2
  var d = this.y.redSqr();

  var nx;
  var ny;
  var nz;
  var e;
  var h;
  var j;
  if (this.curve.twisted) {
    // E = a * C
    e = this.curve._mulA(c);
    // F = E + D
    var f = e.redAdd(d);
    if (this.zOne) {
      // X3 = (B - C - D) * (F - 2)
      nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F^2 - 2 * F
      nz = f.redSqr().redSub(f).redSub(f);
    } else {
      // H = Z1^2
      h = this.z.redSqr();
      // J = F - 2 * H
      j = f.redSub(h).redISub(h);
      // X3 = (B-C-D)*J
      nx = b.redSub(c).redISub(d).redMul(j);
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F * J
      nz = f.redMul(j);
    }
  } else {
    // E = C + D
    e = c.redAdd(d);
    // H = (c * Z1)^2
    h = this.curve._mulC(this.z).redSqr();
    // J = E - 2 * H
    j = e.redSub(h).redSub(h);
    // X3 = c * (B - E) * J
    nx = this.curve._mulC(b.redISub(e)).redMul(j);
    // Y3 = c * E * (C - D)
    ny = this.curve._mulC(e).redMul(c.redISub(d));
    // Z3 = E * J
    nz = e.redMul(j);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  // Double in extended coordinates
  if (this.curve.extended)
    return this._extDbl();
  else
    return this._projDbl();
};

Point.prototype._extAdd = function _extAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #addition-add-2008-hwcd-3
  // 8M

  // A = (Y1 - X1) * (Y2 - X2)
  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
  // B = (Y1 + X1) * (Y2 + X2)
  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
  // C = T1 * k * T2
  var c = this.t.redMul(this.curve.dd).redMul(p.t);
  // D = Z1 * 2 * Z2
  var d = this.z.redMul(p.z.redAdd(p.z));
  // E = B - A
  var e = b.redSub(a);
  // F = D - C
  var f = d.redSub(c);
  // G = D + C
  var g = d.redAdd(c);
  // H = B + A
  var h = b.redAdd(a);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projAdd = function _projAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #addition-add-2008-bbjlp
  //     #addition-add-2007-bl
  // 10M + 1S

  // A = Z1 * Z2
  var a = this.z.redMul(p.z);
  // B = A^2
  var b = a.redSqr();
  // C = X1 * X2
  var c = this.x.redMul(p.x);
  // D = Y1 * Y2
  var d = this.y.redMul(p.y);
  // E = d * C * D
  var e = this.curve.d.redMul(c).redMul(d);
  // F = B - E
  var f = b.redSub(e);
  // G = B + E
  var g = b.redAdd(e);
  // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
  var nx = a.redMul(f).redMul(tmp);
  var ny;
  var nz;
  if (this.curve.twisted) {
    // Y3 = A * G * (D - a * C)
    ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
    // Z3 = F * G
    nz = f.redMul(g);
  } else {
    // Y3 = A * G * (D - C)
    ny = a.redMul(g).redMul(d.redSub(c));
    // Z3 = c * F * G
    nz = this.curve._mulC(f).redMul(g);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.add = function add(p) {
  if (this.isInfinity())
    return p;
  if (p.isInfinity())
    return this;

  if (this.curve.extended)
    return this._extAdd(p);
  else
    return this._projAdd(p);
};

Point.prototype.mul = function mul(k) {
  if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, false);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, true);
};

Point.prototype.normalize = function normalize() {
  if (this.zOne)
    return this;

  // Normalize coordinates
  var zi = this.z.redInvm();
  this.x = this.x.redMul(zi);
  this.y = this.y.redMul(zi);
  if (this.t)
    this.t = this.t.redMul(zi);
  this.z = this.curve.one;
  this.zOne = true;
  return this;
};

Point.prototype.neg = function neg() {
  return this.curve.point(this.x.redNeg(),
    this.y,
    this.z,
    this.t && this.t.redNeg());
};

Point.prototype.getX = function getX() {
  this.normalize();
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  this.normalize();
  return this.y.fromRed();
};

Point.prototype.eq = function eq(other) {
  return this === other ||
         this.getX().cmp(other.getX()) === 0 &&
         this.getY().cmp(other.getY()) === 0;
};

Point.prototype.eqXToP = function eqXToP(x) {
  var rx = x.toRed(this.curve.red).redMul(this.z);
  if (this.x.cmp(rx) === 0)
    return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(this.z);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0)
      return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0)
      return true;
  }
};

// Compatibility with BaseCurve
Point.prototype.toP = Point.prototype.normalize;
Point.prototype.mixedAdd = Point.prototype.add;

},{"../utils":99,"./base":86,"bn.js":100,"inherits":134}],88:[function(require,module,exports){
'use strict';

var curve = exports;

curve.base = require('./base');
curve.short = require('./short');
curve.mont = require('./mont');
curve.edwards = require('./edwards');

},{"./base":86,"./edwards":87,"./mont":89,"./short":90}],89:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var inherits = require('inherits');
var Base = require('./base');

var utils = require('../utils');

function MontCurve(conf) {
  Base.call(this, 'mont', conf);

  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.i4 = new BN(4).toRed(this.red).redInvm();
  this.two = new BN(2).toRed(this.red);
  this.a24 = this.i4.redMul(this.a.redAdd(this.two));
}
inherits(MontCurve, Base);
module.exports = MontCurve;

MontCurve.prototype.validate = function validate(point) {
  var x = point.normalize().x;
  var x2 = x.redSqr();
  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
  var y = rhs.redSqrt();

  return y.redSqr().cmp(rhs) === 0;
};

function Point(curve, x, z) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && z === null) {
    this.x = this.curve.one;
    this.z = this.curve.zero;
  } else {
    this.x = new BN(x, 16);
    this.z = new BN(z, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
  }
}
inherits(Point, Base.BasePoint);

MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  return this.point(utils.toArray(bytes, enc), 1);
};

MontCurve.prototype.point = function point(x, z) {
  return new Point(this, x, z);
};

MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

Point.prototype.precompute = function precompute() {
  // No-op
};

Point.prototype._encode = function _encode() {
  return this.getX().toArray('be', this.curve.p.byteLength());
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1] || curve.one);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

Point.prototype.dbl = function dbl() {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
  // 2M + 2S + 4A

  // A = X1 + Z1
  var a = this.x.redAdd(this.z);
  // AA = A^2
  var aa = a.redSqr();
  // B = X1 - Z1
  var b = this.x.redSub(this.z);
  // BB = B^2
  var bb = b.redSqr();
  // C = AA - BB
  var c = aa.redSub(bb);
  // X3 = AA * BB
  var nx = aa.redMul(bb);
  // Z3 = C * (BB + A24 * C)
  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
  return this.curve.point(nx, nz);
};

Point.prototype.add = function add() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.diffAdd = function diffAdd(p, diff) {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
  // 4M + 2S + 6A

  // A = X2 + Z2
  var a = this.x.redAdd(this.z);
  // B = X2 - Z2
  var b = this.x.redSub(this.z);
  // C = X3 + Z3
  var c = p.x.redAdd(p.z);
  // D = X3 - Z3
  var d = p.x.redSub(p.z);
  // DA = D * A
  var da = d.redMul(a);
  // CB = C * B
  var cb = c.redMul(b);
  // X5 = Z1 * (DA + CB)^2
  var nx = diff.z.redMul(da.redAdd(cb).redSqr());
  // Z5 = X1 * (DA - CB)^2
  var nz = diff.x.redMul(da.redISub(cb).redSqr());
  return this.curve.point(nx, nz);
};

Point.prototype.mul = function mul(k) {
  var t = k.clone();
  var a = this; // (N / 2) * Q + Q
  var b = this.curve.point(null, null); // (N / 2) * Q
  var c = this; // Q

  for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
    bits.push(t.andln(1));

  for (var i = bits.length - 1; i >= 0; i--) {
    if (bits[i] === 0) {
      // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
      a = a.diffAdd(b, c);
      // N * Q = 2 * ((N / 2) * Q + Q))
      b = b.dbl();
    } else {
      // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
      b = a.diffAdd(b, c);
      // N * Q + Q = 2 * ((N / 2) * Q + Q)
      a = a.dbl();
    }
  }
  return b;
};

Point.prototype.mulAdd = function mulAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.jumlAdd = function jumlAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.eq = function eq(other) {
  return this.getX().cmp(other.getX()) === 0;
};

Point.prototype.normalize = function normalize() {
  this.x = this.x.redMul(this.z.redInvm());
  this.z = this.curve.one;
  return this;
};

Point.prototype.getX = function getX() {
  // Normalize coordinates
  this.normalize();

  return this.x.fromRed();
};

},{"../utils":99,"./base":86,"bn.js":100,"inherits":134}],90:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var BN = require('bn.js');
var inherits = require('inherits');
var Base = require('./base');

var assert = utils.assert;

function ShortCurve(conf) {
  Base.call(this, 'short', conf);

  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.tinv = this.two.redInvm();

  this.zeroA = this.a.fromRed().cmpn(0) === 0;
  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

  // If the curve is endomorphic, precalculate beta and lambda
  this.endo = this._getEndomorphism(conf);
  this._endoWnafT1 = new Array(4);
  this._endoWnafT2 = new Array(4);
}
inherits(ShortCurve, Base);
module.exports = ShortCurve;

ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
  // No efficient endomorphism
  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
    return;

  // Compute beta and lambda, that lambda * P = (beta * Px; Py)
  var beta;
  var lambda;
  if (conf.beta) {
    beta = new BN(conf.beta, 16).toRed(this.red);
  } else {
    var betas = this._getEndoRoots(this.p);
    // Choose the smallest beta
    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
    beta = beta.toRed(this.red);
  }
  if (conf.lambda) {
    lambda = new BN(conf.lambda, 16);
  } else {
    // Choose the lambda that is matching selected beta
    var lambdas = this._getEndoRoots(this.n);
    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
      lambda = lambdas[0];
    } else {
      lambda = lambdas[1];
      assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
    }
  }

  // Get basis vectors, used for balanced length-two representation
  var basis;
  if (conf.basis) {
    basis = conf.basis.map(function(vec) {
      return {
        a: new BN(vec.a, 16),
        b: new BN(vec.b, 16),
      };
    });
  } else {
    basis = this._getEndoBasis(lambda);
  }

  return {
    beta: beta,
    lambda: lambda,
    basis: basis,
  };
};

ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
  // Find roots of for x^2 + x + 1 in F
  // Root = (-1 +- Sqrt(-3)) / 2
  //
  var red = num === this.p ? this.red : BN.mont(num);
  var tinv = new BN(2).toRed(red).redInvm();
  var ntinv = tinv.redNeg();

  var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);

  var l1 = ntinv.redAdd(s).fromRed();
  var l2 = ntinv.redSub(s).fromRed();
  return [ l1, l2 ];
};

ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
  // aprxSqrt >= sqrt(this.n)
  var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

  // 3.74
  // Run EGCD, until r(L + 1) < aprxSqrt
  var u = lambda;
  var v = this.n.clone();
  var x1 = new BN(1);
  var y1 = new BN(0);
  var x2 = new BN(0);
  var y2 = new BN(1);

  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
  var a0;
  var b0;
  // First vector
  var a1;
  var b1;
  // Second vector
  var a2;
  var b2;

  var prevR;
  var i = 0;
  var r;
  var x;
  while (u.cmpn(0) !== 0) {
    var q = v.div(u);
    r = v.sub(q.mul(u));
    x = x2.sub(q.mul(x1));
    var y = y2.sub(q.mul(y1));

    if (!a1 && r.cmp(aprxSqrt) < 0) {
      a0 = prevR.neg();
      b0 = x1;
      a1 = r.neg();
      b1 = x;
    } else if (a1 && ++i === 2) {
      break;
    }
    prevR = r;

    v = u;
    u = r;
    x2 = x1;
    x1 = x;
    y2 = y1;
    y1 = y;
  }
  a2 = r.neg();
  b2 = x;

  var len1 = a1.sqr().add(b1.sqr());
  var len2 = a2.sqr().add(b2.sqr());
  if (len2.cmp(len1) >= 0) {
    a2 = a0;
    b2 = b0;
  }

  // Normalize signs
  if (a1.negative) {
    a1 = a1.neg();
    b1 = b1.neg();
  }
  if (a2.negative) {
    a2 = a2.neg();
    b2 = b2.neg();
  }

  return [
    { a: a1, b: b1 },
    { a: a2, b: b2 },
  ];
};

ShortCurve.prototype._endoSplit = function _endoSplit(k) {
  var basis = this.endo.basis;
  var v1 = basis[0];
  var v2 = basis[1];

  var c1 = v2.b.mul(k).divRound(this.n);
  var c2 = v1.b.neg().mul(k).divRound(this.n);

  var p1 = c1.mul(v1.a);
  var p2 = c2.mul(v2.a);
  var q1 = c1.mul(v1.b);
  var q2 = c2.mul(v2.b);

  // Calculate answer
  var k1 = k.sub(p1).sub(p2);
  var k2 = q1.add(q2).neg();
  return { k1: k1, k2: k2 };
};

ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  // XXX Is there any way to tell if the number is odd without converting it
  // to non-red form?
  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

ShortCurve.prototype.validate = function validate(point) {
  if (point.inf)
    return true;

  var x = point.x;
  var y = point.y;

  var ax = this.a.redMul(x);
  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
  return y.redSqr().redISub(rhs).cmpn(0) === 0;
};

ShortCurve.prototype._endoWnafMulAdd =
    function _endoWnafMulAdd(points, coeffs, jacobianResult) {
      var npoints = this._endoWnafT1;
      var ncoeffs = this._endoWnafT2;
      for (var i = 0; i < points.length; i++) {
        var split = this._endoSplit(coeffs[i]);
        var p = points[i];
        var beta = p._getBeta();

        if (split.k1.negative) {
          split.k1.ineg();
          p = p.neg(true);
        }
        if (split.k2.negative) {
          split.k2.ineg();
          beta = beta.neg(true);
        }

        npoints[i * 2] = p;
        npoints[i * 2 + 1] = beta;
        ncoeffs[i * 2] = split.k1;
        ncoeffs[i * 2 + 1] = split.k2;
      }
      var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

      // Clean-up references to points and coefficients
      for (var j = 0; j < i * 2; j++) {
        npoints[j] = null;
        ncoeffs[j] = null;
      }
      return res;
    };

function Point(curve, x, y, isRed) {
  Base.BasePoint.call(this, curve, 'affine');
  if (x === null && y === null) {
    this.x = null;
    this.y = null;
    this.inf = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    // Force redgomery representation when loading from JSON
    if (isRed) {
      this.x.forceRed(this.curve.red);
      this.y.forceRed(this.curve.red);
    }
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    this.inf = false;
  }
}
inherits(Point, Base.BasePoint);

ShortCurve.prototype.point = function point(x, y, isRed) {
  return new Point(this, x, y, isRed);
};

ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
  return Point.fromJSON(this, obj, red);
};

Point.prototype._getBeta = function _getBeta() {
  if (!this.curve.endo)
    return;

  var pre = this.precomputed;
  if (pre && pre.beta)
    return pre.beta;

  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
  if (pre) {
    var curve = this.curve;
    var endoMul = function(p) {
      return curve.point(p.x.redMul(curve.endo.beta), p.y);
    };
    pre.beta = beta;
    beta.precomputed = {
      beta: null,
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(endoMul),
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(endoMul),
      },
    };
  }
  return beta;
};

Point.prototype.toJSON = function toJSON() {
  if (!this.precomputed)
    return [ this.x, this.y ];

  return [ this.x, this.y, this.precomputed && {
    doubles: this.precomputed.doubles && {
      step: this.precomputed.doubles.step,
      points: this.precomputed.doubles.points.slice(1),
    },
    naf: this.precomputed.naf && {
      wnd: this.precomputed.naf.wnd,
      points: this.precomputed.naf.points.slice(1),
    },
  } ];
};

Point.fromJSON = function fromJSON(curve, obj, red) {
  if (typeof obj === 'string')
    obj = JSON.parse(obj);
  var res = curve.point(obj[0], obj[1], red);
  if (!obj[2])
    return res;

  function obj2point(obj) {
    return curve.point(obj[0], obj[1], red);
  }

  var pre = obj[2];
  res.precomputed = {
    beta: null,
    doubles: pre.doubles && {
      step: pre.doubles.step,
      points: [ res ].concat(pre.doubles.points.map(obj2point)),
    },
    naf: pre.naf && {
      wnd: pre.naf.wnd,
      points: [ res ].concat(pre.naf.points.map(obj2point)),
    },
  };
  return res;
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  return this.inf;
};

Point.prototype.add = function add(p) {
  // O + P = P
  if (this.inf)
    return p;

  // P + O = P
  if (p.inf)
    return this;

  // P + P = 2P
  if (this.eq(p))
    return this.dbl();

  // P + (-P) = O
  if (this.neg().eq(p))
    return this.curve.point(null, null);

  // P + Q = O
  if (this.x.cmp(p.x) === 0)
    return this.curve.point(null, null);

  var c = this.y.redSub(p.y);
  if (c.cmpn(0) !== 0)
    c = c.redMul(this.x.redSub(p.x).redInvm());
  var nx = c.redSqr().redISub(this.x).redISub(p.x);
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.dbl = function dbl() {
  if (this.inf)
    return this;

  // 2P = O
  var ys1 = this.y.redAdd(this.y);
  if (ys1.cmpn(0) === 0)
    return this.curve.point(null, null);

  var a = this.curve.a;

  var x2 = this.x.redSqr();
  var dyinv = ys1.redInvm();
  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

  var nx = c.redSqr().redISub(this.x.redAdd(this.x));
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.getX = function getX() {
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  return this.y.fromRed();
};

Point.prototype.mul = function mul(k) {
  k = new BN(k, 16);
  if (this.isInfinity())
    return this;
  else if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else if (this.curve.endo)
    return this.curve._endoWnafMulAdd([ this ], [ k ]);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs, true);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
};

Point.prototype.eq = function eq(p) {
  return this === p ||
         this.inf === p.inf &&
             (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
};

Point.prototype.neg = function neg(_precompute) {
  if (this.inf)
    return this;

  var res = this.curve.point(this.x, this.y.redNeg());
  if (_precompute && this.precomputed) {
    var pre = this.precomputed;
    var negate = function(p) {
      return p.neg();
    };
    res.precomputed = {
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(negate),
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(negate),
      },
    };
  }
  return res;
};

Point.prototype.toJ = function toJ() {
  if (this.inf)
    return this.curve.jpoint(null, null, null);

  var res = this.curve.jpoint(this.x, this.y, this.curve.one);
  return res;
};

function JPoint(curve, x, y, z) {
  Base.BasePoint.call(this, curve, 'jacobian');
  if (x === null && y === null && z === null) {
    this.x = this.curve.one;
    this.y = this.curve.one;
    this.z = new BN(0);
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = new BN(z, 16);
  }
  if (!this.x.red)
    this.x = this.x.toRed(this.curve.red);
  if (!this.y.red)
    this.y = this.y.toRed(this.curve.red);
  if (!this.z.red)
    this.z = this.z.toRed(this.curve.red);

  this.zOne = this.z === this.curve.one;
}
inherits(JPoint, Base.BasePoint);

ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
  return new JPoint(this, x, y, z);
};

JPoint.prototype.toP = function toP() {
  if (this.isInfinity())
    return this.curve.point(null, null);

  var zinv = this.z.redInvm();
  var zinv2 = zinv.redSqr();
  var ax = this.x.redMul(zinv2);
  var ay = this.y.redMul(zinv2).redMul(zinv);

  return this.curve.point(ax, ay);
};

JPoint.prototype.neg = function neg() {
  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
};

JPoint.prototype.add = function add(p) {
  // O + P = P
  if (this.isInfinity())
    return p;

  // P + O = P
  if (p.isInfinity())
    return this;

  // 12M + 4S + 7A
  var pz2 = p.z.redSqr();
  var z2 = this.z.redSqr();
  var u1 = this.x.redMul(pz2);
  var u2 = p.x.redMul(z2);
  var s1 = this.y.redMul(pz2.redMul(p.z));
  var s2 = p.y.redMul(z2.redMul(this.z));

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(p.z).redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mixedAdd = function mixedAdd(p) {
  // O + P = P
  if (this.isInfinity())
    return p.toJ();

  // P + O = P
  if (p.isInfinity())
    return this;

  // 8M + 3S + 7A
  var z2 = this.z.redSqr();
  var u1 = this.x;
  var u2 = p.x.redMul(z2);
  var s1 = this.y;
  var s2 = p.y.redMul(z2).redMul(this.z);

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.dblp = function dblp(pow) {
  if (pow === 0)
    return this;
  if (this.isInfinity())
    return this;
  if (!pow)
    return this.dbl();

  var i;
  if (this.curve.zeroA || this.curve.threeA) {
    var r = this;
    for (i = 0; i < pow; i++)
      r = r.dbl();
    return r;
  }

  // 1M + 2S + 1A + N * (4S + 5M + 8A)
  // N = 1 => 6M + 6S + 9A
  var a = this.curve.a;
  var tinv = this.curve.tinv;

  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  // Reuse results
  var jyd = jy.redAdd(jy);
  for (i = 0; i < pow; i++) {
    var jx2 = jx.redSqr();
    var jyd2 = jyd.redSqr();
    var jyd4 = jyd2.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

    var t1 = jx.redMul(jyd2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var dny = c.redMul(t2);
    dny = dny.redIAdd(dny).redISub(jyd4);
    var nz = jyd.redMul(jz);
    if (i + 1 < pow)
      jz4 = jz4.redMul(jyd4);

    jx = nx;
    jz = nz;
    jyd = dny;
  }

  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
};

JPoint.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  if (this.curve.zeroA)
    return this._zeroDbl();
  else if (this.curve.threeA)
    return this._threeDbl();
  else
    return this._dbl();
};

JPoint.prototype._zeroDbl = function _zeroDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 14A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a; a = 0
    var m = xx.redAdd(xx).redIAdd(xx);
    // T = M ^ 2 - 2*S
    var t = m.redSqr().redISub(s).redISub(s);

    // 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);

    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2*Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-dbl-2009-l
    // 2M + 5S + 13A

    // A = X1^2
    var a = this.x.redSqr();
    // B = Y1^2
    var b = this.y.redSqr();
    // C = B^2
    var c = b.redSqr();
    // D = 2 * ((X1 + B)^2 - A - C)
    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
    d = d.redIAdd(d);
    // E = 3 * A
    var e = a.redAdd(a).redIAdd(a);
    // F = E^2
    var f = e.redSqr();

    // 8 * C
    var c8 = c.redIAdd(c);
    c8 = c8.redIAdd(c8);
    c8 = c8.redIAdd(c8);

    // X3 = F - 2 * D
    nx = f.redISub(d).redISub(d);
    // Y3 = E * (D - X3) - 8 * C
    ny = e.redMul(d.redISub(nx)).redISub(c8);
    // Z3 = 2 * Y1 * Z1
    nz = this.y.redMul(this.z);
    nz = nz.redIAdd(nz);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._threeDbl = function _threeDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 15A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a
    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
    // T = M^2 - 2 * S
    var t = m.redSqr().redISub(s).redISub(s);
    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2 * Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
    // 3M + 5S

    // delta = Z1^2
    var delta = this.z.redSqr();
    // gamma = Y1^2
    var gamma = this.y.redSqr();
    // beta = X1 * gamma
    var beta = this.x.redMul(gamma);
    // alpha = 3 * (X1 - delta) * (X1 + delta)
    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
    alpha = alpha.redAdd(alpha).redIAdd(alpha);
    // X3 = alpha^2 - 8 * beta
    var beta4 = beta.redIAdd(beta);
    beta4 = beta4.redIAdd(beta4);
    var beta8 = beta4.redAdd(beta4);
    nx = alpha.redSqr().redISub(beta8);
    // Z3 = (Y1 + Z1)^2 - gamma - delta
    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
    var ggamma8 = gamma.redSqr();
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._dbl = function _dbl() {
  var a = this.curve.a;

  // 4M + 6S + 10A
  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  var jx2 = jx.redSqr();
  var jy2 = jy.redSqr();

  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

  var jxd4 = jx.redAdd(jx);
  jxd4 = jxd4.redIAdd(jxd4);
  var t1 = jxd4.redMul(jy2);
  var nx = c.redSqr().redISub(t1.redAdd(t1));
  var t2 = t1.redISub(nx);

  var jyd8 = jy2.redSqr();
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  var ny = c.redMul(t2).redISub(jyd8);
  var nz = jy.redAdd(jy).redMul(jz);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.trpl = function trpl() {
  if (!this.curve.zeroA)
    return this.dbl().add(this);

  // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
  // 5M + 10S + ...

  // XX = X1^2
  var xx = this.x.redSqr();
  // YY = Y1^2
  var yy = this.y.redSqr();
  // ZZ = Z1^2
  var zz = this.z.redSqr();
  // YYYY = YY^2
  var yyyy = yy.redSqr();
  // M = 3 * XX + a * ZZ2; a = 0
  var m = xx.redAdd(xx).redIAdd(xx);
  // MM = M^2
  var mm = m.redSqr();
  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
  e = e.redIAdd(e);
  e = e.redAdd(e).redIAdd(e);
  e = e.redISub(mm);
  // EE = E^2
  var ee = e.redSqr();
  // T = 16*YYYY
  var t = yyyy.redIAdd(yyyy);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  // U = (M + E)^2 - MM - EE - T
  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
  // X3 = 4 * (X1 * EE - 4 * YY * U)
  var yyu4 = yy.redMul(u);
  yyu4 = yyu4.redIAdd(yyu4);
  yyu4 = yyu4.redIAdd(yyu4);
  var nx = this.x.redMul(ee).redISub(yyu4);
  nx = nx.redIAdd(nx);
  nx = nx.redIAdd(nx);
  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  // Z3 = (Z1 + E)^2 - ZZ - EE
  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mul = function mul(k, kbase) {
  k = new BN(k, kbase);

  return this.curve._wnafMul(this, k);
};

JPoint.prototype.eq = function eq(p) {
  if (p.type === 'affine')
    return this.eq(p.toJ());

  if (this === p)
    return true;

  // x1 * z2^2 == x2 * z1^2
  var z2 = this.z.redSqr();
  var pz2 = p.z.redSqr();
  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
    return false;

  // y1 * z2^3 == y2 * z1^3
  var z3 = z2.redMul(this.z);
  var pz3 = pz2.redMul(p.z);
  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
};

JPoint.prototype.eqXToP = function eqXToP(x) {
  var zs = this.z.redSqr();
  var rx = x.toRed(this.curve.red).redMul(zs);
  if (this.x.cmp(rx) === 0)
    return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(zs);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0)
      return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0)
      return true;
  }
};

JPoint.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC JPoint Infinity>';
  return '<EC JPoint x: ' + this.x.toString(16, 2) +
      ' y: ' + this.y.toString(16, 2) +
      ' z: ' + this.z.toString(16, 2) + '>';
};

JPoint.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

},{"../utils":99,"./base":86,"bn.js":100,"inherits":134}],91:[function(require,module,exports){
'use strict';

var curves = exports;

var hash = require('hash.js');
var curve = require('./curve');
var utils = require('./utils');

var assert = utils.assert;

function PresetCurve(options) {
  if (options.type === 'short')
    this.curve = new curve.short(options);
  else if (options.type === 'edwards')
    this.curve = new curve.edwards(options);
  else
    this.curve = new curve.mont(options);
  this.g = this.curve.g;
  this.n = this.curve.n;
  this.hash = options.hash;

  assert(this.g.validate(), 'Invalid curve');
  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
}
curves.PresetCurve = PresetCurve;

function defineCurve(name, options) {
  Object.defineProperty(curves, name, {
    configurable: true,
    enumerable: true,
    get: function() {
      var curve = new PresetCurve(options);
      Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        value: curve,
      });
      return curve;
    },
  });
}

defineCurve('p192', {
  type: 'short',
  prime: 'p192',
  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
  hash: hash.sha256,
  gRed: false,
  g: [
    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811',
  ],
});

defineCurve('p224', {
  type: 'short',
  prime: 'p224',
  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
  hash: hash.sha256,
  gRed: false,
  g: [
    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34',
  ],
});

defineCurve('p256', {
  type: 'short',
  prime: null,
  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
  hash: hash.sha256,
  gRed: false,
  g: [
    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5',
  ],
});

defineCurve('p384', {
  type: 'short',
  prime: null,
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'fffffffe ffffffff 00000000 00000000 ffffffff',
  a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'fffffffe ffffffff 00000000 00000000 fffffffc',
  b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
     '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
  n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
     'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
  hash: hash.sha384,
  gRed: false,
  g: [
    'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
    '5502f25d bf55296c 3a545e38 72760ab7',
    '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
    '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f',
  ],
});

defineCurve('p521', {
  type: 'short',
  prime: null,
  p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff',
  a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff fffffffc',
  b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
     '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
     '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
  n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
     'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
  hash: hash.sha512,
  gRed: false,
  g: [
    '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
    '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
    'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
    '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
    '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
    '3fad0761 353c7086 a272c240 88be9476 9fd16650',
  ],
});

defineCurve('curve25519', {
  type: 'mont',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '76d06',
  b: '1',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '9',
  ],
});

defineCurve('ed25519', {
  type: 'edwards',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '-1',
  c: '1',
  // -121665 * (121666^(-1)) (mod P)
  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

    // 4/5
    '6666666666666666666666666666666666666666666666666666666666666658',
  ],
});

var pre;
try {
  pre = require('./precomputed/secp256k1');
} catch (e) {
  pre = undefined;
}

defineCurve('secp256k1', {
  type: 'short',
  prime: 'k256',
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
  a: '0',
  b: '7',
  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
  h: '1',
  hash: hash.sha256,

  // Precomputed endomorphism
  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
  basis: [
    {
      a: '3086d221a7d46bcde86c90e49284eb15',
      b: '-e4437ed6010e88286f547fa90abfe4c3',
    },
    {
      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
      b: '3086d221a7d46bcde86c90e49284eb15',
    },
  ],

  gRed: false,
  g: [
    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
    pre,
  ],
});

},{"./curve":88,"./precomputed/secp256k1":98,"./utils":99,"hash.js":120}],92:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var HmacDRBG = require('hmac-drbg');
var utils = require('../utils');
var curves = require('../curves');
var rand = require('brorand');
var assert = utils.assert;

var KeyPair = require('./key');
var Signature = require('./signature');

function EC(options) {
  if (!(this instanceof EC))
    return new EC(options);

  // Shortcut `elliptic.ec(curve-name)`
  if (typeof options === 'string') {
    assert(Object.prototype.hasOwnProperty.call(curves, options),
      'Unknown curve ' + options);

    options = curves[options];
  }

  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
  if (options instanceof curves.PresetCurve)
    options = { curve: options };

  this.curve = options.curve.curve;
  this.n = this.curve.n;
  this.nh = this.n.ushrn(1);
  this.g = this.curve.g;

  // Point on curve
  this.g = options.curve.g;
  this.g.precompute(options.curve.n.bitLength() + 1);

  // Hash for function for DRBG
  this.hash = options.hash || options.curve.hash;
}
module.exports = EC;

EC.prototype.keyPair = function keyPair(options) {
  return new KeyPair(this, options);
};

EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
  return KeyPair.fromPrivate(this, priv, enc);
};

EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
  return KeyPair.fromPublic(this, pub, enc);
};

EC.prototype.genKeyPair = function genKeyPair(options) {
  if (!options)
    options = {};

  // Instantiate Hmac_DRBG
  var drbg = new HmacDRBG({
    hash: this.hash,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8',
    entropy: options.entropy || rand(this.hash.hmacStrength),
    entropyEnc: options.entropy && options.entropyEnc || 'utf8',
    nonce: this.n.toArray(),
  });

  var bytes = this.n.byteLength();
  var ns2 = this.n.sub(new BN(2));
  for (;;) {
    var priv = new BN(drbg.generate(bytes));
    if (priv.cmp(ns2) > 0)
      continue;

    priv.iaddn(1);
    return this.keyFromPrivate(priv);
  }
};

EC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
  var delta = msg.byteLength() * 8 - this.n.bitLength();
  if (delta > 0)
    msg = msg.ushrn(delta);
  if (!truncOnly && msg.cmp(this.n) >= 0)
    return msg.sub(this.n);
  else
    return msg;
};

EC.prototype.sign = function sign(msg, key, enc, options) {
  if (typeof enc === 'object') {
    options = enc;
    enc = null;
  }
  if (!options)
    options = {};

  key = this.keyFromPrivate(key, enc);
  msg = this._truncateToN(new BN(msg, 16));

  // Zero-extend key to provide enough entropy
  var bytes = this.n.byteLength();
  var bkey = key.getPrivate().toArray('be', bytes);

  // Zero-extend nonce to have the same byte size as N
  var nonce = msg.toArray('be', bytes);

  // Instantiate Hmac_DRBG
  var drbg = new HmacDRBG({
    hash: this.hash,
    entropy: bkey,
    nonce: nonce,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8',
  });

  // Number of bytes to generate
  var ns1 = this.n.sub(new BN(1));

  for (var iter = 0; ; iter++) {
    var k = options.k ?
      options.k(iter) :
      new BN(drbg.generate(this.n.byteLength()));
    k = this._truncateToN(k, true);
    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
      continue;

    var kp = this.g.mul(k);
    if (kp.isInfinity())
      continue;

    var kpX = kp.getX();
    var r = kpX.umod(this.n);
    if (r.cmpn(0) === 0)
      continue;

    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
    s = s.umod(this.n);
    if (s.cmpn(0) === 0)
      continue;

    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
                        (kpX.cmp(r) !== 0 ? 2 : 0);

    // Use complement of `s`, if it is > `n / 2`
    if (options.canonical && s.cmp(this.nh) > 0) {
      s = this.n.sub(s);
      recoveryParam ^= 1;
    }

    return new Signature({ r: r, s: s, recoveryParam: recoveryParam });
  }
};

EC.prototype.verify = function verify(msg, signature, key, enc) {
  msg = this._truncateToN(new BN(msg, 16));
  key = this.keyFromPublic(key, enc);
  signature = new Signature(signature, 'hex');

  // Perform primitive values validation
  var r = signature.r;
  var s = signature.s;
  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
    return false;
  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
    return false;

  // Validate signature
  var sinv = s.invm(this.n);
  var u1 = sinv.mul(msg).umod(this.n);
  var u2 = sinv.mul(r).umod(this.n);
  var p;

  if (!this.curve._maxwellTrick) {
    p = this.g.mulAdd(u1, key.getPublic(), u2);
    if (p.isInfinity())
      return false;

    return p.getX().umod(this.n).cmp(r) === 0;
  }

  // NOTE: Greg Maxwell's trick, inspired by:
  // https://git.io/vad3K

  p = this.g.jmulAdd(u1, key.getPublic(), u2);
  if (p.isInfinity())
    return false;

  // Compare `p.x` of Jacobian point with `r`,
  // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
  // inverse of `p.z^2`
  return p.eqXToP(r);
};

EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
  assert((3 & j) === j, 'The recovery param is more than two bits');
  signature = new Signature(signature, enc);

  var n = this.n;
  var e = new BN(msg);
  var r = signature.r;
  var s = signature.s;

  // A set LSB signifies that the y-coordinate is odd
  var isYOdd = j & 1;
  var isSecondKey = j >> 1;
  if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
    throw new Error('Unable to find sencond key candinate');

  // 1.1. Let x = r + jn.
  if (isSecondKey)
    r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
  else
    r = this.curve.pointFromX(r, isYOdd);

  var rInv = signature.r.invm(n);
  var s1 = n.sub(e).mul(rInv).umod(n);
  var s2 = s.mul(rInv).umod(n);

  // 1.6.1 Compute Q = r^-1 (sR -  eG)
  //               Q = r^-1 (sR + -eG)
  return this.g.mulAdd(s1, r, s2);
};

EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
  signature = new Signature(signature, enc);
  if (signature.recoveryParam !== null)
    return signature.recoveryParam;

  for (var i = 0; i < 4; i++) {
    var Qprime;
    try {
      Qprime = this.recoverPubKey(e, signature, i);
    } catch (e) {
      continue;
    }

    if (Qprime.eq(Q))
      return i;
  }
  throw new Error('Unable to find valid recovery factor');
};

},{"../curves":91,"../utils":99,"./key":93,"./signature":94,"bn.js":100,"brorand":19,"hmac-drbg":132}],93:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var utils = require('../utils');
var assert = utils.assert;

function KeyPair(ec, options) {
  this.ec = ec;
  this.priv = null;
  this.pub = null;

  // KeyPair(ec, { priv: ..., pub: ... })
  if (options.priv)
    this._importPrivate(options.priv, options.privEnc);
  if (options.pub)
    this._importPublic(options.pub, options.pubEnc);
}
module.exports = KeyPair;

KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
  if (pub instanceof KeyPair)
    return pub;

  return new KeyPair(ec, {
    pub: pub,
    pubEnc: enc,
  });
};

KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
  if (priv instanceof KeyPair)
    return priv;

  return new KeyPair(ec, {
    priv: priv,
    privEnc: enc,
  });
};

KeyPair.prototype.validate = function validate() {
  var pub = this.getPublic();

  if (pub.isInfinity())
    return { result: false, reason: 'Invalid public key' };
  if (!pub.validate())
    return { result: false, reason: 'Public key is not a point' };
  if (!pub.mul(this.ec.curve.n).isInfinity())
    return { result: false, reason: 'Public key * N != O' };

  return { result: true, reason: null };
};

KeyPair.prototype.getPublic = function getPublic(compact, enc) {
  // compact is optional argument
  if (typeof compact === 'string') {
    enc = compact;
    compact = null;
  }

  if (!this.pub)
    this.pub = this.ec.g.mul(this.priv);

  if (!enc)
    return this.pub;

  return this.pub.encode(enc, compact);
};

KeyPair.prototype.getPrivate = function getPrivate(enc) {
  if (enc === 'hex')
    return this.priv.toString(16, 2);
  else
    return this.priv;
};

KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
  this.priv = new BN(key, enc || 16);

  // Ensure that the priv won't be bigger than n, otherwise we may fail
  // in fixed multiplication method
  this.priv = this.priv.umod(this.ec.curve.n);
};

KeyPair.prototype._importPublic = function _importPublic(key, enc) {
  if (key.x || key.y) {
    // Montgomery points only have an `x` coordinate.
    // Weierstrass/Edwards points on the other hand have both `x` and
    // `y` coordinates.
    if (this.ec.curve.type === 'mont') {
      assert(key.x, 'Need x coordinate');
    } else if (this.ec.curve.type === 'short' ||
               this.ec.curve.type === 'edwards') {
      assert(key.x && key.y, 'Need both x and y coordinate');
    }
    this.pub = this.ec.curve.point(key.x, key.y);
    return;
  }
  this.pub = this.ec.curve.decodePoint(key, enc);
};

// ECDH
KeyPair.prototype.derive = function derive(pub) {
  if(!pub.validate()) {
    assert(pub.validate(), 'public point not validated');
  }
  return pub.mul(this.priv).getX();
};

// ECDSA
KeyPair.prototype.sign = function sign(msg, enc, options) {
  return this.ec.sign(msg, this, enc, options);
};

KeyPair.prototype.verify = function verify(msg, signature) {
  return this.ec.verify(msg, signature, this);
};

KeyPair.prototype.inspect = function inspect() {
  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
         ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
};

},{"../utils":99,"bn.js":100}],94:[function(require,module,exports){
'use strict';

var BN = require('bn.js');

var utils = require('../utils');
var assert = utils.assert;

function Signature(options, enc) {
  if (options instanceof Signature)
    return options;

  if (this._importDER(options, enc))
    return;

  assert(options.r && options.s, 'Signature without r or s');
  this.r = new BN(options.r, 16);
  this.s = new BN(options.s, 16);
  if (options.recoveryParam === undefined)
    this.recoveryParam = null;
  else
    this.recoveryParam = options.recoveryParam;
}
module.exports = Signature;

function Position() {
  this.place = 0;
}

function getLength(buf, p) {
  var initial = buf[p.place++];
  if (!(initial & 0x80)) {
    return initial;
  }
  var octetLen = initial & 0xf;

  // Indefinite length or overflow
  if (octetLen === 0 || octetLen > 4) {
    return false;
  }

  var val = 0;
  for (var i = 0, off = p.place; i < octetLen; i++, off++) {
    val <<= 8;
    val |= buf[off];
    val >>>= 0;
  }

  // Leading zeroes
  if (val <= 0x7f) {
    return false;
  }

  p.place = off;
  return val;
}

function rmPadding(buf) {
  var i = 0;
  var len = buf.length - 1;
  while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
    i++;
  }
  if (i === 0) {
    return buf;
  }
  return buf.slice(i);
}

Signature.prototype._importDER = function _importDER(data, enc) {
  data = utils.toArray(data, enc);
  var p = new Position();
  if (data[p.place++] !== 0x30) {
    return false;
  }
  var len = getLength(data, p);
  if (len === false) {
    return false;
  }
  if ((len + p.place) !== data.length) {
    return false;
  }
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var rlen = getLength(data, p);
  if (rlen === false) {
    return false;
  }
  var r = data.slice(p.place, rlen + p.place);
  p.place += rlen;
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var slen = getLength(data, p);
  if (slen === false) {
    return false;
  }
  if (data.length !== slen + p.place) {
    return false;
  }
  var s = data.slice(p.place, slen + p.place);
  if (r[0] === 0) {
    if (r[1] & 0x80) {
      r = r.slice(1);
    } else {
      // Leading zeroes
      return false;
    }
  }
  if (s[0] === 0) {
    if (s[1] & 0x80) {
      s = s.slice(1);
    } else {
      // Leading zeroes
      return false;
    }
  }

  this.r = new BN(r);
  this.s = new BN(s);
  this.recoveryParam = null;

  return true;
};

function constructLength(arr, len) {
  if (len < 0x80) {
    arr.push(len);
    return;
  }
  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
  arr.push(octets | 0x80);
  while (--octets) {
    arr.push((len >>> (octets << 3)) & 0xff);
  }
  arr.push(len);
}

Signature.prototype.toDER = function toDER(enc) {
  var r = this.r.toArray();
  var s = this.s.toArray();

  // Pad values
  if (r[0] & 0x80)
    r = [ 0 ].concat(r);
  // Pad values
  if (s[0] & 0x80)
    s = [ 0 ].concat(s);

  r = rmPadding(r);
  s = rmPadding(s);

  while (!s[0] && !(s[1] & 0x80)) {
    s = s.slice(1);
  }
  var arr = [ 0x02 ];
  constructLength(arr, r.length);
  arr = arr.concat(r);
  arr.push(0x02);
  constructLength(arr, s.length);
  var backHalf = arr.concat(s);
  var res = [ 0x30 ];
  constructLength(res, backHalf.length);
  res = res.concat(backHalf);
  return utils.encode(res, enc);
};

},{"../utils":99,"bn.js":100}],95:[function(require,module,exports){
'use strict';

var hash = require('hash.js');
var curves = require('../curves');
var utils = require('../utils');
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var KeyPair = require('./key');
var Signature = require('./signature');

function EDDSA(curve) {
  assert(curve === 'ed25519', 'only tested with ed25519 so far');

  if (!(this instanceof EDDSA))
    return new EDDSA(curve);

  curve = curves[curve].curve;
  this.curve = curve;
  this.g = curve.g;
  this.g.precompute(curve.n.bitLength() + 1);

  this.pointClass = curve.point().constructor;
  this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
  this.hash = hash.sha512;
}

module.exports = EDDSA;

/**
* @param {Array|String} message - message bytes
* @param {Array|String|KeyPair} secret - secret bytes or a keypair
* @returns {Signature} - signature
*/
EDDSA.prototype.sign = function sign(message, secret) {
  message = parseBytes(message);
  var key = this.keyFromSecret(secret);
  var r = this.hashInt(key.messagePrefix(), message);
  var R = this.g.mul(r);
  var Rencoded = this.encodePoint(R);
  var s_ = this.hashInt(Rencoded, key.pubBytes(), message)
    .mul(key.priv());
  var S = r.add(s_).umod(this.curve.n);
  return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });
};

/**
* @param {Array} message - message bytes
* @param {Array|String|Signature} sig - sig bytes
* @param {Array|String|Point|KeyPair} pub - public key
* @returns {Boolean} - true if public key matches sig of message
*/
EDDSA.prototype.verify = function verify(message, sig, pub) {
  message = parseBytes(message);
  sig = this.makeSignature(sig);
  var key = this.keyFromPublic(pub);
  var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
  var SG = this.g.mul(sig.S());
  var RplusAh = sig.R().add(key.pub().mul(h));
  return RplusAh.eq(SG);
};

EDDSA.prototype.hashInt = function hashInt() {
  var hash = this.hash();
  for (var i = 0; i < arguments.length; i++)
    hash.update(arguments[i]);
  return utils.intFromLE(hash.digest()).umod(this.curve.n);
};

EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
  return KeyPair.fromPublic(this, pub);
};

EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
  return KeyPair.fromSecret(this, secret);
};

EDDSA.prototype.makeSignature = function makeSignature(sig) {
  if (sig instanceof Signature)
    return sig;
  return new Signature(this, sig);
};

/**
* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
*
* EDDSA defines methods for encoding and decoding points and integers. These are
* helper convenience methods, that pass along to utility functions implied
* parameters.
*
*/
EDDSA.prototype.encodePoint = function encodePoint(point) {
  var enc = point.getY().toArray('le', this.encodingLength);
  enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
  return enc;
};

EDDSA.prototype.decodePoint = function decodePoint(bytes) {
  bytes = utils.parseBytes(bytes);

  var lastIx = bytes.length - 1;
  var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
  var xIsOdd = (bytes[lastIx] & 0x80) !== 0;

  var y = utils.intFromLE(normed);
  return this.curve.pointFromY(y, xIsOdd);
};

EDDSA.prototype.encodeInt = function encodeInt(num) {
  return num.toArray('le', this.encodingLength);
};

EDDSA.prototype.decodeInt = function decodeInt(bytes) {
  return utils.intFromLE(bytes);
};

EDDSA.prototype.isPoint = function isPoint(val) {
  return val instanceof this.pointClass;
};

},{"../curves":91,"../utils":99,"./key":96,"./signature":97,"hash.js":120}],96:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var cachedProperty = utils.cachedProperty;

/**
* @param {EDDSA} eddsa - instance
* @param {Object} params - public/private key parameters
*
* @param {Array<Byte>} [params.secret] - secret seed bytes
* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
* @param {Array<Byte>} [params.pub] - public key point encoded as bytes
*
*/
function KeyPair(eddsa, params) {
  this.eddsa = eddsa;
  this._secret = parseBytes(params.secret);
  if (eddsa.isPoint(params.pub))
    this._pub = params.pub;
  else
    this._pubBytes = parseBytes(params.pub);
}

KeyPair.fromPublic = function fromPublic(eddsa, pub) {
  if (pub instanceof KeyPair)
    return pub;
  return new KeyPair(eddsa, { pub: pub });
};

KeyPair.fromSecret = function fromSecret(eddsa, secret) {
  if (secret instanceof KeyPair)
    return secret;
  return new KeyPair(eddsa, { secret: secret });
};

KeyPair.prototype.secret = function secret() {
  return this._secret;
};

cachedProperty(KeyPair, 'pubBytes', function pubBytes() {
  return this.eddsa.encodePoint(this.pub());
});

cachedProperty(KeyPair, 'pub', function pub() {
  if (this._pubBytes)
    return this.eddsa.decodePoint(this._pubBytes);
  return this.eddsa.g.mul(this.priv());
});

cachedProperty(KeyPair, 'privBytes', function privBytes() {
  var eddsa = this.eddsa;
  var hash = this.hash();
  var lastIx = eddsa.encodingLength - 1;

  var a = hash.slice(0, eddsa.encodingLength);
  a[0] &= 248;
  a[lastIx] &= 127;
  a[lastIx] |= 64;

  return a;
});

cachedProperty(KeyPair, 'priv', function priv() {
  return this.eddsa.decodeInt(this.privBytes());
});

cachedProperty(KeyPair, 'hash', function hash() {
  return this.eddsa.hash().update(this.secret()).digest();
});

cachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {
  return this.hash().slice(this.eddsa.encodingLength);
});

KeyPair.prototype.sign = function sign(message) {
  assert(this._secret, 'KeyPair can only verify');
  return this.eddsa.sign(message, this);
};

KeyPair.prototype.verify = function verify(message, sig) {
  return this.eddsa.verify(message, sig, this);
};

KeyPair.prototype.getSecret = function getSecret(enc) {
  assert(this._secret, 'KeyPair is public only');
  return utils.encode(this.secret(), enc);
};

KeyPair.prototype.getPublic = function getPublic(enc) {
  return utils.encode(this.pubBytes(), enc);
};

module.exports = KeyPair;

},{"../utils":99}],97:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var utils = require('../utils');
var assert = utils.assert;
var cachedProperty = utils.cachedProperty;
var parseBytes = utils.parseBytes;

/**
* @param {EDDSA} eddsa - eddsa instance
* @param {Array<Bytes>|Object} sig -
* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
* @param {Array<Bytes>} [sig.Rencoded] - R point encoded
* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
*/
function Signature(eddsa, sig) {
  this.eddsa = eddsa;

  if (typeof sig !== 'object')
    sig = parseBytes(sig);

  if (Array.isArray(sig)) {
    sig = {
      R: sig.slice(0, eddsa.encodingLength),
      S: sig.slice(eddsa.encodingLength),
    };
  }

  assert(sig.R && sig.S, 'Signature without R or S');

  if (eddsa.isPoint(sig.R))
    this._R = sig.R;
  if (sig.S instanceof BN)
    this._S = sig.S;

  this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
  this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
}

cachedProperty(Signature, 'S', function S() {
  return this.eddsa.decodeInt(this.Sencoded());
});

cachedProperty(Signature, 'R', function R() {
  return this.eddsa.decodePoint(this.Rencoded());
});

cachedProperty(Signature, 'Rencoded', function Rencoded() {
  return this.eddsa.encodePoint(this.R());
});

cachedProperty(Signature, 'Sencoded', function Sencoded() {
  return this.eddsa.encodeInt(this.S());
});

Signature.prototype.toBytes = function toBytes() {
  return this.Rencoded().concat(this.Sencoded());
};

Signature.prototype.toHex = function toHex() {
  return utils.encode(this.toBytes(), 'hex').toUpperCase();
};

module.exports = Signature;

},{"../utils":99,"bn.js":100}],98:[function(require,module,exports){
module.exports = {
  doubles: {
    step: 4,
    points: [
      [
        'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
        'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821',
      ],
      [
        '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
        '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf',
      ],
      [
        '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
        'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695',
      ],
      [
        '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
        '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9',
      ],
      [
        '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
        '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36',
      ],
      [
        '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
        '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f',
      ],
      [
        'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
        '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999',
      ],
      [
        '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
        'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09',
      ],
      [
        'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
        '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d',
      ],
      [
        'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
        'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088',
      ],
      [
        'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
        '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d',
      ],
      [
        '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
        '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8',
      ],
      [
        '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
        '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a',
      ],
      [
        '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
        '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453',
      ],
      [
        '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
        '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160',
      ],
      [
        '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
        '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0',
      ],
      [
        '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
        '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6',
      ],
      [
        '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
        '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589',
      ],
      [
        '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
        'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17',
      ],
      [
        'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
        '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda',
      ],
      [
        'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
        '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd',
      ],
      [
        '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
        '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2',
      ],
      [
        '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
        '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6',
      ],
      [
        'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
        '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f',
      ],
      [
        '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
        'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01',
      ],
      [
        'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
        '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3',
      ],
      [
        'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
        'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f',
      ],
      [
        'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
        '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7',
      ],
      [
        'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
        'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78',
      ],
      [
        'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
        '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1',
      ],
      [
        '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
        'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150',
      ],
      [
        '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
        '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82',
      ],
      [
        'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
        '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc',
      ],
      [
        '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
        'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b',
      ],
      [
        'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
        '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51',
      ],
      [
        'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
        '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45',
      ],
      [
        'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
        'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120',
      ],
      [
        '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
        '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84',
      ],
      [
        '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
        '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d',
      ],
      [
        '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
        'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d',
      ],
      [
        '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
        '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8',
      ],
      [
        'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
        '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8',
      ],
      [
        '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
        '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac',
      ],
      [
        '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
        'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f',
      ],
      [
        '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
        '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962',
      ],
      [
        'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
        '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907',
      ],
      [
        '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
        'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec',
      ],
      [
        'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
        'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d',
      ],
      [
        'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
        '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414',
      ],
      [
        '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
        'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd',
      ],
      [
        '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
        'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0',
      ],
      [
        'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
        '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811',
      ],
      [
        'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
        '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1',
      ],
      [
        'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
        '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c',
      ],
      [
        '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
        'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73',
      ],
      [
        '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
        '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd',
      ],
      [
        'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
        'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405',
      ],
      [
        '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
        'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589',
      ],
      [
        '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
        '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e',
      ],
      [
        '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
        '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27',
      ],
      [
        'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
        'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1',
      ],
      [
        '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
        '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482',
      ],
      [
        '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
        '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945',
      ],
      [
        'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
        '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573',
      ],
      [
        'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
        'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82',
      ],
    ],
  },
  naf: {
    wnd: 7,
    points: [
      [
        'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
        '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672',
      ],
      [
        '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
        'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6',
      ],
      [
        '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
        '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da',
      ],
      [
        'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
        'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37',
      ],
      [
        '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
        'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b',
      ],
      [
        'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
        'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81',
      ],
      [
        'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
        '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58',
      ],
      [
        'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
        '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77',
      ],
      [
        '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
        '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a',
      ],
      [
        '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
        '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c',
      ],
      [
        '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
        '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67',
      ],
      [
        '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
        '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402',
      ],
      [
        'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
        'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55',
      ],
      [
        'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
        '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482',
      ],
      [
        '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
        'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82',
      ],
      [
        '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
        'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396',
      ],
      [
        '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
        '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49',
      ],
      [
        '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
        '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf',
      ],
      [
        '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
        '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a',
      ],
      [
        '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
        'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7',
      ],
      [
        'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
        'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933',
      ],
      [
        '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
        '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a',
      ],
      [
        '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
        '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6',
      ],
      [
        'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
        'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37',
      ],
      [
        '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
        '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e',
      ],
      [
        'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
        'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6',
      ],
      [
        'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
        'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476',
      ],
      [
        '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
        '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40',
      ],
      [
        '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
        '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61',
      ],
      [
        '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
        '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683',
      ],
      [
        'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
        '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5',
      ],
      [
        '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
        '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b',
      ],
      [
        'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
        '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417',
      ],
      [
        '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
        'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868',
      ],
      [
        '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
        'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a',
      ],
      [
        'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
        'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6',
      ],
      [
        '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
        '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996',
      ],
      [
        '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
        'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e',
      ],
      [
        'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
        'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d',
      ],
      [
        '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
        '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2',
      ],
      [
        '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
        'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e',
      ],
      [
        '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
        '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437',
      ],
      [
        '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
        'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311',
      ],
      [
        'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
        '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4',
      ],
      [
        '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
        '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575',
      ],
      [
        '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
        'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d',
      ],
      [
        '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
        'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d',
      ],
      [
        'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
        'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629',
      ],
      [
        'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
        'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06',
      ],
      [
        '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
        '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374',
      ],
      [
        '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
        '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee',
      ],
      [
        'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
        '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1',
      ],
      [
        'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
        'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b',
      ],
      [
        '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
        '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661',
      ],
      [
        '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
        '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6',
      ],
      [
        'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
        '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e',
      ],
      [
        '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
        '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d',
      ],
      [
        'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
        'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc',
      ],
      [
        '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
        'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4',
      ],
      [
        '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
        '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c',
      ],
      [
        'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
        '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b',
      ],
      [
        'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
        '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913',
      ],
      [
        '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
        '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154',
      ],
      [
        '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
        '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865',
      ],
      [
        '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
        'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc',
      ],
      [
        '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
        'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224',
      ],
      [
        '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
        '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e',
      ],
      [
        '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
        '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6',
      ],
      [
        '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
        '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511',
      ],
      [
        '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
        'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b',
      ],
      [
        'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
        'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2',
      ],
      [
        '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
        'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c',
      ],
      [
        'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
        '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3',
      ],
      [
        'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
        '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d',
      ],
      [
        'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
        '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700',
      ],
      [
        'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
        '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4',
      ],
      [
        '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
        'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196',
      ],
      [
        '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
        '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4',
      ],
      [
        '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
        'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257',
      ],
      [
        'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
        'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13',
      ],
      [
        'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
        '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096',
      ],
      [
        'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
        'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38',
      ],
      [
        'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
        '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f',
      ],
      [
        '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
        '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448',
      ],
      [
        'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
        '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a',
      ],
      [
        'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
        '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4',
      ],
      [
        '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
        '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437',
      ],
      [
        '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
        'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7',
      ],
      [
        'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
        '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d',
      ],
      [
        'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
        '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a',
      ],
      [
        'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
        '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54',
      ],
      [
        '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
        '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77',
      ],
      [
        'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
        'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517',
      ],
      [
        '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
        'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10',
      ],
      [
        'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
        'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125',
      ],
      [
        'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
        '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e',
      ],
      [
        '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
        'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1',
      ],
      [
        'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
        '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2',
      ],
      [
        'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
        '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423',
      ],
      [
        'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
        '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8',
      ],
      [
        '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
        'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758',
      ],
      [
        '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
        'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375',
      ],
      [
        'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
        '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d',
      ],
      [
        '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
        'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec',
      ],
      [
        '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
        '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0',
      ],
      [
        '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
        'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c',
      ],
      [
        'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
        'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4',
      ],
      [
        '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
        'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f',
      ],
      [
        '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
        '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649',
      ],
      [
        '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
        'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826',
      ],
      [
        '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
        '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5',
      ],
      [
        'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
        'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87',
      ],
      [
        '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
        '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b',
      ],
      [
        'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
        '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc',
      ],
      [
        '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
        '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c',
      ],
      [
        'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
        'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f',
      ],
      [
        'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
        '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a',
      ],
      [
        'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
        'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46',
      ],
      [
        '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
        'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f',
      ],
      [
        '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
        '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03',
      ],
      [
        '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
        'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08',
      ],
      [
        '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
        '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8',
      ],
      [
        '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
        '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373',
      ],
      [
        '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
        'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3',
      ],
      [
        '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
        '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8',
      ],
      [
        '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
        '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1',
      ],
      [
        '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
        '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9',
      ],
    ],
  },
};

},{}],99:[function(require,module,exports){
'use strict';

var utils = exports;
var BN = require('bn.js');
var minAssert = require('minimalistic-assert');
var minUtils = require('minimalistic-crypto-utils');

utils.assert = minAssert;
utils.toArray = minUtils.toArray;
utils.zero2 = minUtils.zero2;
utils.toHex = minUtils.toHex;
utils.encode = minUtils.encode;

// Represent num in a w-NAF form
function getNAF(num, w, bits) {
  var naf = new Array(Math.max(num.bitLength(), bits) + 1);
  naf.fill(0);

  var ws = 1 << (w + 1);
  var k = num.clone();

  for (var i = 0; i < naf.length; i++) {
    var z;
    var mod = k.andln(ws - 1);
    if (k.isOdd()) {
      if (mod > (ws >> 1) - 1)
        z = (ws >> 1) - mod;
      else
        z = mod;
      k.isubn(z);
    } else {
      z = 0;
    }

    naf[i] = z;
    k.iushrn(1);
  }

  return naf;
}
utils.getNAF = getNAF;

// Represent k1, k2 in a Joint Sparse Form
function getJSF(k1, k2) {
  var jsf = [
    [],
    [],
  ];

  k1 = k1.clone();
  k2 = k2.clone();
  var d1 = 0;
  var d2 = 0;
  var m8;
  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
    // First phase
    var m14 = (k1.andln(3) + d1) & 3;
    var m24 = (k2.andln(3) + d2) & 3;
    if (m14 === 3)
      m14 = -1;
    if (m24 === 3)
      m24 = -1;
    var u1;
    if ((m14 & 1) === 0) {
      u1 = 0;
    } else {
      m8 = (k1.andln(7) + d1) & 7;
      if ((m8 === 3 || m8 === 5) && m24 === 2)
        u1 = -m14;
      else
        u1 = m14;
    }
    jsf[0].push(u1);

    var u2;
    if ((m24 & 1) === 0) {
      u2 = 0;
    } else {
      m8 = (k2.andln(7) + d2) & 7;
      if ((m8 === 3 || m8 === 5) && m14 === 2)
        u2 = -m24;
      else
        u2 = m24;
    }
    jsf[1].push(u2);

    // Second phase
    if (2 * d1 === u1 + 1)
      d1 = 1 - d1;
    if (2 * d2 === u2 + 1)
      d2 = 1 - d2;
    k1.iushrn(1);
    k2.iushrn(1);
  }

  return jsf;
}
utils.getJSF = getJSF;

function cachedProperty(obj, name, computer) {
  var key = '_' + name;
  obj.prototype[name] = function cachedProperty() {
    return this[key] !== undefined ? this[key] :
      this[key] = computer.call(this);
  };
}
utils.cachedProperty = cachedProperty;

function parseBytes(bytes) {
  return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
    bytes;
}
utils.parseBytes = parseBytes;

function intFromLE(bytes) {
  return new BN(bytes, 'hex', 'le');
}
utils.intFromLE = intFromLE;


},{"bn.js":100,"minimalistic-assert":139,"minimalistic-crypto-utils":140}],100:[function(require,module,exports){
arguments[4][16][0].apply(exports,arguments)
},{"buffer":20,"dup":16}],101:[function(require,module,exports){
module.exports={
  "name": "elliptic",
  "version": "6.5.4",
  "description": "EC cryptography",
  "main": "lib/elliptic.js",
  "files": [
    "lib"
  ],
  "scripts": {
    "lint": "eslint lib test",
    "lint:fix": "npm run lint -- --fix",
    "unit": "istanbul test _mocha --reporter=spec test/index.js",
    "test": "npm run lint && npm run unit",
    "version": "grunt dist && git add dist/"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:indutny/elliptic"
  },
  "keywords": [
    "EC",
    "Elliptic",
    "curve",
    "Cryptography"
  ],
  "author": "Fedor Indutny <fedor@indutny.com>",
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/indutny/elliptic/issues"
  },
  "homepage": "https://github.com/indutny/elliptic",
  "devDependencies": {
    "brfs": "^2.0.2",
    "coveralls": "^3.1.0",
    "eslint": "^7.6.0",
    "grunt": "^1.2.1",
    "grunt-browserify": "^5.3.0",
    "grunt-cli": "^1.3.2",
    "grunt-contrib-connect": "^3.0.0",
    "grunt-contrib-copy": "^1.0.0",
    "grunt-contrib-uglify": "^5.0.0",
    "grunt-mocha-istanbul": "^5.0.2",
    "grunt-saucelabs": "^9.0.1",
    "istanbul": "^0.4.5",
    "mocha": "^8.0.1"
  },
  "dependencies": {
    "bn.js": "^4.11.9",
    "brorand": "^1.1.0",
    "hash.js": "^1.0.0",
    "hmac-drbg": "^1.0.1",
    "inherits": "^2.0.4",
    "minimalistic-assert": "^1.0.1",
    "minimalistic-crypto-utils": "^1.0.1"
  }
}

},{}],102:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

var R = typeof Reflect === 'object' ? Reflect : null
var ReflectApply = R && typeof R.apply === 'function'
  ? R.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  }

var ReflectOwnKeys
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target)
      .concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
}

function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function() {
    return defaultMaxListeners;
  },
  set: function(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function() {

  if (this._events === undefined ||
      this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};

function _getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');

  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined)
    return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  checkListener(listener);

  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
        prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = _getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' +
                          existing.length + ' ' + String(type) + ' listeners ' +
                          'added. Use emitter.setMaxListeners() to ' +
                          'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0)
      return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      checkListener(listener);

      events = this._events;
      if (events === undefined)
        return this;

      list = events[type];
      if (list === undefined)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener !== undefined)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (events === undefined)
        return this;

      // not listening for removeListener, no need to emit
      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (events === undefined)
    return [];

  var evlistener = events[type];
  if (evlistener === undefined)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ?
    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++)
    list[index] = list[index + 1];
  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function once(emitter, name) {
  return new Promise(function (resolve, reject) {
    function errorListener(err) {
      emitter.removeListener(name, resolver);
      reject(err);
    }

    function resolver() {
      if (typeof emitter.removeListener === 'function') {
        emitter.removeListener('error', errorListener);
      }
      resolve([].slice.call(arguments));
    };

    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
    if (name !== 'error') {
      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
    }
  });
}

function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
  if (typeof emitter.on === 'function') {
    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
  }
}

function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
  if (typeof emitter.on === 'function') {
    if (flags.once) {
      emitter.once(name, listener);
    } else {
      emitter.on(name, listener);
    }
  } else if (typeof emitter.addEventListener === 'function') {
    // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
      // IE does not have builtin `{ once: true }` support so we
      // have to do it manually.
      if (flags.once) {
        emitter.removeEventListener(name, wrapListener);
      }
      listener(arg);
    });
  } else {
    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
  }
}

},{}],103:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer
var MD5 = require('md5.js')

/* eslint-disable camelcase */
function EVP_BytesToKey (password, salt, keyBits, ivLen) {
  if (!Buffer.isBuffer(password)) password = Buffer.from(password, 'binary')
  if (salt) {
    if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, 'binary')
    if (salt.length !== 8) throw new RangeError('salt should be Buffer with 8 byte length')
  }

  var keyLen = keyBits / 8
  var key = Buffer.alloc(keyLen)
  var iv = Buffer.alloc(ivLen || 0)
  var tmp = Buffer.alloc(0)

  while (keyLen > 0 || ivLen > 0) {
    var hash = new MD5()
    hash.update(tmp)
    hash.update(password)
    if (salt) hash.update(salt)
    tmp = hash.digest()

    var used = 0

    if (keyLen > 0) {
      var keyStart = key.length - keyLen
      used = Math.min(keyLen, tmp.length)
      tmp.copy(key, keyStart, 0, used)
      keyLen -= used
    }

    if (used < tmp.length && ivLen > 0) {
      var ivStart = iv.length - ivLen
      var length = Math.min(ivLen, tmp.length - used)
      tmp.copy(iv, ivStart, used, used + length)
      ivLen -= length
    }
  }

  tmp.fill(0)
  return { key: key, iv: iv }
}

module.exports = EVP_BytesToKey

},{"md5.js":136,"safe-buffer":164}],104:[function(require,module,exports){
'use strict'
var Buffer = require('safe-buffer').Buffer
var Transform = require('readable-stream').Transform
var inherits = require('inherits')

function throwIfNotStringOrBuffer (val, prefix) {
  if (!Buffer.isBuffer(val) && typeof val !== 'string') {
    throw new TypeError(prefix + ' must be a string or a buffer')
  }
}

function HashBase (blockSize) {
  Transform.call(this)

  this._block = Buffer.allocUnsafe(blockSize)
  this._blockSize = blockSize
  this._blockOffset = 0
  this._length = [0, 0, 0, 0]

  this._finalized = false
}

inherits(HashBase, Transform)

HashBase.prototype._transform = function (chunk, encoding, callback) {
  var error = null
  try {
    this.update(chunk, encoding)
  } catch (err) {
    error = err
  }

  callback(error)
}

HashBase.prototype._flush = function (callback) {
  var error = null
  try {
    this.push(this.digest())
  } catch (err) {
    error = err
  }

  callback(error)
}

HashBase.prototype.update = function (data, encoding) {
  throwIfNotStringOrBuffer(data, 'Data')
  if (this._finalized) throw new Error('Digest already called')
  if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)

  // consume data
  var block = this._block
  var offset = 0
  while (this._blockOffset + data.length - offset >= this._blockSize) {
    for (var i = this._blockOffset; i < this._blockSize;) block[i++] = data[offset++]
    this._update()
    this._blockOffset = 0
  }
  while (offset < data.length) block[this._blockOffset++] = data[offset++]

  // update length
  for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
    this._length[j] += carry
    carry = (this._length[j] / 0x0100000000) | 0
    if (carry > 0) this._length[j] -= 0x0100000000 * carry
  }

  return this
}

HashBase.prototype._update = function () {
  throw new Error('_update is not implemented')
}

HashBase.prototype.digest = function (encoding) {
  if (this._finalized) throw new Error('Digest already called')
  this._finalized = true

  var digest = this._digest()
  if (encoding !== undefined) digest = digest.toString(encoding)

  // reset state
  this._block.fill(0)
  this._blockOffset = 0
  for (var i = 0; i < 4; ++i) this._length[i] = 0

  return digest
}

HashBase.prototype._digest = function () {
  throw new Error('_digest is not implemented')
}

module.exports = HashBase

},{"inherits":134,"readable-stream":119,"safe-buffer":164}],105:[function(require,module,exports){
arguments[4][48][0].apply(exports,arguments)
},{"dup":48}],106:[function(require,module,exports){
arguments[4][49][0].apply(exports,arguments)
},{"./_stream_readable":108,"./_stream_writable":110,"_process":153,"dup":49,"inherits":134}],107:[function(require,module,exports){
arguments[4][50][0].apply(exports,arguments)
},{"./_stream_transform":109,"dup":50,"inherits":134}],108:[function(require,module,exports){
arguments[4][51][0].apply(exports,arguments)
},{"../errors":105,"./_stream_duplex":106,"./internal/streams/async_iterator":111,"./internal/streams/buffer_list":112,"./internal/streams/destroy":113,"./internal/streams/from":115,"./internal/streams/state":117,"./internal/streams/stream":118,"_process":153,"buffer":65,"dup":51,"events":102,"inherits":134,"string_decoder/":189,"util":20}],109:[function(require,module,exports){
arguments[4][52][0].apply(exports,arguments)
},{"../errors":105,"./_stream_duplex":106,"dup":52,"inherits":134}],110:[function(require,module,exports){
arguments[4][53][0].apply(exports,arguments)
},{"../errors":105,"./_stream_duplex":106,"./internal/streams/destroy":113,"./internal/streams/state":117,"./internal/streams/stream":118,"_process":153,"buffer":65,"dup":53,"inherits":134,"util-deprecate":190}],111:[function(require,module,exports){
arguments[4][54][0].apply(exports,arguments)
},{"./end-of-stream":114,"_process":153,"dup":54}],112:[function(require,module,exports){
arguments[4][55][0].apply(exports,arguments)
},{"buffer":65,"dup":55,"util":20}],113:[function(require,module,exports){
arguments[4][56][0].apply(exports,arguments)
},{"_process":153,"dup":56}],114:[function(require,module,exports){
arguments[4][57][0].apply(exports,arguments)
},{"../../../errors":105,"dup":57}],115:[function(require,module,exports){
arguments[4][58][0].apply(exports,arguments)
},{"dup":58}],116:[function(require,module,exports){
arguments[4][59][0].apply(exports,arguments)
},{"../../../errors":105,"./end-of-stream":114,"dup":59}],117:[function(require,module,exports){
arguments[4][60][0].apply(exports,arguments)
},{"../../../errors":105,"dup":60}],118:[function(require,module,exports){
arguments[4][61][0].apply(exports,arguments)
},{"dup":61,"events":102}],119:[function(require,module,exports){
arguments[4][62][0].apply(exports,arguments)
},{"./lib/_stream_duplex.js":106,"./lib/_stream_passthrough.js":107,"./lib/_stream_readable.js":108,"./lib/_stream_transform.js":109,"./lib/_stream_writable.js":110,"./lib/internal/streams/end-of-stream.js":114,"./lib/internal/streams/pipeline.js":116,"dup":62}],120:[function(require,module,exports){
var hash = exports;

hash.utils = require('./hash/utils');
hash.common = require('./hash/common');
hash.sha = require('./hash/sha');
hash.ripemd = require('./hash/ripemd');
hash.hmac = require('./hash/hmac');

// Proxy hash functions to the main object
hash.sha1 = hash.sha.sha1;
hash.sha256 = hash.sha.sha256;
hash.sha224 = hash.sha.sha224;
hash.sha384 = hash.sha.sha384;
hash.sha512 = hash.sha.sha512;
hash.ripemd160 = hash.ripemd.ripemd160;

},{"./hash/common":121,"./hash/hmac":122,"./hash/ripemd":123,"./hash/sha":124,"./hash/utils":131}],121:[function(require,module,exports){
'use strict';

var utils = require('./utils');
var assert = require('minimalistic-assert');

function BlockHash() {
  this.pending = null;
  this.pendingTotal = 0;
  this.blockSize = this.constructor.blockSize;
  this.outSize = this.constructor.outSize;
  this.hmacStrength = this.constructor.hmacStrength;
  this.padLength = this.constructor.padLength / 8;
  this.endian = 'big';

  this._delta8 = this.blockSize / 8;
  this._delta32 = this.blockSize / 32;
}
exports.BlockHash = BlockHash;

BlockHash.prototype.update = function update(msg, enc) {
  // Convert message to array, pad it, and join into 32bit blocks
  msg = utils.toArray(msg, enc);
  if (!this.pending)
    this.pending = msg;
  else
    this.pending = this.pending.concat(msg);
  this.pendingTotal += msg.length;

  // Enough data, try updating
  if (this.pending.length >= this._delta8) {
    msg = this.pending;

    // Process pending data in blocks
    var r = msg.length % this._delta8;
    this.pending = msg.slice(msg.length - r, msg.length);
    if (this.pending.length === 0)
      this.pending = null;

    msg = utils.join32(msg, 0, msg.length - r, this.endian);
    for (var i = 0; i < msg.length; i += this._delta32)
      this._update(msg, i, i + this._delta32);
  }

  return this;
};

BlockHash.prototype.digest = function digest(enc) {
  this.update(this._pad());
  assert(this.pending === null);

  return this._digest(enc);
};

BlockHash.prototype._pad = function pad() {
  var len = this.pendingTotal;
  var bytes = this._delta8;
  var k = bytes - ((len + this.padLength) % bytes);
  var res = new Array(k + this.padLength);
  res[0] = 0x80;
  for (var i = 1; i < k; i++)
    res[i] = 0;

  // Append length
  len <<= 3;
  if (this.endian === 'big') {
    for (var t = 8; t < this.padLength; t++)
      res[i++] = 0;

    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = len & 0xff;
  } else {
    res[i++] = len & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;

    for (t = 8; t < this.padLength; t++)
      res[i++] = 0;
  }

  return res;
};

},{"./utils":131,"minimalistic-assert":139}],122:[function(require,module,exports){
'use strict';

var utils = require('./utils');
var assert = require('minimalistic-assert');

function Hmac(hash, key, enc) {
  if (!(this instanceof Hmac))
    return new Hmac(hash, key, enc);
  this.Hash = hash;
  this.blockSize = hash.blockSize / 8;
  this.outSize = hash.outSize / 8;
  this.inner = null;
  this.outer = null;

  this._init(utils.toArray(key, enc));
}
module.exports = Hmac;

Hmac.prototype._init = function init(key) {
  // Shorten key, if needed
  if (key.length > this.blockSize)
    key = new this.Hash().update(key).digest();
  assert(key.length <= this.blockSize);

  // Add padding to key
  for (var i = key.length; i < this.blockSize; i++)
    key.push(0);

  for (i = 0; i < key.length; i++)
    key[i] ^= 0x36;
  this.inner = new this.Hash().update(key);

  // 0x36 ^ 0x5c = 0x6a
  for (i = 0; i < key.length; i++)
    key[i] ^= 0x6a;
  this.outer = new this.Hash().update(key);
};

Hmac.prototype.update = function update(msg, enc) {
  this.inner.update(msg, enc);
  return this;
};

Hmac.prototype.digest = function digest(enc) {
  this.outer.update(this.inner.digest());
  return this.outer.digest(enc);
};

},{"./utils":131,"minimalistic-assert":139}],123:[function(require,module,exports){
'use strict';

var utils = require('./utils');
var common = require('./common');

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_3 = utils.sum32_3;
var sum32_4 = utils.sum32_4;
var BlockHash = common.BlockHash;

function RIPEMD160() {
  if (!(this instanceof RIPEMD160))
    return new RIPEMD160();

  BlockHash.call(this);

  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
  this.endian = 'little';
}
utils.inherits(RIPEMD160, BlockHash);
exports.ripemd160 = RIPEMD160;

RIPEMD160.blockSize = 512;
RIPEMD160.outSize = 160;
RIPEMD160.hmacStrength = 192;
RIPEMD160.padLength = 64;

RIPEMD160.prototype._update = function update(msg, start) {
  var A = this.h[0];
  var B = this.h[1];
  var C = this.h[2];
  var D = this.h[3];
  var E = this.h[4];
  var Ah = A;
  var Bh = B;
  var Ch = C;
  var Dh = D;
  var Eh = E;
  for (var j = 0; j < 80; j++) {
    var T = sum32(
      rotl32(
        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
        s[j]),
      E);
    A = E;
    E = D;
    D = rotl32(C, 10);
    C = B;
    B = T;
    T = sum32(
      rotl32(
        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
        sh[j]),
      Eh);
    Ah = Eh;
    Eh = Dh;
    Dh = rotl32(Ch, 10);
    Ch = Bh;
    Bh = T;
  }
  T = sum32_3(this.h[1], C, Dh);
  this.h[1] = sum32_3(this.h[2], D, Eh);
  this.h[2] = sum32_3(this.h[3], E, Ah);
  this.h[3] = sum32_3(this.h[4], A, Bh);
  this.h[4] = sum32_3(this.h[0], B, Ch);
  this.h[0] = T;
};

RIPEMD160.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'little');
  else
    return utils.split32(this.h, 'little');
};

function f(j, x, y, z) {
  if (j <= 15)
    return x ^ y ^ z;
  else if (j <= 31)
    return (x & y) | ((~x) & z);
  else if (j <= 47)
    return (x | (~y)) ^ z;
  else if (j <= 63)
    return (x & z) | (y & (~z));
  else
    return x ^ (y | (~z));
}

function K(j) {
  if (j <= 15)
    return 0x00000000;
  else if (j <= 31)
    return 0x5a827999;
  else if (j <= 47)
    return 0x6ed9eba1;
  else if (j <= 63)
    return 0x8f1bbcdc;
  else
    return 0xa953fd4e;
}

function Kh(j) {
  if (j <= 15)
    return 0x50a28be6;
  else if (j <= 31)
    return 0x5c4dd124;
  else if (j <= 47)
    return 0x6d703ef3;
  else if (j <= 63)
    return 0x7a6d76e9;
  else
    return 0x00000000;
}

var r = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
];

var rh = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
];

var s = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
];

var sh = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
];

},{"./common":121,"./utils":131}],124:[function(require,module,exports){
'use strict';

exports.sha1 = require('./sha/1');
exports.sha224 = require('./sha/224');
exports.sha256 = require('./sha/256');
exports.sha384 = require('./sha/384');
exports.sha512 = require('./sha/512');

},{"./sha/1":125,"./sha/224":126,"./sha/256":127,"./sha/384":128,"./sha/512":129}],125:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var common = require('../common');
var shaCommon = require('./common');

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_5 = utils.sum32_5;
var ft_1 = shaCommon.ft_1;
var BlockHash = common.BlockHash;

var sha1_K = [
  0x5A827999, 0x6ED9EBA1,
  0x8F1BBCDC, 0xCA62C1D6
];

function SHA1() {
  if (!(this instanceof SHA1))
    return new SHA1();

  BlockHash.call(this);
  this.h = [
    0x67452301, 0xefcdab89, 0x98badcfe,
    0x10325476, 0xc3d2e1f0 ];
  this.W = new Array(80);
}

utils.inherits(SHA1, BlockHash);
module.exports = SHA1;

SHA1.blockSize = 512;
SHA1.outSize = 160;
SHA1.hmacStrength = 80;
SHA1.padLength = 64;

SHA1.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];

  for(; i < W.length; i++)
    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];

  for (i = 0; i < W.length; i++) {
    var s = ~~(i / 20);
    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
    e = d;
    d = c;
    c = rotl32(b, 30);
    b = a;
    a = t;
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
};

SHA1.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

},{"../common":121,"../utils":131,"./common":130}],126:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var SHA256 = require('./256');

function SHA224() {
  if (!(this instanceof SHA224))
    return new SHA224();

  SHA256.call(this);
  this.h = [
    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
}
utils.inherits(SHA224, SHA256);
module.exports = SHA224;

SHA224.blockSize = 512;
SHA224.outSize = 224;
SHA224.hmacStrength = 192;
SHA224.padLength = 64;

SHA224.prototype._digest = function digest(enc) {
  // Just truncate output
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 7), 'big');
  else
    return utils.split32(this.h.slice(0, 7), 'big');
};


},{"../utils":131,"./256":127}],127:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var common = require('../common');
var shaCommon = require('./common');
var assert = require('minimalistic-assert');

var sum32 = utils.sum32;
var sum32_4 = utils.sum32_4;
var sum32_5 = utils.sum32_5;
var ch32 = shaCommon.ch32;
var maj32 = shaCommon.maj32;
var s0_256 = shaCommon.s0_256;
var s1_256 = shaCommon.s1_256;
var g0_256 = shaCommon.g0_256;
var g1_256 = shaCommon.g1_256;

var BlockHash = common.BlockHash;

var sha256_K = [
  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
];

function SHA256() {
  if (!(this instanceof SHA256))
    return new SHA256();

  BlockHash.call(this);
  this.h = [
    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
  ];
  this.k = sha256_K;
  this.W = new Array(64);
}
utils.inherits(SHA256, BlockHash);
module.exports = SHA256;

SHA256.blockSize = 512;
SHA256.outSize = 256;
SHA256.hmacStrength = 192;
SHA256.padLength = 64;

SHA256.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i++)
    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];
  var f = this.h[5];
  var g = this.h[6];
  var h = this.h[7];

  assert(this.k.length === W.length);
  for (i = 0; i < W.length; i++) {
    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
    var T2 = sum32(s0_256(a), maj32(a, b, c));
    h = g;
    g = f;
    f = e;
    e = sum32(d, T1);
    d = c;
    c = b;
    b = a;
    a = sum32(T1, T2);
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
  this.h[5] = sum32(this.h[5], f);
  this.h[6] = sum32(this.h[6], g);
  this.h[7] = sum32(this.h[7], h);
};

SHA256.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

},{"../common":121,"../utils":131,"./common":130,"minimalistic-assert":139}],128:[function(require,module,exports){
'use strict';

var utils = require('../utils');

var SHA512 = require('./512');

function SHA384() {
  if (!(this instanceof SHA384))
    return new SHA384();

  SHA512.call(this);
  this.h = [
    0xcbbb9d5d, 0xc1059ed8,
    0x629a292a, 0x367cd507,
    0x9159015a, 0x3070dd17,
    0x152fecd8, 0xf70e5939,
    0x67332667, 0xffc00b31,
    0x8eb44a87, 0x68581511,
    0xdb0c2e0d, 0x64f98fa7,
    0x47b5481d, 0xbefa4fa4 ];
}
utils.inherits(SHA384, SHA512);
module.exports = SHA384;

SHA384.blockSize = 1024;
SHA384.outSize = 384;
SHA384.hmacStrength = 192;
SHA384.padLength = 128;

SHA384.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 12), 'big');
  else
    return utils.split32(this.h.slice(0, 12), 'big');
};

},{"../utils":131,"./512":129}],129:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var common = require('../common');
var assert = require('minimalistic-assert');

var rotr64_hi = utils.rotr64_hi;
var rotr64_lo = utils.rotr64_lo;
var shr64_hi = utils.shr64_hi;
var shr64_lo = utils.shr64_lo;
var sum64 = utils.sum64;
var sum64_hi = utils.sum64_hi;
var sum64_lo = utils.sum64_lo;
var sum64_4_hi = utils.sum64_4_hi;
var sum64_4_lo = utils.sum64_4_lo;
var sum64_5_hi = utils.sum64_5_hi;
var sum64_5_lo = utils.sum64_5_lo;

var BlockHash = common.BlockHash;

var sha512_K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
];

function SHA512() {
  if (!(this instanceof SHA512))
    return new SHA512();

  BlockHash.call(this);
  this.h = [
    0x6a09e667, 0xf3bcc908,
    0xbb67ae85, 0x84caa73b,
    0x3c6ef372, 0xfe94f82b,
    0xa54ff53a, 0x5f1d36f1,
    0x510e527f, 0xade682d1,
    0x9b05688c, 0x2b3e6c1f,
    0x1f83d9ab, 0xfb41bd6b,
    0x5be0cd19, 0x137e2179 ];
  this.k = sha512_K;
  this.W = new Array(160);
}
utils.inherits(SHA512, BlockHash);
module.exports = SHA512;

SHA512.blockSize = 1024;
SHA512.outSize = 512;
SHA512.hmacStrength = 192;
SHA512.padLength = 128;

SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
  var W = this.W;

  // 32 x 32bit words
  for (var i = 0; i < 32; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i += 2) {
    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
    var c1_hi = W[i - 14];  // i - 7
    var c1_lo = W[i - 13];
    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
    var c3_hi = W[i - 32];  // i - 16
    var c3_lo = W[i - 31];

    W[i] = sum64_4_hi(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo);
    W[i + 1] = sum64_4_lo(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo);
  }
};

SHA512.prototype._update = function _update(msg, start) {
  this._prepareBlock(msg, start);

  var W = this.W;

  var ah = this.h[0];
  var al = this.h[1];
  var bh = this.h[2];
  var bl = this.h[3];
  var ch = this.h[4];
  var cl = this.h[5];
  var dh = this.h[6];
  var dl = this.h[7];
  var eh = this.h[8];
  var el = this.h[9];
  var fh = this.h[10];
  var fl = this.h[11];
  var gh = this.h[12];
  var gl = this.h[13];
  var hh = this.h[14];
  var hl = this.h[15];

  assert(this.k.length === W.length);
  for (var i = 0; i < W.length; i += 2) {
    var c0_hi = hh;
    var c0_lo = hl;
    var c1_hi = s1_512_hi(eh, el);
    var c1_lo = s1_512_lo(eh, el);
    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
    var c3_hi = this.k[i];
    var c3_lo = this.k[i + 1];
    var c4_hi = W[i];
    var c4_lo = W[i + 1];

    var T1_hi = sum64_5_hi(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo,
      c4_hi, c4_lo);
    var T1_lo = sum64_5_lo(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo,
      c4_hi, c4_lo);

    c0_hi = s0_512_hi(ah, al);
    c0_lo = s0_512_lo(ah, al);
    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

    hh = gh;
    hl = gl;

    gh = fh;
    gl = fl;

    fh = eh;
    fl = el;

    eh = sum64_hi(dh, dl, T1_hi, T1_lo);
    el = sum64_lo(dl, dl, T1_hi, T1_lo);

    dh = ch;
    dl = cl;

    ch = bh;
    cl = bl;

    bh = ah;
    bl = al;

    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
  }

  sum64(this.h, 0, ah, al);
  sum64(this.h, 2, bh, bl);
  sum64(this.h, 4, ch, cl);
  sum64(this.h, 6, dh, dl);
  sum64(this.h, 8, eh, el);
  sum64(this.h, 10, fh, fl);
  sum64(this.h, 12, gh, gl);
  sum64(this.h, 14, hh, hl);
};

SHA512.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

function ch64_hi(xh, xl, yh, yl, zh) {
  var r = (xh & yh) ^ ((~xh) & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function ch64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ ((~xl) & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_hi(xh, xl, yh, yl, zh) {
  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 28);
  var c1_hi = rotr64_hi(xl, xh, 2);  // 34
  var c2_hi = rotr64_hi(xl, xh, 7);  // 39

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 28);
  var c1_lo = rotr64_lo(xl, xh, 2);  // 34
  var c2_lo = rotr64_lo(xl, xh, 7);  // 39

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 14);
  var c1_hi = rotr64_hi(xh, xl, 18);
  var c2_hi = rotr64_hi(xl, xh, 9);  // 41

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 14);
  var c1_lo = rotr64_lo(xh, xl, 18);
  var c2_lo = rotr64_lo(xl, xh, 9);  // 41

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 1);
  var c1_hi = rotr64_hi(xh, xl, 8);
  var c2_hi = shr64_hi(xh, xl, 7);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 1);
  var c1_lo = rotr64_lo(xh, xl, 8);
  var c2_lo = shr64_lo(xh, xl, 7);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 19);
  var c1_hi = rotr64_hi(xl, xh, 29);  // 61
  var c2_hi = shr64_hi(xh, xl, 6);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 19);
  var c1_lo = rotr64_lo(xl, xh, 29);  // 61
  var c2_lo = shr64_lo(xh, xl, 6);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

},{"../common":121,"../utils":131,"minimalistic-assert":139}],130:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var rotr32 = utils.rotr32;

function ft_1(s, x, y, z) {
  if (s === 0)
    return ch32(x, y, z);
  if (s === 1 || s === 3)
    return p32(x, y, z);
  if (s === 2)
    return maj32(x, y, z);
}
exports.ft_1 = ft_1;

function ch32(x, y, z) {
  return (x & y) ^ ((~x) & z);
}
exports.ch32 = ch32;

function maj32(x, y, z) {
  return (x & y) ^ (x & z) ^ (y & z);
}
exports.maj32 = maj32;

function p32(x, y, z) {
  return x ^ y ^ z;
}
exports.p32 = p32;

function s0_256(x) {
  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
}
exports.s0_256 = s0_256;

function s1_256(x) {
  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
}
exports.s1_256 = s1_256;

function g0_256(x) {
  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
}
exports.g0_256 = g0_256;

function g1_256(x) {
  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
}
exports.g1_256 = g1_256;

},{"../utils":131}],131:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

exports.inherits = inherits;

function isSurrogatePair(msg, i) {
  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {
    return false;
  }
  if (i < 0 || i + 1 >= msg.length) {
    return false;
  }
  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
}

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg === 'string') {
    if (!enc) {
      // Inspired by stringToUtf8ByteArray() in closure-library by Google
      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
      // Apache License 2.0
      // https://github.com/google/closure-library/blob/master/LICENSE
      var p = 0;
      for (var i = 0; i < msg.length; i++) {
        var c = msg.charCodeAt(i);
        if (c < 128) {
          res[p++] = c;
        } else if (c < 2048) {
          res[p++] = (c >> 6) | 192;
          res[p++] = (c & 63) | 128;
        } else if (isSurrogatePair(msg, i)) {
          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
          res[p++] = (c >> 18) | 240;
          res[p++] = ((c >> 12) & 63) | 128;
          res[p++] = ((c >> 6) & 63) | 128;
          res[p++] = (c & 63) | 128;
        } else {
          res[p++] = (c >> 12) | 224;
          res[p++] = ((c >> 6) & 63) | 128;
          res[p++] = (c & 63) | 128;
        }
      }
    } else if (enc === 'hex') {
      msg = msg.replace(/[^a-z0-9]+/ig, '');
      if (msg.length % 2 !== 0)
        msg = '0' + msg;
      for (i = 0; i < msg.length; i += 2)
        res.push(parseInt(msg[i] + msg[i + 1], 16));
    }
  } else {
    for (i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
  }
  return res;
}
exports.toArray = toArray;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
exports.toHex = toHex;

function htonl(w) {
  var res = (w >>> 24) |
            ((w >>> 8) & 0xff00) |
            ((w << 8) & 0xff0000) |
            ((w & 0xff) << 24);
  return res >>> 0;
}
exports.htonl = htonl;

function toHex32(msg, endian) {
  var res = '';
  for (var i = 0; i < msg.length; i++) {
    var w = msg[i];
    if (endian === 'little')
      w = htonl(w);
    res += zero8(w.toString(16));
  }
  return res;
}
exports.toHex32 = toHex32;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
exports.zero2 = zero2;

function zero8(word) {
  if (word.length === 7)
    return '0' + word;
  else if (word.length === 6)
    return '00' + word;
  else if (word.length === 5)
    return '000' + word;
  else if (word.length === 4)
    return '0000' + word;
  else if (word.length === 3)
    return '00000' + word;
  else if (word.length === 2)
    return '000000' + word;
  else if (word.length === 1)
    return '0000000' + word;
  else
    return word;
}
exports.zero8 = zero8;

function join32(msg, start, end, endian) {
  var len = end - start;
  assert(len % 4 === 0);
  var res = new Array(len / 4);
  for (var i = 0, k = start; i < res.length; i++, k += 4) {
    var w;
    if (endian === 'big')
      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
    else
      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
    res[i] = w >>> 0;
  }
  return res;
}
exports.join32 = join32;

function split32(msg, endian) {
  var res = new Array(msg.length * 4);
  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
    var m = msg[i];
    if (endian === 'big') {
      res[k] = m >>> 24;
      res[k + 1] = (m >>> 16) & 0xff;
      res[k + 2] = (m >>> 8) & 0xff;
      res[k + 3] = m & 0xff;
    } else {
      res[k + 3] = m >>> 24;
      res[k + 2] = (m >>> 16) & 0xff;
      res[k + 1] = (m >>> 8) & 0xff;
      res[k] = m & 0xff;
    }
  }
  return res;
}
exports.split32 = split32;

function rotr32(w, b) {
  return (w >>> b) | (w << (32 - b));
}
exports.rotr32 = rotr32;

function rotl32(w, b) {
  return (w << b) | (w >>> (32 - b));
}
exports.rotl32 = rotl32;

function sum32(a, b) {
  return (a + b) >>> 0;
}
exports.sum32 = sum32;

function sum32_3(a, b, c) {
  return (a + b + c) >>> 0;
}
exports.sum32_3 = sum32_3;

function sum32_4(a, b, c, d) {
  return (a + b + c + d) >>> 0;
}
exports.sum32_4 = sum32_4;

function sum32_5(a, b, c, d, e) {
  return (a + b + c + d + e) >>> 0;
}
exports.sum32_5 = sum32_5;

function sum64(buf, pos, ah, al) {
  var bh = buf[pos];
  var bl = buf[pos + 1];

  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  buf[pos] = hi >>> 0;
  buf[pos + 1] = lo;
}
exports.sum64 = sum64;

function sum64_hi(ah, al, bh, bl) {
  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  return hi >>> 0;
}
exports.sum64_hi = sum64_hi;

function sum64_lo(ah, al, bh, bl) {
  var lo = al + bl;
  return lo >>> 0;
}
exports.sum64_lo = sum64_lo;

function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;

  var hi = ah + bh + ch + dh + carry;
  return hi >>> 0;
}
exports.sum64_4_hi = sum64_4_hi;

function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
  var lo = al + bl + cl + dl;
  return lo >>> 0;
}
exports.sum64_4_lo = sum64_4_lo;

function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;
  lo = (lo + el) >>> 0;
  carry += lo < el ? 1 : 0;

  var hi = ah + bh + ch + dh + eh + carry;
  return hi >>> 0;
}
exports.sum64_5_hi = sum64_5_hi;

function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var lo = al + bl + cl + dl + el;

  return lo >>> 0;
}
exports.sum64_5_lo = sum64_5_lo;

function rotr64_hi(ah, al, num) {
  var r = (al << (32 - num)) | (ah >>> num);
  return r >>> 0;
}
exports.rotr64_hi = rotr64_hi;

function rotr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
}
exports.rotr64_lo = rotr64_lo;

function shr64_hi(ah, al, num) {
  return ah >>> num;
}
exports.shr64_hi = shr64_hi;

function shr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
}
exports.shr64_lo = shr64_lo;

},{"inherits":134,"minimalistic-assert":139}],132:[function(require,module,exports){
'use strict';

var hash = require('hash.js');
var utils = require('minimalistic-crypto-utils');
var assert = require('minimalistic-assert');

function HmacDRBG(options) {
  if (!(this instanceof HmacDRBG))
    return new HmacDRBG(options);
  this.hash = options.hash;
  this.predResist = !!options.predResist;

  this.outLen = this.hash.outSize;
  this.minEntropy = options.minEntropy || this.hash.hmacStrength;

  this._reseed = null;
  this.reseedInterval = null;
  this.K = null;
  this.V = null;

  var entropy = utils.toArray(options.entropy, options.entropyEnc || 'hex');
  var nonce = utils.toArray(options.nonce, options.nonceEnc || 'hex');
  var pers = utils.toArray(options.pers, options.persEnc || 'hex');
  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
  this._init(entropy, nonce, pers);
}
module.exports = HmacDRBG;

HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
  var seed = entropy.concat(nonce).concat(pers);

  this.K = new Array(this.outLen / 8);
  this.V = new Array(this.outLen / 8);
  for (var i = 0; i < this.V.length; i++) {
    this.K[i] = 0x00;
    this.V[i] = 0x01;
  }

  this._update(seed);
  this._reseed = 1;
  this.reseedInterval = 0x1000000000000;  // 2^48
};

HmacDRBG.prototype._hmac = function hmac() {
  return new hash.hmac(this.hash, this.K);
};

HmacDRBG.prototype._update = function update(seed) {
  var kmac = this._hmac()
                 .update(this.V)
                 .update([ 0x00 ]);
  if (seed)
    kmac = kmac.update(seed);
  this.K = kmac.digest();
  this.V = this._hmac().update(this.V).digest();
  if (!seed)
    return;

  this.K = this._hmac()
               .update(this.V)
               .update([ 0x01 ])
               .update(seed)
               .digest();
  this.V = this._hmac().update(this.V).digest();
};

HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
  // Optional entropy enc
  if (typeof entropyEnc !== 'string') {
    addEnc = add;
    add = entropyEnc;
    entropyEnc = null;
  }

  entropy = utils.toArray(entropy, entropyEnc);
  add = utils.toArray(add, addEnc);

  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

  this._update(entropy.concat(add || []));
  this._reseed = 1;
};

HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
  if (this._reseed > this.reseedInterval)
    throw new Error('Reseed is required');

  // Optional encoding
  if (typeof enc !== 'string') {
    addEnc = add;
    add = enc;
    enc = null;
  }

  // Optional additional data
  if (add) {
    add = utils.toArray(add, addEnc || 'hex');
    this._update(add);
  }

  var temp = [];
  while (temp.length < len) {
    this.V = this._hmac().update(this.V).digest();
    temp = temp.concat(this.V);
  }

  var res = temp.slice(0, len);
  this._update(add);
  this._reseed++;
  return utils.encode(res, enc);
};

},{"hash.js":120,"minimalistic-assert":139,"minimalistic-crypto-utils":140}],133:[function(require,module,exports){
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],134:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      })
    }
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }
}

},{}],135:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__dirname){(function (){
!(function(exports){var module;
var Module;if(typeof Module==="undefined")Module={};if(!Module.expectedDataFileDownloads){Module.expectedDataFileDownloads=0;Module.finishedDataFileDownloads=0}Module.expectedDataFileDownloads++;((function(){var loadPackage=(function(metadata){function runWithFS(){var fileData0=[];fileData0.push.apply(fileData0,[45,45,32,77,97,107,101,32,119,105,110,100,111,119,32,111,98,106,101,99,116,32,97,32,103,108,111,98,97,108,10,119,105,110,100,111,119,32,61,32,106,115,46,103,108,111,98,97,108,59,10,10,100,111,32,45,45,32,67,114,101,97,116,101,32,106,115,46,105,112,97,105,114,115,32,97,110,100,32,106,115,46,112,97,105,114,115,32,102,117,110,99,116,105,111,110,115,46,32,97,116,116,97,99,104,32,97,115,32,95,95,112,97,105,114,115,32,97,110,100,32,95,95,105,112,97,105,114,115,32,111,110,32,74,83,32,117,115,101,114,100,97,116,97,32,111,98,106,101,99,116,115,46,10,9,108,111,99,97,108,32,95,80,82,79,88,89,95,77,84,32,61,32,100,101,98,117,103,46,103,101,116,114,101,103,105,115,116,114,121,40,41,46,95,80,82,79,88,89,95,77,84,10,10,9,45,45,32,73,116,101,114,97,116,101,115,32,102,114,111,109,32,48,32,116,111,32,99,111,108,108,101,99,116,105,111,110,46,108,101,110,103,116,104,45,49,10,9,108,111,99,97,108,32,102,117,110,99,116,105,111,110,32,106,115,95,105,110,101,120,116,40,99,111,108,108,101,99,116,105,111,110,44,32,105,41,10,9,9,105,32,61,32,105,32,43,32,49,10,9,9,105,102,32,105,32,62,61,32,99,111,108,108,101,99,116,105,111,110,46,108,101,110,103,116,104,32,116,104,101,110,32,114,101,116,117,114,110,32,110,105,108,32,101,110,100,10,9,9,114,101,116,117,114,110,32,105,44,32,99,111,108,108,101,99,116,105,111,110,91,105,93,10,9,101,110,100,10,9,102,117,110,99,116,105,111,110,32,106,115,46,105,112,97,105,114,115,40,99,111,108,108,101,99,116,105,111,110,41,10,9,9,114,101,116,117,114,110,32,106,115,95,105,110,101,120,116,44,32,99,111,108,108,101,99,116,105,111,110,44,32,45,49,10,9,101,110,100,10,9,95,80,82,79,88,89,95,77,84,46,95,95,105,112,97,105,114,115,32,61,32,106,115,46,105,112,97,105,114,115,10,10,9,102,117,110,99,116,105,111,110,32,106,115,46,112,97,105,114,115,40,111,98,41,10,9,9,108,111,99,97,108,32,107,101,121,115,32,61,32,106,115,46,103,108,111,98,97,108,46,79,98,106,101,99,116,58,103,101,116,79,119,110,80,114,111,112,101,114,116,121,78,97,109,101,115,40,111,98,41,32,45,45,32,83,104,111,117,108,100,32,116,104,105,115,32,98,101,32,79,98,106,101,99,116,46,107,101,121,115,63,10,9,9,108,111,99,97,108,32,105,32,61,32,48,10,9,9,114,101,116,117,114,110,32,102,117,110,99,116,105,111,110,40,111,98,44,32,108,97,115,116,41,10,9,9,9,108,111,99,97,108,32,107,32,61,32,107,101,121,115,91,105,93,10,9,9,9,105,32,61,32,105,32,43,32,49,59,10,9,9,9,114,101,116,117,114,110,32,107,44,32,111,98,91,107,93,10,9,9,101,110,100,44,32,111,98,44,32,110,105,108,10,9,101,110,100,10,9,95,80,82,79,88,89,95,77,84,46,95,95,112,97,105,114,115,32,61,32,106,115,46,112,97,105,114,115,10,101,110,100,10,10,45,45,32,83,101,116,32,117,112,32,114,101,113,117,105,114,101,32,112,97,116,104,115,32,116,111,32,98,101,32,115,101,110,115,105,98,108,101,32,102,111,114,32,116,104,101,32,98,114,111,119,115,101,114,10,108,111,99,97,108,32,102,117,110,99,116,105,111,110,32,108,111,97,100,95,108,117,97,95,111,118,101,114,95,104,116,116,112,40,117,114,108,41,10,9,108,111,99,97,108,32,120,104,114,32,61,32,106,115,46,110,101,119,40,119,105,110,100,111,119,46,88,77,76,72,116,116,112,82,101,113,117,101,115,116,41,10,9,120,104,114,58,111,112,101,110,40,34,71,69,84,34,44,32,117,114,108,44,32,102,97,108,115,101,41,32,45,45,32,83,121,110,99,104,114,111,110,111,117,115,10,9,45,45,32,78,101,101,100,32,116,111,32,112,99,97,108,108,32,120,104,114,58,115,101,110,100,40,41,44,32,97,115,32,105,116,32,99,97,110,32,116,104,114,111,119,32,97,32,78,101,116,119,111,114,107,69,114,114,111,114,32,105,102,32,67,79,82,83,32,102,97,105,108,115,10,9,108,111,99,97,108,32,111,107,44,32,101,114,114,32,61,32,112,99,97,108,108,40,120,104,114,46,115,101,110,100,44,32,120,104,114,41,10,9,105,102,32,110,111,116,32,111,107,32,116,104,101,110,10,9,9,114,101,116,117,114,110,32,110,105,108,44,32,116,111,115,116,114,105,110,103,40,101,114,114,41,10,9,101,108,115,101,105,102,32,120,104,114,46,115,116,97,116,117,115,32,126,61,32,50,48,48,32,116,104,101,110,10,9,9,114,101,116,117,114,110,32,110,105,108,44,32,34,72,84,84,80,32,71,69,84,32,34,32,46,46,32,120,104,114,46,115,116,97,116,117,115,84,101,120,116,32,46,46,32,34,58,32,34,32,46,46,32,117,114,108,10,9,101,110,100,10,9,114,101,116,117,114,110,32,108,111,97,100,40,120,104,114,46,114,101,115,112,111,110,115,101,84,101,120,116,44,32,117,114,108,41,10,101,110,100,10,112,97,99,107,97,103,101,46,112,97,116,104,32,61,32,34,34,10,112,97,99,107,97,103,101,46,99,112,97,116,104,32,61,32,34,34,10,116,97,98,108,101,46,105,110,115,101,114,116,40,112,97,99,107,97,103,101,46,115,101,97,114,99,104,101,114,115,44,32,102,117,110,99,116,105,111,110,32,40,109,111,100,95,110,97,109,101,41,10,9,105,102,32,110,111,116,32,109,111,100,95,110,97,109,101,58,109,97,116,99,104,40,34,47,34,41,32,116,104,101,110,10,9,9,108,111,99,97,108,32,102,117,108,108,95,117,114,108,32,61,32,109,111,100,95,110,97,109,101,58,103,115,117,98,40,34,37,46,34,44,32,34,47,34,41,32,46,46,32,34,46,108,117,97,34,10,9,9,108,111,99,97,108,32,102,117,110,99,44,32,101,114,114,32,61,32,108,111,97,100,95,108,117,97,95,111,118,101,114,95,104,116,116,112,40,102,117,108,108,95,117,114,108,41,10,9,9,105,102,32,102,117,110,99,32,126,61,32,110,105,108,32,116,104,101,110,32,114,101,116,117,114,110,32,102,117,110,99,32,101,110,100,10,10,9,9,108,111,99,97,108,32,102,117,108,108,95,117,114,108,32,61,32,109,111,100,95,110,97,109,101,58,103,115,117,98,40,34,37,46,34,44,32,34,47,34,41,32,46,46,32,34,47,105,110,105,116,46,108,117,97,34,10,9,9,108,111,99,97,108,32,102,117,110,99,44,32,101,114,114,50,32,61,32,108,111,97,100,95,108,117,97,95,111,118,101,114,95,104,116,116,112,40,102,117,108,108,95,117,114,108,41,10,9,9,105,102,32,102,117,110,99,32,126,61,32,110,105,108,32,116,104,101,110,32,114,101,116,117,114,110,32,102,117,110,99,32,101,110,100,10,10,9,9,114,101,116,117,114,110,32,34,92,110,32,32,32,32,34,32,46,46,32,101,114,114,32,46,46,32,34,92,110,32,32,32,32,34,32,46,46,32,101,114,114,50,10,9,101,110,100,10,101,110,100,41,10,116,97,98,108,101,46,105,110,115,101,114,116,40,112,97,99,107,97,103,101,46,115,101,97,114,99,104,101,114,115,44,32,102,117,110,99,116,105,111,110,32,40,109,111,100,95,110,97,109,101,41,10,9,105,102,32,109,111,100,95,110,97,109,101,58,109,97,116,99,104,40,34,94,104,116,116,112,115,63,58,47,47,34,41,32,116,104,101,110,10,9,9,108,111,99,97,108,32,102,117,110,99,44,32,101,114,114,32,61,32,108,111,97,100,95,108,117,97,95,111,118,101,114,95,104,116,116,112,40,109,111,100,95,110,97,109,101,41,10,9,9,105,102,32,102,117,110,99,32,61,61,32,110,105,108,32,116,104,101,110,32,114,101,116,117,114,110,32,34,92,110,32,32,32,32,34,32,46,46,32,101,114,114,32,101,110,100,10,9,9,114,101,116,117,114,110,32,102,117,110,99,10,9,101,110,100,10,101,110,100,41,10]);Module["FS_createDataFile"]("/","js.lua",fileData0,true,true)}if(Module["calledRun"]){runWithFS()}else{if(!Module["preRun"])Module["preRun"]=[];Module["preRun"].push(runWithFS)}});loadPackage({"files":[]})}))();var Module;if(!Module)Module=(typeof Module!=="undefined"?Module:null)||{};var moduleOverrides={};for(var key in Module){if(Module.hasOwnProperty(key)){moduleOverrides[key]=Module[key]}}var ENVIRONMENT_IS_WEB=false;var ENVIRONMENT_IS_WORKER=false;var ENVIRONMENT_IS_NODE=false;var ENVIRONMENT_IS_SHELL=false;if(Module["ENVIRONMENT"]){if(Module["ENVIRONMENT"]==="WEB"){ENVIRONMENT_IS_WEB=true}else if(Module["ENVIRONMENT"]==="WORKER"){ENVIRONMENT_IS_WORKER=true}else if(Module["ENVIRONMENT"]==="NODE"){ENVIRONMENT_IS_NODE=true}else if(Module["ENVIRONMENT"]==="SHELL"){ENVIRONMENT_IS_SHELL=true}else{throw new Error("The provided Module['ENVIRONMENT'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.")}}else{ENVIRONMENT_IS_WEB=typeof window==="object";ENVIRONMENT_IS_WORKER=typeof importScripts==="function";ENVIRONMENT_IS_NODE=typeof process==="object"&&typeof require==="function"&&!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_WORKER;ENVIRONMENT_IS_SHELL=!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_NODE&&!ENVIRONMENT_IS_WORKER}if(ENVIRONMENT_IS_NODE){if(!Module["print"])Module["print"]=console.log;if(!Module["printErr"])Module["printErr"]=console.warn;var nodeFS;var nodePath;Module["read"]=function read(filename,binary){if(!nodeFS)nodeFS=require("fs");if(!nodePath)nodePath=require("path");filename=nodePath["normalize"](filename);var ret=nodeFS["readFileSync"](filename);if(!ret&&filename!=nodePath["resolve"](filename)){filename=path.join(__dirname,"..","src",filename);ret=nodeFS["readFileSync"](filename)}if(ret&&!binary)ret=ret.toString();return ret};Module["readBinary"]=function readBinary(filename){var ret=Module["read"](filename,true);if(!ret.buffer){ret=new Uint8Array(ret)}assert(ret.buffer);return ret};Module["load"]=function load(f){globalEval(read(f))};if(!Module["thisProgram"]){if(process["argv"].length>1){Module["thisProgram"]=process["argv"][1].replace(/\\/g,"/")}else{Module["thisProgram"]="unknown-program"}}Module["arguments"]=process["argv"].slice(2);if(typeof module!=="undefined"){module["exports"]=Module}process["on"]("uncaughtException",(function(ex){if(!(ex instanceof ExitStatus)){throw ex}}));Module["inspect"]=(function(){return"[Emscripten Module object]"})}else if(ENVIRONMENT_IS_SHELL){if(!Module["print"])Module["print"]=print;if(typeof printErr!="undefined")Module["printErr"]=printErr;if(typeof read!="undefined"){Module["read"]=read}else{Module["read"]=function read(){throw"no read() available (jsc?)"}}Module["readBinary"]=function readBinary(f){if(typeof readbuffer==="function"){return new Uint8Array(readbuffer(f))}var data=read(f,"binary");assert(typeof data==="object");return data};if(typeof scriptArgs!="undefined"){Module["arguments"]=scriptArgs}else if(typeof arguments!="undefined"){Module["arguments"]=arguments}}else if(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER){Module["read"]=function read(url){var xhr=new XMLHttpRequest;xhr.open("GET",url,false);xhr.send(null);return xhr.responseText};Module["readAsync"]=function readAsync(url,onload,onerror){var xhr=new XMLHttpRequest;xhr.open("GET",url,true);xhr.responseType="arraybuffer";xhr.onload=function xhr_onload(){if(xhr.status==200||xhr.status==0&&xhr.response){onload(xhr.response)}else{onerror()}};xhr.onerror=onerror;xhr.send(null)};if(typeof arguments!="undefined"){Module["arguments"]=arguments}if(typeof console!=="undefined"){if(!Module["print"])Module["print"]=function print(x){console.log(x)};if(!Module["printErr"])Module["printErr"]=function printErr(x){console.warn(x)}}else{var TRY_USE_DUMP=false;if(!Module["print"])Module["print"]=TRY_USE_DUMP&&typeof dump!=="undefined"?(function(x){dump(x)}):(function(x){})}if(ENVIRONMENT_IS_WORKER){Module["load"]=importScripts}if(typeof Module["setWindowTitle"]==="undefined"){Module["setWindowTitle"]=(function(title){document.title=title})}}else{throw"Unknown runtime environment. Where are we?"}function globalEval(x){eval.call(null,x)}if(!Module["load"]&&Module["read"]){Module["load"]=function load(f){globalEval(Module["read"](f))}}if(!Module["print"]){Module["print"]=(function(){})}if(!Module["printErr"]){Module["printErr"]=Module["print"]}if(!Module["arguments"]){Module["arguments"]=[]}if(!Module["thisProgram"]){Module["thisProgram"]="./this.program"}Module.print=Module["print"];Module.printErr=Module["printErr"];Module["preRun"]=[];Module["postRun"]=[];for(var key in moduleOverrides){if(moduleOverrides.hasOwnProperty(key)){Module[key]=moduleOverrides[key]}}moduleOverrides=undefined;var Runtime={setTempRet0:(function(value){tempRet0=value}),getTempRet0:(function(){return tempRet0}),stackSave:(function(){return STACKTOP}),stackRestore:(function(stackTop){STACKTOP=stackTop}),getNativeTypeSize:(function(type){switch(type){case"i1":case"i8":return 1;case"i16":return 2;case"i32":return 4;case"i64":return 8;case"float":return 4;case"double":return 8;default:{if(type[type.length-1]==="*"){return Runtime.QUANTUM_SIZE}else if(type[0]==="i"){var bits=parseInt(type.substr(1));assert(bits%8===0);return bits/8}else{return 0}}}}),getNativeFieldSize:(function(type){return Math.max(Runtime.getNativeTypeSize(type),Runtime.QUANTUM_SIZE)}),STACK_ALIGN:16,prepVararg:(function(ptr,type){if(type==="double"||type==="i64"){if(ptr&7){assert((ptr&7)===4);ptr+=4}}else{assert((ptr&3)===0)}return ptr}),getAlignSize:(function(type,size,vararg){if(!vararg&&(type=="i64"||type=="double"))return 8;if(!type)return Math.min(size,8);return Math.min(size||(type?Runtime.getNativeFieldSize(type):0),Runtime.QUANTUM_SIZE)}),dynCall:(function(sig,ptr,args){if(args&&args.length){if(!args.splice)args=Array.prototype.slice.call(args);args.splice(0,0,ptr);return Module["dynCall_"+sig].apply(null,args)}else{return Module["dynCall_"+sig].call(null,ptr)}}),functionPointers:[null,null,null,null,null,null,null,null],addFunction:(function(func){for(var i=0;i<Runtime.functionPointers.length;i++){if(!Runtime.functionPointers[i]){Runtime.functionPointers[i]=func;return 2*(1+i)}}throw"Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS."}),removeFunction:(function(index){Runtime.functionPointers[(index-2)/2]=null}),warnOnce:(function(text){if(!Runtime.warnOnce.shown)Runtime.warnOnce.shown={};if(!Runtime.warnOnce.shown[text]){Runtime.warnOnce.shown[text]=1;Module.printErr(text)}}),funcWrappers:{},getFuncWrapper:(function(func,sig){assert(sig);if(!Runtime.funcWrappers[sig]){Runtime.funcWrappers[sig]={}}var sigCache=Runtime.funcWrappers[sig];if(!sigCache[func]){sigCache[func]=function dynCall_wrapper(){return Runtime.dynCall(sig,func,arguments)}}return sigCache[func]}),getCompilerSetting:(function(name){throw"You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work"}),stackAlloc:(function(size){var ret=STACKTOP;STACKTOP=STACKTOP+size|0;STACKTOP=STACKTOP+15&-16;return ret}),staticAlloc:(function(size){var ret=STATICTOP;STATICTOP=STATICTOP+size|0;STATICTOP=STATICTOP+15&-16;return ret}),dynamicAlloc:(function(size){var ret=DYNAMICTOP;DYNAMICTOP=DYNAMICTOP+size|0;DYNAMICTOP=DYNAMICTOP+15&-16;if(DYNAMICTOP>=TOTAL_MEMORY){var success=enlargeMemory();if(!success){DYNAMICTOP=ret;return 0}}return ret}),alignMemory:(function(size,quantum){var ret=size=Math.ceil(size/(quantum?quantum:16))*(quantum?quantum:16);return ret}),makeBigInt:(function(low,high,unsigned){var ret=unsigned?+(low>>>0)+ +(high>>>0)*+4294967296:+(low>>>0)+ +(high|0)*+4294967296;return ret}),GLOBAL_BASE:8,QUANTUM_SIZE:4,__dummy__:0};Module["Runtime"]=Runtime;var ABORT=false;var EXITSTATUS=0;function assert(condition,text){if(!condition){abort("Assertion failed: "+text)}}function getCFunc(ident){var func=Module["_"+ident];if(!func){try{func=eval("_"+ident)}catch(e){}}assert(func,"Cannot call unknown function "+ident+" (perhaps LLVM optimizations or closure removed it?)");return func}var cwrap,ccall;((function(){var JSfuncs={"stackSave":(function(){Runtime.stackSave()}),"stackRestore":(function(){Runtime.stackRestore()}),"arrayToC":(function(arr){var ret=Runtime.stackAlloc(arr.length);writeArrayToMemory(arr,ret);return ret}),"stringToC":(function(str){var ret=0;if(str!==null&&str!==undefined&&str!==0){ret=Runtime.stackAlloc((str.length<<2)+1);writeStringToMemory(str,ret)}return ret})};var toC={"string":JSfuncs["stringToC"],"array":JSfuncs["arrayToC"]};ccall=function ccallFunc(ident,returnType,argTypes,args,opts){var func=getCFunc(ident);var cArgs=[];var stack=0;if(args){for(var i=0;i<args.length;i++){var converter=toC[argTypes[i]];if(converter){if(stack===0)stack=Runtime.stackSave();cArgs[i]=converter(args[i])}else{cArgs[i]=args[i]}}}var ret=func.apply(null,cArgs);if(returnType==="string")ret=Pointer_stringify(ret);if(stack!==0){if(opts&&opts.async){EmterpreterAsync.asyncFinalizers.push((function(){Runtime.stackRestore(stack)}));return}Runtime.stackRestore(stack)}return ret};var sourceRegex=/^function\s*[a-zA-Z$_0-9]*\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;function parseJSFunc(jsfunc){var parsed=jsfunc.toString().match(sourceRegex).slice(1);return{arguments:parsed[0],body:parsed[1],returnValue:parsed[2]}}var JSsource=null;function ensureJSsource(){if(!JSsource){JSsource={};for(var fun in JSfuncs){if(JSfuncs.hasOwnProperty(fun)){JSsource[fun]=parseJSFunc(JSfuncs[fun])}}}}cwrap=function cwrap(ident,returnType,argTypes){argTypes=argTypes||[];var cfunc=getCFunc(ident);var numericArgs=argTypes.every((function(type){return type==="number"}));var numericRet=returnType!=="string";if(numericRet&&numericArgs){return cfunc}var argNames=argTypes.map((function(x,i){return"$"+i}));var funcstr="(function("+argNames.join(",")+") {";var nargs=argTypes.length;if(!numericArgs){ensureJSsource();funcstr+="var stack = "+JSsource["stackSave"].body+";";for(var i=0;i<nargs;i++){var arg=argNames[i],type=argTypes[i];if(type==="number")continue;var convertCode=JSsource[type+"ToC"];funcstr+="var "+convertCode.arguments+" = "+arg+";";funcstr+=convertCode.body+";";funcstr+=arg+"=("+convertCode.returnValue+");"}}var cfuncname=parseJSFunc((function(){return cfunc})).returnValue;funcstr+="var ret = "+cfuncname+"("+argNames.join(",")+");";if(!numericRet){var strgfy=parseJSFunc((function(){return Pointer_stringify})).returnValue;funcstr+="ret = "+strgfy+"(ret);"}if(!numericArgs){ensureJSsource();funcstr+=JSsource["stackRestore"].body.replace("()","(stack)")+";"}funcstr+="return ret})";return eval(funcstr)}}))();Module["ccall"]=ccall;Module["cwrap"]=cwrap;function setValue(ptr,value,type,noSafe){type=type||"i8";if(type.charAt(type.length-1)==="*")type="i32";switch(type){case"i1":HEAP8[ptr>>0]=value;break;case"i8":HEAP8[ptr>>0]=value;break;case"i16":HEAP16[ptr>>1]=value;break;case"i32":HEAP32[ptr>>2]=value;break;case"i64":tempI64=[value>>>0,(tempDouble=value,+Math_abs(tempDouble)>=+1?tempDouble>+0?(Math_min(+Math_floor(tempDouble/+4294967296),+4294967295)|0)>>>0:~~+Math_ceil((tempDouble- +(~~tempDouble>>>0))/+4294967296)>>>0:0)],HEAP32[ptr>>2]=tempI64[0],HEAP32[ptr+4>>2]=tempI64[1];break;case"float":HEAPF32[ptr>>2]=value;break;case"double":HEAPF64[ptr>>3]=value;break;default:abort("invalid type for setValue: "+type)}}Module["setValue"]=setValue;function getValue(ptr,type,noSafe){type=type||"i8";if(type.charAt(type.length-1)==="*")type="i32";switch(type){case"i1":return HEAP8[ptr>>0];case"i8":return HEAP8[ptr>>0];case"i16":return HEAP16[ptr>>1];case"i32":return HEAP32[ptr>>2];case"i64":return HEAP32[ptr>>2];case"float":return HEAPF32[ptr>>2];case"double":return HEAPF64[ptr>>3];default:abort("invalid type for setValue: "+type)}return null}Module["getValue"]=getValue;var ALLOC_NORMAL=0;var ALLOC_STACK=1;var ALLOC_STATIC=2;var ALLOC_DYNAMIC=3;var ALLOC_NONE=4;Module["ALLOC_NORMAL"]=ALLOC_NORMAL;Module["ALLOC_STACK"]=ALLOC_STACK;Module["ALLOC_STATIC"]=ALLOC_STATIC;Module["ALLOC_DYNAMIC"]=ALLOC_DYNAMIC;Module["ALLOC_NONE"]=ALLOC_NONE;function allocate(slab,types,allocator,ptr){var zeroinit,size;if(typeof slab==="number"){zeroinit=true;size=slab}else{zeroinit=false;size=slab.length}var singleType=typeof types==="string"?types:null;var ret;if(allocator==ALLOC_NONE){ret=ptr}else{ret=[typeof _malloc==="function"?_malloc:Runtime.staticAlloc,Runtime.stackAlloc,Runtime.staticAlloc,Runtime.dynamicAlloc][allocator===undefined?ALLOC_STATIC:allocator](Math.max(size,singleType?1:types.length))}if(zeroinit){var ptr=ret,stop;assert((ret&3)==0);stop=ret+(size&~3);for(;ptr<stop;ptr+=4){HEAP32[ptr>>2]=0}stop=ret+size;while(ptr<stop){HEAP8[ptr++>>0]=0}return ret}if(singleType==="i8"){if(slab.subarray||slab.slice){HEAPU8.set(slab,ret)}else{HEAPU8.set(new Uint8Array(slab),ret)}return ret}var i=0,type,typeSize,previousType;while(i<size){var curr=slab[i];if(typeof curr==="function"){curr=Runtime.getFunctionIndex(curr)}type=singleType||types[i];if(type===0){i++;continue}if(type=="i64")type="i32";setValue(ret+i,curr,type);if(previousType!==type){typeSize=Runtime.getNativeTypeSize(type);previousType=type}i+=typeSize}return ret}Module["allocate"]=allocate;function getMemory(size){if(!staticSealed)return Runtime.staticAlloc(size);if(typeof _sbrk!=="undefined"&&!_sbrk.called||!runtimeInitialized)return Runtime.dynamicAlloc(size);return _malloc(size)}Module["getMemory"]=getMemory;function Pointer_stringify(ptr,length){if(length===0||!ptr)return"";var hasUtf=0;var t;var i=0;while(1){t=HEAPU8[ptr+i>>0];hasUtf|=t;if(t==0&&!length)break;i++;if(length&&i==length)break}if(!length)length=i;var ret="";if(hasUtf<128){var MAX_CHUNK=1024;var curr;while(length>0){curr=String.fromCharCode.apply(String,HEAPU8.subarray(ptr,ptr+Math.min(length,MAX_CHUNK)));ret=ret?ret+curr:curr;ptr+=MAX_CHUNK;length-=MAX_CHUNK}return ret}return Module["UTF8ToString"](ptr)}Module["Pointer_stringify"]=Pointer_stringify;function AsciiToString(ptr){var str="";while(1){var ch=HEAP8[ptr++>>0];if(!ch)return str;str+=String.fromCharCode(ch)}}Module["AsciiToString"]=AsciiToString;function stringToAscii(str,outPtr){return writeAsciiToMemory(str,outPtr,false)}Module["stringToAscii"]=stringToAscii;function UTF8ArrayToString(u8Array,idx){var u0,u1,u2,u3,u4,u5;var str="";while(1){u0=u8Array[idx++];if(!u0)return str;if(!(u0&128)){str+=String.fromCharCode(u0);continue}u1=u8Array[idx++]&63;if((u0&224)==192){str+=String.fromCharCode((u0&31)<<6|u1);continue}u2=u8Array[idx++]&63;if((u0&240)==224){u0=(u0&15)<<12|u1<<6|u2}else{u3=u8Array[idx++]&63;if((u0&248)==240){u0=(u0&7)<<18|u1<<12|u2<<6|u3}else{u4=u8Array[idx++]&63;if((u0&252)==248){u0=(u0&3)<<24|u1<<18|u2<<12|u3<<6|u4}else{u5=u8Array[idx++]&63;u0=(u0&1)<<30|u1<<24|u2<<18|u3<<12|u4<<6|u5}}}if(u0<65536){str+=String.fromCharCode(u0)}else{var ch=u0-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}}}Module["UTF8ArrayToString"]=UTF8ArrayToString;function UTF8ToString(ptr){return UTF8ArrayToString(HEAPU8,ptr)}Module["UTF8ToString"]=UTF8ToString;function stringToUTF8Array(str,outU8Array,outIdx,maxBytesToWrite){if(!(maxBytesToWrite>0))return 0;var startIdx=outIdx;var endIdx=outIdx+maxBytesToWrite-1;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343)u=65536+((u&1023)<<10)|str.charCodeAt(++i)&1023;if(u<=127){if(outIdx>=endIdx)break;outU8Array[outIdx++]=u}else if(u<=2047){if(outIdx+1>=endIdx)break;outU8Array[outIdx++]=192|u>>6;outU8Array[outIdx++]=128|u&63}else if(u<=65535){if(outIdx+2>=endIdx)break;outU8Array[outIdx++]=224|u>>12;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}else if(u<=2097151){if(outIdx+3>=endIdx)break;outU8Array[outIdx++]=240|u>>18;outU8Array[outIdx++]=128|u>>12&63;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}else if(u<=67108863){if(outIdx+4>=endIdx)break;outU8Array[outIdx++]=248|u>>24;outU8Array[outIdx++]=128|u>>18&63;outU8Array[outIdx++]=128|u>>12&63;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}else{if(outIdx+5>=endIdx)break;outU8Array[outIdx++]=252|u>>30;outU8Array[outIdx++]=128|u>>24&63;outU8Array[outIdx++]=128|u>>18&63;outU8Array[outIdx++]=128|u>>12&63;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}}outU8Array[outIdx]=0;return outIdx-startIdx}Module["stringToUTF8Array"]=stringToUTF8Array;function stringToUTF8(str,outPtr,maxBytesToWrite){return stringToUTF8Array(str,HEAPU8,outPtr,maxBytesToWrite)}Module["stringToUTF8"]=stringToUTF8;function lengthBytesUTF8(str){var len=0;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343)u=65536+((u&1023)<<10)|str.charCodeAt(++i)&1023;if(u<=127){++len}else if(u<=2047){len+=2}else if(u<=65535){len+=3}else if(u<=2097151){len+=4}else if(u<=67108863){len+=5}else{len+=6}}return len}Module["lengthBytesUTF8"]=lengthBytesUTF8;function demangle(func){var hasLibcxxabi=!!Module["___cxa_demangle"];if(hasLibcxxabi){try{var buf=_malloc(func.length);writeStringToMemory(func.substr(1),buf);var status=_malloc(4);var ret=Module["___cxa_demangle"](buf,0,0,status);if(getValue(status,"i32")===0&&ret){return Pointer_stringify(ret)}}catch(e){return func}finally{if(buf)_free(buf);if(status)_free(status);if(ret)_free(ret)}}Runtime.warnOnce("warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling");return func}function demangleAll(text){return text.replace(/__Z[\w\d_]+/g,(function(x){var y=demangle(x);return x===y?x:x+" ["+y+"]"}))}function jsStackTrace(){var err=new Error;if(!err.stack){try{throw new Error(0)}catch(e){err=e}if(!err.stack){return"(no stack trace available)"}}return err.stack.toString()}function stackTrace(){return demangleAll(jsStackTrace())}Module["stackTrace"]=stackTrace;var PAGE_SIZE=4096;function alignMemoryPage(x){if(x%4096>0){x+=4096-x%4096}return x}var HEAP;var buffer;var HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;function updateGlobalBufferViews(){Module["HEAP8"]=HEAP8=new Int8Array(buffer);Module["HEAP16"]=HEAP16=new Int16Array(buffer);Module["HEAP32"]=HEAP32=new Int32Array(buffer);Module["HEAPU8"]=HEAPU8=new Uint8Array(buffer);Module["HEAPU16"]=HEAPU16=new Uint16Array(buffer);Module["HEAPU32"]=HEAPU32=new Uint32Array(buffer);Module["HEAPF32"]=HEAPF32=new Float32Array(buffer);Module["HEAPF64"]=HEAPF64=new Float64Array(buffer)}var STATIC_BASE=0,STATICTOP=0,staticSealed=false;var STACK_BASE=0,STACKTOP=0,STACK_MAX=0;var DYNAMIC_BASE=0,DYNAMICTOP=0;function abortOnCannotGrowMemory(){abort("Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value "+TOTAL_MEMORY+", (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which adjusts the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ")}function enlargeMemory(){abortOnCannotGrowMemory()}var TOTAL_STACK=Module["TOTAL_STACK"]||5242880;var TOTAL_MEMORY=Module["TOTAL_MEMORY"]||134217728;var totalMemory=64*1024;while(totalMemory<TOTAL_MEMORY||totalMemory<2*TOTAL_STACK){if(totalMemory<16*1024*1024){totalMemory*=2}else{totalMemory+=16*1024*1024}}if(totalMemory!==TOTAL_MEMORY){TOTAL_MEMORY=totalMemory}if(Module["buffer"]){buffer=Module["buffer"]}else{buffer=new ArrayBuffer(TOTAL_MEMORY)}updateGlobalBufferViews();HEAP32[0]=255;if(HEAPU8[0]!==255||HEAPU8[3]!==0)throw"Typed arrays 2 must be run on a little-endian system";Module["HEAP"]=HEAP;Module["buffer"]=buffer;Module["HEAP8"]=HEAP8;Module["HEAP16"]=HEAP16;Module["HEAP32"]=HEAP32;Module["HEAPU8"]=HEAPU8;Module["HEAPU16"]=HEAPU16;Module["HEAPU32"]=HEAPU32;Module["HEAPF32"]=HEAPF32;Module["HEAPF64"]=HEAPF64;function callRuntimeCallbacks(callbacks){while(callbacks.length>0){var callback=callbacks.shift();if(typeof callback=="function"){callback();continue}var func=callback.func;if(typeof func==="number"){if(callback.arg===undefined){Runtime.dynCall("v",func)}else{Runtime.dynCall("vi",func,[callback.arg])}}else{func(callback.arg===undefined?null:callback.arg)}}}var __ATPRERUN__=[];var __ATINIT__=[];var __ATMAIN__=[];var __ATEXIT__=[];var __ATPOSTRUN__=[];var runtimeInitialized=false;var runtimeExited=false;function preRun(){if(Module["preRun"]){if(typeof Module["preRun"]=="function")Module["preRun"]=[Module["preRun"]];while(Module["preRun"].length){addOnPreRun(Module["preRun"].shift())}}callRuntimeCallbacks(__ATPRERUN__)}function ensureInitRuntime(){if(runtimeInitialized)return;runtimeInitialized=true;callRuntimeCallbacks(__ATINIT__)}function preMain(){callRuntimeCallbacks(__ATMAIN__)}function exitRuntime(){callRuntimeCallbacks(__ATEXIT__);runtimeExited=true}function postRun(){if(Module["postRun"]){if(typeof Module["postRun"]=="function")Module["postRun"]=[Module["postRun"]];while(Module["postRun"].length){addOnPostRun(Module["postRun"].shift())}}callRuntimeCallbacks(__ATPOSTRUN__)}function addOnPreRun(cb){__ATPRERUN__.unshift(cb)}Module["addOnPreRun"]=addOnPreRun;function addOnInit(cb){__ATINIT__.unshift(cb)}Module["addOnInit"]=addOnInit;function addOnPreMain(cb){__ATMAIN__.unshift(cb)}Module["addOnPreMain"]=addOnPreMain;function addOnExit(cb){__ATEXIT__.unshift(cb)}Module["addOnExit"]=addOnExit;function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb)}Module["addOnPostRun"]=addOnPostRun;function intArrayFromString(stringy,dontAddNull,length){var len=length>0?length:lengthBytesUTF8(stringy)+1;var u8array=new Array(len);var numBytesWritten=stringToUTF8Array(stringy,u8array,0,u8array.length);if(dontAddNull)u8array.length=numBytesWritten;return u8array}Module["intArrayFromString"]=intArrayFromString;function intArrayToString(array){var ret=[];for(var i=0;i<array.length;i++){var chr=array[i];if(chr>255){chr&=255}ret.push(String.fromCharCode(chr))}return ret.join("")}Module["intArrayToString"]=intArrayToString;function writeStringToMemory(string,buffer,dontAddNull){var array=intArrayFromString(string,dontAddNull);var i=0;while(i<array.length){var chr=array[i];HEAP8[buffer+i>>0]=chr;i=i+1}}Module["writeStringToMemory"]=writeStringToMemory;function writeArrayToMemory(array,buffer){for(var i=0;i<array.length;i++){HEAP8[buffer++>>0]=array[i]}}Module["writeArrayToMemory"]=writeArrayToMemory;function writeAsciiToMemory(str,buffer,dontAddNull){for(var i=0;i<str.length;++i){HEAP8[buffer++>>0]=str.charCodeAt(i)}if(!dontAddNull)HEAP8[buffer>>0]=0}Module["writeAsciiToMemory"]=writeAsciiToMemory;if(!Math["imul"]||Math["imul"](4294967295,5)!==-5)Math["imul"]=function imul(a,b){var ah=a>>>16;var al=a&65535;var bh=b>>>16;var bl=b&65535;return al*bl+(ah*bl+al*bh<<16)|0};Math.imul=Math["imul"];if(!Math["clz32"])Math["clz32"]=(function(x){x=x>>>0;for(var i=0;i<32;i++){if(x&1<<31-i)return i}return 32});Math.clz32=Math["clz32"];var Math_abs=Math.abs;var Math_cos=Math.cos;var Math_sin=Math.sin;var Math_tan=Math.tan;var Math_acos=Math.acos;var Math_asin=Math.asin;var Math_atan=Math.atan;var Math_atan2=Math.atan2;var Math_exp=Math.exp;var Math_log=Math.log;var Math_sqrt=Math.sqrt;var Math_ceil=Math.ceil;var Math_floor=Math.floor;var Math_pow=Math.pow;var Math_imul=Math.imul;var Math_fround=Math.fround;var Math_min=Math.min;var Math_clz32=Math.clz32;var runDependencies=0;var runDependencyWatcher=null;var dependenciesFulfilled=null;function getUniqueRunDependency(id){return id}function addRunDependency(id){runDependencies++;if(Module["monitorRunDependencies"]){Module["monitorRunDependencies"](runDependencies)}}Module["addRunDependency"]=addRunDependency;function removeRunDependency(id){runDependencies--;if(Module["monitorRunDependencies"]){Module["monitorRunDependencies"](runDependencies)}if(runDependencies==0){if(runDependencyWatcher!==null){clearInterval(runDependencyWatcher);runDependencyWatcher=null}if(dependenciesFulfilled){var callback=dependenciesFulfilled;dependenciesFulfilled=null;callback()}}}Module["removeRunDependency"]=removeRunDependency;Module["preloadedImages"]={};Module["preloadedAudios"]={};var ASM_CONSTS=[];STATIC_BASE=8;STATICTOP=STATIC_BASE+15632;__ATINIT__.push();allocate([0,0,0,0,0,96,127,64,13,13,0,0,91,17,0,0,17,13,0,0,20,13,0,0,25,13,0,0,63,30,0,0,203,22,0,0,32,13,0,0,74,19,0,0,36,13,0,0,41,13,0,0,44,13,0,0,47,13,0,0,209,22,0,0,53,13,0,0,57,13,0,0,60,13,0,0,247,26,0,0,67,13,0,0,198,22,0,0,72,13,0,0,78,13,0,0,84,13,0,0,35,16,0,0,87,13,0,0,90,13,0,0,93,13,0,0,96,13,0,0,99,13,0,0,102,13,0,0,108,13,0,0,117,13,0,0,124,13,0,0,39,34,0,0,209,22,0,0,50,19,0,0,58,19,0,0,67,19,0,0,171,39,0,0,159,39,0,0,74,19,0,0,58,19,0,0,83,19,0,0,90,19,0,0,96,19,0,0,12,37,0,0,102,19,0,0,145,36,0,0,158,28,0,0,113,19,0,0,119,19,0,0,124,19,0,0,130,19,0,0,136,19,0,0,142,19,0,0,148,19,0,0,154,19,0,0,160,19,0,0,166,19,0,0,171,19,0,0,176,19,0,0,185,19,0,0,70,23,0,0,18,0,0,0,95,23,0,0,19,0,0,0,203,23,0,0,20,0,0,0,210,23,0,0,21,0,0,0,255,27,0,0,22,0,0,0,228,23,0,0,23,0,0,0,244,23,0,0,24,0,0,0,253,23,0,0,25,0,0,0,76,24,0,0,25,0,0,0,87,24,0,0,26,0,0,0,92,24,0,0,27,0,0,0,106,24,0,0,28,0,0,0,112,24,0,0,29,0,0,0,170,24,0,0,30,0,0,0,179,24,0,0,31,0,0,0,211,24,0,0,32,0,0,0,218,24,0,0,33,0,0,0,225,24,0,0,34,0,0,0,174,28,0,0,35,0,0,0,31,25,0,0,36,0,0,0,118,24,0,0,37,0,0,0,16,30,0,0,38,0,0,0,65,25,0,0,39,0,0,0,0,0,0,0,0,0,0,0,118,23,0,0,123,23,0,0,110,23,0,0,254,26,0,0,131,23,0,0,136,23,0,0,145,23,0,0,156,23,0,0,168,23,0,0,178,23,0,0,191,23,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,104,25,0,0,40,0,0,0,112,25,0,0,41,0,0,0,117,25,0,0,42,0,0,0,122,25,0,0,43,0,0,0,126,25,0,0,44,0,0,0,131,25,0,0,45,0,0,0,137,25,0,0,46,0,0,0,228,25,0,0,47,0,0,0,236,25,0,0,48,0,0,0,243,25,0,0,49,0,0,0,251,25,0,0,50,0,0,0,3,26,0,0,51,0,0,0,0,0,0,0,0,0,0,0,10,26,0,0,52,0,0,0,17,26,0,0,53,0,0,0,128,26,0,0,54,0,0,0,136,26,0,0,55,0,0,0,165,26,0,0,56,0,0,0,170,26,0,0,57,0,0,0,0,0,0,0,0,0,0,0,189,39,0,0,58,0,0,0,215,26,0,0,59,0,0,0,228,26,0,0,60,0,0,0,43,27,0,0,61,0,0,0,215,27,0,0,62,0,0,0,243,27,0,0,63,0,0,0,255,27,0,0,64,0,0,0,12,28,0,0,65,0,0,0,23,28,0,0,66,0,0,0,82,28,0,0,67,0,0,0,92,28,0,0,68,0,0,0,148,28,0,0,69,0,0,0,165,28,0,0,70,0,0,0,174,28,0,0,71,0,0,0,209,28,0,0,72,0,0,0,220,28,0,0,73,0,0,0,0,0,0,0,0,0,0,0,242,26,0,0,247,26,0,0,114,30,0,0,254,26,0,0,4,27,0,0,230,28,0,0,74,0,0,0,26,29,0,0,75,0,0,0,59,29,0,0,76,0,0,0,102,29,0,0,77,0,0,0,204,29,0,0,78,0,0,0,222,29,0,0,79,0,0,0,231,29,0,0,80,0,0,0,3,30,0,0,81,0,0,0,8,30,0,0,82,0,0,0,16,30,0,0,83,0,0,0,38,30,0,0,84,0,0,0,0,0,0,0,0,0,0,0,230,28,0,0,74,0,0,0,26,29,0,0,85,0,0,0,102,29,0,0,86,0,0,0,3,30,0,0,87,0,0,0,50,30,0,0,88,0,0,0,98,30,0,0,89,0,0,0,38,30,0,0,90,0,0,0,145,36,0,0,91,0,0,0,119,30,0,0,92,0,0,0,0,0,0,0,0,0,0,0,59,30,0,0,55,30,0,0,63,30,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,106,30,0,0,109,30,0,0,114,30,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,201,30,0,0,93,0,0,0,205,30,0,0,94,0,0,0,210,30,0,0,95,0,0,0,215,30,0,0,96,0,0,0,221,30,0,0,97,0,0,0,226,30,0,0,98,0,0,0,231,30,0,0,99,0,0,0,236,30,0,0,100,0,0,0,240,30,0,0,101,0,0,0,244,30,0,0,102,0,0,0,248,30,0,0,103,0,0,0,254,30,0,0,104,0,0,0,3,31,0,0,105,0,0,0,9,31,0,0,106,0,0,0,15,31,0,0,107,0,0,0,21,31,0,0,108,0,0,0,25,31,0,0,109,0,0,0,156,31,0,0,110,0,0,0,29,31,0,0,111,0,0,0,34,31,0,0,112,0,0,0,38,31,0,0,113,0,0,0,42,31,0,0,114,0,0,0,93,31,0,0,115,0,0,0,104,31,0,0,116,0,0,0,109,31,0,0,117,0,0,0,113,31,0,0,118,0,0,0,118,31,0,0,119,0,0,0,123,31,0,0,120,0,0,0,0,0,0,0,0,0,0,0,135,31,0,0,121,0,0,0,141,31,0,0,122,0,0,0,255,31,0,0,123,0,0,0,8,32,0,0,124,0,0,0,16,32,0,0,125,0,0,0,21,32,0,0,126,0,0,0,91,36,0,0,127,0,0,0,28,32,0,0,128,0,0,0,35,32,0,0,129,0,0,0,80,32,0,0,130,0,0,0,118,32,0,0,131,0,0,0,0,0,0,0,0,0,0,0,45,32,0,0,49,32,0,0,57,32,0,0,63,32,0,0,72,32,0,0,80,32,0,0,0,0,0,0,6,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,1,0,0,0,2,0,0,0,163,32,0,0,132,0,0,0,190,32,0,0,133,0,0,0,214,32,0,0,134,0,0,0,249,32,0,0,135,0,0,0,32,34,0,0,136,0,0,0,246,34,0,0,137,0,0,0,253,34,0,0,138,0,0,0,108,35,0,0,139,0,0,0,112,35,0,0,140,0,0,0,118,35,0,0,141,0,0,0,124,35,0,0,142,0,0,0,155,35,0,0,143,0,0,0,163,35,0,0,144,0,0,0,167,35,0,0,145,0,0,0,0,0,0,0,0,0,0,0,173,35,0,0,146,0,0,0,233,35,0,0,147,0,0,0,238,35,0,0,148,0,0,0,50,36,0,0,149,0,0,0,57,36,0,0,150,0,0,0,91,36,0,0,151,0,0,0,98,36,0,0,152,0,0,0,0,0,0,0,0,0,0,0,150,36,0,0,153,0,0,0,229,36,0,0,154,0,0,0,5,37,0,0,155,0,0,0,0,0,0,0,0,0,0,0,2,39,0,0,156,0,0,0,69,39,0,0,157,0,0,0,0,0,0,0,0,0,0,0,2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,132,7,0,0,9,0,0,0,0,0,0,0,0,0,0,0,158,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,19,0,0,0,232,52,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,7,0,0,5,0,0,0,0,0,0,0,0,0,0,0,158,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,0,0,0,19,0,0,0,240,56,0,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,7,0,0,112,8,0,0,5,0,0,0,0,0,0,0,0,0,0,0,158,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,0,0,0,19,0,0,0,248,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,49,0,0,248,60,0,0,248,60,0,0,248,60,0,0,248,60,0,0,248,60,0,0,248,60,0,0,248,60,0,0,248,60,0,0,248,60,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,99,111,110,116,114,111,108,32,115,116,114,117,99,116,117,114,101,32,116,111,111,32,108,111,110,103,0,111,112,99,111,100,101,115,0,102,117,110,99,116,105,111,110,32,111,114,32,101,120,112,114,101,115,115,105,111,110,32,116,111,111,32,99,111,109,112,108,101,120,0,99,111,110,115,116,97,110,116,115,0,99,111,110,115,116,114,117,99,116,111,114,32,116,111,111,32,108,111,110,103,0,0,0,0,0,0,0,0,0,0,0,8,8,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,22,22,22,22,22,22,22,22,22,22,4,4,4,4,4,4,4,21,21,21,21,21,21,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,4,4,4,5,4,21,21,21,21,21,21,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,91,67,93,0,61,63,0,109,97,105,110,0,76,117,97,0,67,0,102,111,114,32,105,116,101,114,97,116,111,114,0,109,101,116,97,109,101,116,104,111,100,0,103,108,111,98,97,108,0,102,105,101,108,100,0,117,112,118,97,108,117,101,0,99,111,110,115,116,97,110,116,0,40,42,116,101,109,112,111,114,97,114,121,41,0,40,42,118,97,114,97,114,103,41,0,97,116,116,101,109,112,116,32,116,111,32,37,115,32,37,115,32,39,37,115,39,32,40,97,32,37,115,32,118,97,108,117,101,41,0,97,116,116,101,109,112,116,32,116,111,32,37,115,32,97,32,37,115,32,118,97,108,117,101,0,99,111,110,99,97,116,101,110,97,116,101,0,112,101,114,102,111,114,109,32,97,114,105,116,104,109,101,116,105,99,32,111,110,0,97,116,116,101,109,112,116,32,116,111,32,99,111,109,112,97,114,101,32,116,119,111,32,37,115,32,118,97,108,117,101,115,0,97,116,116,101,109,112,116,32,116,111,32,99,111,109,112,97,114,101,32,37,115,32,119,105,116,104,32,37,115,0,67,32,115,116,97,99,107,32,111,118,101,114,102,108,111,119,0,99,97,110,110,111,116,32,114,101,115,117,109,101,32,110,111,110,45,115,117,115,112,101,110,100,101,100,32,99,111,114,111,117,116,105,110,101,0,101,114,114,111,114,32,105,110,32,101,114,114,111,114,32,104,97,110,100,108,105,110,103,0,97,116,116,101,109,112,116,32,116,111,32,121,105,101,108,100,32,97,99,114,111,115,115,32,97,32,67,45,99,97,108,108,32,98,111,117,110,100,97,114,121,0,97,116,116,101,109,112,116,32,116,111,32,121,105,101,108,100,32,102,114,111,109,32,111,117,116,115,105,100,101,32,97,32,99,111,114,111,117,116,105,110,101,0,97,116,116,101,109,112,116,32,116,111,32,108,111,97,100,32,97,32,37,115,32,99,104,117,110,107,32,40,109,111,100,101,32,105,115,32,39,37,115,39,41,0,98,105,110,97,114,121,0,116,101,120,116,0,110,111,32,109,101,115,115,97,103,101,0,101,114,114,111,114,32,105,110,32,95,95,103,99,32,109,101,116,97,109,101,116,104,111,100,32,40,37,115,41,0,97,110,100,0,100,111,0,101,108,115,101,0,101,108,115,101,105,102,0,102,111,114,0,103,111,116,111,0,105,102,0,105,110,0,108,111,99,97,108,0,110,111,116,0,111,114,0,114,101,112,101,97,116,0,116,104,101,110,0,117,110,116,105,108,0,119,104,105,108,101,0,46,46,0,61,61,0,62,61,0,60,61,0,126,61,0,58,58,0,60,101,111,102,62,0,60,110,117,109,98,101,114,62,0,60,110,97,109,101,62,0,60,115,116,114,105,110,103,62,0,39,37,99,39,0,99,104,97,114,40,37,100,41,0,39,37,115,39,0,37,115,58,37,100,58,32,37,115,0,108,101,120,105,99,97,108,32,101,108,101,109,101,110,116,32,116,111,111,32,108,111,110,103,0,37,115,32,110,101,97,114,32,37,115,0,95,69,78,86,0,99,104,117,110,107,32,104,97,115,32,116,111,111,32,109,97,110,121,32,108,105,110,101,115,0,117,110,102,105,110,105,115,104,101,100,32,108,111,110,103,32,115,116,114,105,110,103,0,117,110,102,105,110,105,115,104,101,100,32,108,111,110,103,32,99,111,109,109,101,110,116,0,105,110,118,97,108,105,100,32,108,111,110,103,32,115,116,114,105,110,103,32,100,101,108,105,109,105,116,101,114,0,117,110,102,105,110,105,115,104,101,100,32,115,116,114,105,110,103,0,104,101,120,97,100,101,99,105,109,97,108,32,100,105,103,105,116,32,101,120,112,101,99,116,101,100,0,105,110,118,97,108,105,100,32,101,115,99,97,112,101,32,115,101,113,117,101,110,99,101,0,100,101,99,105,109,97,108,32,101,115,99,97,112,101,32,116,111,111,32,108,97,114,103,101,0,88,120,0,69,101,0,80,112,0,43,45,0,109,97,108,102,111,114,109,101,100,32,110,117,109,98,101,114,0,116,111,111,32,109,97,110,121,32,37,115,32,40,108,105,109,105,116,32,105,115,32,37,100,41,0,109,101,109,111,114,121,32,97,108,108,111,99,97,116,105,111,110,32,101,114,114,111,114,58,32,98,108,111,99,107,32,116,111,111,32,98,105,103,0,0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,110,78,0,120,88,0,37,112,0,37,0,105,110,118,97,108,105,100,32,111,112,116,105,111,110,32,39,37,37,37,99,39,32,116,111,32,39,108,117,97,95,112,117,115,104,102,115,116,114,105,110,103,39,0,46,46,46,0,91,115,116,114,105,110,103,32,34,0,34,93,0,96,113,65,84,80,80,92,108,60,16,60,84,108,124,124,124,124,124,124,96,96,96,104,34,188,188,188,132,228,84,84,16,98,98,4,98,20,81,80,23,102,117,110,99,116,105,111,110,32,97,116,32,108,105,110,101,32,37,100,0,109,97,105,110,32,102,117,110,99,116,105,111,110,0,116,111,111,32,109,97,110,121,32,37,115,32,40,108,105,109,105,116,32,105,115,32,37,100,41,32,105,110,32,37,115,0,117,112,118,97,108,117,101,115,0,67,32,108,101,118,101,108,115,0,99,97,110,110,111,116,32,117,115,101,32,39,46,46,46,39,32,111,117,116,115,105,100,101,32,97,32,118,97,114,97,114,103,32,102,117,110,99,116,105,111,110,0,37,115,32,101,120,112,101,99,116,101,100,0,105,116,101,109,115,32,105,110,32,97,32,99,111,110,115,116,114,117,99,116,111,114,0,37,115,32,101,120,112,101,99,116,101,100,32,40,116,111,32,99,108,111,115,101,32,37,115,32,97,116,32,108,105,110,101,32,37,100,41,0,102,117,110,99,116,105,111,110,115,0,115,101,108,102,0,108,111,99,97,108,32,118,97,114,105,97,98,108,101,115,0,60,110,97,109,101,62,32,111,114,32,39,46,46,46,39,32,101,120,112,101,99,116,101,100,0,98,114,101,97,107,0,108,97,98,101,108,115,47,103,111,116,111,115,0,60,103,111,116,111,32,37,115,62,32,97,116,32,108,105,110,101,32,37,100,32,106,117,109,112,115,32,105,110,116,111,32,116,104,101,32,115,99,111,112,101,32,111,102,32,108,111,99,97,108,32,39,37,115,39,0,60,37,115,62,32,97,116,32,108,105,110,101,32,37,100,32,110,111,116,32,105,110,115,105,100,101,32,97,32,108,111,111,112,0,110,111,32,118,105,115,105,98,108,101,32,108,97,98,101,108,32,39,37,115,39,32,102,111,114,32,60,103,111,116,111,62,32,97,116,32,108,105,110,101,32,37,100,0,117,110,101,120,112,101,99,116,101,100,32,115,121,109,98,111,108,0,102,117,110,99,116,105,111,110,32,97,114,103,117,109,101,110,116,115,32,101,120,112,101,99,116,101,100,0,6,6,6,6,7,7,7,7,7,7,10,9,5,4,3,3,3,3,3,3,3,3,3,3,3,3,2,2,1,1,40,102,111,114,32,105,110,100,101,120,41,0,40,102,111,114,32,108,105,109,105,116,41,0,40,102,111,114,32,115,116,101,112,41,0,40,102,111,114,32,103,101,110,101,114,97,116,111,114,41,0,40,102,111,114,32,115,116,97,116,101,41,0,40,102,111,114,32,99,111,110,116,114,111,108,41,0,39,61,39,32,111,114,32,39,105,110,39,32,101,120,112,101,99,116,101,100,0,108,97,98,101,108,32,39,37,115,39,32,97,108,114,101,97,100,121,32,100,101,102,105,110,101,100,32,111,110,32,108,105,110,101,32,37,100,0,115,121,110,116,97,120,32,101,114,114,111,114,0,110,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,0,105,110,118,97,108,105,100,32,107,101,121,32,116,111,32,39,110,101,120,116,39,0,116,97,98,108,101,32,111,118,101,114,102,108,111,119,0,116,97,98,108,101,32,105,110,100,101,120,32,105,115,32,110,105,108,0,116,97,98,108,101,32,105,110,100,101,120,32,105,115,32,78,97,78,0,98,111,111,108,101,97,110,0,117,115,101,114,100,97,116,97,0,110,117,109,98,101,114,0,102,117,110,99,116,105,111,110,0,116,104,114,101,97,100,0,112,114,111,116,111,0,117,112,118,97,108,0,95,95,110,101,119,105,110,100,101,120,0,95,95,108,101,110,0,95,95,101,113,0,95,95,97,100,100,0,95,95,115,117,98,0,95,95,109,117,108,0,95,95,100,105,118,0,95,95,109,111,100,0,95,95,112,111,119,0,95,95,117,110,109,0,95,95,108,116,0,95,95,108,101,0,95,95,99,111,110,99,97,116,0,95,95,99,97,108,108,0,98,105,110,97,114,121,32,115,116,114,105,110,103,0,25,147,13,10,26,10,0,116,114,117,110,99,97,116,101,100,0,37,115,58,32,37,115,32,112,114,101,99,111,109,112,105,108,101,100,32,99,104,117,110,107,0,110,111,116,32,97,0,118,101,114,115,105,111,110,32,109,105,115,109,97,116,99,104,32,105,110,0,105,110,99,111,109,112,97,116,105,98,108,101,0,99,111,114,114,117,112,116,101,100,0,105,110,100,101,120,0,108,111,111,112,32,105,110,32,103,101,116,116,97,98,108,101,0,108,111,111,112,32,105,110,32,115,101,116,116,97,98,108,101,0,115,116,114,105,110,103,32,108,101,110,103,116,104,32,111,118,101,114,102,108,111,119,0,103,101,116,32,108,101,110,103,116,104,32,111,102,0,39,102,111,114,39,32,105,110,105,116,105,97,108,32,118,97,108,117,101,32,109,117,115,116,32,98,101,32,97,32,110,117,109,98,101,114,0,39,102,111,114,39,32,108,105,109,105,116,32,109,117,115,116,32,98,101,32,97,32,110,117,109,98,101,114,0,39,102,111,114,39,32,115,116,101,112,32,109,117,115,116,32,98,101,32,97,32,110,117,109,98,101,114,0,98,117,102,102,101,114,32,116,111,111,32,108,97,114,103,101,0,83,108,0,37,115,58,37,100,58,32,0,98,97,100,32,97,114,103,117,109,101,110,116,32,35,37,100,32,40,37,115,41,0,109,101,116,104,111,100,0,99,97,108,108,105,110,103,32,39,37,115,39,32,111,110,32,98,97,100,32,115,101,108,102,32,40,37,115,41,0,98,97,100,32,97,114,103,117,109,101,110,116,32,35,37,100,32,116,111,32,39,37,115,39,32,40,37,115,41,0,37,115,32,101,120,112,101,99,116,101,100,44,32,103,111,116,32,37,115,0,105,110,118,97,108,105,100,32,111,112,116,105,111,110,32,39,37,115,39,0,115,116,97,99,107,32,111,118,101,114,102,108,111,119,32,40,37,115,41,0,109,117,108,116,105,112,108,101,32,76,117,97,32,86,77,115,32,100,101,116,101,99,116,101,100,0,118,101,114,115,105,111,110,32,109,105,115,109,97,116,99,104,58,32,97,112,112,46,32,110,101,101,100,115,32,37,102,44,32,76,117,97,32,99,111,114,101,32,112,114,111,118,105,100,101,115,32,37,102,0,98,97,100,32,99,111,110,118,101,114,115,105,111,110,32,110,117,109,98,101,114,45,62,105,110,116,59,32,109,117,115,116,32,114,101,99,111,109,112,105,108,101,32,76,117,97,32,119,105,116,104,32,112,114,111,112,101,114,32,115,101,116,116,105,110,103,115,0,37,115,58,32,37,115,0,111,98,106,101,99,116,32,108,101,110,103,116,104,32,105,115,32,110,111,116,32,97,32,110,117,109,98,101,114,0,61,115,116,100,105,110,0,64,37,115,0,99,97,110,110,111,116,32,37,115,32,37,115,58,32,37,115,0,114,98,0,114,101,111,112,101,110,0,80,65,78,73,67,58,32,117,110,112,114,111,116,101,99,116,101,100,32,101,114,114,111,114,32,105,110,32,99,97,108,108,32,116,111,32,76,117,97,32,65,80,73,32,40,37,115,41,10,0,110,97,109,101,32,99,111,110,102,108,105,99,116,32,102,111,114,32,109,111,100,117,108,101,32,39,37,115,39,0,116,111,111,32,109,97,110,121,32,117,112,118,97,108,117,101,115,0,116,114,117,101,0,102,97,108,115,101,0,110,105,108,0,37,115,58,32,37,112,0,115,116,97,99,107,32,116,114,97,99,101,98,97,99,107,58,0,10,9,46,46,46,0,83,108,110,116,0,10,9,37,115,58,0,37,100,58,0,32,105,110,32,0,102,117,110,99,116,105,111,110,32,39,37,115,39,0,109,97,105,110,32,99,104,117,110,107,0,102,117,110,99,116,105,111,110,32,60,37,115,58,37,100,62,0,10,9,40,46,46,46,116,97,105,108,32,99,97,108,108,115,46,46,46,41,0,97,115,115,101,114,116,0,97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,33,0,99,111,108,108,101,99,116,103,97,114,98,97,103,101,0,99,111,108,108,101,99,116,0,115,116,111,112,0,114,101,115,116,97,114,116,0,115,116,101,112,0,115,101,116,112,97,117,115,101,0,115,101,116,115,116,101,112,109,117,108,0,115,101,116,109,97,106,111,114,105,110,99,0,105,115,114,117,110,110,105,110,103,0,103,101,110,101,114,97,116,105,111,110,97,108,0,105,110,99,114,101,109,101,110,116,97,108,0,100,111,102,105,108,101,0,101,114,114,111,114,0,95,95,109,101,116,97,116,97,98,108,101,0,105,112,97,105,114,115,0,95,95,105,112,97,105,114,115,0,108,111,97,100,102,105,108,101,0,108,111,97,100,0,98,116,0,61,40,108,111,97,100,41,0,116,111,111,32,109,97,110,121,32,110,101,115,116,101,100,32,102,117,110,99,116,105,111,110,115,0,114,101,97,100,101,114,32,102,117,110,99,116,105,111,110,32,109,117,115,116,32,114,101,116,117,114,110,32,97,32,115,116,114,105,110,103,0,108,111,97,100,115,116,114,105,110,103,0,110,101,120,116,0,112,97,105,114,115,0,95,95,112,97,105,114,115,0,112,99,97,108,108,0,112,114,105,110,116,0,116,111,115,116,114,105,110,103,0,39,116,111,115,116,114,105,110,103,39,32,109,117,115,116,32,114,101,116,117,114,110,32,97,32,115,116,114,105,110,103,32,116,111,32,39,112,114,105,110,116,39,0,114,97,119,101,113,117,97,108,0,114,97,119,108,101,110,0,116,97,98,108,101,32,111,114,32,115,116,114,105,110,103,32,101,120,112,101,99,116,101,100,0,114,97,119,103,101,116,0,114,97,119,115,101,116,0,115,101,108,101,99,116,0,105,110,100,101,120,32,111,117,116,32,111,102,32,114,97,110,103,101,0,99,97,110,110,111,116,32,99,104,97,110,103,101,32,97,32,112,114,111,116,101,99,116,101,100,32,109,101,116,97,116,97,98,108,101,0,116,111,110,117,109,98,101,114,0,98,97,115,101,32,111,117,116,32,111,102,32,114,97,110,103,101,0,32,12,10,13,9,11,0,120,112,99,97,108,108,0,118,97,108,117,101,32,101,120,112,101,99,116,101,100,0,76,117,97,32,53,46,50,0,95,86,69,82,83,73,79,78,0,97,114,115,104,105,102,116,0,98,97,110,100,0,98,110,111,116,0,98,111,114,0,98,120,111,114,0,98,116,101,115,116,0,101,120,116,114,97,99,116,0,102,105,101,108,100,32,99,97,110,110,111,116,32,98,101,32,110,101,103,97,116,105,118,101,0,119,105,100,116,104,32,109,117,115,116,32,98,101,32,112,111,115,105,116,105,118,101,0,116,114,121,105,110,103,32,116,111,32,97,99,99,101,115,115,32,110,111,110,45,101,120,105,115,116,101,110,116,32,98,105,116,115,0,108,114,111,116,97,116,101,0,108,115,104,105,102,116,0,114,101,112,108,97,99,101,0,114,114,111,116,97,116,101,0,114,115,104,105,102,116,0,99,114,101,97,116,101,0,114,101,115,117,109,101,0,99,111,114,111,117,116,105,110,101,32,101,120,112,101,99,116,101,100,0,116,111,111,32,109,97,110,121,32,97,114,103,117,109,101,110,116,115,32,116,111,32,114,101,115,117,109,101,0,99,97,110,110,111,116,32,114,101,115,117,109,101,32,100,101,97,100,32,99,111,114,111,117,116,105,110,101,0,116,111,111,32,109,97,110,121,32,114,101,115,117,108,116,115,32,116,111,32,114,101,115,117,109,101,0,114,117,110,110,105,110,103,0,115,116,97,116,117,115,0,115,117,115,112,101,110,100,101,100,0,110,111,114,109,97,108,0,100,101,97,100,0,119,114,97,112,0,121,105,101,108,100,0,108,117,97,95,100,101,98,117,103,62,32,0,99,111,110,116,10,0,61,40,100,101,98,117,103,32,99,111,109,109,97,110,100,41,0,37,115,10,0,103,101,116,117,115,101,114,118,97,108,117,101,0,103,101,116,104,111,111,107,0,95,72,75,69,89,0,99,97,108,108,0,114,101,116,117,114,110,0,99,111,117,110,116,0,116,97,105,108,32,99,97,108,108,0,101,120,116,101,114,110,97,108,32,104,111,111,107,0,115,116,97,99,107,32,111,118,101,114,102,108,111,119,0,103,101,116,105,110,102,111,0,102,108,110,83,116,117,0,62,37,115,0,102,117,110,99,116,105,111,110,32,111,114,32,108,101,118,101,108,32,101,120,112,101,99,116,101,100,0,115,111,117,114,99,101,0,115,104,111,114,116,95,115,114,99,0,108,105,110,101,100,101,102,105,110,101,100,0,108,97,115,116,108,105,110,101,100,101,102,105,110,101,100,0,119,104,97,116,0,99,117,114,114,101,110,116,108,105,110,101,0,110,117,112,115,0,110,112,97,114,97,109,115,0,105,115,118,97,114,97,114,103,0,110,97,109,101,0,110,97,109,101,119,104,97,116,0,105,115,116,97,105,108,99,97,108,108,0,97,99,116,105,118,101,108,105,110,101,115,0,102,117,110,99,0,103,101,116,108,111,99,97,108,0,108,101,118,101,108,32,111,117,116,32,111,102,32,114,97,110,103,101,0,103,101,116,114,101,103,105,115,116,114,121,0,103,101,116,109,101,116,97,116,97,98,108,101,0,103,101,116,117,112,118,97,108,117,101,0,117,112,118,97,108,117,101,106,111,105,110,0,62,117,0,105,110,118,97,108,105,100,32,117,112,118,97,108,117,101,32,105,110,100,101,120,0,76,117,97,32,102,117,110,99,116,105,111,110,32,101,120,112,101,99,116,101,100,0,117,112,118,97,108,117,101,105,100,0,115,101,116,117,115,101,114,118,97,108,117,101,0,102,117,108,108,32,117,115,101,114,100,97,116,97,32,101,120,112,101,99,116,101,100,44,32,103,111,116,32,108,105,103,104,116,32,117,115,101,114,100,97,116,97,0,115,101,116,104,111,111,107,0,107,0,95,95,109,111,100,101,0,115,101,116,108,111,99,97,108,0,115,101,116,109,101,116,97,116,97,98,108,101,0,110,105,108,32,111,114,32,116,97,98,108,101,32,101,120,112,101,99,116,101,100,0,115,101,116,117,112,118,97,108,117,101,0,116,114,97,99,101,98,97,99,107,0,99,108,111,115,101,0,95,73,79,95,111,117,116,112,117,116,0,70,73,76,69,42,0,97,116,116,101,109,112,116,32,116,111,32,117,115,101,32,97,32,99,108,111,115,101,100,32,102,105,108,101,0,102,108,117,115,104,0,115,116,97,110,100,97,114,100,32,37,115,32,102,105,108,101,32,105,115,32,99,108,111,115,101,100,0,105,110,112,117,116,0,95,73,79,95,105,110,112,117,116,0,99,97,110,110,111,116,32,111,112,101,110,32,102,105,108,101,32,39,37,115,39,32,40,37,115,41,0,108,105,110,101,115,0,116,111,111,32,109,97,110,121,32,111,112,116,105,111,110,115,0,102,105,108,101,32,105,115,32,97,108,114,101,97,100,121,32,99,108,111,115,101,100,0,116,111,111,32,109,97,110,121,32,97,114,103,117,109,101,110,116,115,0,105,110,118,97,108,105,100,32,111,112,116,105,111,110,0,37,108,102,0,105,110,118,97,108,105,100,32,102,111,114,109,97,116,0,37,115,0,111,112,101,110,0,105,110,118,97,108,105,100,32,109,111,100,101,0,111,117,116,112,117,116,0,119,0,112,111,112,101,110,0,39,112,111,112,101,110,39,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,114,101,97,100,0,116,109,112,102,105,108,101,0,116,121,112,101,0,99,108,111,115,101,100,32,102,105,108,101,0,102,105,108,101,0,119,114,105,116,101,0,37,46,49,52,103,0,115,101,101,107,0,99,117,114,0,115,101,116,0,101,110,100,0,110,111,116,32,97,110,32,105,110,116,101,103,101,114,32,105,110,32,112,114,111,112,101,114,32,114,97,110,103,101,0,115,101,116,118,98,117,102,0,110,111,0,102,117,108,108,0,108,105,110,101,0,95,95,116,111,115,116,114,105,110,103,0,102,105,108,101,32,40,99,108,111,115,101,100,41,0,102,105,108,101,32,40,37,112,41,0,99,97,110,110,111,116,32,99,108,111,115,101,32,115,116,97,110,100,97,114,100,32,102,105,108,101,0,115,116,100,105,110,0,115,116,100,111,117,116,0,115,116,100,101,114,114,0,97,98,115,0,97,99,111,115,0,97,115,105,110,0,97,116,97,110,50,0,97,116,97,110,0,99,101,105,108,0,99,111,115,104,0,99,111,115,0,100,101,103,0,101,120,112,0,102,108,111,111,114,0,102,109,111,100,0,102,114,101,120,112,0,108,100,101,120,112,0,108,111,103,49,48,0,108,111,103,0,109,97,120,0,109,111,100,102,0,112,111,119,0,114,97,100,0,114,97,110,100,111,109,0,105,110,116,101,114,118,97,108,32,105,115,32,101,109,112,116,121,0,119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,0,114,97,110,100,111,109,115,101,101,100,0,115,105,110,104,0,115,105,110,0,115,113,114,116,0,116,97,110,104,0,116,97,110,0,112,105,0,104,117,103,101,0,99,108,111,99,107,0,100,97,116,101,0,37,99,0,42,116,0,115,101,99,0,109,105,110,0,104,111,117,114,0,100,97,121,0,109,111,110,116,104,0,121,101,97,114,0,119,100,97,121,0,121,100,97,121,0,105,115,100,115,116,0,97,65,98,66,99,100,72,73,106,109,77,112,83,85,119,87,120,88,121,89,122,37,0,105,110,118,97,108,105,100,32,99,111,110,118,101,114,115,105,111,110,32,115,112,101,99,105,102,105,101,114,32,39,37,37,37,115,39,0,100,105,102,102,116,105,109,101,0,101,120,101,99,117,116,101,0,101,120,105,116,0,103,101,116,101,110,118,0,114,101,110,97,109,101,0,115,101,116,108,111,99,97,108,101,0,97,108,108,0,99,111,108,108,97,116,101,0,99,116,121,112,101,0,109,111,110,101,116,97,114,121,0,110,117,109,101,114,105,99,0,116,105,109,101,0,102,105,101,108,100,32,39,37,115,39,32,109,105,115,115,105,110,103,32,105,110,32,100,97,116,101,32,116,97,98,108,101,0,116,109,112,110,97,109,101,0,117,110,97,98,108,101,32,116,111,32,103,101,110,101,114,97,116,101,32,97,32,117,110,105,113,117,101,32,102,105,108,101,110,97,109,101,0,98,121,116,101,0,115,116,114,105,110,103,32,115,108,105,99,101,32,116,111,111,32,108,111,110,103,0,99,104,97,114,0,118,97,108,117,101,32,111,117,116,32,111,102,32,114,97,110,103,101,0,100,117,109,112,0,117,110,97,98,108,101,32,116,111,32,100,117,109,112,32,103,105,118,101,110,32,102,117,110,99,116,105,111,110,0,102,105,110,100,0,94,36,42,43,63,46,40,91,37,45,0,112,97,116,116,101,114,110,32,116,111,111,32,99,111,109,112,108,101,120,0,116,111,111,32,109,97,110,121,32,99,97,112,116,117,114,101,115,0,105,110,118,97,108,105,100,32,112,97,116,116,101,114,110,32,99,97,112,116,117,114,101,0,109,97,108,102,111,114,109,101,100,32,112,97,116,116,101,114,110,32,40,109,105,115,115,105,110,103,32,97,114,103,117,109,101,110,116,115,32,116,111,32,39,37,37,98,39,41,0,109,105,115,115,105,110,103,32,39,91,39,32,97,102,116,101,114,32,39,37,37,102,39,32,105,110,32,112,97,116,116,101,114,110,0,109,97,108,102,111,114,109,101,100,32,112,97,116,116,101,114,110,32,40,101,110,100,115,32,119,105,116,104,32,39,37,37,39,41,0,109,97,108,102,111,114,109,101,100,32,112,97,116,116,101,114,110,32,40,109,105,115,115,105,110,103,32,39,93,39,41,0,105,110,118,97,108,105,100,32,99,97,112,116,117,114,101,32,105,110,100,101,120,32,37,37,37,100,0,105,110,118,97,108,105,100,32,99,97,112,116,117,114,101,32,105,110,100,101,120,0,117,110,102,105,110,105,115,104,101,100,32,99,97,112,116,117,114,101,0,102,111,114,109,97,116,0,110,111,32,118,97,108,117,101,0,45,43,32,35,48,0,105,110,118,97,108,105,100,32,102,111,114,109,97,116,32,40,114,101,112,101,97,116,101,100,32,102,108,97,103,115,41,0,105,110,118,97,108,105,100,32,102,111,114,109,97,116,32,40,119,105,100,116,104,32,111,114,32,112,114,101,99,105,115,105,111,110,32,116,111,111,32,108,111,110,103,41,0,110,111,116,32,97,32,110,117,109,98,101,114,32,105,110,32,112,114,111,112,101,114,32,114,97,110,103,101,0,110,111,116,32,97,32,110,111,110,45,110,101,103,97,116,105,118,101,32,110,117,109,98,101,114,32,105,110,32,112,114,111,112,101,114,32,114,97,110,103,101,0,92,37,100,0,92,37,48,51,100,0,105,110,118,97,108,105,100,32,111,112,116,105,111,110,32,39,37,37,37,99,39,32,116,111,32,39,102,111,114,109,97,116,39,0,103,109,97,116,99,104,0,103,115,117,98,0,115,116,114,105,110,103,47,102,117,110,99,116,105,111,110,47,116,97,98,108,101,32,101,120,112,101,99,116,101,100,0,105,110,118,97,108,105,100,32,117,115,101,32,111,102,32,39,37,99,39,32,105,110,32,114,101,112,108,97,99,101,109,101,110,116,32,115,116,114,105,110,103,0,105,110,118,97,108,105,100,32,114,101,112,108,97,99,101,109,101,110,116,32,118,97,108,117,101,32,40,97,32,37,115,41,0,108,101,110,0,108,111,119,101,114,0,109,97,116,99,104,0,114,101,112,0,114,101,115,117,108,116,105,110,103,32,115,116,114,105,110,103,32,116,111,111,32,108,97,114,103,101,0,114,101,118,101,114,115,101,0,115,117,98,0,117,112,112,101,114,0,99,111,110,99,97,116,0,105,110,118,97,108,105,100,32,118,97,108,117,101,32,40,37,115,41,32,97,116,32,105,110,100,101,120,32,37,100,32,105,110,32,116,97,98,108,101,32,102,111,114,32,39,99,111,110,99,97,116,39,0,109,97,120,110,0,105,110,115,101,114,116,0,112,111,115,105,116,105,111,110,32,111,117,116,32,111,102,32,98,111,117,110,100,115,0,119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,32,116,111,32,39,105,110,115,101,114,116,39,0,112,97,99,107,0,110,0,117,110,112,97,99,107,0,116,111,111,32,109,97,110,121,32,114,101,115,117,108,116,115,32,116,111,32,117,110,112,97,99,107,0,114,101,109,111,118,101,0,115,111,114,116,0,105,110,118,97,108,105,100,32,111,114,100,101,114,32,102,117,110,99,116,105,111,110,32,102,111,114,32,115,111,114,116,105,110,103,0,95,67,76,73,66,83,0,95,95,103,99,0,108,111,97,100,108,105,98,0,100,121,110,97,109,105,99,32,108,105,98,114,97,114,105,101,115,32,110,111,116,32,101,110,97,98,108,101,100,59,32,99,104,101,99,107,32,121,111,117,114,32,76,117,97,32,105,110,115,116,97,108,108,97,116,105,111,110,0,97,98,115,101,110,116,0,105,110,105,116,0,115,101,97,114,99,104,112,97,116,104,0,47,0,63,0,114,0,10,9,110,111,32,102,105,108,101,32,39,37,115,39,0,115,101,101,97,108,108,0,95,95,105,110,100,101,120,0,10,9,110,111,32,102,105,101,108,100,32,112,97,99,107,97,103,101,46,112,114,101,108,111,97,100,91,39,37,115,39,93,0,112,97,116,104,0,39,112,97,99,107,97,103,101,46,37,115,39,32,109,117,115,116,32,98,101,32,97,32,115,116,114,105,110,103,0,101,114,114,111,114,32,108,111,97,100,105,110,103,32,109,111,100,117,108,101,32,39,37,115,39,32,102,114,111,109,32,102,105,108,101,32,39,37,115,39,58,10,9,37,115,0,99,112,97,116,104,0,95,0,108,117,97,111,112,101,110,95,37,115,0,10,9,110,111,32,109,111,100,117,108,101,32,39,37,115,39,32,105,110,32,102,105,108,101,32,39,37,115,39,0,108,111,97,100,101,114,115,0,115,101,97,114,99,104,101,114,115,0,76,85,65,95,80,65,84,72,95,53,95,50,0,76,85,65,95,80,65,84,72,0,47,117,115,114,47,108,111,99,97,108,47,115,104,97,114,101,47,108,117,97,47,53,46,50,47,63,46,108,117,97,59,47,117,115,114,47,108,111,99,97,108,47,115,104,97,114,101,47,108,117,97,47,53,46,50,47,63,47,105,110,105,116,46,108,117,97,59,47,117,115,114,47,108,111,99,97,108,47,108,105,98,47,108,117,97,47,53,46,50,47,63,46,108,117,97,59,47,117,115,114,47,108,111,99,97,108,47,108,105,98,47,108,117,97,47,53,46,50,47,63,47,105,110,105,116,46,108,117,97,59,46,47,63,46,108,117,97,0,76,85,65,95,78,79,69,78,86,0,59,59,0,59,1,59,0,1,0,76,85,65,95,67,80,65,84,72,95,53,95,50,0,76,85,65,95,67,80,65,84,72,0,47,117,115,114,47,108,111,99,97,108,47,108,105,98,47,108,117,97,47,53,46,50,47,63,46,115,111,59,47,117,115,114,47,108,111,99,97,108,47,108,105,98,47,108,117,97,47,53,46,50,47,108,111,97,100,97,108,108,46,115,111,59,46,47,63,46,115,111,0,47,10,59,10,63,10,33,10,45,10,0,99,111,110,102,105,103,0,95,76,79,65,68,69,68,0,108,111,97,100,101,100,0,112,114,101,108,111,97,100,0,109,111,100,117,108,101,0,95,78,65,77,69,0,95,77,0,95,80,65,67,75,65,71,69,0,102,0,39,109,111,100,117,108,101,39,32,110,111,116,32,99,97,108,108,101,100,32,102,114,111,109,32,97,32,76,117,97,32,102,117,110,99,116,105,111,110,0,114,101,113,117,105,114,101,0,39,112,97,99,107,97,103,101,46,115,101,97,114,99,104,101,114,115,39,32,109,117,115,116,32,98,101,32,97,32,116,97,98,108,101,0,109,111,100,117,108,101,32,39,37,115,39,32,110,111,116,32,102,111,117,110,100,58,37,115,0,95,71,0,112,97,99,107,97,103,101,0,99,111,114,111,117,116,105,110,101,0,116,97,98,108,101,0,105,111,0,111,115,0,115,116,114,105,110,103,0,98,105,116,51,50,0,109,97,116,104,0,100,101,98,117,103,0,95,80,82,69,76,79,65,68,0,67,46,85,84,70,45,56,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6],"i8",ALLOC_NONE,Runtime.GLOBAL_BASE);allocate([11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,45,43,32,32,32,48,88,48,120,0,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,78,65,78,0,46,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,4,7,3,6,5,0,105,110,102,105,110,105,116,121,0,110,97,110,0,114,119,97,0,47,116,109,112,0,47,116,109,112,47,116,37,120,45,37,120,0,119,43,0],"i8",ALLOC_NONE,Runtime.GLOBAL_BASE+10240);var tempDoublePtr=STATICTOP;STATICTOP+=16;Module["_i64Subtract"]=_i64Subtract;function ___setErrNo(value){if(Module["___errno_location"])HEAP32[Module["___errno_location"]()>>2]=value;return value}var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _sysconf(name){switch(name){case 30:return PAGE_SIZE;case 85:return totalMemory/PAGE_SIZE;case 132:case 133:case 12:case 137:case 138:case 15:case 235:case 16:case 17:case 18:case 19:case 20:case 149:case 13:case 10:case 236:case 153:case 9:case 21:case 22:case 159:case 154:case 14:case 77:case 78:case 139:case 80:case 81:case 82:case 68:case 67:case 164:case 11:case 29:case 47:case 48:case 95:case 52:case 51:case 46:return 200809;case 79:return 0;case 27:case 246:case 127:case 128:case 23:case 24:case 160:case 161:case 181:case 182:case 242:case 183:case 184:case 243:case 244:case 245:case 165:case 178:case 179:case 49:case 50:case 168:case 169:case 175:case 170:case 171:case 172:case 97:case 76:case 32:case 173:case 35:return-1;case 176:case 177:case 7:case 155:case 8:case 157:case 125:case 126:case 92:case 93:case 129:case 130:case 131:case 94:case 91:return 1;case 74:case 60:case 69:case 70:case 4:return 1024;case 31:case 42:case 72:return 32;case 87:case 26:case 33:return 2147483647;case 34:case 1:return 47839;case 38:case 36:return 99;case 43:case 37:return 2048;case 0:return 2097152;case 3:return 65536;case 28:return 32768;case 44:return 32767;case 75:return 16384;case 39:return 1e3;case 89:return 700;case 71:return 256;case 40:return 255;case 2:return 100;case 180:return 64;case 25:return 20;case 5:return 16;case 6:return 6;case 73:return 4;case 84:{if(typeof navigator==="object")return navigator["hardwareConcurrency"]||1;return 1}}___setErrNo(ERRNO_CODES.EINVAL);return-1}var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};var PATH={splitPath:(function(filename){var splitPathRe=/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;return splitPathRe.exec(filename).slice(1)}),normalizeArray:(function(parts,allowAboveRoot){var up=0;for(var i=parts.length-1;i>=0;i--){var last=parts[i];if(last==="."){parts.splice(i,1)}else if(last===".."){parts.splice(i,1);up++}else if(up){parts.splice(i,1);up--}}if(allowAboveRoot){for(;up--;up){parts.unshift("..")}}return parts}),normalize:(function(path){var isAbsolute=path.charAt(0)==="/",trailingSlash=path.substr(-1)==="/";path=PATH.normalizeArray(path.split("/").filter((function(p){return!!p})),!isAbsolute).join("/");if(!path&&!isAbsolute){path="."}if(path&&trailingSlash){path+="/"}return(isAbsolute?"/":"")+path}),dirname:(function(path){var result=PATH.splitPath(path),root=result[0],dir=result[1];if(!root&&!dir){return"."}if(dir){dir=dir.substr(0,dir.length-1)}return root+dir}),basename:(function(path){if(path==="/")return"/";var lastSlash=path.lastIndexOf("/");if(lastSlash===-1)return path;return path.substr(lastSlash+1)}),extname:(function(path){return PATH.splitPath(path)[3]}),join:(function(){var paths=Array.prototype.slice.call(arguments,0);return PATH.normalize(paths.join("/"))}),join2:(function(l,r){return PATH.normalize(l+"/"+r)}),resolve:(function(){var resolvedPath="",resolvedAbsolute=false;for(var i=arguments.length-1;i>=-1&&!resolvedAbsolute;i--){var path=i>=0?arguments[i]:FS.cwd();if(typeof path!=="string"){throw new TypeError("Arguments to path.resolve must be strings")}else if(!path){return""}resolvedPath=path+"/"+resolvedPath;resolvedAbsolute=path.charAt(0)==="/"}resolvedPath=PATH.normalizeArray(resolvedPath.split("/").filter((function(p){return!!p})),!resolvedAbsolute).join("/");return(resolvedAbsolute?"/":"")+resolvedPath||"."}),relative:(function(from,to){from=PATH.resolve(from).substr(1);to=PATH.resolve(to).substr(1);function trim(arr){var start=0;for(;start<arr.length;start++){if(arr[start]!=="")break}var end=arr.length-1;for(;end>=0;end--){if(arr[end]!=="")break}if(start>end)return[];return arr.slice(start,end-start+1)}var fromParts=trim(from.split("/"));var toParts=trim(to.split("/"));var length=Math.min(fromParts.length,toParts.length);var samePartsLength=length;for(var i=0;i<length;i++){if(fromParts[i]!==toParts[i]){samePartsLength=i;break}}var outputParts=[];for(var i=samePartsLength;i<fromParts.length;i++){outputParts.push("..")}outputParts=outputParts.concat(toParts.slice(samePartsLength));return outputParts.join("/")})};var TTY={ttys:[],init:(function(){}),shutdown:(function(){}),register:(function(dev,ops){TTY.ttys[dev]={input:[],output:[],ops:ops};FS.registerDevice(dev,TTY.stream_ops)}),stream_ops:{open:(function(stream){var tty=TTY.ttys[stream.node.rdev];if(!tty){throw new FS.ErrnoError(ERRNO_CODES.ENODEV)}stream.tty=tty;stream.seekable=false}),close:(function(stream){stream.tty.ops.flush(stream.tty)}),flush:(function(stream){stream.tty.ops.flush(stream.tty)}),read:(function(stream,buffer,offset,length,pos){if(!stream.tty||!stream.tty.ops.get_char){throw new FS.ErrnoError(ERRNO_CODES.ENXIO)}var bytesRead=0;for(var i=0;i<length;i++){var result;try{result=stream.tty.ops.get_char(stream.tty)}catch(e){throw new FS.ErrnoError(ERRNO_CODES.EIO)}if(result===undefined&&bytesRead===0){throw new FS.ErrnoError(ERRNO_CODES.EAGAIN)}if(result===null||result===undefined)break;bytesRead++;buffer[offset+i]=result}if(bytesRead){stream.node.timestamp=Date.now()}return bytesRead}),write:(function(stream,buffer,offset,length,pos){if(!stream.tty||!stream.tty.ops.put_char){throw new FS.ErrnoError(ERRNO_CODES.ENXIO)}for(var i=0;i<length;i++){try{stream.tty.ops.put_char(stream.tty,buffer[offset+i])}catch(e){throw new FS.ErrnoError(ERRNO_CODES.EIO)}}if(length){stream.node.timestamp=Date.now()}return i})},default_tty_ops:{get_char:(function(tty){if(!tty.input.length){var result=null;if(ENVIRONMENT_IS_NODE){var BUFSIZE=256;var buf=new Buffer(BUFSIZE);var bytesRead=0;var fd=process.stdin.fd;var usingDevice=false;try{fd=fs.openSync("/dev/stdin","r");usingDevice=true}catch(e){}bytesRead=fs.readSync(fd,buf,0,BUFSIZE,null);if(usingDevice){fs.closeSync(fd)}if(bytesRead>0){result=buf.slice(0,bytesRead).toString("utf-8")}else{result=null}}else if(typeof window!="undefined"&&typeof window.prompt=="function"){result=window.prompt("Input: ");if(result!==null){result+="\n"}}else if(typeof readline=="function"){result=readline();if(result!==null){result+="\n"}}if(!result){return null}tty.input=intArrayFromString(result,true)}return tty.input.shift()}),put_char:(function(tty,val){if(val===null||val===10){Module["print"](UTF8ArrayToString(tty.output,0));tty.output=[]}else{if(val!=0)tty.output.push(val)}}),flush:(function(tty){if(tty.output&&tty.output.length>0){Module["print"](UTF8ArrayToString(tty.output,0));tty.output=[]}})},default_tty1_ops:{put_char:(function(tty,val){if(val===null||val===10){Module["printErr"](UTF8ArrayToString(tty.output,0));tty.output=[]}else{if(val!=0)tty.output.push(val)}}),flush:(function(tty){if(tty.output&&tty.output.length>0){Module["printErr"](UTF8ArrayToString(tty.output,0));tty.output=[]}})}};var MEMFS={ops_table:null,mount:(function(mount){return MEMFS.createNode(null,"/",16384|511,0)}),createNode:(function(parent,name,mode,dev){if(FS.isBlkdev(mode)||FS.isFIFO(mode)){throw new FS.ErrnoError(ERRNO_CODES.EPERM)}if(!MEMFS.ops_table){MEMFS.ops_table={dir:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr,lookup:MEMFS.node_ops.lookup,mknod:MEMFS.node_ops.mknod,rename:MEMFS.node_ops.rename,unlink:MEMFS.node_ops.unlink,rmdir:MEMFS.node_ops.rmdir,readdir:MEMFS.node_ops.readdir,symlink:MEMFS.node_ops.symlink},stream:{llseek:MEMFS.stream_ops.llseek}},file:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr},stream:{llseek:MEMFS.stream_ops.llseek,read:MEMFS.stream_ops.read,write:MEMFS.stream_ops.write,allocate:MEMFS.stream_ops.allocate,mmap:MEMFS.stream_ops.mmap,msync:MEMFS.stream_ops.msync}},link:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr,readlink:MEMFS.node_ops.readlink},stream:{}},chrdev:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr},stream:FS.chrdev_stream_ops}}}var node=FS.createNode(parent,name,mode,dev);if(FS.isDir(node.mode)){node.node_ops=MEMFS.ops_table.dir.node;node.stream_ops=MEMFS.ops_table.dir.stream;node.contents={}}else if(FS.isFile(node.mode)){node.node_ops=MEMFS.ops_table.file.node;node.stream_ops=MEMFS.ops_table.file.stream;node.usedBytes=0;node.contents=null}else if(FS.isLink(node.mode)){node.node_ops=MEMFS.ops_table.link.node;node.stream_ops=MEMFS.ops_table.link.stream}else if(FS.isChrdev(node.mode)){node.node_ops=MEMFS.ops_table.chrdev.node;node.stream_ops=MEMFS.ops_table.chrdev.stream}node.timestamp=Date.now();if(parent){parent.contents[name]=node}return node}),getFileDataAsRegularArray:(function(node){if(node.contents&&node.contents.subarray){var arr=[];for(var i=0;i<node.usedBytes;++i)arr.push(node.contents[i]);return arr}return node.contents}),getFileDataAsTypedArray:(function(node){if(!node.contents)return new Uint8Array;if(node.contents.subarray)return node.contents.subarray(0,node.usedBytes);return new Uint8Array(node.contents)}),expandFileStorage:(function(node,newCapacity){if(node.contents&&node.contents.subarray&&newCapacity>node.contents.length){node.contents=MEMFS.getFileDataAsRegularArray(node);node.usedBytes=node.contents.length}if(!node.contents||node.contents.subarray){var prevCapacity=node.contents?node.contents.buffer.byteLength:0;if(prevCapacity>=newCapacity)return;var CAPACITY_DOUBLING_MAX=1024*1024;newCapacity=Math.max(newCapacity,prevCapacity*(prevCapacity<CAPACITY_DOUBLING_MAX?2:1.125)|0);if(prevCapacity!=0)newCapacity=Math.max(newCapacity,256);var oldContents=node.contents;node.contents=new Uint8Array(newCapacity);if(node.usedBytes>0)node.contents.set(oldContents.subarray(0,node.usedBytes),0);return}if(!node.contents&&newCapacity>0)node.contents=[];while(node.contents.length<newCapacity)node.contents.push(0)}),resizeFileStorage:(function(node,newSize){if(node.usedBytes==newSize)return;if(newSize==0){node.contents=null;node.usedBytes=0;return}if(!node.contents||node.contents.subarray){var oldContents=node.contents;node.contents=new Uint8Array(new ArrayBuffer(newSize));if(oldContents){node.contents.set(oldContents.subarray(0,Math.min(newSize,node.usedBytes)))}node.usedBytes=newSize;return}if(!node.contents)node.contents=[];if(node.contents.length>newSize)node.contents.length=newSize;else while(node.contents.length<newSize)node.contents.push(0);node.usedBytes=newSize}),node_ops:{getattr:(function(node){var attr={};attr.dev=FS.isChrdev(node.mode)?node.id:1;attr.ino=node.id;attr.mode=node.mode;attr.nlink=1;attr.uid=0;attr.gid=0;attr.rdev=node.rdev;if(FS.isDir(node.mode)){attr.size=4096}else if(FS.isFile(node.mode)){attr.size=node.usedBytes}else if(FS.isLink(node.mode)){attr.size=node.link.length}else{attr.size=0}attr.atime=new Date(node.timestamp);attr.mtime=new Date(node.timestamp);attr.ctime=new Date(node.timestamp);attr.blksize=4096;attr.blocks=Math.ceil(attr.size/attr.blksize);return attr}),setattr:(function(node,attr){if(attr.mode!==undefined){node.mode=attr.mode}if(attr.timestamp!==undefined){node.timestamp=attr.timestamp}if(attr.size!==undefined){MEMFS.resizeFileStorage(node,attr.size)}}),lookup:(function(parent,name){throw FS.genericErrors[ERRNO_CODES.ENOENT]}),mknod:(function(parent,name,mode,dev){return MEMFS.createNode(parent,name,mode,dev)}),rename:(function(old_node,new_dir,new_name){if(FS.isDir(old_node.mode)){var new_node;try{new_node=FS.lookupNode(new_dir,new_name)}catch(e){}if(new_node){for(var i in new_node.contents){throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY)}}}delete old_node.parent.contents[old_node.name];old_node.name=new_name;new_dir.contents[new_name]=old_node;old_node.parent=new_dir}),unlink:(function(parent,name){delete parent.contents[name]}),rmdir:(function(parent,name){var node=FS.lookupNode(parent,name);for(var i in node.contents){throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY)}delete parent.contents[name]}),readdir:(function(node){var entries=[".",".."];for(var key in node.contents){if(!node.contents.hasOwnProperty(key)){continue}entries.push(key)}return entries}),symlink:(function(parent,newname,oldpath){var node=MEMFS.createNode(parent,newname,511|40960,0);node.link=oldpath;return node}),readlink:(function(node){if(!FS.isLink(node.mode)){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}return node.link})},stream_ops:{read:(function(stream,buffer,offset,length,position){var contents=stream.node.contents;if(position>=stream.node.usedBytes)return 0;var size=Math.min(stream.node.usedBytes-position,length);assert(size>=0);if(size>8&&contents.subarray){buffer.set(contents.subarray(position,position+size),offset)}else{for(var i=0;i<size;i++)buffer[offset+i]=contents[position+i]}return size}),write:(function(stream,buffer,offset,length,position,canOwn){if(!length)return 0;var node=stream.node;node.timestamp=Date.now();if(buffer.subarray&&(!node.contents||node.contents.subarray)){if(canOwn){node.contents=buffer.subarray(offset,offset+length);node.usedBytes=length;return length}else if(node.usedBytes===0&&position===0){node.contents=new Uint8Array(buffer.subarray(offset,offset+length));node.usedBytes=length;return length}else if(position+length<=node.usedBytes){node.contents.set(buffer.subarray(offset,offset+length),position);return length}}MEMFS.expandFileStorage(node,position+length);if(node.contents.subarray&&buffer.subarray)node.contents.set(buffer.subarray(offset,offset+length),position);else{for(var i=0;i<length;i++){node.contents[position+i]=buffer[offset+i]}}node.usedBytes=Math.max(node.usedBytes,position+length);return length}),llseek:(function(stream,offset,whence){var position=offset;if(whence===1){position+=stream.position}else if(whence===2){if(FS.isFile(stream.node.mode)){position+=stream.node.usedBytes}}if(position<0){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}return position}),allocate:(function(stream,offset,length){MEMFS.expandFileStorage(stream.node,offset+length);stream.node.usedBytes=Math.max(stream.node.usedBytes,offset+length)}),mmap:(function(stream,buffer,offset,length,position,prot,flags){if(!FS.isFile(stream.node.mode)){throw new FS.ErrnoError(ERRNO_CODES.ENODEV)}var ptr;var allocated;var contents=stream.node.contents;if(!(flags&2)&&(contents.buffer===buffer||contents.buffer===buffer.buffer)){allocated=false;ptr=contents.byteOffset}else{if(position>0||position+length<stream.node.usedBytes){if(contents.subarray){contents=contents.subarray(position,position+length)}else{contents=Array.prototype.slice.call(contents,position,position+length)}}allocated=true;ptr=_malloc(length);if(!ptr){throw new FS.ErrnoError(ERRNO_CODES.ENOMEM)}buffer.set(contents,ptr)}return{ptr:ptr,allocated:allocated}}),msync:(function(stream,buffer,offset,length,mmapFlags){if(!FS.isFile(stream.node.mode)){throw new FS.ErrnoError(ERRNO_CODES.ENODEV)}if(mmapFlags&2){return 0}var bytesWritten=MEMFS.stream_ops.write(stream,buffer,0,length,offset,false);return 0})}};var IDBFS={dbs:{},indexedDB:(function(){if(typeof indexedDB!=="undefined")return indexedDB;var ret=null;if(typeof window==="object")ret=window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB;assert(ret,"IDBFS used, but indexedDB not supported");return ret}),DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:(function(mount){return MEMFS.mount.apply(null,arguments)}),syncfs:(function(mount,populate,callback){IDBFS.getLocalSet(mount,(function(err,local){if(err)return callback(err);IDBFS.getRemoteSet(mount,(function(err,remote){if(err)return callback(err);var src=populate?remote:local;var dst=populate?local:remote;IDBFS.reconcile(src,dst,callback)}))}))}),getDB:(function(name,callback){var db=IDBFS.dbs[name];if(db){return callback(null,db)}var req;try{req=IDBFS.indexedDB().open(name,IDBFS.DB_VERSION)}catch(e){return callback(e)}req.onupgradeneeded=(function(e){var db=e.target.result;var transaction=e.target.transaction;var fileStore;if(db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)){fileStore=transaction.objectStore(IDBFS.DB_STORE_NAME)}else{fileStore=db.createObjectStore(IDBFS.DB_STORE_NAME)}if(!fileStore.indexNames.contains("timestamp")){fileStore.createIndex("timestamp","timestamp",{unique:false})}});req.onsuccess=(function(){db=req.result;IDBFS.dbs[name]=db;callback(null,db)});req.onerror=(function(e){callback(this.error);e.preventDefault()})}),getLocalSet:(function(mount,callback){var entries={};function isRealDir(p){return p!=="."&&p!==".."}function toAbsolute(root){return(function(p){return PATH.join2(root,p)})}var check=FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));while(check.length){var path=check.pop();var stat;try{stat=FS.stat(path)}catch(e){return callback(e)}if(FS.isDir(stat.mode)){check.push.apply(check,FS.readdir(path).filter(isRealDir).map(toAbsolute(path)))}entries[path]={timestamp:stat.mtime}}return callback(null,{type:"local",entries:entries})}),getRemoteSet:(function(mount,callback){var entries={};IDBFS.getDB(mount.mountpoint,(function(err,db){if(err)return callback(err);var transaction=db.transaction([IDBFS.DB_STORE_NAME],"readonly");transaction.onerror=(function(e){callback(this.error);e.preventDefault()});var store=transaction.objectStore(IDBFS.DB_STORE_NAME);var index=store.index("timestamp");index.openKeyCursor().onsuccess=(function(event){var cursor=event.target.result;if(!cursor){return callback(null,{type:"remote",db:db,entries:entries})}entries[cursor.primaryKey]={timestamp:cursor.key};cursor.continue()})}))}),loadLocalEntry:(function(path,callback){var stat,node;try{var lookup=FS.lookupPath(path);node=lookup.node;stat=FS.stat(path)}catch(e){return callback(e)}if(FS.isDir(stat.mode)){return callback(null,{timestamp:stat.mtime,mode:stat.mode})}else if(FS.isFile(stat.mode)){node.contents=MEMFS.getFileDataAsTypedArray(node);return callback(null,{timestamp:stat.mtime,mode:stat.mode,contents:node.contents})}else{return callback(new Error("node type not supported"))}}),storeLocalEntry:(function(path,entry,callback){try{if(FS.isDir(entry.mode)){FS.mkdir(path,entry.mode)}else if(FS.isFile(entry.mode)){FS.writeFile(path,entry.contents,{encoding:"binary",canOwn:true})}else{return callback(new Error("node type not supported"))}FS.chmod(path,entry.mode);FS.utime(path,entry.timestamp,entry.timestamp)}catch(e){return callback(e)}callback(null)}),removeLocalEntry:(function(path,callback){try{var lookup=FS.lookupPath(path);var stat=FS.stat(path);if(FS.isDir(stat.mode)){FS.rmdir(path)}else if(FS.isFile(stat.mode)){FS.unlink(path)}}catch(e){return callback(e)}callback(null)}),loadRemoteEntry:(function(store,path,callback){var req=store.get(path);req.onsuccess=(function(event){callback(null,event.target.result)});req.onerror=(function(e){callback(this.error);e.preventDefault()})}),storeRemoteEntry:(function(store,path,entry,callback){var req=store.put(entry,path);req.onsuccess=(function(){callback(null)});req.onerror=(function(e){callback(this.error);e.preventDefault()})}),removeRemoteEntry:(function(store,path,callback){var req=store.delete(path);req.onsuccess=(function(){callback(null)});req.onerror=(function(e){callback(this.error);e.preventDefault()})}),reconcile:(function(src,dst,callback){var total=0;var create=[];Object.keys(src.entries).forEach((function(key){var e=src.entries[key];var e2=dst.entries[key];if(!e2||e.timestamp>e2.timestamp){create.push(key);total++}}));var remove=[];Object.keys(dst.entries).forEach((function(key){var e=dst.entries[key];var e2=src.entries[key];if(!e2){remove.push(key);total++}}));if(!total){return callback(null)}var completed=0;var db=src.type==="remote"?src.db:dst.db;var transaction=db.transaction([IDBFS.DB_STORE_NAME],"readwrite");var store=transaction.objectStore(IDBFS.DB_STORE_NAME);function done(err){if(err){if(!done.errored){done.errored=true;return callback(err)}return}if(++completed>=total){return callback(null)}}transaction.onerror=(function(e){done(this.error);e.preventDefault()});create.sort().forEach((function(path){if(dst.type==="local"){IDBFS.loadRemoteEntry(store,path,(function(err,entry){if(err)return done(err);IDBFS.storeLocalEntry(path,entry,done)}))}else{IDBFS.loadLocalEntry(path,(function(err,entry){if(err)return done(err);IDBFS.storeRemoteEntry(store,path,entry,done)}))}}));remove.sort().reverse().forEach((function(path){if(dst.type==="local"){IDBFS.removeLocalEntry(path,done)}else{IDBFS.removeRemoteEntry(store,path,done)}}))})};var NODEFS={isWindows:false,staticInit:(function(){NODEFS.isWindows=!!process.platform.match(/^win/)}),mount:(function(mount){assert(ENVIRONMENT_IS_NODE);return NODEFS.createNode(null,"/",NODEFS.getMode(mount.opts.root),0)}),createNode:(function(parent,name,mode,dev){if(!FS.isDir(mode)&&!FS.isFile(mode)&&!FS.isLink(mode)){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}var node=FS.createNode(parent,name,mode);node.node_ops=NODEFS.node_ops;node.stream_ops=NODEFS.stream_ops;return node}),getMode:(function(path){var stat;try{stat=fs.lstatSync(path);if(NODEFS.isWindows){stat.mode=stat.mode|(stat.mode&146)>>1}}catch(e){if(!e.code)throw e;throw new FS.ErrnoError(ERRNO_CODES[e.code])}return stat.mode}),realPath:(function(node){var parts=[];while(node.parent!==node){parts.push(node.name);node=node.parent}parts.push(node.mount.opts.root);parts.reverse();return PATH.join.apply(null,parts)}),flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:(function(flags){flags&=~32768;flags&=~524288;if(flags in NODEFS.flagsToPermissionStringMap){return NODEFS.flagsToPermissionStringMap[flags]}else{throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}}),node_ops:{getattr:(function(node){var path=NODEFS.realPath(node);var stat;try{stat=fs.lstatSync(path)}catch(e){if(!e.code)throw e;throw new FS.ErrnoError(ERRNO_CODES[e.code])}if(NODEFS.isWindows&&!stat.blksize){stat.blksize=4096}if(NODEFS.isWindows&&!stat.blocks){stat.blocks=(stat.size+stat.blksize-1)/stat.blksize|0}return{dev:stat.dev,ino:stat.ino,mode:stat.mode,nlink:stat.nlink,uid:stat.uid,gid:stat.gid,rdev:stat.rdev,size:stat.size,atime:stat.atime,mtime:stat.mtime,ctime:stat.ctime,blksize:stat.blksize,blocks:stat.blocks}}),setattr:(function(node,attr){var path=NODEFS.realPath(node);try{if(attr.mode!==undefined){fs.chmodSync(path,attr.mode);node.mode=attr.mode}if(attr.timestamp!==undefined){var date=new Date(attr.timestamp);fs.utimesSync(path,date,date)}if(attr.size!==undefined){fs.truncateSync(path,attr.size)}}catch(e){if(!e.code)throw e;throw new FS.ErrnoError(ERRNO_CODES[e.code])}}),lookup:(function(parent,name){var path=PATH.join2(NODEFS.realPath(parent),name);var mode=NODEFS.getMode(path);return NODEFS.createNode(parent,name,mode)}),mknod:(function(parent,name,mode,dev){var node=NODEFS.createNode(parent,name,mode,dev);var path=NODEFS.realPath(node);try{if(FS.isDir(node.mode)){fs.mkdirSync(path,node.mode)}else{fs.writeFileSync(path,"",{mode:node.mode})}}catch(e){if(!e.code)throw e;throw new FS.ErrnoError(ERRNO_CODES[e.code])}return node}),rename:(function(oldNode,newDir,newName){var oldPath=NODEFS.realPath(oldNode);var newPath=PATH.join2(NODEFS.realPath(newDir),newName);try{fs.renameSync(oldPath,newPath)}catch(e){if(!e.code)throw e;throw new FS.ErrnoError(ERRNO_CODES[e.code])}}),unlink:(function(parent,name){var path=PATH.join2(NODEFS.realPath(parent),name);try{fs.unlinkSync(path)}catch(e){if(!e.code)throw e;throw new FS.ErrnoError(ERRNO_CODES[e.code])}}),rmdir:(function(parent,name){var path=PATH.join2(NODEFS.realPath(parent),name);try{fs.rmdirSync(path)}catch(e){if(!e.code)throw e;throw new FS.ErrnoError(ERRNO_CODES[e.code])}}),readdir:(function(node){var path=NODEFS.realPath(node);try{return fs.readdirSync(path)}catch(e){if(!e.code)throw e;throw new FS.ErrnoError(ERRNO_CODES[e.code])}}),symlink:(function(parent,newName,oldPath){var newPath=PATH.join2(NODEFS.realPath(parent),newName);try{fs.symlinkSync(oldPath,newPath)}catch(e){if(!e.code)throw e;throw new FS.ErrnoError(ERRNO_CODES[e.code])}}),readlink:(function(node){var path=NODEFS.realPath(node);try{path=fs.readlinkSync(path);path=NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root),path);return path}catch(e){if(!e.code)throw e;throw new FS.ErrnoError(ERRNO_CODES[e.code])}})},stream_ops:{open:(function(stream){var path=NODEFS.realPath(stream.node);try{if(FS.isFile(stream.node.mode)){stream.nfd=fs.openSync(path,NODEFS.flagsToPermissionString(stream.flags))}}catch(e){if(!e.code)throw e;throw new FS.ErrnoError(ERRNO_CODES[e.code])}}),close:(function(stream){try{if(FS.isFile(stream.node.mode)&&stream.nfd){fs.closeSync(stream.nfd)}}catch(e){if(!e.code)throw e;throw new FS.ErrnoError(ERRNO_CODES[e.code])}}),read:(function(stream,buffer,offset,length,position){if(length===0)return 0;var nbuffer=new Buffer(length);var res;try{res=fs.readSync(stream.nfd,nbuffer,0,length,position)}catch(e){throw new FS.ErrnoError(ERRNO_CODES[e.code])}if(res>0){for(var i=0;i<res;i++){buffer[offset+i]=nbuffer[i]}}return res}),write:(function(stream,buffer,offset,length,position){var nbuffer=new Buffer(buffer.subarray(offset,offset+length));var res;try{res=fs.writeSync(stream.nfd,nbuffer,0,length,position)}catch(e){throw new FS.ErrnoError(ERRNO_CODES[e.code])}return res}),llseek:(function(stream,offset,whence){var position=offset;if(whence===1){position+=stream.position}else if(whence===2){if(FS.isFile(stream.node.mode)){try{var stat=fs.fstatSync(stream.nfd);position+=stat.size}catch(e){throw new FS.ErrnoError(ERRNO_CODES[e.code])}}}if(position<0){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}return position})}};var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:(function(mount){assert(ENVIRONMENT_IS_WORKER);if(!WORKERFS.reader)WORKERFS.reader=new FileReaderSync;var root=WORKERFS.createNode(null,"/",WORKERFS.DIR_MODE,0);var createdParents={};function ensureParent(path){var parts=path.split("/");var parent=root;for(var i=0;i<parts.length-1;i++){var curr=parts.slice(0,i+1).join("/");if(!createdParents[curr]){createdParents[curr]=WORKERFS.createNode(parent,curr,WORKERFS.DIR_MODE,0)}parent=createdParents[curr]}return parent}function base(path){var parts=path.split("/");return parts[parts.length-1]}Array.prototype.forEach.call(mount.opts["files"]||[],(function(file){WORKERFS.createNode(ensureParent(file.name),base(file.name),WORKERFS.FILE_MODE,0,file,file.lastModifiedDate)}));(mount.opts["blobs"]||[]).forEach((function(obj){WORKERFS.createNode(ensureParent(obj["name"]),base(obj["name"]),WORKERFS.FILE_MODE,0,obj["data"])}));(mount.opts["packages"]||[]).forEach((function(pack){pack["metadata"].files.forEach((function(file){var name=file.filename.substr(1);WORKERFS.createNode(ensureParent(name),base(name),WORKERFS.FILE_MODE,0,pack["blob"].slice(file.start,file.end))}))}));return root}),createNode:(function(parent,name,mode,dev,contents,mtime){var node=FS.createNode(parent,name,mode);node.mode=mode;node.node_ops=WORKERFS.node_ops;node.stream_ops=WORKERFS.stream_ops;node.timestamp=(mtime||new Date).getTime();assert(WORKERFS.FILE_MODE!==WORKERFS.DIR_MODE);if(mode===WORKERFS.FILE_MODE){node.size=contents.size;node.contents=contents}else{node.size=4096;node.contents={}}if(parent){parent.contents[name]=node}return node}),node_ops:{getattr:(function(node){return{dev:1,ino:undefined,mode:node.mode,nlink:1,uid:0,gid:0,rdev:undefined,size:node.size,atime:new Date(node.timestamp),mtime:new Date(node.timestamp),ctime:new Date(node.timestamp),blksize:4096,blocks:Math.ceil(node.size/4096)}}),setattr:(function(node,attr){if(attr.mode!==undefined){node.mode=attr.mode}if(attr.timestamp!==undefined){node.timestamp=attr.timestamp}}),lookup:(function(parent,name){throw new FS.ErrnoError(ERRNO_CODES.ENOENT)}),mknod:(function(parent,name,mode,dev){throw new FS.ErrnoError(ERRNO_CODES.EPERM)}),rename:(function(oldNode,newDir,newName){throw new FS.ErrnoError(ERRNO_CODES.EPERM)}),unlink:(function(parent,name){throw new FS.ErrnoError(ERRNO_CODES.EPERM)}),rmdir:(function(parent,name){throw new FS.ErrnoError(ERRNO_CODES.EPERM)}),readdir:(function(node){throw new FS.ErrnoError(ERRNO_CODES.EPERM)}),symlink:(function(parent,newName,oldPath){throw new FS.ErrnoError(ERRNO_CODES.EPERM)}),readlink:(function(node){throw new FS.ErrnoError(ERRNO_CODES.EPERM)})},stream_ops:{read:(function(stream,buffer,offset,length,position){if(position>=stream.node.size)return 0;var chunk=stream.node.contents.slice(position,position+length);var ab=WORKERFS.reader.readAsArrayBuffer(chunk);buffer.set(new Uint8Array(ab),offset);return chunk.size}),write:(function(stream,buffer,offset,length,position){throw new FS.ErrnoError(ERRNO_CODES.EIO)}),llseek:(function(stream,offset,whence){var position=offset;if(whence===1){position+=stream.position}else if(whence===2){if(FS.isFile(stream.node.mode)){position+=stream.node.size}}if(position<0){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}return position})}};STATICTOP+=16;STATICTOP+=16;STATICTOP+=16;var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:(function(e){if(!(e instanceof FS.ErrnoError))throw e+" : "+stackTrace();return ___setErrNo(e.errno)}),lookupPath:(function(path,opts){path=PATH.resolve(FS.cwd(),path);opts=opts||{};if(!path)return{path:"",node:null};var defaults={follow_mount:true,recurse_count:0};for(var key in defaults){if(opts[key]===undefined){opts[key]=defaults[key]}}if(opts.recurse_count>8){throw new FS.ErrnoError(ERRNO_CODES.ELOOP)}var parts=PATH.normalizeArray(path.split("/").filter((function(p){return!!p})),false);var current=FS.root;var current_path="/";for(var i=0;i<parts.length;i++){var islast=i===parts.length-1;if(islast&&opts.parent){break}current=FS.lookupNode(current,parts[i]);current_path=PATH.join2(current_path,parts[i]);if(FS.isMountpoint(current)){if(!islast||islast&&opts.follow_mount){current=current.mounted.root}}if(!islast||opts.follow){var count=0;while(FS.isLink(current.mode)){var link=FS.readlink(current_path);current_path=PATH.resolve(PATH.dirname(current_path),link);var lookup=FS.lookupPath(current_path,{recurse_count:opts.recurse_count});current=lookup.node;if(count++>40){throw new FS.ErrnoError(ERRNO_CODES.ELOOP)}}}}return{path:current_path,node:current}}),getPath:(function(node){var path;while(true){if(FS.isRoot(node)){var mount=node.mount.mountpoint;if(!path)return mount;return mount[mount.length-1]!=="/"?mount+"/"+path:mount+path}path=path?node.name+"/"+path:node.name;node=node.parent}}),hashName:(function(parentid,name){var hash=0;for(var i=0;i<name.length;i++){hash=(hash<<5)-hash+name.charCodeAt(i)|0}return(parentid+hash>>>0)%FS.nameTable.length}),hashAddNode:(function(node){var hash=FS.hashName(node.parent.id,node.name);node.name_next=FS.nameTable[hash];FS.nameTable[hash]=node}),hashRemoveNode:(function(node){var hash=FS.hashName(node.parent.id,node.name);if(FS.nameTable[hash]===node){FS.nameTable[hash]=node.name_next}else{var current=FS.nameTable[hash];while(current){if(current.name_next===node){current.name_next=node.name_next;break}current=current.name_next}}}),lookupNode:(function(parent,name){var err=FS.mayLookup(parent);if(err){throw new FS.ErrnoError(err,parent)}var hash=FS.hashName(parent.id,name);for(var node=FS.nameTable[hash];node;node=node.name_next){var nodeName=node.name;if(node.parent.id===parent.id&&nodeName===name){return node}}return FS.lookup(parent,name)}),createNode:(function(parent,name,mode,rdev){if(!FS.FSNode){FS.FSNode=(function(parent,name,mode,rdev){if(!parent){parent=this}this.parent=parent;this.mount=parent.mount;this.mounted=null;this.id=FS.nextInode++;this.name=name;this.mode=mode;this.node_ops={};this.stream_ops={};this.rdev=rdev});FS.FSNode.prototype={};var readMode=292|73;var writeMode=146;Object.defineProperties(FS.FSNode.prototype,{read:{get:(function(){return(this.mode&readMode)===readMode}),set:(function(val){val?this.mode|=readMode:this.mode&=~readMode})},write:{get:(function(){return(this.mode&writeMode)===writeMode}),set:(function(val){val?this.mode|=writeMode:this.mode&=~writeMode})},isFolder:{get:(function(){return FS.isDir(this.mode)})},isDevice:{get:(function(){return FS.isChrdev(this.mode)})}})}var node=new FS.FSNode(parent,name,mode,rdev);FS.hashAddNode(node);return node}),destroyNode:(function(node){FS.hashRemoveNode(node)}),isRoot:(function(node){return node===node.parent}),isMountpoint:(function(node){return!!node.mounted}),isFile:(function(mode){return(mode&61440)===32768}),isDir:(function(mode){return(mode&61440)===16384}),isLink:(function(mode){return(mode&61440)===40960}),isChrdev:(function(mode){return(mode&61440)===8192}),isBlkdev:(function(mode){return(mode&61440)===24576}),isFIFO:(function(mode){return(mode&61440)===4096}),isSocket:(function(mode){return(mode&49152)===49152}),flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:(function(str){var flags=FS.flagModes[str];if(typeof flags==="undefined"){throw new Error("Unknown file open mode: "+str)}return flags}),flagsToPermissionString:(function(flag){var perms=["r","w","rw"][flag&3];if(flag&512){perms+="w"}return perms}),nodePermissions:(function(node,perms){if(FS.ignorePermissions){return 0}if(perms.indexOf("r")!==-1&&!(node.mode&292)){return ERRNO_CODES.EACCES}else if(perms.indexOf("w")!==-1&&!(node.mode&146)){return ERRNO_CODES.EACCES}else if(perms.indexOf("x")!==-1&&!(node.mode&73)){return ERRNO_CODES.EACCES}return 0}),mayLookup:(function(dir){var err=FS.nodePermissions(dir,"x");if(err)return err;if(!dir.node_ops.lookup)return ERRNO_CODES.EACCES;return 0}),mayCreate:(function(dir,name){try{var node=FS.lookupNode(dir,name);return ERRNO_CODES.EEXIST}catch(e){}return FS.nodePermissions(dir,"wx")}),mayDelete:(function(dir,name,isdir){var node;try{node=FS.lookupNode(dir,name)}catch(e){return e.errno}var err=FS.nodePermissions(dir,"wx");if(err){return err}if(isdir){if(!FS.isDir(node.mode)){return ERRNO_CODES.ENOTDIR}if(FS.isRoot(node)||FS.getPath(node)===FS.cwd()){return ERRNO_CODES.EBUSY}}else{if(FS.isDir(node.mode)){return ERRNO_CODES.EISDIR}}return 0}),mayOpen:(function(node,flags){if(!node){return ERRNO_CODES.ENOENT}if(FS.isLink(node.mode)){return ERRNO_CODES.ELOOP}else if(FS.isDir(node.mode)){if(FS.flagsToPermissionString(flags)!=="r"||flags&512){return ERRNO_CODES.EISDIR}}return FS.nodePermissions(node,FS.flagsToPermissionString(flags))}),MAX_OPEN_FDS:4096,nextfd:(function(fd_start,fd_end){fd_start=fd_start||0;fd_end=fd_end||FS.MAX_OPEN_FDS;for(var fd=fd_start;fd<=fd_end;fd++){if(!FS.streams[fd]){return fd}}throw new FS.ErrnoError(ERRNO_CODES.EMFILE)}),getStream:(function(fd){return FS.streams[fd]}),createStream:(function(stream,fd_start,fd_end){if(!FS.FSStream){FS.FSStream=(function(){});FS.FSStream.prototype={};Object.defineProperties(FS.FSStream.prototype,{object:{get:(function(){return this.node}),set:(function(val){this.node=val})},isRead:{get:(function(){return(this.flags&2097155)!==1})},isWrite:{get:(function(){return(this.flags&2097155)!==0})},isAppend:{get:(function(){return this.flags&1024})}})}var newStream=new FS.FSStream;for(var p in stream){newStream[p]=stream[p]}stream=newStream;var fd=FS.nextfd(fd_start,fd_end);stream.fd=fd;FS.streams[fd]=stream;return stream}),closeStream:(function(fd){FS.streams[fd]=null}),chrdev_stream_ops:{open:(function(stream){var device=FS.getDevice(stream.node.rdev);stream.stream_ops=device.stream_ops;if(stream.stream_ops.open){stream.stream_ops.open(stream)}}),llseek:(function(){throw new FS.ErrnoError(ERRNO_CODES.ESPIPE)})},major:(function(dev){return dev>>8}),minor:(function(dev){return dev&255}),makedev:(function(ma,mi){return ma<<8|mi}),registerDevice:(function(dev,ops){FS.devices[dev]={stream_ops:ops}}),getDevice:(function(dev){return FS.devices[dev]}),getMounts:(function(mount){var mounts=[];var check=[mount];while(check.length){var m=check.pop();mounts.push(m);check.push.apply(check,m.mounts)}return mounts}),syncfs:(function(populate,callback){if(typeof populate==="function"){callback=populate;populate=false}FS.syncFSRequests++;if(FS.syncFSRequests>1){console.log("warning: "+FS.syncFSRequests+" FS.syncfs operations in flight at once, probably just doing extra work")}var mounts=FS.getMounts(FS.root.mount);var completed=0;function doCallback(err){assert(FS.syncFSRequests>0);FS.syncFSRequests--;return callback(err)}function done(err){if(err){if(!done.errored){done.errored=true;return doCallback(err)}return}if(++completed>=mounts.length){doCallback(null)}}mounts.forEach((function(mount){if(!mount.type.syncfs){return done(null)}mount.type.syncfs(mount,populate,done)}))}),mount:(function(type,opts,mountpoint){var root=mountpoint==="/";var pseudo=!mountpoint;var node;if(root&&FS.root){throw new FS.ErrnoError(ERRNO_CODES.EBUSY)}else if(!root&&!pseudo){var lookup=FS.lookupPath(mountpoint,{follow_mount:false});mountpoint=lookup.path;node=lookup.node;if(FS.isMountpoint(node)){throw new FS.ErrnoError(ERRNO_CODES.EBUSY)}if(!FS.isDir(node.mode)){throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR)}}var mount={type:type,opts:opts,mountpoint:mountpoint,mounts:[]};var mountRoot=type.mount(mount);mountRoot.mount=mount;mount.root=mountRoot;if(root){FS.root=mountRoot}else if(node){node.mounted=mount;if(node.mount){node.mount.mounts.push(mount)}}return mountRoot}),unmount:(function(mountpoint){var lookup=FS.lookupPath(mountpoint,{follow_mount:false});if(!FS.isMountpoint(lookup.node)){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}var node=lookup.node;var mount=node.mounted;var mounts=FS.getMounts(mount);Object.keys(FS.nameTable).forEach((function(hash){var current=FS.nameTable[hash];while(current){var next=current.name_next;if(mounts.indexOf(current.mount)!==-1){FS.destroyNode(current)}current=next}}));node.mounted=null;var idx=node.mount.mounts.indexOf(mount);assert(idx!==-1);node.mount.mounts.splice(idx,1)}),lookup:(function(parent,name){return parent.node_ops.lookup(parent,name)}),mknod:(function(path,mode,dev){var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;var name=PATH.basename(path);if(!name||name==="."||name===".."){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}var err=FS.mayCreate(parent,name);if(err){throw new FS.ErrnoError(err)}if(!parent.node_ops.mknod){throw new FS.ErrnoError(ERRNO_CODES.EPERM)}return parent.node_ops.mknod(parent,name,mode,dev)}),create:(function(path,mode){mode=mode!==undefined?mode:438;mode&=4095;mode|=32768;return FS.mknod(path,mode,0)}),mkdir:(function(path,mode){mode=mode!==undefined?mode:511;mode&=511|512;mode|=16384;return FS.mknod(path,mode,0)}),mkdev:(function(path,mode,dev){if(typeof dev==="undefined"){dev=mode;mode=438}mode|=8192;return FS.mknod(path,mode,dev)}),symlink:(function(oldpath,newpath){if(!PATH.resolve(oldpath)){throw new FS.ErrnoError(ERRNO_CODES.ENOENT)}var lookup=FS.lookupPath(newpath,{parent:true});var parent=lookup.node;if(!parent){throw new FS.ErrnoError(ERRNO_CODES.ENOENT)}var newname=PATH.basename(newpath);var err=FS.mayCreate(parent,newname);if(err){throw new FS.ErrnoError(err)}if(!parent.node_ops.symlink){throw new FS.ErrnoError(ERRNO_CODES.EPERM)}return parent.node_ops.symlink(parent,newname,oldpath)}),rename:(function(old_path,new_path){var old_dirname=PATH.dirname(old_path);var new_dirname=PATH.dirname(new_path);var old_name=PATH.basename(old_path);var new_name=PATH.basename(new_path);var lookup,old_dir,new_dir;try{lookup=FS.lookupPath(old_path,{parent:true});old_dir=lookup.node;lookup=FS.lookupPath(new_path,{parent:true});new_dir=lookup.node}catch(e){throw new FS.ErrnoError(ERRNO_CODES.EBUSY)}if(!old_dir||!new_dir)throw new FS.ErrnoError(ERRNO_CODES.ENOENT);if(old_dir.mount!==new_dir.mount){throw new FS.ErrnoError(ERRNO_CODES.EXDEV)}var old_node=FS.lookupNode(old_dir,old_name);var relative=PATH.relative(old_path,new_dirname);if(relative.charAt(0)!=="."){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}relative=PATH.relative(new_path,old_dirname);if(relative.charAt(0)!=="."){throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY)}var new_node;try{new_node=FS.lookupNode(new_dir,new_name)}catch(e){}if(old_node===new_node){return}var isdir=FS.isDir(old_node.mode);var err=FS.mayDelete(old_dir,old_name,isdir);if(err){throw new FS.ErrnoError(err)}err=new_node?FS.mayDelete(new_dir,new_name,isdir):FS.mayCreate(new_dir,new_name);if(err){throw new FS.ErrnoError(err)}if(!old_dir.node_ops.rename){throw new FS.ErrnoError(ERRNO_CODES.EPERM)}if(FS.isMountpoint(old_node)||new_node&&FS.isMountpoint(new_node)){throw new FS.ErrnoError(ERRNO_CODES.EBUSY)}if(new_dir!==old_dir){err=FS.nodePermissions(old_dir,"w");if(err){throw new FS.ErrnoError(err)}}try{if(FS.trackingDelegate["willMovePath"]){FS.trackingDelegate["willMovePath"](old_path,new_path)}}catch(e){console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: "+e.message)}FS.hashRemoveNode(old_node);try{old_dir.node_ops.rename(old_node,new_dir,new_name)}catch(e){throw e}finally{FS.hashAddNode(old_node)}try{if(FS.trackingDelegate["onMovePath"])FS.trackingDelegate["onMovePath"](old_path,new_path)}catch(e){console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: "+e.message)}}),rmdir:(function(path){var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;var name=PATH.basename(path);var node=FS.lookupNode(parent,name);var err=FS.mayDelete(parent,name,true);if(err){throw new FS.ErrnoError(err)}if(!parent.node_ops.rmdir){throw new FS.ErrnoError(ERRNO_CODES.EPERM)}if(FS.isMountpoint(node)){throw new FS.ErrnoError(ERRNO_CODES.EBUSY)}try{if(FS.trackingDelegate["willDeletePath"]){FS.trackingDelegate["willDeletePath"](path)}}catch(e){console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: "+e.message)}parent.node_ops.rmdir(parent,name);FS.destroyNode(node);try{if(FS.trackingDelegate["onDeletePath"])FS.trackingDelegate["onDeletePath"](path)}catch(e){console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: "+e.message)}}),readdir:(function(path){var lookup=FS.lookupPath(path,{follow:true});var node=lookup.node;if(!node.node_ops.readdir){throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR)}return node.node_ops.readdir(node)}),unlink:(function(path){var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;var name=PATH.basename(path);var node=FS.lookupNode(parent,name);var err=FS.mayDelete(parent,name,false);if(err){if(err===ERRNO_CODES.EISDIR)err=ERRNO_CODES.EPERM;throw new FS.ErrnoError(err)}if(!parent.node_ops.unlink){throw new FS.ErrnoError(ERRNO_CODES.EPERM)}if(FS.isMountpoint(node)){throw new FS.ErrnoError(ERRNO_CODES.EBUSY)}try{if(FS.trackingDelegate["willDeletePath"]){FS.trackingDelegate["willDeletePath"](path)}}catch(e){console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: "+e.message)}parent.node_ops.unlink(parent,name);FS.destroyNode(node);try{if(FS.trackingDelegate["onDeletePath"])FS.trackingDelegate["onDeletePath"](path)}catch(e){console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: "+e.message)}}),readlink:(function(path){var lookup=FS.lookupPath(path);var link=lookup.node;if(!link){throw new FS.ErrnoError(ERRNO_CODES.ENOENT)}if(!link.node_ops.readlink){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}return PATH.resolve(FS.getPath(link.parent),link.node_ops.readlink(link))}),stat:(function(path,dontFollow){var lookup=FS.lookupPath(path,{follow:!dontFollow});var node=lookup.node;if(!node){throw new FS.ErrnoError(ERRNO_CODES.ENOENT)}if(!node.node_ops.getattr){throw new FS.ErrnoError(ERRNO_CODES.EPERM)}return node.node_ops.getattr(node)}),lstat:(function(path){return FS.stat(path,true)}),chmod:(function(path,mode,dontFollow){var node;if(typeof path==="string"){var lookup=FS.lookupPath(path,{follow:!dontFollow});node=lookup.node}else{node=path}if(!node.node_ops.setattr){throw new FS.ErrnoError(ERRNO_CODES.EPERM)}node.node_ops.setattr(node,{mode:mode&4095|node.mode&~4095,timestamp:Date.now()})}),lchmod:(function(path,mode){FS.chmod(path,mode,true)}),fchmod:(function(fd,mode){var stream=FS.getStream(fd);if(!stream){throw new FS.ErrnoError(ERRNO_CODES.EBADF)}FS.chmod(stream.node,mode)}),chown:(function(path,uid,gid,dontFollow){var node;if(typeof path==="string"){var lookup=FS.lookupPath(path,{follow:!dontFollow});node=lookup.node}else{node=path}if(!node.node_ops.setattr){throw new FS.ErrnoError(ERRNO_CODES.EPERM)}node.node_ops.setattr(node,{timestamp:Date.now()})}),lchown:(function(path,uid,gid){FS.chown(path,uid,gid,true)}),fchown:(function(fd,uid,gid){var stream=FS.getStream(fd);if(!stream){throw new FS.ErrnoError(ERRNO_CODES.EBADF)}FS.chown(stream.node,uid,gid)}),truncate:(function(path,len){if(len<0){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}var node;if(typeof path==="string"){var lookup=FS.lookupPath(path,{follow:true});node=lookup.node}else{node=path}if(!node.node_ops.setattr){throw new FS.ErrnoError(ERRNO_CODES.EPERM)}if(FS.isDir(node.mode)){throw new FS.ErrnoError(ERRNO_CODES.EISDIR)}if(!FS.isFile(node.mode)){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}var err=FS.nodePermissions(node,"w");if(err){throw new FS.ErrnoError(err)}node.node_ops.setattr(node,{size:len,timestamp:Date.now()})}),ftruncate:(function(fd,len){var stream=FS.getStream(fd);if(!stream){throw new FS.ErrnoError(ERRNO_CODES.EBADF)}if((stream.flags&2097155)===0){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}FS.truncate(stream.node,len)}),utime:(function(path,atime,mtime){var lookup=FS.lookupPath(path,{follow:true});var node=lookup.node;node.node_ops.setattr(node,{timestamp:Math.max(atime,mtime)})}),open:(function(path,flags,mode,fd_start,fd_end){if(path===""){throw new FS.ErrnoError(ERRNO_CODES.ENOENT)}flags=typeof flags==="string"?FS.modeStringToFlags(flags):flags;mode=typeof mode==="undefined"?438:mode;if(flags&64){mode=mode&4095|32768}else{mode=0}var node;if(typeof path==="object"){node=path}else{path=PATH.normalize(path);try{var lookup=FS.lookupPath(path,{follow:!(flags&131072)});node=lookup.node}catch(e){}}var created=false;if(flags&64){if(node){if(flags&128){throw new FS.ErrnoError(ERRNO_CODES.EEXIST)}}else{node=FS.mknod(path,mode,0);created=true}}if(!node){throw new FS.ErrnoError(ERRNO_CODES.ENOENT)}if(FS.isChrdev(node.mode)){flags&=~512}if(flags&65536&&!FS.isDir(node.mode)){throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR)}if(!created){var err=FS.mayOpen(node,flags);if(err){throw new FS.ErrnoError(err)}}if(flags&512){FS.truncate(node,0)}flags&=~(128|512);var stream=FS.createStream({node:node,path:FS.getPath(node),flags:flags,seekable:true,position:0,stream_ops:node.stream_ops,ungotten:[],error:false},fd_start,fd_end);if(stream.stream_ops.open){stream.stream_ops.open(stream)}if(Module["logReadFiles"]&&!(flags&1)){if(!FS.readFiles)FS.readFiles={};if(!(path in FS.readFiles)){FS.readFiles[path]=1;Module["printErr"]("read file: "+path)}}try{if(FS.trackingDelegate["onOpenFile"]){var trackingFlags=0;if((flags&2097155)!==1){trackingFlags|=FS.tracking.openFlags.READ}if((flags&2097155)!==0){trackingFlags|=FS.tracking.openFlags.WRITE}FS.trackingDelegate["onOpenFile"](path,trackingFlags)}}catch(e){console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: "+e.message)}return stream}),close:(function(stream){if(stream.getdents)stream.getdents=null;try{if(stream.stream_ops.close){stream.stream_ops.close(stream)}}catch(e){throw e}finally{FS.closeStream(stream.fd)}}),llseek:(function(stream,offset,whence){if(!stream.seekable||!stream.stream_ops.llseek){throw new FS.ErrnoError(ERRNO_CODES.ESPIPE)}stream.position=stream.stream_ops.llseek(stream,offset,whence);stream.ungotten=[];return stream.position}),read:(function(stream,buffer,offset,length,position){if(length<0||position<0){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}if((stream.flags&2097155)===1){throw new FS.ErrnoError(ERRNO_CODES.EBADF)}if(FS.isDir(stream.node.mode)){throw new FS.ErrnoError(ERRNO_CODES.EISDIR)}if(!stream.stream_ops.read){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}var seeking=true;if(typeof position==="undefined"){position=stream.position;seeking=false}else if(!stream.seekable){throw new FS.ErrnoError(ERRNO_CODES.ESPIPE)}var bytesRead=stream.stream_ops.read(stream,buffer,offset,length,position);if(!seeking)stream.position+=bytesRead;return bytesRead}),write:(function(stream,buffer,offset,length,position,canOwn){if(length<0||position<0){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}if((stream.flags&2097155)===0){throw new FS.ErrnoError(ERRNO_CODES.EBADF)}if(FS.isDir(stream.node.mode)){throw new FS.ErrnoError(ERRNO_CODES.EISDIR)}if(!stream.stream_ops.write){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}if(stream.flags&1024){FS.llseek(stream,0,2)}var seeking=true;if(typeof position==="undefined"){position=stream.position;seeking=false}else if(!stream.seekable){throw new FS.ErrnoError(ERRNO_CODES.ESPIPE)}var bytesWritten=stream.stream_ops.write(stream,buffer,offset,length,position,canOwn);if(!seeking)stream.position+=bytesWritten;try{if(stream.path&&FS.trackingDelegate["onWriteToFile"])FS.trackingDelegate["onWriteToFile"](stream.path)}catch(e){console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: "+e.message)}return bytesWritten}),allocate:(function(stream,offset,length){if(offset<0||length<=0){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}if((stream.flags&2097155)===0){throw new FS.ErrnoError(ERRNO_CODES.EBADF)}if(!FS.isFile(stream.node.mode)&&!FS.isDir(node.mode)){throw new FS.ErrnoError(ERRNO_CODES.ENODEV)}if(!stream.stream_ops.allocate){throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP)}stream.stream_ops.allocate(stream,offset,length)}),mmap:(function(stream,buffer,offset,length,position,prot,flags){if((stream.flags&2097155)===1){throw new FS.ErrnoError(ERRNO_CODES.EACCES)}if(!stream.stream_ops.mmap){throw new FS.ErrnoError(ERRNO_CODES.ENODEV)}return stream.stream_ops.mmap(stream,buffer,offset,length,position,prot,flags)}),msync:(function(stream,buffer,offset,length,mmapFlags){if(!stream||!stream.stream_ops.msync){return 0}return stream.stream_ops.msync(stream,buffer,offset,length,mmapFlags)}),munmap:(function(stream){return 0}),ioctl:(function(stream,cmd,arg){if(!stream.stream_ops.ioctl){throw new FS.ErrnoError(ERRNO_CODES.ENOTTY)}return stream.stream_ops.ioctl(stream,cmd,arg)}),readFile:(function(path,opts){opts=opts||{};opts.flags=opts.flags||"r";opts.encoding=opts.encoding||"binary";if(opts.encoding!=="utf8"&&opts.encoding!=="binary"){throw new Error('Invalid encoding type "'+opts.encoding+'"')}var ret;var stream=FS.open(path,opts.flags);var stat=FS.stat(path);var length=stat.size;var buf=new Uint8Array(length);FS.read(stream,buf,0,length,0);if(opts.encoding==="utf8"){ret=UTF8ArrayToString(buf,0)}else if(opts.encoding==="binary"){ret=buf}FS.close(stream);return ret}),writeFile:(function(path,data,opts){opts=opts||{};opts.flags=opts.flags||"w";opts.encoding=opts.encoding||"utf8";if(opts.encoding!=="utf8"&&opts.encoding!=="binary"){throw new Error('Invalid encoding type "'+opts.encoding+'"')}var stream=FS.open(path,opts.flags,opts.mode);if(opts.encoding==="utf8"){var buf=new Uint8Array(lengthBytesUTF8(data)+1);var actualNumBytes=stringToUTF8Array(data,buf,0,buf.length);FS.write(stream,buf,0,actualNumBytes,0,opts.canOwn)}else if(opts.encoding==="binary"){FS.write(stream,data,0,data.length,0,opts.canOwn)}FS.close(stream)}),cwd:(function(){return FS.currentPath}),chdir:(function(path){var lookup=FS.lookupPath(path,{follow:true});if(!FS.isDir(lookup.node.mode)){throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR)}var err=FS.nodePermissions(lookup.node,"x");if(err){throw new FS.ErrnoError(err)}FS.currentPath=lookup.path}),createDefaultDirectories:(function(){FS.mkdir("/tmp");FS.mkdir("/home");FS.mkdir("/home/web_user")}),createDefaultDevices:(function(){FS.mkdir("/dev");FS.registerDevice(FS.makedev(1,3),{read:(function(){return 0}),write:(function(stream,buffer,offset,length,pos){return length})});FS.mkdev("/dev/null",FS.makedev(1,3));TTY.register(FS.makedev(5,0),TTY.default_tty_ops);TTY.register(FS.makedev(6,0),TTY.default_tty1_ops);FS.mkdev("/dev/tty",FS.makedev(5,0));FS.mkdev("/dev/tty1",FS.makedev(6,0));var random_device;if(typeof crypto!=="undefined"){var randomBuffer=new Uint8Array(1);random_device=(function(){crypto.getRandomValues(randomBuffer);return randomBuffer[0]})}else if(ENVIRONMENT_IS_NODE){random_device=(function(){return require("crypto").randomBytes(1)[0]})}else{random_device=(function(){return Math.random()*256|0})}FS.createDevice("/dev","random",random_device);FS.createDevice("/dev","urandom",random_device);FS.mkdir("/dev/shm");FS.mkdir("/dev/shm/tmp")}),createSpecialDirectories:(function(){FS.mkdir("/proc");FS.mkdir("/proc/self");FS.mkdir("/proc/self/fd");FS.mount({mount:(function(){var node=FS.createNode("/proc/self","fd",16384|511,73);node.node_ops={lookup:(function(parent,name){var fd=+name;var stream=FS.getStream(fd);if(!stream)throw new FS.ErrnoError(ERRNO_CODES.EBADF);var ret={parent:null,mount:{mountpoint:"fake"},node_ops:{readlink:(function(){return stream.path})}};ret.parent=ret;return ret})};return node})},{},"/proc/self/fd")}),createStandardStreams:(function(){if(Module["stdin"]){FS.createDevice("/dev","stdin",Module["stdin"])}else{FS.symlink("/dev/tty","/dev/stdin")}if(Module["stdout"]){FS.createDevice("/dev","stdout",null,Module["stdout"])}else{FS.symlink("/dev/tty","/dev/stdout")}if(Module["stderr"]){FS.createDevice("/dev","stderr",null,Module["stderr"])}else{FS.symlink("/dev/tty1","/dev/stderr")}var stdin=FS.open("/dev/stdin","r");assert(stdin.fd===0,"invalid handle for stdin ("+stdin.fd+")");var stdout=FS.open("/dev/stdout","w");assert(stdout.fd===1,"invalid handle for stdout ("+stdout.fd+")");var stderr=FS.open("/dev/stderr","w");assert(stderr.fd===2,"invalid handle for stderr ("+stderr.fd+")")}),ensureErrnoError:(function(){if(FS.ErrnoError)return;FS.ErrnoError=function ErrnoError(errno,node){this.node=node;this.setErrno=(function(errno){this.errno=errno;for(var key in ERRNO_CODES){if(ERRNO_CODES[key]===errno){this.code=key;break}}});this.setErrno(errno);this.message=ERRNO_MESSAGES[errno]};FS.ErrnoError.prototype=new Error;FS.ErrnoError.prototype.constructor=FS.ErrnoError;[ERRNO_CODES.ENOENT].forEach((function(code){FS.genericErrors[code]=new FS.ErrnoError(code);FS.genericErrors[code].stack="<generic error, no stack>"}))}),staticInit:(function(){FS.ensureErrnoError();FS.nameTable=new Array(4096);FS.mount(MEMFS,{},"/");FS.createDefaultDirectories();FS.createDefaultDevices();FS.createSpecialDirectories();FS.filesystems={"MEMFS":MEMFS,"IDBFS":IDBFS,"NODEFS":NODEFS,"WORKERFS":WORKERFS}}),init:(function(input,output,error){assert(!FS.init.initialized,"FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)");FS.init.initialized=true;FS.ensureErrnoError();Module["stdin"]=input||Module["stdin"];Module["stdout"]=output||Module["stdout"];Module["stderr"]=error||Module["stderr"];FS.createStandardStreams()}),quit:(function(){FS.init.initialized=false;var fflush=Module["_fflush"];if(fflush)fflush(0);for(var i=0;i<FS.streams.length;i++){var stream=FS.streams[i];if(!stream){continue}FS.close(stream)}}),getMode:(function(canRead,canWrite){var mode=0;if(canRead)mode|=292|73;if(canWrite)mode|=146;return mode}),joinPath:(function(parts,forceRelative){var path=PATH.join.apply(null,parts);if(forceRelative&&path[0]=="/")path=path.substr(1);return path}),absolutePath:(function(relative,base){return PATH.resolve(base,relative)}),standardizePath:(function(path){return PATH.normalize(path)}),findObject:(function(path,dontResolveLastLink){var ret=FS.analyzePath(path,dontResolveLastLink);if(ret.exists){return ret.object}else{___setErrNo(ret.error);return null}}),analyzePath:(function(path,dontResolveLastLink){try{var lookup=FS.lookupPath(path,{follow:!dontResolveLastLink});path=lookup.path}catch(e){}var ret={isRoot:false,exists:false,error:0,name:null,path:null,object:null,parentExists:false,parentPath:null,parentObject:null};try{var lookup=FS.lookupPath(path,{parent:true});ret.parentExists=true;ret.parentPath=lookup.path;ret.parentObject=lookup.node;ret.name=PATH.basename(path);lookup=FS.lookupPath(path,{follow:!dontResolveLastLink});ret.exists=true;ret.path=lookup.path;ret.object=lookup.node;ret.name=lookup.node.name;ret.isRoot=lookup.path==="/"}catch(e){ret.error=e.errno}return ret}),createFolder:(function(parent,name,canRead,canWrite){var path=PATH.join2(typeof parent==="string"?parent:FS.getPath(parent),name);var mode=FS.getMode(canRead,canWrite);return FS.mkdir(path,mode)}),createPath:(function(parent,path,canRead,canWrite){parent=typeof parent==="string"?parent:FS.getPath(parent);var parts=path.split("/").reverse();while(parts.length){var part=parts.pop();if(!part)continue;var current=PATH.join2(parent,part);try{FS.mkdir(current)}catch(e){}parent=current}return current}),createFile:(function(parent,name,properties,canRead,canWrite){var path=PATH.join2(typeof parent==="string"?parent:FS.getPath(parent),name);var mode=FS.getMode(canRead,canWrite);return FS.create(path,mode)}),createDataFile:(function(parent,name,data,canRead,canWrite,canOwn){var path=name?PATH.join2(typeof parent==="string"?parent:FS.getPath(parent),name):parent;var mode=FS.getMode(canRead,canWrite);var node=FS.create(path,mode);if(data){if(typeof data==="string"){var arr=new Array(data.length);for(var i=0,len=data.length;i<len;++i)arr[i]=data.charCodeAt(i);data=arr}FS.chmod(node,mode|146);var stream=FS.open(node,"w");FS.write(stream,data,0,data.length,0,canOwn);FS.close(stream);FS.chmod(node,mode)}return node}),createDevice:(function(parent,name,input,output){var path=PATH.join2(typeof parent==="string"?parent:FS.getPath(parent),name);var mode=FS.getMode(!!input,!!output);if(!FS.createDevice.major)FS.createDevice.major=64;var dev=FS.makedev(FS.createDevice.major++,0);FS.registerDevice(dev,{open:(function(stream){stream.seekable=false}),close:(function(stream){if(output&&output.buffer&&output.buffer.length){output(10)}}),read:(function(stream,buffer,offset,length,pos){var bytesRead=0;for(var i=0;i<length;i++){var result;try{result=input()}catch(e){throw new FS.ErrnoError(ERRNO_CODES.EIO)}if(result===undefined&&bytesRead===0){throw new FS.ErrnoError(ERRNO_CODES.EAGAIN)}if(result===null||result===undefined)break;bytesRead++;buffer[offset+i]=result}if(bytesRead){stream.node.timestamp=Date.now()}return bytesRead}),write:(function(stream,buffer,offset,length,pos){for(var i=0;i<length;i++){try{output(buffer[offset+i])}catch(e){throw new FS.ErrnoError(ERRNO_CODES.EIO)}}if(length){stream.node.timestamp=Date.now()}return i})});return FS.mkdev(path,mode,dev)}),createLink:(function(parent,name,target,canRead,canWrite){var path=PATH.join2(typeof parent==="string"?parent:FS.getPath(parent),name);return FS.symlink(target,path)}),forceLoadFile:(function(obj){if(obj.isDevice||obj.isFolder||obj.link||obj.contents)return true;var success=true;if(typeof XMLHttpRequest!=="undefined"){throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.")}else if(Module["read"]){try{obj.contents=intArrayFromString(Module["read"](obj.url),true);obj.usedBytes=obj.contents.length}catch(e){success=false}}else{throw new Error("Cannot load without read() or XMLHttpRequest.")}if(!success)___setErrNo(ERRNO_CODES.EIO);return success}),createLazyFile:(function(parent,name,url,canRead,canWrite){function LazyUint8Array(){this.lengthKnown=false;this.chunks=[]}LazyUint8Array.prototype.get=function LazyUint8Array_get(idx){if(idx>this.length-1||idx<0){return undefined}var chunkOffset=idx%this.chunkSize;var chunkNum=idx/this.chunkSize|0;return this.getter(chunkNum)[chunkOffset]};LazyUint8Array.prototype.setDataGetter=function LazyUint8Array_setDataGetter(getter){this.getter=getter};LazyUint8Array.prototype.cacheLength=function LazyUint8Array_cacheLength(){var xhr=new XMLHttpRequest;xhr.open("HEAD",url,false);xhr.send(null);if(!(xhr.status>=200&&xhr.status<300||xhr.status===304))throw new Error("Couldn't load "+url+". Status: "+xhr.status);var datalength=Number(xhr.getResponseHeader("Content-length"));var header;var hasByteServing=(header=xhr.getResponseHeader("Accept-Ranges"))&&header==="bytes";var usesGzip=(header=xhr.getResponseHeader("Content-Encoding"))&&header==="gzip";var chunkSize=1024*1024;if(!hasByteServing)chunkSize=datalength;var doXHR=(function(from,to){if(from>to)throw new Error("invalid range ("+from+", "+to+") or no bytes requested!");if(to>datalength-1)throw new Error("only "+datalength+" bytes available! programmer error!");var xhr=new XMLHttpRequest;xhr.open("GET",url,false);if(datalength!==chunkSize)xhr.setRequestHeader("Range","bytes="+from+"-"+to);if(typeof Uint8Array!="undefined")xhr.responseType="arraybuffer";if(xhr.overrideMimeType){xhr.overrideMimeType("text/plain; charset=x-user-defined")}xhr.send(null);if(!(xhr.status>=200&&xhr.status<300||xhr.status===304))throw new Error("Couldn't load "+url+". Status: "+xhr.status);if(xhr.response!==undefined){return new Uint8Array(xhr.response||[])}else{return intArrayFromString(xhr.responseText||"",true)}});var lazyArray=this;lazyArray.setDataGetter((function(chunkNum){var start=chunkNum*chunkSize;var end=(chunkNum+1)*chunkSize-1;end=Math.min(end,datalength-1);if(typeof lazyArray.chunks[chunkNum]==="undefined"){lazyArray.chunks[chunkNum]=doXHR(start,end)}if(typeof lazyArray.chunks[chunkNum]==="undefined")throw new Error("doXHR failed!");return lazyArray.chunks[chunkNum]}));if(usesGzip||!datalength){chunkSize=datalength=1;datalength=this.getter(0).length;chunkSize=datalength;console.log("LazyFiles on gzip forces download of the whole file when length is accessed")}this._length=datalength;this._chunkSize=chunkSize;this.lengthKnown=true};if(typeof XMLHttpRequest!=="undefined"){if(!ENVIRONMENT_IS_WORKER)throw"Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";var lazyArray=new LazyUint8Array;Object.defineProperties(lazyArray,{length:{get:(function(){if(!this.lengthKnown){this.cacheLength()}return this._length})},chunkSize:{get:(function(){if(!this.lengthKnown){this.cacheLength()}return this._chunkSize})}});var properties={isDevice:false,contents:lazyArray}}else{var properties={isDevice:false,url:url}}var node=FS.createFile(parent,name,properties,canRead,canWrite);if(properties.contents){node.contents=properties.contents}else if(properties.url){node.contents=null;node.url=properties.url}Object.defineProperties(node,{usedBytes:{get:(function(){return this.contents.length})}});var stream_ops={};var keys=Object.keys(node.stream_ops);keys.forEach((function(key){var fn=node.stream_ops[key];stream_ops[key]=function forceLoadLazyFile(){if(!FS.forceLoadFile(node)){throw new FS.ErrnoError(ERRNO_CODES.EIO)}return fn.apply(null,arguments)}}));stream_ops.read=function stream_ops_read(stream,buffer,offset,length,position){if(!FS.forceLoadFile(node)){throw new FS.ErrnoError(ERRNO_CODES.EIO)}var contents=stream.node.contents;if(position>=contents.length)return 0;var size=Math.min(contents.length-position,length);assert(size>=0);if(contents.slice){for(var i=0;i<size;i++){buffer[offset+i]=contents[position+i]}}else{for(var i=0;i<size;i++){buffer[offset+i]=contents.get(position+i)}}return size};node.stream_ops=stream_ops;return node}),createPreloadedFile:(function(parent,name,url,canRead,canWrite,onload,onerror,dontCreateFile,canOwn,preFinish){Browser.init();var fullname=name?PATH.resolve(PATH.join2(parent,name)):parent;var dep=getUniqueRunDependency("cp "+fullname);function processData(byteArray){function finish(byteArray){if(preFinish)preFinish();if(!dontCreateFile){FS.createDataFile(parent,name,byteArray,canRead,canWrite,canOwn)}if(onload)onload();removeRunDependency(dep)}var handled=false;Module["preloadPlugins"].forEach((function(plugin){if(handled)return;if(plugin["canHandle"](fullname)){plugin["handle"](byteArray,fullname,finish,(function(){if(onerror)onerror();removeRunDependency(dep)}));handled=true}}));if(!handled)finish(byteArray)}addRunDependency(dep);if(typeof url=="string"){Browser.asyncLoad(url,(function(byteArray){processData(byteArray)}),onerror)}else{processData(url)}}),indexedDB:(function(){return window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB}),DB_NAME:(function(){return"EM_FS_"+window.location.pathname}),DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:(function(paths,onload,onerror){onload=onload||(function(){});onerror=onerror||(function(){});var indexedDB=FS.indexedDB();try{var openRequest=indexedDB.open(FS.DB_NAME(),FS.DB_VERSION)}catch(e){return onerror(e)}openRequest.onupgradeneeded=function openRequest_onupgradeneeded(){console.log("creating db");var db=openRequest.result;db.createObjectStore(FS.DB_STORE_NAME)};openRequest.onsuccess=function openRequest_onsuccess(){var db=openRequest.result;var transaction=db.transaction([FS.DB_STORE_NAME],"readwrite");var files=transaction.objectStore(FS.DB_STORE_NAME);var ok=0,fail=0,total=paths.length;function finish(){if(fail==0)onload();else onerror()}paths.forEach((function(path){var putRequest=files.put(FS.analyzePath(path).object.contents,path);putRequest.onsuccess=function putRequest_onsuccess(){ok++;if(ok+fail==total)finish()};putRequest.onerror=function putRequest_onerror(){fail++;if(ok+fail==total)finish()}}));transaction.onerror=onerror};openRequest.onerror=onerror}),loadFilesFromDB:(function(paths,onload,onerror){onload=onload||(function(){});onerror=onerror||(function(){});var indexedDB=FS.indexedDB();try{var openRequest=indexedDB.open(FS.DB_NAME(),FS.DB_VERSION)}catch(e){return onerror(e)}openRequest.onupgradeneeded=onerror;openRequest.onsuccess=function openRequest_onsuccess(){var db=openRequest.result;try{var transaction=db.transaction([FS.DB_STORE_NAME],"readonly")}catch(e){onerror(e);return}var files=transaction.objectStore(FS.DB_STORE_NAME);var ok=0,fail=0,total=paths.length;function finish(){if(fail==0)onload();else onerror()}paths.forEach((function(path){var getRequest=files.get(path);getRequest.onsuccess=function getRequest_onsuccess(){if(FS.analyzePath(path).exists){FS.unlink(path)}FS.createDataFile(PATH.dirname(path),PATH.basename(path),getRequest.result,true,true,true);ok++;if(ok+fail==total)finish()};getRequest.onerror=function getRequest_onerror(){fail++;if(ok+fail==total)finish()}}));transaction.onerror=onerror};openRequest.onerror=onerror})};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:(function(dirfd,path){if(path[0]!=="/"){var dir;if(dirfd===-100){dir=FS.cwd()}else{var dirstream=FS.getStream(dirfd);if(!dirstream)throw new FS.ErrnoError(ERRNO_CODES.EBADF);dir=dirstream.path}path=PATH.join2(dir,path)}return path}),doStat:(function(func,path,buf){try{var stat=func(path)}catch(e){if(e&&e.node&&PATH.normalize(path)!==PATH.normalize(FS.getPath(e.node))){return-ERRNO_CODES.ENOTDIR}throw e}HEAP32[buf>>2]=stat.dev;HEAP32[buf+4>>2]=0;HEAP32[buf+8>>2]=stat.ino;HEAP32[buf+12>>2]=stat.mode;HEAP32[buf+16>>2]=stat.nlink;HEAP32[buf+20>>2]=stat.uid;HEAP32[buf+24>>2]=stat.gid;HEAP32[buf+28>>2]=stat.rdev;HEAP32[buf+32>>2]=0;HEAP32[buf+36>>2]=stat.size;HEAP32[buf+40>>2]=4096;HEAP32[buf+44>>2]=stat.blocks;HEAP32[buf+48>>2]=stat.atime.getTime()/1e3|0;HEAP32[buf+52>>2]=0;HEAP32[buf+56>>2]=stat.mtime.getTime()/1e3|0;HEAP32[buf+60>>2]=0;HEAP32[buf+64>>2]=stat.ctime.getTime()/1e3|0;HEAP32[buf+68>>2]=0;HEAP32[buf+72>>2]=stat.ino;return 0}),doMsync:(function(addr,stream,len,flags){var buffer=new Uint8Array(HEAPU8.subarray(addr,addr+len));FS.msync(stream,buffer,0,len,flags)}),doMkdir:(function(path,mode){path=PATH.normalize(path);if(path[path.length-1]==="/")path=path.substr(0,path.length-1);FS.mkdir(path,mode,0);return 0}),doMknod:(function(path,mode,dev){switch(mode&61440){case 32768:case 8192:case 24576:case 4096:case 49152:break;default:return-ERRNO_CODES.EINVAL}FS.mknod(path,mode,dev);return 0}),doReadlink:(function(path,buf,bufsize){if(bufsize<=0)return-ERRNO_CODES.EINVAL;var ret=FS.readlink(path);ret=ret.slice(0,Math.max(0,bufsize));writeStringToMemory(ret,buf,true);return ret.length}),doAccess:(function(path,amode){if(amode&~7){return-ERRNO_CODES.EINVAL}var node;var lookup=FS.lookupPath(path,{follow:true});node=lookup.node;var perms="";if(amode&4)perms+="r";if(amode&2)perms+="w";if(amode&1)perms+="x";if(perms&&FS.nodePermissions(node,perms)){return-ERRNO_CODES.EACCES}return 0}),doDup:(function(path,flags,suggestFD){var suggest=FS.getStream(suggestFD);if(suggest)FS.close(suggest);return FS.open(path,flags,0,suggestFD,suggestFD).fd}),doReadv:(function(stream,iov,iovcnt,offset){var ret=0;for(var i=0;i<iovcnt;i++){var ptr=HEAP32[iov+i*8>>2];var len=HEAP32[iov+(i*8+4)>>2];var curr=FS.read(stream,HEAP8,ptr,len,offset);if(curr<0)return-1;ret+=curr;if(curr<len)break}return ret}),doWritev:(function(stream,iov,iovcnt,offset){var ret=0;for(var i=0;i<iovcnt;i++){var ptr=HEAP32[iov+i*8>>2];var len=HEAP32[iov+(i*8+4)>>2];var curr=FS.write(stream,HEAP8,ptr,len,offset);if(curr<0)return-1;ret+=curr}return ret}),varargs:0,get:(function(varargs){SYSCALLS.varargs+=4;var ret=HEAP32[SYSCALLS.varargs-4>>2];return ret}),getStr:(function(){var ret=Pointer_stringify(SYSCALLS.get());return ret}),getStreamFromFD:(function(){var stream=FS.getStream(SYSCALLS.get());if(!stream)throw new FS.ErrnoError(ERRNO_CODES.EBADF);return stream}),getSocketFromFD:(function(){var socket=SOCKFS.getSocket(SYSCALLS.get());if(!socket)throw new FS.ErrnoError(ERRNO_CODES.EBADF);return socket}),getSocketAddress:(function(allowNull){var addrp=SYSCALLS.get(),addrlen=SYSCALLS.get();if(allowNull&&addrp===0)return null;var info=__read_sockaddr(addrp,addrlen);if(info.errno)throw new FS.ErrnoError(info.errno);info.addr=DNS.lookup_addr(info.addr)||info.addr;return info}),get64:(function(){var low=SYSCALLS.get(),high=SYSCALLS.get();if(low>=0)assert(high===0);else assert(high===-1);return low}),getZero:(function(){assert(SYSCALLS.get()===0)})};function ___syscall63(which,varargs){SYSCALLS.varargs=varargs;try{var old=SYSCALLS.getStreamFromFD(),suggestFD=SYSCALLS.get();if(old.fd===suggestFD)return suggestFD;return SYSCALLS.doDup(old.path,old.flags,suggestFD)}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["_memset"]=_memset;Module["_bitshift64Shl"]=_bitshift64Shl;function _abort(){Module["abort"]()}function ___lock(){}function ___unlock(){}var _llvm_fabs_f64=Math_abs;Module["_i64Add"]=_i64Add;function _clock(){if(_clock.start===undefined)_clock.start=Date.now();return(Date.now()-_clock.start)*(1e6/1e3)|0}function _system(command){___setErrNo(ERRNO_CODES.EAGAIN);return-1}function __isLeapYear(year){return year%4===0&&(year%100!==0||year%400===0)}function __arraySum(array,index){var sum=0;for(var i=0;i<=index;sum+=array[i++]);return sum}var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date,days){var newDate=new Date(date.getTime());while(days>0){var leap=__isLeapYear(newDate.getFullYear());var currentMonth=newDate.getMonth();var daysInCurrentMonth=(leap?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR)[currentMonth];if(days>daysInCurrentMonth-newDate.getDate()){days-=daysInCurrentMonth-newDate.getDate()+1;newDate.setDate(1);if(currentMonth<11){newDate.setMonth(currentMonth+1)}else{newDate.setMonth(0);newDate.setFullYear(newDate.getFullYear()+1)}}else{newDate.setDate(newDate.getDate()+days);return newDate}}return newDate}function _strftime(s,maxsize,format,tm){var tm_zone=HEAP32[tm+40>>2];var date={tm_sec:HEAP32[tm>>2],tm_min:HEAP32[tm+4>>2],tm_hour:HEAP32[tm+8>>2],tm_mday:HEAP32[tm+12>>2],tm_mon:HEAP32[tm+16>>2],tm_year:HEAP32[tm+20>>2],tm_wday:HEAP32[tm+24>>2],tm_yday:HEAP32[tm+28>>2],tm_isdst:HEAP32[tm+32>>2],tm_gmtoff:HEAP32[tm+36>>2],tm_zone:tm_zone?Pointer_stringify(tm_zone):""};var pattern=Pointer_stringify(format);var EXPANSION_RULES_1={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S"};for(var rule in EXPANSION_RULES_1){pattern=pattern.replace(new RegExp(rule,"g"),EXPANSION_RULES_1[rule])}var WEEKDAYS=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];var MONTHS=["January","February","March","April","May","June","July","August","September","October","November","December"];function leadingSomething(value,digits,character){var str=typeof value==="number"?value.toString():value||"";while(str.length<digits){str=character[0]+str}return str}function leadingNulls(value,digits){return leadingSomething(value,digits,"0")}function compareByDay(date1,date2){function sgn(value){return value<0?-1:value>0?1:0}var compare;if((compare=sgn(date1.getFullYear()-date2.getFullYear()))===0){if((compare=sgn(date1.getMonth()-date2.getMonth()))===0){compare=sgn(date1.getDate()-date2.getDate())}}return compare}function getFirstWeekStartDate(janFourth){switch(janFourth.getDay()){case 0:return new Date(janFourth.getFullYear()-1,11,29);case 1:return janFourth;case 2:return new Date(janFourth.getFullYear(),0,3);case 3:return new Date(janFourth.getFullYear(),0,2);case 4:return new Date(janFourth.getFullYear(),0,1);case 5:return new Date(janFourth.getFullYear()-1,11,31);case 6:return new Date(janFourth.getFullYear()-1,11,30)}}function getWeekBasedYear(date){var thisDate=__addDays(new Date(date.tm_year+1900,0,1),date.tm_yday);var janFourthThisYear=new Date(thisDate.getFullYear(),0,4);var janFourthNextYear=new Date(thisDate.getFullYear()+1,0,4);var firstWeekStartThisYear=getFirstWeekStartDate(janFourthThisYear);var firstWeekStartNextYear=getFirstWeekStartDate(janFourthNextYear);if(compareByDay(firstWeekStartThisYear,thisDate)<=0){if(compareByDay(firstWeekStartNextYear,thisDate)<=0){return thisDate.getFullYear()+1}else{return thisDate.getFullYear()}}else{return thisDate.getFullYear()-1}}var EXPANSION_RULES_2={"%a":(function(date){return WEEKDAYS[date.tm_wday].substring(0,3)}),"%A":(function(date){return WEEKDAYS[date.tm_wday]}),"%b":(function(date){return MONTHS[date.tm_mon].substring(0,3)}),"%B":(function(date){return MONTHS[date.tm_mon]}),"%C":(function(date){var year=date.tm_year+1900;return leadingNulls(year/100|0,2)}),"%d":(function(date){return leadingNulls(date.tm_mday,2)}),"%e":(function(date){return leadingSomething(date.tm_mday,2," ")}),"%g":(function(date){return getWeekBasedYear(date).toString().substring(2)}),"%G":(function(date){return getWeekBasedYear(date)}),"%H":(function(date){return leadingNulls(date.tm_hour,2)}),"%I":(function(date){var twelveHour=date.tm_hour;if(twelveHour==0)twelveHour=12;else if(twelveHour>12)twelveHour-=12;return leadingNulls(twelveHour,2)}),"%j":(function(date){return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900)?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR,date.tm_mon-1),3)}),"%m":(function(date){return leadingNulls(date.tm_mon+1,2)}),"%M":(function(date){return leadingNulls(date.tm_min,2)}),"%n":(function(){return"\n"}),"%p":(function(date){if(date.tm_hour>=0&&date.tm_hour<12){return"AM"}else{return"PM"}}),"%S":(function(date){return leadingNulls(date.tm_sec,2)}),"%t":(function(){return"\t"}),"%u":(function(date){var day=new Date(date.tm_year+1900,date.tm_mon+1,date.tm_mday,0,0,0,0);return day.getDay()||7}),"%U":(function(date){var janFirst=new Date(date.tm_year+1900,0,1);var firstSunday=janFirst.getDay()===0?janFirst:__addDays(janFirst,7-janFirst.getDay());var endDate=new Date(date.tm_year+1900,date.tm_mon,date.tm_mday);if(compareByDay(firstSunday,endDate)<0){var februaryFirstUntilEndMonth=__arraySum(__isLeapYear(endDate.getFullYear())?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR,endDate.getMonth()-1)-31;var firstSundayUntilEndJanuary=31-firstSunday.getDate();var days=firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();return leadingNulls(Math.ceil(days/7),2)}return compareByDay(firstSunday,janFirst)===0?"01":"00"}),"%V":(function(date){var janFourthThisYear=new Date(date.tm_year+1900,0,4);var janFourthNextYear=new Date(date.tm_year+1901,0,4);var firstWeekStartThisYear=getFirstWeekStartDate(janFourthThisYear);var firstWeekStartNextYear=getFirstWeekStartDate(janFourthNextYear);var endDate=__addDays(new Date(date.tm_year+1900,0,1),date.tm_yday);if(compareByDay(endDate,firstWeekStartThisYear)<0){return"53"}if(compareByDay(firstWeekStartNextYear,endDate)<=0){return"01"}var daysDifference;if(firstWeekStartThisYear.getFullYear()<date.tm_year+1900){daysDifference=date.tm_yday+32-firstWeekStartThisYear.getDate()}else{daysDifference=date.tm_yday+1-firstWeekStartThisYear.getDate()}return leadingNulls(Math.ceil(daysDifference/7),2)}),"%w":(function(date){var day=new Date(date.tm_year+1900,date.tm_mon+1,date.tm_mday,0,0,0,0);return day.getDay()}),"%W":(function(date){var janFirst=new Date(date.tm_year,0,1);var firstMonday=janFirst.getDay()===1?janFirst:__addDays(janFirst,janFirst.getDay()===0?1:7-janFirst.getDay()+1);var endDate=new Date(date.tm_year+1900,date.tm_mon,date.tm_mday);if(compareByDay(firstMonday,endDate)<0){var februaryFirstUntilEndMonth=__arraySum(__isLeapYear(endDate.getFullYear())?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR,endDate.getMonth()-1)-31;var firstMondayUntilEndJanuary=31-firstMonday.getDate();var days=firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();return leadingNulls(Math.ceil(days/7),2)}return compareByDay(firstMonday,janFirst)===0?"01":"00"}),"%y":(function(date){return(date.tm_year+1900).toString().substring(2)}),"%Y":(function(date){return date.tm_year+1900}),"%z":(function(date){var off=date.tm_gmtoff;var ahead=off>=0;off=Math.abs(off)/60;off=off/60*100+off%60;return(ahead?"+":"-")+String("0000"+off).slice(-4)}),"%Z":(function(date){return date.tm_zone}),"%%":(function(){return"%"})};for(var rule in EXPANSION_RULES_2){if(pattern.indexOf(rule)>=0){pattern=pattern.replace(new RegExp(rule,"g"),EXPANSION_RULES_2[rule](date))}}var bytes=intArrayFromString(pattern,false);if(bytes.length>maxsize){return 0}writeArrayToMemory(bytes,s);return bytes.length-1}function _realloc(){throw"bad"}Module["_realloc"]=_realloc;Module["_saveSetjmp"]=_saveSetjmp;var _tzname=STATICTOP;STATICTOP+=16;var _daylight=STATICTOP;STATICTOP+=16;var _timezone=STATICTOP;STATICTOP+=16;function _tzset(){if(_tzset.called)return;_tzset.called=true;HEAP32[_timezone>>2]=-(new Date).getTimezoneOffset()*60;var winter=new Date(2e3,0,1);var summer=new Date(2e3,6,1);HEAP32[_daylight>>2]=Number(winter.getTimezoneOffset()!=summer.getTimezoneOffset());function extractZone(date){var match=date.toTimeString().match(/\(([A-Za-z ]+)\)$/);return match?match[1]:"GMT"}var winterName=extractZone(winter);var summerName=extractZone(summer);var winterNamePtr=allocate(intArrayFromString(winterName),"i8",ALLOC_NORMAL);var summerNamePtr=allocate(intArrayFromString(summerName),"i8",ALLOC_NORMAL);if(summer.getTimezoneOffset()<winter.getTimezoneOffset()){HEAP32[_tzname>>2]=winterNamePtr;HEAP32[_tzname+4>>2]=summerNamePtr}else{HEAP32[_tzname>>2]=summerNamePtr;HEAP32[_tzname+4>>2]=winterNamePtr}}function _mktime(tmPtr){_tzset();var date=new Date(HEAP32[tmPtr+20>>2]+1900,HEAP32[tmPtr+16>>2],HEAP32[tmPtr+12>>2],HEAP32[tmPtr+8>>2],HEAP32[tmPtr+4>>2],HEAP32[tmPtr>>2],0);var dst=HEAP32[tmPtr+32>>2];var guessedOffset=date.getTimezoneOffset();var start=new Date(date.getFullYear(),0,1);var summerOffset=(new Date(2e3,6,1)).getTimezoneOffset();var winterOffset=start.getTimezoneOffset();var dstOffset=Math.min(winterOffset,summerOffset);if(dst<0){HEAP32[tmPtr+32>>2]=Number(dstOffset==guessedOffset)}else if(dst>0!=(dstOffset==guessedOffset)){var nonDstOffset=Math.max(winterOffset,summerOffset);var trueOffset=dst>0?dstOffset:nonDstOffset;date.setTime(date.getTime()+(trueOffset-guessedOffset)*6e4)}HEAP32[tmPtr+24>>2]=date.getDay();var yday=(date.getTime()-start.getTime())/(1e3*60*60*24)|0;HEAP32[tmPtr+28>>2]=yday;return date.getTime()/1e3|0}function __exit(status){Module["exit"](status)}function _exit(status){__exit(status)}function ___syscall330(which,varargs){SYSCALLS.varargs=varargs;try{var old=SYSCALLS.getStreamFromFD(),suggestFD=SYSCALLS.get(),flags=SYSCALLS.get();assert(!flags);if(old.fd===suggestFD)return-ERRNO_CODES.EINVAL;return SYSCALLS.doDup(old.path,old.flags,suggestFD)}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___syscall54(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(),op=SYSCALLS.get();switch(op){case 21505:{if(!stream.tty)return-ERRNO_CODES.ENOTTY;return 0};case 21506:{if(!stream.tty)return-ERRNO_CODES.ENOTTY;return 0};case 21519:{if(!stream.tty)return-ERRNO_CODES.ENOTTY;var argp=SYSCALLS.get();HEAP32[argp>>2]=0;return 0};case 21520:{if(!stream.tty)return-ERRNO_CODES.ENOTTY;return-ERRNO_CODES.EINVAL};case 21531:{var argp=SYSCALLS.get();return FS.ioctl(stream,op,argp)};default:abort("bad ioctl syscall "+op)}}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}var ___tm_current=STATICTOP;STATICTOP+=48;var ___tm_timezone=allocate(intArrayFromString("GMT"),"i8",ALLOC_STATIC);function _localtime_r(time,tmPtr){_tzset();var date=new Date(HEAP32[time>>2]*1e3);HEAP32[tmPtr>>2]=date.getSeconds();HEAP32[tmPtr+4>>2]=date.getMinutes();HEAP32[tmPtr+8>>2]=date.getHours();HEAP32[tmPtr+12>>2]=date.getDate();HEAP32[tmPtr+16>>2]=date.getMonth();HEAP32[tmPtr+20>>2]=date.getFullYear()-1900;HEAP32[tmPtr+24>>2]=date.getDay();var start=new Date(date.getFullYear(),0,1);var yday=(date.getTime()-start.getTime())/(1e3*60*60*24)|0;HEAP32[tmPtr+28>>2]=yday;HEAP32[tmPtr+36>>2]=-(date.getTimezoneOffset()*60);var summerOffset=(new Date(2e3,6,1)).getTimezoneOffset();var winterOffset=start.getTimezoneOffset();var dst=date.getTimezoneOffset()==Math.min(winterOffset,summerOffset)|0;HEAP32[tmPtr+32>>2]=dst;var zonePtr=HEAP32[_tzname+(dst?Runtime.QUANTUM_SIZE:0)>>2];HEAP32[tmPtr+40>>2]=zonePtr;return tmPtr}function _localtime(time){return _localtime_r(time,___tm_current)}Module["_bitshift64Lshr"]=_bitshift64Lshr;function ___syscall38(which,varargs){SYSCALLS.varargs=varargs;try{var old_path=SYSCALLS.getStr(),new_path=SYSCALLS.getStr();FS.rename(old_path,new_path);return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["_testSetjmp"]=_testSetjmp;function _longjmp(env,value){asm["setThrew"](env,value||1);throw"longjmp"}function ___syscall33(which,varargs){SYSCALLS.varargs=varargs;try{var path=SYSCALLS.getStr(),amode=SYSCALLS.get();return SYSCALLS.doAccess(path,amode)}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function _pthread_cleanup_push(routine,arg){__ATEXIT__.push((function(){Runtime.dynCall("vi",routine,[arg])}));_pthread_cleanup_push.level=__ATEXIT__.length}function _gmtime_r(time,tmPtr){var date=new Date(HEAP32[time>>2]*1e3);HEAP32[tmPtr>>2]=date.getUTCSeconds();HEAP32[tmPtr+4>>2]=date.getUTCMinutes();HEAP32[tmPtr+8>>2]=date.getUTCHours();HEAP32[tmPtr+12>>2]=date.getUTCDate();HEAP32[tmPtr+16>>2]=date.getUTCMonth();HEAP32[tmPtr+20>>2]=date.getUTCFullYear()-1900;HEAP32[tmPtr+24>>2]=date.getUTCDay();HEAP32[tmPtr+36>>2]=0;HEAP32[tmPtr+32>>2]=0;var start=Date.UTC(date.getUTCFullYear(),0,1,0,0,0,0);var yday=(date.getTime()-start)/(1e3*60*60*24)|0;HEAP32[tmPtr+28>>2]=yday;HEAP32[tmPtr+40>>2]=___tm_timezone;return tmPtr}function _gmtime(time){return _gmtime_r(time,___tm_current)}var _environ=STATICTOP;STATICTOP+=16;function ___buildEnvironment(env){var MAX_ENV_VALUES=64;var TOTAL_ENV_SIZE=1024;var poolPtr;var envPtr;if(!___buildEnvironment.called){___buildEnvironment.called=true;ENV["USER"]=ENV["LOGNAME"]="web_user";ENV["PATH"]="/";ENV["PWD"]="/";ENV["HOME"]="/home/web_user";ENV["LANG"]="C";ENV["_"]=Module["thisProgram"];poolPtr=allocate(TOTAL_ENV_SIZE,"i8",ALLOC_STATIC);envPtr=allocate(MAX_ENV_VALUES*4,"i8*",ALLOC_STATIC);HEAP32[envPtr>>2]=poolPtr;HEAP32[_environ>>2]=envPtr}else{envPtr=HEAP32[_environ>>2];poolPtr=HEAP32[envPtr>>2]}var strings=[];var totalSize=0;for(var key in env){if(typeof env[key]==="string"){var line=key+"="+env[key];strings.push(line);totalSize+=line.length}}if(totalSize>TOTAL_ENV_SIZE){throw new Error("Environment size exceeded TOTAL_ENV_SIZE!")}var ptrSize=4;for(var i=0;i<strings.length;i++){var line=strings[i];writeAsciiToMemory(line,poolPtr);HEAP32[envPtr+i*ptrSize>>2]=poolPtr;poolPtr+=line.length+1}HEAP32[envPtr+strings.length*ptrSize>>2]=0}var ENV={};function _getenv(name){if(name===0)return 0;name=Pointer_stringify(name);if(!ENV.hasOwnProperty(name))return 0;if(_getenv.ret)_free(_getenv.ret);_getenv.ret=allocate(intArrayFromString(ENV[name]),"i8",ALLOC_NORMAL);return _getenv.ret}function _pthread_cleanup_pop(){assert(_pthread_cleanup_push.level==__ATEXIT__.length,"cannot pop if something else added meanwhile!");__ATEXIT__.pop();_pthread_cleanup_push.level=__ATEXIT__.length}function ___syscall5(which,varargs){SYSCALLS.varargs=varargs;try{var pathname=SYSCALLS.getStr(),flags=SYSCALLS.get(),mode=SYSCALLS.get();var stream=FS.open(pathname,flags,mode);return stream.fd}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function _emscripten_memcpy_big(dest,src,num){HEAPU8.set(HEAPU8.subarray(src,src+num),dest);return dest}Module["_memcpy"]=_memcpy;function ___syscall6(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD();FS.close(stream);return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___syscall10(which,varargs){SYSCALLS.varargs=varargs;try{var path=SYSCALLS.getStr();FS.unlink(path);return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}var _llvm_pow_f64=Math_pow;function _sbrk(bytes){var self=_sbrk;if(!self.called){DYNAMICTOP=alignMemoryPage(DYNAMICTOP);self.called=true;assert(Runtime.dynamicAlloc);self.alloc=Runtime.dynamicAlloc;Runtime.dynamicAlloc=(function(){abort("cannot dynamically allocate, sbrk now has control")})}var ret=DYNAMICTOP;if(bytes!=0){var success=self.alloc(bytes);if(!success)return-1>>>0}return ret}function _difftime(time1,time0){return time1-time0}function ___syscall40(which,varargs){SYSCALLS.varargs=varargs;try{var path=SYSCALLS.getStr();FS.rmdir(path);return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___syscall265(which,varargs){SYSCALLS.varargs=varargs;try{return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function _time(ptr){var ret=Date.now()/1e3|0;if(ptr){HEAP32[ptr>>2]=ret}return ret}function _pthread_self(){return 0}function ___syscall140(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(),offset_high=SYSCALLS.get(),offset_low=SYSCALLS.get(),result=SYSCALLS.get(),whence=SYSCALLS.get();var offset=offset_low;assert(offset_high===0);FS.llseek(stream,offset,whence);HEAP32[result>>2]=stream.position;if(stream.getdents&&offset===0&&whence===0)stream.getdents=null;return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___syscall146(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(),iov=SYSCALLS.get(),iovcnt=SYSCALLS.get();return SYSCALLS.doWritev(stream,iov,iovcnt)}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___syscall221(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(),cmd=SYSCALLS.get();switch(cmd){case 0:{var arg=SYSCALLS.get();if(arg<0){return-ERRNO_CODES.EINVAL}var newStream;newStream=FS.open(stream.path,stream.flags,0,arg);return newStream.fd};case 1:case 2:return 0;case 3:return stream.flags;case 4:{var arg=SYSCALLS.get();stream.flags|=arg;return 0};case 12:case 12:{var arg=SYSCALLS.get();var offset=0;HEAP16[arg+offset>>1]=2;return 0};case 13:case 14:case 13:case 14:return 0;case 16:case 8:return-ERRNO_CODES.EINVAL;case 9:___setErrNo(ERRNO_CODES.EINVAL);return-1;default:{return-ERRNO_CODES.EINVAL}}}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___syscall145(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(),iov=SYSCALLS.get(),iovcnt=SYSCALLS.get();return SYSCALLS.doReadv(stream,iov,iovcnt)}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}FS.staticInit();__ATINIT__.unshift((function(){if(!Module["noFSInit"]&&!FS.init.initialized)FS.init()}));__ATMAIN__.push((function(){FS.ignorePermissions=false}));__ATEXIT__.push((function(){FS.quit()}));Module["FS_createFolder"]=FS.createFolder;Module["FS_createPath"]=FS.createPath;Module["FS_createDataFile"]=FS.createDataFile;Module["FS_createPreloadedFile"]=FS.createPreloadedFile;Module["FS_createLazyFile"]=FS.createLazyFile;Module["FS_createLink"]=FS.createLink;Module["FS_createDevice"]=FS.createDevice;Module["FS_unlink"]=FS.unlink;__ATINIT__.unshift((function(){TTY.init()}));__ATEXIT__.push((function(){TTY.shutdown()}));if(ENVIRONMENT_IS_NODE){var fs=require("fs");var NODEJS_PATH=require("path");NODEFS.staticInit()}___buildEnvironment(ENV);STACK_BASE=STACKTOP=Runtime.alignMemory(STATICTOP);staticSealed=true;STACK_MAX=STACK_BASE+TOTAL_STACK;DYNAMIC_BASE=DYNAMICTOP=Runtime.alignMemory(STACK_MAX);var cttz_i8=allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0],"i8",ALLOC_DYNAMIC);function invoke_iiii(index,a1,a2,a3){try{return Module["dynCall_iiii"](index,a1,a2,a3)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function jsCall_iiii(index,a1,a2,a3){return Runtime.functionPointers[index](a1,a2,a3)}function invoke_vi(index,a1){try{Module["dynCall_vi"](index,a1)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function jsCall_vi(index,a1){Runtime.functionPointers[index](a1)}function invoke_vii(index,a1,a2){try{Module["dynCall_vii"](index,a1,a2)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function jsCall_vii(index,a1,a2){Runtime.functionPointers[index](a1,a2)}function invoke_ii(index,a1){try{return Module["dynCall_ii"](index,a1)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function jsCall_ii(index,a1){return Runtime.functionPointers[index](a1)}function invoke_iiiii(index,a1,a2,a3,a4){try{return Module["dynCall_iiiii"](index,a1,a2,a3,a4)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function jsCall_iiiii(index,a1,a2,a3,a4){return Runtime.functionPointers[index](a1,a2,a3,a4)}function invoke_iii(index,a1,a2){try{return Module["dynCall_iii"](index,a1,a2)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function jsCall_iii(index,a1,a2){return Runtime.functionPointers[index](a1,a2)}Module.asmGlobalArg={"Math":Math,"Int8Array":Int8Array,"Int16Array":Int16Array,"Int32Array":Int32Array,"Uint8Array":Uint8Array,"Uint16Array":Uint16Array,"Uint32Array":Uint32Array,"Float32Array":Float32Array,"Float64Array":Float64Array,"NaN":NaN,"Infinity":Infinity};Module.asmLibraryArg={"abort":abort,"assert":assert,"invoke_iiii":invoke_iiii,"jsCall_iiii":jsCall_iiii,"invoke_vi":invoke_vi,"jsCall_vi":jsCall_vi,"invoke_vii":invoke_vii,"jsCall_vii":jsCall_vii,"invoke_ii":invoke_ii,"jsCall_ii":jsCall_ii,"invoke_iiiii":invoke_iiiii,"jsCall_iiiii":jsCall_iiiii,"invoke_iii":invoke_iii,"jsCall_iii":jsCall_iii,"_pthread_cleanup_pop":_pthread_cleanup_pop,"___syscall221":___syscall221,"_llvm_pow_f64":_llvm_pow_f64,"___syscall265":___syscall265,"___syscall63":___syscall63,"_abort":_abort,"___syscall40":___syscall40,"_llvm_fabs_f64":_llvm_fabs_f64,"_pthread_cleanup_push":_pthread_cleanup_push,"_difftime":_difftime,"_system":_system,"___buildEnvironment":___buildEnvironment,"_longjmp":_longjmp,"__addDays":__addDays,"_localtime_r":_localtime_r,"_tzset":_tzset,"___setErrNo":___setErrNo,"_sbrk":_sbrk,"___syscall330":___syscall330,"_emscripten_memcpy_big":_emscripten_memcpy_big,"_sysconf":_sysconf,"_mktime":_mktime,"_strftime":_strftime,"_clock":_clock,"__arraySum":__arraySum,"_gmtime":_gmtime,"_pthread_self":_pthread_self,"_getenv":_getenv,"___syscall33":___syscall33,"___syscall54":___syscall54,"___unlock":___unlock,"__isLeapYear":__isLeapYear,"___syscall38":___syscall38,"___syscall10":___syscall10,"_gmtime_r":_gmtime_r,"__exit":__exit,"___lock":___lock,"___syscall6":___syscall6,"___syscall5":___syscall5,"_time":_time,"___syscall140":___syscall140,"_localtime":_localtime,"_exit":_exit,"___syscall145":___syscall145,"___syscall146":___syscall146,"STACKTOP":STACKTOP,"STACK_MAX":STACK_MAX,"tempDoublePtr":tempDoublePtr,"ABORT":ABORT,"cttz_i8":cttz_i8};// EMSCRIPTEN_START_ASM
var asm=(function(global,env,buffer) {
"use asm";var a=new global.Int8Array(buffer);var b=new global.Int16Array(buffer);var c=new global.Int32Array(buffer);var d=new global.Uint8Array(buffer);var e=new global.Uint16Array(buffer);var f=new global.Uint32Array(buffer);var g=new global.Float32Array(buffer);var h=new global.Float64Array(buffer);var i=env.STACKTOP|0;var j=env.STACK_MAX|0;var k=env.tempDoublePtr|0;var l=env.ABORT|0;var m=env.cttz_i8|0;var n=0;var o=0;var p=0;var q=0;var r=global.NaN,s=global.Infinity;var t=0,u=0,v=0,w=0,x=0.0,y=0,z=0,A=0,B=0.0;var C=0;var D=0;var E=0;var F=0;var G=0;var H=0;var I=0;var J=0;var K=0;var L=0;var M=global.Math.floor;var N=global.Math.abs;var O=global.Math.sqrt;var P=global.Math.pow;var Q=global.Math.cos;var R=global.Math.sin;var S=global.Math.tan;var T=global.Math.acos;var U=global.Math.asin;var V=global.Math.atan;var W=global.Math.atan2;var X=global.Math.exp;var Y=global.Math.log;var Z=global.Math.ceil;var _=global.Math.imul;var $=global.Math.min;var aa=global.Math.clz32;var ba=env.abort;var ca=env.assert;var da=env.invoke_iiii;var ea=env.jsCall_iiii;var fa=env.invoke_vi;var ga=env.jsCall_vi;var ha=env.invoke_vii;var ia=env.jsCall_vii;var ja=env.invoke_ii;var ka=env.jsCall_ii;var la=env.invoke_iiiii;var ma=env.jsCall_iiiii;var na=env.invoke_iii;var oa=env.jsCall_iii;var pa=env._pthread_cleanup_pop;var qa=env.___syscall221;var ra=env._llvm_pow_f64;var sa=env.___syscall265;var ta=env.___syscall63;var ua=env._abort;var va=env.___syscall40;var wa=env._llvm_fabs_f64;var xa=env._pthread_cleanup_push;var ya=env._difftime;var za=env._system;var Aa=env.___buildEnvironment;var Ba=env._longjmp;var Ca=env.__addDays;var Da=env._localtime_r;var Ea=env._tzset;var Fa=env.___setErrNo;var Ga=env._sbrk;var Ha=env.___syscall330;var Ia=env._emscripten_memcpy_big;var Ja=env._sysconf;var Ka=env._mktime;var La=env._strftime;var Ma=env._clock;var Na=env.__arraySum;var Oa=env._gmtime;var Pa=env._pthread_self;var Qa=env._getenv;var Ra=env.___syscall33;var Sa=env.___syscall54;var Ta=env.___unlock;var Ua=env.__isLeapYear;var Va=env.___syscall38;var Wa=env.___syscall10;var Xa=env._gmtime_r;var Ya=env.__exit;var Za=env.___lock;var _a=env.___syscall6;var $a=env.___syscall5;var ab=env._time;var bb=env.___syscall140;var cb=env._localtime;var db=env._exit;var eb=env.___syscall145;var fb=env.___syscall146;var gb=0.0;
// EMSCRIPTEN_START_FUNCS
function _e(b,e){b=b|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0;J=i;i=i+16|0;A=J;I=b+60|0;c[(c[I>>2]|0)+4>>2]=0;H=b+56|0;z=b+4|0;a:while(1){g=c[b>>2]|0;b:while(1){switch(g|0){case 91:{F=35;break a}case 61:{F=39;break a}case 60:{F=47;break a}case 62:{F=55;break a}case 126:{F=63;break a}case 58:{F=71;break a}case 39:case 34:{r=g;F=79;break a}case 46:{F=203;break a}case 57:case 56:case 55:case 54:case 53:case 52:case 51:case 50:case 49:case 48:{m=g;break a}case -1:{f=286;F=348;break a}case 13:case 10:{F=4;break b}case 45:break b;case 11:case 9:case 12:case 32:break;default:{F=325;break a}}f=c[H>>2]|0;l=c[f>>2]|0;c[f>>2]=l+-1;if(!l)g=Gg(f)|0;else{l=f+4|0;g=c[l>>2]|0;c[l>>2]=g+1;g=d[g>>0]|0}c[b>>2]=g}if((F|0)==4){F=0;f=c[H>>2]|0;l=c[f>>2]|0;c[f>>2]=l+-1;if(!l)f=Gg(f)|0;else{l=f+4|0;f=c[l>>2]|0;c[l>>2]=f+1;f=d[f>>0]|0}c[b>>2]=f;switch(f|0){case 13:case 10:{if((f|0)!=(g|0)){f=c[H>>2]|0;l=c[f>>2]|0;c[f>>2]=l+-1;if(!l)f=Gg(f)|0;else{l=f+4|0;f=c[l>>2]|0;c[l>>2]=f+1;f=d[f>>0]|0}c[b>>2]=f}break}default:{}}l=c[z>>2]|0;c[z>>2]=l+1;if((l|0)>2147483643){F=14;break}else continue}f=c[H>>2]|0;l=c[f>>2]|0;c[f>>2]=l+-1;if(!l)f=Gg(f)|0;else{l=f+4|0;f=c[l>>2]|0;c[l>>2]=f+1;f=d[f>>0]|0}c[b>>2]=f;if((f|0)!=45){f=45;F=348;break}f=c[H>>2]|0;l=c[f>>2]|0;c[f>>2]=l+-1;if(!l)f=Gg(f)|0;else{l=f+4|0;f=c[l>>2]|0;c[l>>2]=f+1;f=d[f>>0]|0}c[b>>2]=f;do if((f|0)==91){f=$e(b)|0;c[(c[I>>2]|0)+4>>2]=0;if((f|0)>-1){af(b,0,f);c[(c[I>>2]|0)+4>>2]=0;continue a}else{f=c[b>>2]|0;break}}while(0);while(1){switch(f|0){case -1:case 13:case 10:continue a;default:{}}f=c[H>>2]|0;l=c[f>>2]|0;c[f>>2]=l+-1;if(!l)f=Gg(f)|0;else{l=f+4|0;f=c[l>>2]|0;c[l>>2]=f+1;f=d[f>>0]|0}c[b>>2]=f}}switch(F|0){case 14:{We(b,3531,0);break}case 35:{f=$e(b)|0;if((f|0)>-1){af(b,e,f);b=289;i=J;return b|0}if((f|0)==-1){b=91;i=J;return b|0}else We(b,3603,289);break}case 39:{f=c[H>>2]|0;e=c[f>>2]|0;c[f>>2]=e+-1;if(!e)f=Gg(f)|0;else{e=f+4|0;f=c[e>>2]|0;c[e>>2]=f+1;f=d[f>>0]|0}c[b>>2]=f;if((f|0)!=61){b=61;i=J;return b|0}f=c[H>>2]|0;e=c[f>>2]|0;c[f>>2]=e+-1;if(!e)f=Gg(f)|0;else{e=f+4|0;f=c[e>>2]|0;c[e>>2]=f+1;f=d[f>>0]|0}c[b>>2]=f;b=281;i=J;return b|0}case 47:{f=c[H>>2]|0;e=c[f>>2]|0;c[f>>2]=e+-1;if(!e)f=Gg(f)|0;else{e=f+4|0;f=c[e>>2]|0;c[e>>2]=f+1;f=d[f>>0]|0}c[b>>2]=f;if((f|0)!=61){b=60;i=J;return b|0}f=c[H>>2]|0;e=c[f>>2]|0;c[f>>2]=e+-1;if(!e)f=Gg(f)|0;else{e=f+4|0;f=c[e>>2]|0;c[e>>2]=f+1;f=d[f>>0]|0}c[b>>2]=f;b=283;i=J;return b|0}case 55:{f=c[H>>2]|0;e=c[f>>2]|0;c[f>>2]=e+-1;if(!e)f=Gg(f)|0;else{e=f+4|0;f=c[e>>2]|0;c[e>>2]=f+1;f=d[f>>0]|0}c[b>>2]=f;if((f|0)!=61){b=62;i=J;return b|0}f=c[H>>2]|0;e=c[f>>2]|0;c[f>>2]=e+-1;if(!e)f=Gg(f)|0;else{e=f+4|0;f=c[e>>2]|0;c[e>>2]=f+1;f=d[f>>0]|0}c[b>>2]=f;b=282;i=J;return b|0}case 63:{f=c[H>>2]|0;e=c[f>>2]|0;c[f>>2]=e+-1;if(!e)f=Gg(f)|0;else{e=f+4|0;f=c[e>>2]|0;c[e>>2]=f+1;f=d[f>>0]|0}c[b>>2]=f;if((f|0)!=61){b=126;i=J;return b|0}f=c[H>>2]|0;e=c[f>>2]|0;c[f>>2]=e+-1;if(!e)f=Gg(f)|0;else{e=f+4|0;f=c[e>>2]|0;c[e>>2]=f+1;f=d[f>>0]|0}c[b>>2]=f;b=284;i=J;return b|0}case 71:{f=c[H>>2]|0;e=c[f>>2]|0;c[f>>2]=e+-1;if(!e)f=Gg(f)|0;else{e=f+4|0;f=c[e>>2]|0;c[e>>2]=f+1;f=d[f>>0]|0}c[b>>2]=f;if((f|0)!=58){b=58;i=J;return b|0}f=c[H>>2]|0;e=c[f>>2]|0;c[f>>2]=e+-1;if(!e)f=Gg(f)|0;else{e=f+4|0;f=c[e>>2]|0;c[e>>2]=f+1;f=d[f>>0]|0}c[b>>2]=f;b=285;i=J;return b|0}case 79:{h=c[I>>2]|0;l=h+4|0;f=c[l>>2]|0;j=h+8|0;k=c[j>>2]|0;do if((f+1|0)>>>0>k>>>0){if(k>>>0>2147483645)We(b,3490,0);f=k<<1;g=c[b+52>>2]|0;if((f|0)==-2)ff(g);else{q=gf(g,c[h>>2]|0,k,f)|0;c[h>>2]=q;c[j>>2]=f;p=c[l>>2]|0;break}}else{p=f;q=c[h>>2]|0}while(0);s=r&255;c[l>>2]=p+1;a[q+p>>0]=s;f=c[H>>2]|0;G=c[f>>2]|0;c[f>>2]=G+-1;if(!G)f=Gg(f)|0;else{G=f+4|0;f=c[G>>2]|0;c[G>>2]=f+1;f=d[f>>0]|0}c[b>>2]=f;c:do if((f|0)!=(r|0)){n=b+52|0;o=A+4|0;p=A+8|0;l=f;d:while(1){e:do switch(l|0){case -1:{F=92;break d}case 13:case 10:{F=93;break d}case 92:{f=c[H>>2]|0;G=c[f>>2]|0;c[f>>2]=G+-1;if(!G)g=Gg(f)|0;else{G=f+4|0;g=c[G>>2]|0;c[G>>2]=g+1;g=d[g>>0]|0}c[b>>2]=g;do switch(g|0){case -1:{f=-1;break e}case 97:{g=7;F=164;break}case 98:{g=8;F=164;break}case 102:{g=12;F=164;break}case 110:{g=10;F=164;break}case 114:{g=13;F=164;break}case 116:{g=9;F=164;break}case 118:{g=11;F=164;break}case 120:{c[A>>2]=120;f=c[H>>2]|0;G=c[f>>2]|0;c[f>>2]=G+-1;if(!G)f=Gg(f)|0;else{G=f+4|0;f=c[G>>2]|0;c[G>>2]=f+1;f=d[f>>0]|0}c[b>>2]=f;c[o>>2]=f;if(!(a[2573+(f+1)>>0]&16)){f=2;F=108;break d}g=mf(f)|0;f=c[H>>2]|0;G=c[f>>2]|0;c[f>>2]=G+-1;if(!G)f=Gg(f)|0;else{G=f+4|0;f=c[G>>2]|0;c[G>>2]=f+1;f=d[f>>0]|0}c[b>>2]=f;c[p>>2]=f;if(!(a[2573+(f+1)>>0]&16)){f=3;F=108;break d}g=(mf(f)|0)+(g<<4)|0;F=164;break}case 13:case 10:{f=c[H>>2]|0;G=c[f>>2]|0;c[f>>2]=G+-1;if(!G)f=Gg(f)|0;else{G=f+4|0;f=c[G>>2]|0;c[G>>2]=f+1;f=d[f>>0]|0}c[b>>2]=f;switch(f|0){case 13:case 10:{if((f|0)!=(g|0)){f=c[H>>2]|0;G=c[f>>2]|0;c[f>>2]=G+-1;if(!G)f=Gg(f)|0;else{G=f+4|0;f=c[G>>2]|0;c[G>>2]=f+1;f=d[f>>0]|0}c[b>>2]=f}break}default:{}}G=c[z>>2]|0;c[z>>2]=G+1;if((G|0)>2147483643){F=124;break d}else g=10;break}case 39:case 34:case 92:{F=164;break}case 122:{f=c[H>>2]|0;G=c[f>>2]|0;c[f>>2]=G+-1;if(!G)f=Gg(f)|0;else{G=f+4|0;f=c[G>>2]|0;c[G>>2]=f+1;f=d[f>>0]|0}c[b>>2]=f;if(!(a[2573+(f+1)>>0]&8))break e;while(1){switch(f|0){case 13:case 10:{g=c[H>>2]|0;G=c[g>>2]|0;c[g>>2]=G+-1;if(!G)g=Gg(g)|0;else{G=g+4|0;g=c[G>>2]|0;c[G>>2]=g+1;g=d[g>>0]|0}c[b>>2]=g;switch(g|0){case 13:case 10:{if((g|0)!=(f|0)){f=c[H>>2]|0;G=c[f>>2]|0;c[f>>2]=G+-1;if(!G)f=Gg(f)|0;else{G=f+4|0;f=c[G>>2]|0;c[G>>2]=f+1;f=d[f>>0]|0}c[b>>2]=f}break}default:f=g}G=c[z>>2]|0;c[z>>2]=G+1;if((G|0)>2147483643){F=141;break d}break}default:{f=c[H>>2]|0;G=c[f>>2]|0;c[f>>2]=G+-1;if(!G)f=Gg(f)|0;else{G=f+4|0;f=c[G>>2]|0;c[G>>2]=f+1;f=d[f>>0]|0}c[b>>2]=f}}if(!(a[2573+(f+1)>>0]&8))break e}}default:{if(!(a[2573+(g+1)>>0]&2)){F=148;break d}c[A>>2]=g;g=g+-48|0;f=c[H>>2]|0;G=c[f>>2]|0;c[f>>2]=G+-1;if(!G)f=Gg(f)|0;else{G=f+4|0;f=c[G>>2]|0;c[G>>2]=f+1;f=d[f>>0]|0}c[b>>2]=f;if(a[2573+(f+1)>>0]&2){c[o>>2]=f;g=(g*10|0)+-48+f|0;f=c[H>>2]|0;G=c[f>>2]|0;c[f>>2]=G+-1;if(!G)h=Gg(f)|0;else{G=f+4|0;h=c[G>>2]|0;c[G>>2]=h+1;h=d[h>>0]|0}c[b>>2]=h;if(!(a[2573+(h+1)>>0]&2))f=2;else{c[p>>2]=h;f=c[H>>2]|0;G=c[f>>2]|0;c[f>>2]=G+-1;if(!G)f=Gg(f)|0;else{G=f+4|0;f=c[G>>2]|0;c[G>>2]=f+1;f=d[f>>0]|0}c[b>>2]=f;f=3;g=(g*10|0)+-48+h|0}}else f=1;if((g|0)>255){F=154;break d}}}while(0);if((F|0)==164){F=0;f=c[H>>2]|0;G=c[f>>2]|0;c[f>>2]=G+-1;if(!G)f=Gg(f)|0;else{G=f+4|0;f=c[G>>2]|0;c[G>>2]=f+1;f=d[f>>0]|0}c[b>>2]=f}l=c[I>>2]|0;m=l+4|0;h=c[m>>2]|0;j=l+8|0;k=c[j>>2]|0;if((h+1|0)>>>0>k>>>0){if(k>>>0>2147483645){F=171;break d}h=k<<1;f=c[n>>2]|0;if((h|0)==-2){F=173;break d}f=gf(f,c[l>>2]|0,k,h)|0;c[l>>2]=f;c[j>>2]=h;h=c[m>>2]|0}else f=c[l>>2]|0;c[m>>2]=h+1;a[f+h>>0]=g;f=c[b>>2]|0;break}default:{k=c[I>>2]|0;m=k+4|0;g=c[m>>2]|0;h=k+8|0;j=c[h>>2]|0;if((g+1|0)>>>0>j>>>0){if(j>>>0>2147483645){F=179;break d}g=j<<1;f=c[n>>2]|0;if((g|0)==-2){F=181;break d}f=gf(f,c[k>>2]|0,j,g)|0;c[k>>2]=f;c[h>>2]=g;g=c[m>>2]|0}else f=c[k>>2]|0;c[m>>2]=g+1;a[f+g>>0]=l;f=c[H>>2]|0;G=c[f>>2]|0;c[f>>2]=G+-1;if(!G)f=Gg(f)|0;else{G=f+4|0;f=c[G>>2]|0;c[G>>2]=f+1;f=d[f>>0]|0}c[b>>2]=f}}while(0);if((f|0)==(r|0))break c;else l=f}switch(F|0){case 92:{We(b,3633,286);break}case 93:{We(b,3633,289);break}case 108:{bf(b,A,f,3651);break}case 124:{We(b,3531,0);break}case 141:{We(b,3531,0);break}case 148:{bf(b,b,1,3678);break}case 154:{bf(b,A,f,3702);break}case 171:{We(b,3490,0);break}case 173:{ff(f);break}case 179:{We(b,3490,0);break}case 181:{ff(f);break}}}while(0);h=c[I>>2]|0;j=h+4|0;f=c[j>>2]|0;k=h+8|0;l=c[k>>2]|0;do if((f+1|0)>>>0>l>>>0){if(l>>>0>2147483645)We(b,3490,0);f=l<<1;g=c[b+52>>2]|0;if((f|0)==-2)ff(g);else{C=gf(g,c[h>>2]|0,l,f)|0;c[h>>2]=C;c[k>>2]=f;B=c[j>>2]|0;break}}else{B=f;C=c[h>>2]|0}while(0);c[j>>2]=B+1;a[C+B>>0]=s;f=c[H>>2]|0;H=c[f>>2]|0;c[f>>2]=H+-1;if(!H)f=Gg(f)|0;else{H=f+4|0;f=c[H>>2]|0;c[H>>2]=f+1;f=d[f>>0]|0}c[b>>2]=f;f=c[I>>2]|0;j=c[b+52>>2]|0;f=Zf(j,(c[f>>2]|0)+1|0,(c[f+4>>2]|0)+-2|0)|0;k=j+8|0;g=c[k>>2]|0;c[k>>2]=g+16;c[g>>2]=f;c[g+8>>2]=d[f+4>>0]|64;g=gg(j,c[(c[b+48>>2]|0)+4>>2]|0,(c[k>>2]|0)+-16|0)|0;h=g+8|0;if(!(c[h>>2]|0)){c[g>>2]=1;c[h>>2]=1;if((c[(c[j+12>>2]|0)+12>>2]|0)>0)Se(j)}else f=c[g+16>>2]|0;c[k>>2]=(c[k>>2]|0)+-16;c[e>>2]=f;b=289;i=J;return b|0}case 203:{h=c[I>>2]|0;j=h+4|0;f=c[j>>2]|0;k=h+8|0;l=c[k>>2]|0;do if((f+1|0)>>>0>l>>>0){if(l>>>0>2147483645)We(b,3490,0);f=l<<1;g=c[b+52>>2]|0;if((f|0)==-2)ff(g);else{o=gf(g,c[h>>2]|0,l,f)|0;c[h>>2]=o;c[k>>2]=f;n=c[j>>2]|0;break}}else{n=f;o=c[h>>2]|0}while(0);c[j>>2]=n+1;a[o+n>>0]=46;f=c[H>>2]|0;F=c[f>>2]|0;c[f>>2]=F+-1;if(!F)m=Gg(f)|0;else{F=f+4|0;m=c[F>>2]|0;c[F>>2]=m+1;m=d[m>>0]|0}c[b>>2]=m;if(m|0?em(12616,m,2)|0:0){h=c[I>>2]|0;j=h+4|0;f=c[j>>2]|0;k=h+8|0;l=c[k>>2]|0;do if((f+1|0)>>>0>l>>>0){if(l>>>0>2147483645)We(b,3490,0);f=l<<1;g=c[b+52>>2]|0;if((f|0)==-2)ff(g);else{s=gf(g,c[h>>2]|0,l,f)|0;c[h>>2]=s;c[k>>2]=f;r=c[j>>2]|0;break}}else{r=f;s=c[h>>2]|0}while(0);c[j>>2]=r+1;a[s+r>>0]=m;f=c[H>>2]|0;e=c[f>>2]|0;c[f>>2]=e+-1;if(!e)m=Gg(f)|0;else{e=f+4|0;m=c[e>>2]|0;c[e>>2]=m+1;m=d[m>>0]|0}c[b>>2]=m;if(!m){b=279;i=J;return b|0}if(!(em(12616,m,2)|0)){b=279;i=J;return b|0}h=c[I>>2]|0;j=h+4|0;f=c[j>>2]|0;k=h+8|0;l=c[k>>2]|0;do if((f+1|0)>>>0>l>>>0){if(l>>>0>2147483645)We(b,3490,0);f=l<<1;g=c[b+52>>2]|0;if((f|0)==-2)ff(g);else{u=gf(g,c[h>>2]|0,l,f)|0;c[h>>2]=u;c[k>>2]=f;t=c[j>>2]|0;break}}else{t=f;u=c[h>>2]|0}while(0);c[j>>2]=t+1;a[u+t>>0]=m;f=c[H>>2]|0;e=c[f>>2]|0;c[f>>2]=e+-1;if(!e)f=Gg(f)|0;else{e=f+4|0;f=c[e>>2]|0;c[e>>2]=f+1;f=d[f>>0]|0}c[b>>2]=f;b=280;i=J;return b|0}if(!(a[2573+(m+1)>>0]&2)){b=46;i=J;return b|0}break}case 325:{if(!(a[2573+(g+1)>>0]&1)){f=c[H>>2]|0;e=c[f>>2]|0;c[f>>2]=e+-1;if(!e)f=Gg(f)|0;else{e=f+4|0;f=c[e>>2]|0;c[e>>2]=f+1;f=d[f>>0]|0}c[b>>2]=f;b=g;i=J;return b|0}o=b+52|0;while(1){l=c[I>>2]|0;n=l+4|0;h=c[n>>2]|0;j=l+8|0;k=c[j>>2]|0;if((h+1|0)>>>0>k>>>0){if(k>>>0>2147483645){F=330;break}h=k<<1;f=c[o>>2]|0;if((h|0)==-2){F=332;break}f=gf(f,c[l>>2]|0,k,h)|0;c[l>>2]=f;c[j>>2]=h;h=c[n>>2]|0}else f=c[l>>2]|0;c[n>>2]=h+1;a[f+h>>0]=g;f=c[H>>2]|0;F=c[f>>2]|0;c[f>>2]=F+-1;if(!F)f=Gg(f)|0;else{F=f+4|0;f=c[F>>2]|0;c[F>>2]=f+1;f=d[f>>0]|0}c[b>>2]=f;if(!(a[2573+(f+1)>>0]&3)){F=338;break}else g=f}if((F|0)==330)We(b,3490,0);else if((F|0)==332)ff(f);else if((F|0)==338){f=c[I>>2]|0;j=c[o>>2]|0;f=Zf(j,c[f>>2]|0,c[f+4>>2]|0)|0;k=j+8|0;g=c[k>>2]|0;c[k>>2]=g+16;c[g>>2]=f;c[g+8>>2]=d[f+4>>0]|64;g=gg(j,c[(c[b+48>>2]|0)+4>>2]|0,(c[k>>2]|0)+-16|0)|0;h=g+8|0;if(!(c[h>>2]|0)){c[g>>2]=1;c[h>>2]=1;if((c[(c[j+12>>2]|0)+12>>2]|0)>0)Se(j)}else f=c[g+16>>2]|0;c[k>>2]=(c[k>>2]|0)+-16;c[e>>2]=f;b=c[f+4>>2]|0;f=b>>>16;if((b&255)<<24>>24!=4|(f&255)<<24>>24==0){b=288;i=J;return b|0}b=f&255|256;i=J;return b|0}break}case 348:{i=J;return f|0}}h=c[I>>2]|0;j=h+4|0;f=c[j>>2]|0;k=h+8|0;l=c[k>>2]|0;do if((f+1|0)>>>0>l>>>0){if(l>>>0>2147483645)We(b,3490,0);f=l<<1;g=c[b+52>>2]|0;if((f|0)==-2)ff(g);else{w=gf(g,c[h>>2]|0,l,f)|0;c[h>>2]=w;c[k>>2]=f;v=c[j>>2]|0;break}}else{v=f;w=c[h>>2]|0}while(0);c[j>>2]=v+1;a[w+v>>0]=m;f=c[H>>2]|0;F=c[f>>2]|0;c[f>>2]=F+-1;if(!F)f=Gg(f)|0;else{F=f+4|0;f=c[F>>2]|0;c[F>>2]=f+1;f=d[f>>0]|0}c[b>>2]=f;if((m|0)==48)if(f)if(!(em(3727,f,3)|0))n=3730;else{j=c[I>>2]|0;k=j+4|0;g=c[k>>2]|0;l=j+8|0;m=c[l>>2]|0;do if((g+1|0)>>>0>m>>>0){if(m>>>0>2147483645)We(b,3490,0);g=m<<1;h=c[b+52>>2]|0;if((g|0)==-2)ff(h);else{y=gf(h,c[j>>2]|0,m,g)|0;c[j>>2]=y;c[l>>2]=g;x=c[k>>2]|0;break}}else{x=g;y=c[j>>2]|0}while(0);c[k>>2]=x+1;a[y+x>>0]=f;f=c[H>>2]|0;F=c[f>>2]|0;c[f>>2]=F+-1;if(!F)f=Gg(f)|0;else{F=f+4|0;f=c[F>>2]|0;c[F>>2]=f+1;f=d[f>>0]|0}c[b>>2]=f;n=3733}else{f=0;n=3730}else n=3730;o=b+52|0;l=f;while(1){if(l){if(em(n,l,3)|0){k=c[I>>2]|0;m=k+4|0;g=c[m>>2]|0;h=k+8|0;j=c[h>>2]|0;if((g+1|0)>>>0>j>>>0){if(j>>>0>2147483645){F=269;break}g=j<<1;f=c[o>>2]|0;if((g|0)==-2){F=271;break}f=gf(f,c[k>>2]|0,j,g)|0;c[k>>2]=f;c[h>>2]=g;g=c[m>>2]|0}else f=c[k>>2]|0;c[m>>2]=g+1;a[f+g>>0]=l;f=c[H>>2]|0;F=c[f>>2]|0;c[f>>2]=F+-1;if(!F)l=Gg(f)|0;else{F=f+4|0;l=c[F>>2]|0;c[F>>2]=l+1;l=d[l>>0]|0}c[b>>2]=l;if(l){if(em(3736,l,3)|0){k=c[I>>2]|0;m=k+4|0;g=c[m>>2]|0;h=k+8|0;j=c[h>>2]|0;if((g+1|0)>>>0>j>>>0){if(j>>>0>2147483645){F=281;break}g=j<<1;f=c[o>>2]|0;if((g|0)==-2){F=283;break}f=gf(f,c[k>>2]|0,j,g)|0;c[k>>2]=f;c[h>>2]=g;g=c[m>>2]|0}else f=c[k>>2]|0;c[m>>2]=g+1;a[f+g>>0]=l;f=c[H>>2]|0;F=c[f>>2]|0;c[f>>2]=F+-1;if(!F)f=Gg(f)|0;else{F=f+4|0;f=c[F>>2]|0;c[F>>2]=f+1;f=d[f>>0]|0}c[b>>2]=f;l=f}}else l=0}}else l=0;k=c[I>>2]|0;m=k+4|0;g=c[m>>2]|0;h=k+8|0;j=c[h>>2]|0;f=(g+1|0)>>>0>j>>>0;if(!((l|0)==46?1:(a[2573+(l+1)>>0]&16)!=0)){F=301;break}if(f){if(j>>>0>2147483645){F=293;break}g=j<<1;f=c[o>>2]|0;if((g|0)==-2){F=295;break}f=gf(f,c[k>>2]|0,j,g)|0;c[k>>2]=f;c[h>>2]=g;g=c[m>>2]|0}else f=c[k>>2]|0;c[m>>2]=g+1;a[f+g>>0]=l;f=c[H>>2]|0;F=c[f>>2]|0;c[f>>2]=F+-1;if(!F)f=Gg(f)|0;else{F=f+4|0;f=c[F>>2]|0;c[F>>2]=f+1;f=d[f>>0]|0}c[b>>2]=f;l=f}if((F|0)==269)We(b,3490,0);else if((F|0)==271)ff(f);else if((F|0)==281)We(b,3490,0);else if((F|0)==283)ff(f);else if((F|0)==293)We(b,3490,0);else if((F|0)==295)ff(f);else if((F|0)==301){do if(f){if(j>>>0>2147483645)We(b,3490,0);g=j<<1;f=c[o>>2]|0;if((g|0)==-2)ff(f);else{E=gf(f,c[k>>2]|0,j,g)|0;c[k>>2]=E;c[h>>2]=g;D=c[m>>2]|0;break}}else{D=g;E=c[k>>2]|0}while(0);c[m>>2]=D+1;a[E+D>>0]=0;l=b+76|0;j=a[l>>0]|0;g=c[I>>2]|0;f=c[g>>2]|0;g=c[g+4>>2]|0;if(!g)g=-1;else{do{g=g+-1|0;h=f+g|0;if((a[h>>0]|0)==46)a[h>>0]=j}while((g|0)!=0);g=c[I>>2]|0;f=c[g>>2]|0;g=(c[g+4>>2]|0)+-1|0}if(nf(f,g,e)|0){b=287;i=J;return b|0}j=a[l>>0]|0;k=a[c[(Ll()|0)>>2]>>0]|0;a[l>>0]=k;g=c[I>>2]|0;f=c[g>>2]|0;g=c[g+4>>2]|0;if(!g)g=-1;else{do{g=g+-1|0;h=f+g|0;if((a[h>>0]|0)==j<<24>>24)a[h>>0]=k}while((g|0)!=0);g=c[I>>2]|0;f=c[g>>2]|0;g=(c[g+4>>2]|0)+-1|0}if(nf(f,g,e)|0){b=287;i=J;return b|0}h=a[l>>0]|0;f=c[I>>2]|0;g=c[f>>2]|0;f=c[f+4>>2]|0;if(!f)We(b,3739,287);else G=f;do{G=G+-1|0;f=g+G|0;if((a[f>>0]|0)==h<<24>>24)a[f>>0]=46}while((G|0)!=0);We(b,3739,287)}return 0}function $e(b){b=b|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0;o=c[b>>2]|0;n=b+60|0;h=c[n>>2]|0;j=h+4|0;e=c[j>>2]|0;k=h+8|0;l=c[k>>2]|0;do if((e+1|0)>>>0>l>>>0){if(l>>>0>2147483645)We(b,3490,0);e=l<<1;f=c[b+52>>2]|0;if((e|0)==-2)ff(f);else{i=gf(f,c[h>>2]|0,l,e)|0;c[h>>2]=i;c[k>>2]=e;g=c[j>>2]|0;break}}else{g=e;i=c[h>>2]|0}while(0);c[j>>2]=g+1;a[i+g>>0]=o;m=b+56|0;e=c[m>>2]|0;l=c[e>>2]|0;c[e>>2]=l+-1;if(!l)e=Gg(e)|0;else{l=e+4|0;e=c[l>>2]|0;c[l>>2]=e+1;e=d[e>>0]|0}c[b>>2]=e;if((e|0)!=61){n=e;b=0;o=(n|0)!=(o|0);o=o<<31>>31;o=o^b;return o|0}l=b+52|0;k=0;while(1){i=c[n>>2]|0;j=i+4|0;f=c[j>>2]|0;g=i+8|0;h=c[g>>2]|0;if((f+1|0)>>>0>h>>>0){if(h>>>0>2147483645){g=16;break}f=h<<1;e=c[l>>2]|0;if((f|0)==-2){g=18;break}e=gf(e,c[i>>2]|0,h,f)|0;c[i>>2]=e;c[g>>2]=f;f=c[j>>2]|0}else e=c[i>>2]|0;c[j>>2]=f+1;a[e+f>>0]=61;e=c[m>>2]|0;j=c[e>>2]|0;c[e>>2]=j+-1;if(!j)f=Gg(e)|0;else{j=e+4|0;f=c[j>>2]|0;c[j>>2]=f+1;f=d[f>>0]|0}c[b>>2]=f;e=k+1|0;if((f|0)==61)k=e;else{g=24;break}}if((g|0)==16)We(b,3490,0);else if((g|0)==18)ff(e);else if((g|0)==24){o=(f|0)!=(o|0);o=o<<31>>31;o=o^e;return o|0}return 0}function af(b,e,f){b=b|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0;i=c[b>>2]|0;v=b+60|0;k=c[v>>2]|0;m=k+4|0;g=c[m>>2]|0;n=k+8|0;o=c[n>>2]|0;do if((g+1|0)>>>0>o>>>0){if(o>>>0>2147483645)We(b,3490,0);g=o<<1;h=c[b+52>>2]|0;if((g|0)==-2)ff(h);else{l=gf(h,c[k>>2]|0,o,g)|0;c[k>>2]=l;c[n>>2]=g;j=c[m>>2]|0;break}}else{j=g;l=c[k>>2]|0}while(0);c[m>>2]=j+1;a[l+j>>0]=i;r=b+56|0;g=c[r>>2]|0;q=c[g>>2]|0;c[g>>2]=q+-1;if(!q)g=Gg(g)|0;else{q=g+4|0;g=c[q>>2]|0;c[q>>2]=g+1;g=d[g>>0]|0}c[b>>2]=g;switch(g|0){case 13:case 10:{h=c[r>>2]|0;q=c[h>>2]|0;c[h>>2]=q+-1;if(!q)h=Gg(h)|0;else{q=h+4|0;h=c[q>>2]|0;c[q>>2]=h+1;h=d[h>>0]|0}c[b>>2]=h;switch(h|0){case 13:case 10:{if((h|0)!=(g|0)){g=c[r>>2]|0;q=c[g>>2]|0;c[g>>2]=q+-1;if(!q)g=Gg(g)|0;else{q=g+4|0;g=c[q>>2]|0;c[q>>2]=g+1;g=d[g>>0]|0}c[b>>2]=g}break}default:g=h}o=b+4|0;q=c[o>>2]|0;c[o>>2]=q+1;if((q|0)>2147483643)We(b,3531,0);else p=g;break}default:p=g}o=(e|0)==0;q=b+52|0;n=b+4|0;g=p;a:while(1){b:do if(o)while(1){switch(g|0){case -1:{s=31;break a}case 93:{s=32;break b}case 13:case 10:break b;default:{}}g=c[r>>2]|0;p=c[g>>2]|0;c[g>>2]=p+-1;if(!p)g=Gg(g)|0;else{p=g+4|0;g=c[p>>2]|0;c[p>>2]=g+1;g=d[g>>0]|0}c[b>>2]=g}else{m=g;while(1){switch(m|0){case -1:{s=31;break a}case 93:{s=32;break b}case 13:case 10:break b;default:{}}k=c[v>>2]|0;l=k+4|0;h=c[l>>2]|0;i=k+8|0;j=c[i>>2]|0;if((h+1|0)>>>0>j>>>0){if(j>>>0>2147483645){s=67;break a}h=j<<1;g=c[q>>2]|0;if((h|0)==-2){s=69;break a}g=gf(g,c[k>>2]|0,j,h)|0;c[k>>2]=g;c[i>>2]=h;h=c[l>>2]|0}else g=c[k>>2]|0;c[l>>2]=h+1;a[g+h>>0]=m;g=c[r>>2]|0;p=c[g>>2]|0;c[g>>2]=p+-1;if(!p)g=Gg(g)|0;else{p=g+4|0;g=c[p>>2]|0;c[p>>2]=g+1;g=d[g>>0]|0}c[b>>2]=g;m=g}}while(0);if((s|0)==32){s=0;p=($e(b)|0)==(f|0);g=c[b>>2]|0;if(p){s=33;break}else continue}k=c[v>>2]|0;l=k+4|0;h=c[l>>2]|0;i=k+8|0;j=c[i>>2]|0;if((h+1|0)>>>0>j>>>0){if(j>>>0>2147483645){s=47;break}h=j<<1;g=c[q>>2]|0;if((h|0)==-2){s=49;break}g=gf(g,c[k>>2]|0,j,h)|0;c[k>>2]=g;c[i>>2]=h;h=c[l>>2]|0}else g=c[k>>2]|0;c[l>>2]=h+1;a[g+h>>0]=10;g=c[b>>2]|0;h=c[r>>2]|0;p=c[h>>2]|0;c[h>>2]=p+-1;if(!p)h=Gg(h)|0;else{p=h+4|0;h=c[p>>2]|0;c[p>>2]=h+1;h=d[h>>0]|0}c[b>>2]=h;switch(h|0){case 13:case 10:{if((h|0)!=(g|0)){g=c[r>>2]|0;p=c[g>>2]|0;c[g>>2]=p+-1;if(!p)g=Gg(g)|0;else{p=g+4|0;g=c[p>>2]|0;c[p>>2]=g+1;g=d[g>>0]|0}c[b>>2]=g}break}default:g=h}p=c[n>>2]|0;c[n>>2]=p+1;if((p|0)>2147483643){s=61;break}if(!o)continue;c[(c[v>>2]|0)+4>>2]=0}if((s|0)==31)We(b,e|0?3556:3579,286);else if((s|0)==33){j=c[v>>2]|0;k=j+4|0;h=c[k>>2]|0;l=j+8|0;m=c[l>>2]|0;do if((h+1|0)>>>0>m>>>0){if(m>>>0>2147483645)We(b,3490,0);h=m<<1;i=c[q>>2]|0;if((h|0)==-2)ff(i);else{u=gf(i,c[j>>2]|0,m,h)|0;c[j>>2]=u;c[l>>2]=h;t=c[k>>2]|0;break}}else{t=h;u=c[j>>2]|0}while(0);c[k>>2]=t+1;a[u+t>>0]=g;g=c[r>>2]|0;u=c[g>>2]|0;c[g>>2]=u+-1;if(!u)g=Gg(g)|0;else{u=g+4|0;g=c[u>>2]|0;c[u>>2]=g+1;g=d[g>>0]|0}c[b>>2]=g;if(o)return;k=c[v>>2]|0;g=f+2|0;j=c[q>>2]|0;g=Zf(j,(c[k>>2]|0)+g|0,(c[k+4>>2]|0)-(g<<1)|0)|0;k=j+8|0;h=c[k>>2]|0;c[k>>2]=h+16;c[h>>2]=g;c[h+8>>2]=d[g+4>>0]|0|64;h=gg(j,c[(c[b+48>>2]|0)+4>>2]|0,(c[k>>2]|0)+-16|0)|0;i=h+8|0;if(!(c[i>>2]|0)){c[h>>2]=1;c[i>>2]=1;if((c[(c[j+12>>2]|0)+12>>2]|0)>0)Se(j)}else g=c[h+16>>2]|0;c[k>>2]=(c[k>>2]|0)+-16;c[e>>2]=g;return}else if((s|0)==47)We(b,3490,0);else if((s|0)==49)ff(g);else if((s|0)==61)We(b,3531,0);else if((s|0)==67)We(b,3490,0);else if((s|0)==69)ff(g)}function bf(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0;c[(c[a+60>>2]|0)+4>>2]=0;cf(a,92);a:do if((d|0)>0){g=0;do{f=c[b+(g<<2)>>2]|0;if((f|0)==-1)break a;cf(a,f);g=g+1|0}while((g|0)<(d|0))}while(0);We(a,e,289)}function cf(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0;g=c[b+60>>2]|0;h=g+4|0;e=c[h>>2]|0;i=g+8|0;j=c[i>>2]|0;if((e+1|0)>>>0<=j>>>0){i=e;g=c[g>>2]|0;j=d&255;d=i+1|0;c[h>>2]=d;d=g+i|0;a[d>>0]=j;return}if(j>>>0>2147483645)We(b,3490,0);f=j<<1;e=c[b+52>>2]|0;if((f|0)==-2)ff(e);j=gf(e,c[g>>2]|0,j,f)|0;c[g>>2]=j;c[i>>2]=f;i=c[h>>2]|0;g=j;j=d&255;d=i+1|0;c[h>>2]=d;d=g+i|0;a[d>>0]=j;return}function df(a){a=a|0;var b=0;b=_e(a,a+40|0)|0;c[a+32>>2]=b;return b|0}function ef(b,d,e,f,g,h){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0;n=i;i=i+16|0;k=n;j=c[e>>2]|0;if((j|0)>=((g|0)/2|0|0))if((j|0)<(g|0))m=g;else{c[k>>2]=h;c[k+4>>2]=g;Sd(b,3756,k)}else{m=j<<1;m=(m|0)<4?4:m}if((m+1|0)>>>0>(4294967293/(f>>>0)|0)>>>0)ff(b);l=_(j,f)|0;k=_(m,f)|0;h=c[b+12>>2]|0;f=(d|0)!=0;j=h+4|0;g=lb[c[h>>2]&31](c[j>>2]|0,d,l,k)|0;if(!((k|0)!=0&(g|0)==0)){b=g;d=h+12|0;h=c[d>>2]|0;l=0-l|0;l=f?l:0;l=l+k|0;l=l+h|0;c[d>>2]=l;c[e>>2]=m;i=n;return b|0}if(!(a[h+63>>0]|0))_d(b,4);Re(b,1);j=lb[c[h>>2]&31](c[j>>2]|0,d,l,k)|0;if(!j)_d(b,4);else{b=j;d=h+12|0;h=c[d>>2]|0;l=0-l|0;l=f?l:0;l=l+k|0;l=l+h|0;c[d>>2]=l;c[e>>2]=m;i=n;return b|0}return 0}function ff(a){a=a|0;var b=0;b=i;i=i+16|0;Sd(a,3782,b)}function gf(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0;i=c[b+12>>2]|0;j=(d|0)!=0;g=i+4|0;h=lb[c[i>>2]&31](c[g>>2]|0,d,e,f)|0;if((f|0)!=0&(h|0)==0){if(!(a[i+63>>0]|0))_d(b,4);Re(b,1);g=lb[c[i>>2]&31](c[g>>2]|0,d,e,f)|0;if(!g)_d(b,4);else k=g}else k=h;b=i+12|0;c[b>>2]=(j?0-e|0:0)+f+(c[b>>2]|0);return k|0}function hf(a){a=a|0;var b=0,c=0;if(a>>>0<8){b=a;return b|0}if(a>>>0>15){b=1;do{c=a+1|0;a=c>>>1;b=b+1|0}while(c>>>0>31);b=b<<3}else b=8;c=b|a+-8;return c|0}function jf(a){a=a|0;var b=0;b=a>>>3&31;if(!b)return a|0;a=(a&7|8)<<b+-1;return a|0}function kf(a){a=a|0;var b=0,c=0;a=a+-1|0;if(a>>>0>255){c=a;b=0;while(1){b=b+8|0;a=c>>>8;if(c>>>0>65535)c=a;else break}}else b=0;return (d[3821+a>>0]|0)+b|0}function lf(a,b,c){a=a|0;b=+b;c=+c;switch(a|0){case 0:{b=b+c;break}case 1:{b=b-c;break}case 2:{b=b*c;break}case 3:{b=b/c;break}case 4:{b=b-+M(+(b/c))*c;break}case 5:{b=+P(+b,+c);break}case 6:{b=-b;break}default:b=0.0}return +b}function mf(b){b=b|0;return ((a[2573+(b+1)>>0]&2)==0?(b|32)+-87|0:b+-48|0)|0}function nf(b,e,f){b=b|0;e=e|0;f=f|0;var g=0,j=0.0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;r=i;i=i+16|0;q=r;if(Tm(b,4077)|0){b=0;i=r;return b|0}a:do if(!(Tm(b,4080)|0)){j=+vm(b,q);g=c[q>>2]|0}else{g=b;c[q>>2]=g;k=a[b>>0]|0;if(!(a[2573+((k&255)+1)>>0]&8))l=b;else{g=b;do{g=g+1|0;k=a[g>>0]|0}while((a[2573+((k&255)+1)>>0]&8)!=0);l=g}switch(k<<24>>24){case 45:{o=1;g=l+1|0;break}case 43:{o=0;g=l+1|0;break}default:o=0}b:do if((a[g>>0]|0)==48){switch(a[g+1>>0]|0){case 88:case 120:break;default:break b}g=g+2|0;l=a[g>>0]|0;m=l&255;k=a[2573+(m+1)>>0]|0;if(!(k&16)){j=0.0;k=l;n=0}else{j=0.0;l=0;do{j=j*16.0+ +(((k&2)==0?(m|32)+-87|0:m+-48|0)|0);l=l+1|0;g=g+1|0;n=a[g>>0]|0;m=n&255;k=a[2573+(m+1)>>0]|0}while((k&16)!=0);k=n;n=l}if(k<<24>>24==46){g=g+1|0;l=d[g>>0]|0;k=a[2573+(l+1)>>0]|0;if(!(k&16))k=0;else{m=0;do{j=j*16.0+ +(((k&2)==0?(l|32)+-87|0:l+-48|0)|0);m=m+1|0;g=g+1|0;l=d[g>>0]|0;k=a[2573+(l+1)>>0]|0}while((k&16)!=0);k=m}}else k=0;l=g;if(k|n|0){k=_(k,-4)|0;c[q>>2]=l;switch(a[g>>0]|0){case 80:case 112:{l=g+1|0;switch(a[l>>0]|0){case 45:{n=1;l=g+2|0;break}case 43:{n=0;l=g+2|0;break}default:n=0}m=a[l>>0]|0;if(a[2573+((m&255)+1)>>0]&2){g=l;l=0;do{g=g+1|0;l=(m<<24>>24)+-48+(l*10|0)|0;m=a[g>>0]|0}while((a[2573+((m&255)+1)>>0]&2)!=0);k=((n|0)==0?l:0-l|0)+k|0;p=24}break}default:{g=l;p=24}}if((p|0)==24)c[q>>2]=g;j=+Cl((o|0)==0?j:-j,k);break a}}while(0);h[f>>3]=0.0;b=0;i=r;return b|0}while(0);h[f>>3]=j;if((g|0)==(b|0)){b=0;i=r;return b|0}if(a[2573+((d[g>>0]|0)+1)>>0]&8){do g=g+1|0;while((a[2573+((d[g>>0]|0)+1)>>0]&8)!=0);c[q>>2]=g}b=(g|0)==(b+e|0)&1;i=r;return b|0}function of(b,e,f){b=b|0;e=e|0;f=f|0;var g=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0.0;v=i;i=i+48|0;r=v+8|0;p=v;o=v+16|0;k=Bm(e,37)|0;n=b+24|0;t=b+8|0;j=c[t>>2]|0;l=(c[n>>2]|0)-j|0;a:do if(!k){s=e;q=l;g=j;u=0}else{m=0;b:while(1){if((l|0)<48){fe(b,2);j=c[t>>2]|0}c[t>>2]=j+16;l=Zf(b,e,k-e|0)|0;c[j>>2]=l;c[j+8>>2]=d[l+4>>0]|64;j=a[k+1>>0]|0;switch(j|0){case 115:{e=(c[f>>2]|0)+(4-1)&~(4-1);j=c[e>>2]|0;c[f>>2]=e+4;j=(j|0)==0?12578:j;e=Ql(j)|0;l=c[t>>2]|0;c[t>>2]=l+16;e=Zf(b,j,e)|0;c[l>>2]=e;c[l+8>>2]=d[e+4>>0]|64;break}case 99:{e=(c[f>>2]|0)+(4-1)&~(4-1);l=c[e>>2]|0;c[f>>2]=e+4;a[o>>0]=l;l=c[t>>2]|0;c[t>>2]=l+16;e=Zf(b,o,1)|0;c[l>>2]=e;c[l+8>>2]=d[e+4>>0]|64;break}case 100:{l=c[t>>2]|0;c[t>>2]=l+16;j=(c[f>>2]|0)+(4-1)&~(4-1);e=c[j>>2]|0;c[f>>2]=j+4;h[l>>3]=+(e|0);c[l+8>>2]=3;break}case 102:{l=c[t>>2]|0;c[t>>2]=l+16;e=(c[f>>2]|0)+(8-1)&~(8-1);w=+h[e>>3];c[f>>2]=e+8;h[l>>3]=w;c[l+8>>2]=3;break}case 112:{l=(c[f>>2]|0)+(4-1)&~(4-1);e=c[l>>2]|0;c[f>>2]=l+4;c[p>>2]=e;e=qm(o,4083,p)|0;l=c[t>>2]|0;c[t>>2]=l+16;e=Zf(b,o,e)|0;c[l>>2]=e;c[l+8>>2]=d[e+4>>0]|64;break}case 37:{l=c[t>>2]|0;c[t>>2]=l+16;e=Zf(b,4086,1)|0;c[l>>2]=e;c[l+8>>2]=d[e+4>>0]|64;break}default:break b}m=m+2|0;e=k+2|0;k=Bm(e,37)|0;j=c[t>>2]|0;l=(c[n>>2]|0)-j|0;if(!k){s=e;q=l;g=j;u=m;break a}}c[r>>2]=j;Sd(b,4088,r)}while(0);if((q|0)<32){fe(b,1);g=c[t>>2]|0}r=Ql(s)|0;c[t>>2]=g+16;s=Zf(b,s,r)|0;c[g>>2]=s;c[g+8>>2]=d[s+4>>0]|64;if((u|0)<=0){u=c[t>>2]|0;u=u+-16|0;u=c[u>>2]|0;u=u+16|0;i=v;return u|0}Bg(b,u|1);u=c[t>>2]|0;u=u+-16|0;u=c[u>>2]|0;u=u+16|0;i=v;return u|0}function pf(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=i;i=i+16|0;f=e;c[f>>2]=d;d=of(a,b,f)|0;i=e;return d|0}function qf(b,c,d){b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0;i=Ql(c)|0;switch(a[c>>0]|0){case 61:{e=c+1|0;if(i>>>0>d>>>0){i=d+-1|0;zn(b|0,e|0,i|0)|0;a[b+i>>0]=0;return}else{zn(b|0,e|0,i|0)|0;return}}case 64:if(i>>>0>d>>>0){a[b>>0]=a[4131]|0;a[b+1>>0]=a[4132]|0;a[b+2>>0]=a[4133]|0;zn(b+3|0,c+1+i+(3-d)|0,d+-3|0)|0;return}else{zn(b|0,c+1|0,i|0)|0;return}default:{h=Bm(c,10)|0;e=b;f=4135;g=e+9|0;do{a[e>>0]=a[f>>0]|0;e=e+1|0;f=f+1|0}while((e|0)<(g|0));g=b+9|0;e=d+-15|0;f=(h|0)==0;if(i>>>0<e>>>0&f){zn(g|0,c|0,i|0)|0;e=g+i|0}else{i=f?i:h-c|0;e=i>>>0>e>>>0?e:i;zn(g|0,c|0,e|0)|0;e=g+e|0;a[e>>0]=a[4131]|0;a[e+1>>0]=a[4132]|0;a[e+2>>0]=a[4133]|0;e=e+3|0};a[e>>0]=a[4145]|0;a[e+1>>0]=a[4146]|0;a[e+2>>0]=a[4147]|0;return}}}function rf(d,e,f,g,h,j){d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0;q=i;i=i+176|0;k=q+156|0;m=q+80|0;o=q;l=q+104|0;n=pe(d,1)|0;s=d+8|0;r=c[s>>2]|0;c[r>>2]=n;c[r+8>>2]=70;r=(c[s>>2]|0)+16|0;c[s>>2]=r;if(((c[d+24>>2]|0)-r|0)<16)fe(d,0);r=ue(d)|0;c[n+12>>2]=r;c[l>>2]=r;t=_f(d,h)|0;s=r+36|0;c[s>>2]=t;c[o+60>>2]=f;h=o+64|0;c[h>>2]=g;c[g+28>>2]=0;c[g+16>>2]=0;c[g+4>>2]=0;Ye(d,o,e,t,j);d=c[o+52>>2]|0;g=o+48|0;c[l+8>>2]=c[g>>2];f=l+12|0;c[f>>2]=o;c[g>>2]=l;c[l+20>>2]=0;c[l+24>>2]=0;c[l+28>>2]=-1;c[l+32>>2]=0;c[l+36>>2]=0;g=l+44|0;c[g>>2]=0;a[g+4>>0]=0;c[l+40>>2]=c[(c[h>>2]|0)+4>>2];g=l+16|0;c[g>>2]=0;c[s>>2]=c[o+68>>2];a[r+78>>0]=2;e=ig(d)|0;c[l+4>>2]=e;r=d+8|0;s=c[r>>2]|0;c[s>>2]=e;c[s+8>>2]=69;s=(c[r>>2]|0)+16|0;c[r>>2]=s;if(((c[d+24>>2]|0)-s|0)<16)fe(d,0);a[k+10>>0]=0;a[k+8>>0]=a[l+46>>0]|0;f=c[(c[f>>2]|0)+64>>2]|0;b[k+4>>1]=c[f+28>>2];b[k+6>>1]=c[f+16>>2];a[k+9>>0]=0;c[k>>2]=c[g>>2];c[g>>2]=k;a[(c[l>>2]|0)+77>>0]=1;c[m+16>>2]=-1;c[m+20>>2]=-1;c[m>>2]=7;c[m+8>>2]=0;sf(l,c[o+72>>2]|0,m)|0;Ze(o);f=o+16|0;a:while(1){d=c[f>>2]|0;switch(d|0){case 277:case 286:case 262:case 261:case 260:break a;default:{}}tf(o);if((d|0)==274){p=8;break}}if((p|0)==8)d=c[f>>2]|0;if((d|0)==286){Bf(o);i=q;return n|0}else xf(o,286);return 0}function sf(b,e,f){b=b|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0;r=i;i=i+32|0;o=r+8|0;n=r;p=c[b>>2]|0;h=p+40|0;g=c[h>>2]|0;q=b+47|0;l=d[q>>0]|0;if((l+1|0)>>>0>255){m=b+12|0;j=c[(c[m>>2]|0)+52>>2]|0;k=c[p+64>>2]|0;if(!k){t=4208;c[o>>2]=4254;s=o+4|0;c[s>>2]=255;s=o+8|0;c[s>>2]=t;s=pf(j,4222,o)|0;t=c[m>>2]|0;Ve(t,s)}c[n>>2]=k;s=pf(j,4188,n)|0;c[o>>2]=4254;t=o+4|0;c[t>>2]=255;t=o+8|0;c[t>>2]=s;t=pf(j,4222,o)|0;s=c[m>>2]|0;Ve(s,t)}if((l|0)<(g|0))h=g;else{t=p+28|0;c[t>>2]=ef(c[(c[b+12>>2]|0)+52>>2]|0,c[t>>2]|0,h,8,255,4254)|0;h=c[h>>2]|0}j=c[p+28>>2]|0;if((g|0)<(h|0))do{c[j+(g<<3)>>2]=0;g=g+1|0}while((g|0)<(h|0));g=a[q>>0]|0;t=g&255;a[j+(t<<3)+4>>0]=(c[f>>2]|0)==7&1;a[j+(t<<3)+5>>0]=c[f+8>>2];c[j+(t<<3)>>2]=e;if(!(a[e+5>>0]&3)){t=g;s=t+1<<24>>24;a[q>>0]=s;t=t&255;i=r;return t|0}if(!(a[p+5>>0]&4)){t=g;s=t+1<<24>>24;a[q>>0]=s;t=t&255;i=r;return t|0}xe(c[(c[b+12>>2]|0)+52>>2]|0,p,e);t=a[q>>0]|0;s=t+1<<24>>24;a[q>>0]=s;t=t&255;i=r;return t|0}function tf(e){e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0;G=i;i=i+192|0;u=G+184|0;q=G+168|0;x=G+152|0;n=G+136|0;o=G+120|0;p=G+104|0;m=G+88|0;l=G+80|0;B=G+48|0;v=G+24|0;r=G;A=e+4|0;C=c[A>>2]|0;E=e+48|0;y=c[E>>2]|0;F=e+52|0;k=(c[F>>2]|0)+38|0;D=(b[k>>1]|0)+1<<16>>16;b[k>>1]=D;if((D&65535)>200){j=y+12|0;k=c[(c[j>>2]|0)+52>>2]|0;h=c[(c[y>>2]|0)+64>>2]|0;if(!h){H=4208;c[m>>2]=4263;D=m+4|0;c[D>>2]=200;D=m+8|0;c[D>>2]=H;D=pf(k,4222,m)|0;H=c[j>>2]|0;Ve(H,D)}c[l>>2]=h;D=pf(k,4188,l)|0;c[m>>2]=4263;H=m+4|0;c[H>>2]=200;H=m+8|0;c[H>>2]=D;H=pf(k,4222,m)|0;D=c[j>>2]|0;Ve(D,H)}D=e+16|0;do switch(c[D>>2]|0){case 59:{Ze(e);H=c[E>>2]|0;E=H+46|0;E=a[E>>0]|0;H=H+48|0;a[H>>0]=E;H=c[F>>2]|0;H=H+38|0;F=b[H>>1]|0;F=F+-1<<16>>16;b[H>>1]=F;i=G;return}case 267:{c[v>>2]=-1;uf(e,v);a:while(1){f=c[D>>2]|0;switch(f|0){case 260:{z=10;break a}case 261:break;default:break a}uf(e,v)}if((z|0)==10){Ze(e);g=c[E>>2]|0;a[B+10>>0]=0;a[B+8>>0]=a[g+46>>0]|0;H=c[(c[g+12>>2]|0)+64>>2]|0;b[B+4>>1]=c[H+28>>2];b[B+6>>1]=c[H+16>>2];a[B+9>>0]=0;H=g+16|0;c[B>>2]=c[H>>2];c[H>>2]=B;b:do{f=c[D>>2]|0;switch(f|0){case 277:case 286:case 262:case 261:case 260:break b;default:{}}tf(e)}while((f|0)!=274);Cf(g);f=c[D>>2]|0}if((f|0)==262){Ze(e);dd(y,c[v>>2]|0);H=c[E>>2]|0;E=H+46|0;E=a[E>>0]|0;H=H+48|0;a[H>>0]=E;H=c[F>>2]|0;H=H+38|0;F=b[H>>1]|0;F=F+-1<<16>>16;b[H>>1]=F;i=G;return}if((c[A>>2]|0)==(C|0))xf(e,262);else{H=c[F>>2]|0;F=Ue(e,262)|0;G=Ue(e,267)|0;c[p>>2]=F;c[p+4>>2]=G;c[p+8>>2]=C;Ve(e,pf(H,4350,p)|0)}break}case 278:{Ze(e);h=bd(y)|0;vf(e,B,0)|0;if((c[B>>2]|0)==1)c[B>>2]=3;xd(c[E>>2]|0,B);j=c[B+20>>2]|0;a[v+10>>0]=1;a[v+8>>0]=a[y+46>>0]|0;H=c[(c[y+12>>2]|0)+64>>2]|0;b[v+4>>1]=c[H+28>>2];b[v+6>>1]=c[H+16>>2];a[v+9>>0]=0;H=y+16|0;c[v>>2]=c[H>>2];c[H>>2]=v;if((c[D>>2]|0)!=259)xf(e,259);Ze(e);g=c[E>>2]|0;a[B+10>>0]=0;a[B+8>>0]=a[g+46>>0]|0;H=c[(c[g+12>>2]|0)+64>>2]|0;b[B+4>>1]=c[H+28>>2];b[B+6>>1]=c[H+16>>2];a[B+9>>0]=0;H=g+16|0;c[B>>2]=c[H>>2];c[H>>2]=B;c:do{f=c[D>>2]|0;switch(f|0){case 277:case 286:case 262:case 261:case 260:break c;default:{}}tf(e)}while((f|0)!=274);Cf(g);cd(y,Zc(y)|0,h);if((c[D>>2]|0)==262){Ze(e);Cf(y);dd(y,j);H=c[E>>2]|0;E=H+46|0;E=a[E>>0]|0;H=H+48|0;a[H>>0]=E;H=c[F>>2]|0;H=H+38|0;F=b[H>>1]|0;F=F+-1<<16>>16;b[H>>1]=F;i=G;return}if((c[A>>2]|0)==(C|0))xf(e,262);else{H=c[F>>2]|0;F=Ue(e,262)|0;G=Ue(e,278)|0;c[o>>2]=F;c[o+4>>2]=G;c[o+8>>2]=C;Ve(e,pf(H,4350,o)|0)}break}case 259:{Ze(e);g=c[E>>2]|0;a[B+10>>0]=0;a[B+8>>0]=a[g+46>>0]|0;H=c[(c[g+12>>2]|0)+64>>2]|0;b[B+4>>1]=c[H+28>>2];b[B+6>>1]=c[H+16>>2];a[B+9>>0]=0;H=g+16|0;c[B>>2]=c[H>>2];c[H>>2]=B;d:do{f=c[D>>2]|0;switch(f|0){case 277:case 286:case 262:case 261:case 260:break d;default:{}}tf(e)}while((f|0)!=274);Cf(g);if((c[D>>2]|0)==262){Ze(e);H=c[E>>2]|0;E=H+46|0;E=a[E>>0]|0;H=H+48|0;a[H>>0]=E;H=c[F>>2]|0;H=H+38|0;F=b[H>>1]|0;F=F+-1<<16>>16;b[H>>1]=F;i=G;return}if((c[A>>2]|0)==(C|0))xf(e,262);else{H=c[F>>2]|0;F=Ue(e,262)|0;G=Ue(e,259)|0;c[n>>2]=F;c[n+4>>2]=G;c[n+8>>2]=C;Ve(e,pf(H,4350,n)|0)}break}case 264:{a[v+10>>0]=1;a[v+8>>0]=a[y+46>>0]|0;H=c[(c[y+12>>2]|0)+64>>2]|0;b[v+4>>1]=c[H+28>>2];b[v+6>>1]=c[H+16>>2];a[v+9>>0]=0;H=y+16|0;c[v>>2]=c[H>>2];c[H>>2]=v;Ze(e);if((c[D>>2]|0)!=288)xf(e,288);h=e+24|0;j=c[h>>2]|0;Ze(e);switch(c[D>>2]|0){case 61:{f=c[E>>2]|0;g=f+48|0;h=d[g>>0]|0;Af(e,Xe(e,4672,11)|0);Af(e,Xe(e,4684,11)|0);Af(e,Xe(e,4696,10)|0);Af(e,j);if((c[D>>2]|0)!=61)xf(e,61);Ze(e);vf(e,B,0)|0;od(c[E>>2]|0,B);if((c[D>>2]|0)!=44)xf(e,44);Ze(e);vf(e,B,0)|0;od(c[E>>2]|0,B);if((c[D>>2]|0)==44){Ze(e);vf(e,B,0)|0;od(c[E>>2]|0,B)}else{H=d[g>>0]|0;fd(f,H,kd(f,1.0)|0)|0;hd(f,1)}Kf(e,h,C,1,1);break}case 268:case 44:{k=c[E>>2]|0;l=d[k+48>>0]|0;Af(e,Xe(e,4707,15)|0);Af(e,Xe(e,4723,11)|0);Af(e,Xe(e,4735,13)|0);Af(e,j);f=c[D>>2]|0;do if((f|0)==44){g=4;while(1){Ze(e);if((c[D>>2]|0)!=288){z=52;break}f=c[h>>2]|0;Ze(e);Af(e,f);f=c[D>>2]|0;if((f|0)==44)g=g+1|0;else{z=54;break}}if((z|0)==52)xf(e,288);else if((z|0)==54){s=f;w=g+-2|0;break}}else{s=f;w=1}while(0);if((s|0)!=268)xf(e,268);Ze(e);j=c[A>>2]|0;vf(e,B,0)|0;if((c[D>>2]|0)==44){f=1;do{Ze(e);od(c[E>>2]|0,B);vf(e,B,0)|0;f=f+1|0}while((c[D>>2]|0)==44)}else f=1;h=c[E>>2]|0;g=3-f|0;switch(c[B>>2]|0){case 13:case 12:{f=g+1|0;f=(f|0)<0?0:f;ld(h,B,f);if((f|0)>1)hd(h,f+-1|0);break}case 0:{z=63;break}default:{od(h,B);z=63}}if((z|0)==63?(g|0)>0:0){H=d[h+48>>0]|0;hd(h,g);Wc(h,H,g)}gd(k,3);Kf(e,l,j,w,0);break}default:Ve(e,4749)}if((c[D>>2]|0)==262){Ze(e);Cf(y);H=c[E>>2]|0;E=H+46|0;E=a[E>>0]|0;H=H+48|0;a[H>>0]=E;H=c[F>>2]|0;H=H+38|0;F=b[H>>1]|0;F=F+-1<<16>>16;b[H>>1]=F;i=G;return}if((c[A>>2]|0)==(C|0))xf(e,262);else{H=c[F>>2]|0;F=Ue(e,262)|0;G=Ue(e,264)|0;c[x>>2]=F;c[x+4>>2]=G;c[x+8>>2]=C;Ve(e,pf(H,4350,x)|0)}break}case 273:{g=bd(y)|0;a[v+10>>0]=1;w=a[y+46>>0]|0;a[v+8>>0]=w;j=c[(c[y+12>>2]|0)+64>>2]|0;x=c[j+28>>2]&65535;b[v+4>>1]=x;j=c[j+16>>2]&65535;b[v+6>>1]=j;a[v+9>>0]=0;H=y+16|0;c[v>>2]=c[H>>2];a[r+10>>0]=0;h=r+8|0;a[h>>0]=w;b[r+4>>1]=x;b[r+6>>1]=j;j=r+9|0;a[j>>0]=0;c[r>>2]=v;c[H>>2]=r;Ze(e);e:while(1){f=c[D>>2]|0;switch(f|0){case 277:case 286:case 262:case 261:case 260:break e;default:{}}tf(e);if((f|0)==274){z=75;break}}if((z|0)==75)f=c[D>>2]|0;if((f|0)!=277)if((c[A>>2]|0)==(C|0))xf(e,277);else{H=c[F>>2]|0;A=Ue(e,277)|0;D=Ue(e,273)|0;c[q>>2]=A;c[q+4>>2]=D;c[q+8>>2]=C;Ve(e,pf(H,4350,q)|0)}Ze(e);vf(e,B,0)|0;if((c[B>>2]|0)==1)c[B>>2]=3;xd(c[E>>2]|0,B);f=c[B+20>>2]|0;if(a[j>>0]|0)ed(y,f,d[h>>0]|0);Cf(y);cd(y,f,g);Cf(y);H=c[E>>2]|0;E=H+46|0;E=a[E>>0]|0;H=H+48|0;a[H>>0]=E;H=c[F>>2]|0;H=H+38|0;F=b[H>>1]|0;F=F+-1<<16>>16;b[H>>1]=F;i=G;return}case 265:{Ze(e);if((c[D>>2]|0)!=288)xf(e,288);f=c[e+24>>2]|0;Ze(e);g=c[E>>2]|0;if(!(Hf(g,f,v,1)|0)){Hf(g,c[e+72>>2]|0,v,1)|0;H=id(c[E>>2]|0,f)|0;c[B+16>>2]=-1;c[B+20>>2]=-1;c[B>>2]=4;c[B+8>>2]=H;Ad(g,v,B)}f:while(1){switch(c[D>>2]|0){case 58:{z=91;break f}case 46:break;default:{f=0;break f}}If(e,v)}if((z|0)==91){If(e,v);f=1}zf(e,r,f,C);vd(c[E>>2]|0,v,r);Gd(c[E>>2]|0,C);H=c[E>>2]|0;E=H+46|0;E=a[E>>0]|0;H=H+48|0;a[H>>0]=E;H=c[F>>2]|0;H=H+38|0;F=b[H>>1]|0;F=F+-1<<16>>16;b[H>>1]=F;i=G;return}case 269:{Ze(e);h=c[D>>2]|0;if((h|0)==265){Ze(e);f=c[E>>2]|0;if((c[D>>2]|0)!=288)xf(e,288);D=c[e+24>>2]|0;Ze(e);Af(e,D);D=c[E>>2]|0;C=D+46|0;H=(d[C>>0]|0)+1|0;a[C>>0]=H;c[(c[(c[D>>2]|0)+24>>2]|0)+((b[(c[c[(c[D+12>>2]|0)+64>>2]>>2]|0)+((c[D+40>>2]|0)+(H&255)+-1<<1)>>1]|0)*12|0)+4>>2]=c[D+20>>2];zf(e,B,0,c[A>>2]|0);c[(c[(c[f>>2]|0)+24>>2]|0)+((b[(c[c[(c[f+12>>2]|0)+64>>2]>>2]|0)+((c[f+40>>2]|0)+(c[B+8>>2]|0)<<1)>>1]|0)*12|0)+4>>2]=c[f+20>>2];H=c[E>>2]|0;E=H+46|0;E=a[E>>0]|0;H=H+48|0;a[H>>0]=E;H=c[F>>2]|0;H=H+38|0;F=b[H>>1]|0;F=F+-1<<16>>16;b[H>>1]=F;i=G;return}if((h|0)!=288)xf(e,288);h=e+24|0;j=0;g:while(1){H=c[h>>2]|0;Ze(e);Af(e,H);j=j+1|0;switch(c[D>>2]|0){case 61:{f=j;z=102;break g}case 44:break;default:{f=j;z=104;break g}}Ze(e);if((c[D>>2]|0)!=288){z=99;break}}if((z|0)==99)xf(e,288);else if((z|0)==102){Ze(e);vf(e,B,0)|0;if((c[D>>2]|0)==44){g=1;do{Ze(e);od(c[E>>2]|0,B);vf(e,B,0)|0;g=g+1|0}while((c[D>>2]|0)==44)}else g=1}else if((z|0)==104){c[B>>2]=0;g=0}j=c[E>>2]|0;h=f-g|0;switch(c[B>>2]|0){case 13:case 12:{g=h+1|0;g=(g|0)<0?0:g;ld(j,B,g);if((g|0)>1)hd(j,g+-1|0);break}case 0:{z=109;break}default:{od(j,B);z=109}}if((z|0)==109?(h|0)>0:0){H=d[j+48>>0]|0;hd(j,h);Wc(j,H,h)}H=c[E>>2]|0;j=H+46|0;k=(d[j>>0]|0)+f|0;a[j>>0]=k;j=c[H+20>>2]|0;g=c[(c[H>>2]|0)+24>>2]|0;h=c[c[(c[H+12>>2]|0)+64>>2]>>2]|0;k=(c[H+40>>2]|0)+(k&255)|0;do{c[g+((b[h+(k-f<<1)>>1]|0)*12|0)+4>>2]=j;f=f+-1|0}while((f|0)!=0);H=c[E>>2]|0;E=H+46|0;E=a[E>>0]|0;H=H+48|0;a[H>>0]=E;H=c[F>>2]|0;H=H+38|0;F=b[H>>1]|0;F=F+-1<<16>>16;b[H>>1]=F;i=G;return}case 285:{Ze(e);if((c[D>>2]|0)!=288)xf(e,288);l=c[e+24>>2]|0;Ze(e);g=c[E>>2]|0;p=e+64|0;j=c[p>>2]|0;n=j+24|0;o=g+16|0;f=b[(c[o>>2]|0)+4>>1]|0;m=j+28|0;h:do if((f|0)<(c[m>>2]|0)){while(1){if(Wf(l,c[(c[n>>2]|0)+(f<<4)>>2]|0)|0)break;f=f+1|0;if((f|0)>=(c[m>>2]|0))break h}B=g+12|0;H=c[(c[B>>2]|0)+52>>2]|0;A=c[(c[n>>2]|0)+(f<<4)+8>>2]|0;c[u>>2]=l+16;c[u+4>>2]=A;H=pf(H,4770,u)|0;Ef(c[B>>2]|0,H)}while(0);if((c[D>>2]|0)!=285)xf(e,285);Ze(e);h=c[g+20>>2]|0;k=c[m>>2]|0;f=j+32|0;if((k|0)<(c[f>>2]|0)){f=c[n>>2]|0;g=k}else{f=ef(c[F>>2]|0,c[n>>2]|0,f,16,32767,4449)|0;c[n>>2]=f;g=c[m>>2]|0}c[f+(k<<4)>>2]=l;c[f+(k<<4)+8>>2]=C;a[f+(k<<4)+12>>0]=a[(c[E>>2]|0)+46>>0]|0;c[f+(k<<4)+4>>2]=h;c[m>>2]=g+1;i:while(1){switch(c[D>>2]|0){case 286:case 262:case 261:case 260:{z=130;break i}case 285:case 59:break;default:{z=129;break i}}tf(e)}if((z|0)==129)f=c[n>>2]|0;else if((z|0)==130){f=c[n>>2]|0;a[f+(k<<4)+12>>0]=a[(c[o>>2]|0)+8>>0]|0}k=f+(k<<4)|0;f=c[p>>2]|0;g=b[(c[(c[E>>2]|0)+16>>2]|0)+6>>1]|0;j=f+16|0;if((g|0)>=(c[j>>2]|0)){H=c[E>>2]|0;E=H+46|0;E=a[E>>0]|0;H=H+48|0;a[H>>0]=E;H=c[F>>2]|0;H=H+38|0;F=b[H>>1]|0;F=F+-1<<16>>16;b[H>>1]=F;i=G;return}h=f+12|0;f=g;j:while(1){while(1){if(!(Wf(c[(c[h>>2]|0)+(f<<4)>>2]|0,c[k>>2]|0)|0))break;Df(e,f,k);if((f|0)>=(c[j>>2]|0)){z=165;break j}}f=f+1|0;if((f|0)>=(c[j>>2]|0)){z=165;break}}if((z|0)==165){H=c[E>>2]|0;E=H+46|0;E=a[E>>0]|0;H=H+48|0;a[H>>0]=E;H=c[F>>2]|0;H=H+38|0;F=b[H>>1]|0;F=F+-1<<16>>16;b[H>>1]=F;i=G;return}break}case 274:{Ze(e);h=c[E>>2]|0;k:do switch(c[D>>2]|0){case 59:case 277:case 286:case 262:case 261:case 260:{g=0;f=0;break}default:{vf(e,B,0)|0;if((c[D>>2]|0)==44){f=1;do{Ze(e);od(c[E>>2]|0,B);vf(e,B,0)|0;f=f+1|0}while((c[D>>2]|0)==44)}else f=1;if((c[B>>2]&-2|0)!=12)if((f|0)==1){g=rd(h,B)|0;f=1;break k}else{od(h,B);g=d[h+46>>0]|0;break k}else{ld(h,B,-1);if((f|0)==1&(c[B>>2]|0)==12){H=(c[(c[h>>2]|0)+12>>2]|0)+(c[B+8>>2]<<2)|0;c[H>>2]=c[H>>2]&-64|30}g=d[h+46>>0]|0;f=-1;break k}}}while(0);ad(h,g,f);if((c[D>>2]|0)==59)Ze(e);H=c[E>>2]|0;E=H+46|0;E=a[E>>0]|0;H=H+48|0;a[H>>0]=E;H=c[F>>2]|0;H=H+38|0;F=b[H>>1]|0;F=F+-1<<16>>16;b[H>>1]=F;i=G;return}case 266:case 258:{l=Zc(y)|0;k=c[A>>2]|0;H=(c[D>>2]|0)==266;Ze(e);do if(H)if((c[D>>2]|0)==288){t=c[e+24>>2]|0;Ze(e);break}else xf(e,288);else t=_f(c[F>>2]|0,4443)|0;while(0);g=c[e+64>>2]|0;f=g+12|0;h=g+16|0;j=c[h>>2]|0;g=g+20|0;if((j|0)<(c[g>>2]|0)){f=c[f>>2]|0;g=j}else{g=ef(c[F>>2]|0,c[f>>2]|0,g,16,32767,4449)|0;c[f>>2]=g;f=g;g=c[h>>2]|0}c[f+(j<<4)>>2]=t;c[f+(j<<4)+8>>2]=k;a[f+(j<<4)+12>>0]=a[(c[E>>2]|0)+46>>0]|0;c[f+(j<<4)+4>>2]=l;c[h>>2]=g+1;Ff(e,j)|0;H=c[E>>2]|0;E=H+46|0;E=a[E>>0]|0;H=H+48|0;a[H>>0]=E;H=c[F>>2]|0;H=H+38|0;F=b[H>>1]|0;F=F+-1<<16>>16;b[H>>1]=F;i=G;return}default:{f=B+8|0;Gf(e,f);l:do switch(c[D>>2]|0){case 44:case 61:{c[B>>2]=0;Lf(e,B,1);break}default:if((c[f>>2]|0)==12){H=(c[(c[y>>2]|0)+12>>2]|0)+(c[B+16>>2]<<2)|0;c[H>>2]=c[H>>2]&-8372225|16384;break l}else Ve(e,4808)}while(0);H=c[E>>2]|0;E=H+46|0;E=a[E>>0]|0;H=H+48|0;a[H>>0]=E;H=c[F>>2]|0;H=H+38|0;F=b[H>>1]|0;F=F+-1<<16>>16;b[H>>1]=F;i=G;return}}while(0)}function uf(d,e){d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;r=i;i=i+48|0;f=r+24|0;g=r;m=d+48|0;p=c[m>>2]|0;Ze(d);vf(d,g,0)|0;q=d+16|0;if((c[q>>2]|0)!=275)xf(d,275);Ze(d);a:do switch(c[q>>2]|0){case 258:case 266:{zd(c[m>>2]|0,g);a[f+10>>0]=0;a[f+8>>0]=a[p+46>>0]|0;h=c[(c[p+12>>2]|0)+64>>2]|0;b[f+4>>1]=c[h+28>>2];b[f+6>>1]=c[h+16>>2];a[f+9>>0]=0;h=p+16|0;c[f>>2]=c[h>>2];c[h>>2]=f;h=c[g+16>>2]|0;j=c[d+4>>2]|0;l=(c[q>>2]|0)==266;Ze(d);do if(l)if((c[q>>2]|0)==288){n=c[d+24>>2]|0;Ze(d);break}else xf(d,288);else n=_f(c[d+52>>2]|0,4443)|0;while(0);g=c[d+64>>2]|0;f=g+12|0;k=g+16|0;l=c[k>>2]|0;g=g+20|0;if((l|0)<(c[g>>2]|0)){f=c[f>>2]|0;g=l}else{g=ef(c[d+52>>2]|0,c[f>>2]|0,g,16,32767,4449)|0;c[f>>2]=g;f=g;g=c[k>>2]|0}c[f+(l<<4)>>2]=n;c[f+(l<<4)+8>>2]=j;a[f+(l<<4)+12>>0]=a[(c[m>>2]|0)+46>>0]|0;c[f+(l<<4)+4>>2]=h;c[k>>2]=g+1;Ff(d,l)|0;b:while(1){switch(c[q>>2]|0){case 286:case 262:case 261:case 260:break b;case 285:case 59:break;default:{o=16;break b}}tf(d)}if((o|0)==16){f=Zc(p)|0;break a}Cf(p);i=r;return}default:{xd(c[m>>2]|0,g);a[f+10>>0]=0;a[f+8>>0]=a[p+46>>0]|0;o=c[(c[p+12>>2]|0)+64>>2]|0;b[f+4>>1]=c[o+28>>2];b[f+6>>1]=c[o+16>>2];a[f+9>>0]=0;o=p+16|0;c[f>>2]=c[o>>2];c[o>>2]=f;f=c[g+20>>2]|0}}while(0);c:do{g=c[q>>2]|0;switch(g|0){case 277:case 286:case 262:case 261:case 260:break c;default:{}}tf(d)}while((g|0)!=274);Cf(p);if((c[q>>2]&-2|0)==260)$c(p,e,Zc(p)|0);dd(p,f);i=r;return}function vf(e,f,g){e=e|0;f=f|0;g=g|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0;t=i;i=i+48|0;n=t+32|0;m=t+24|0;r=t;q=e+48|0;o=c[q>>2]|0;s=e+52|0;k=(c[s>>2]|0)+38|0;l=(b[k>>1]|0)+1<<16>>16;b[k>>1]=l;if((l&65535)>200){k=o+12|0;l=c[(c[k>>2]|0)+52>>2]|0;j=c[(c[o>>2]|0)+64>>2]|0;if(!j){v=4208;c[n>>2]=4263;u=n+4|0;c[u>>2]=200;u=n+8|0;c[u>>2]=v;u=pf(l,4222,n)|0;v=c[k>>2]|0;Ve(v,u)}c[m>>2]=j;u=pf(l,4188,m)|0;c[n>>2]=4263;v=n+4|0;c[v>>2]=200;v=n+8|0;c[v>>2]=u;v=pf(l,4222,n)|0;u=c[k>>2]|0;Ve(u,v)}k=e+16|0;a:do switch(c[k>>2]|0){case 271:{j=1;p=8;break}case 45:{j=0;p=8;break}case 35:{j=2;p=8;break}case 287:{c[f+16>>2]=-1;c[f+20>>2]=-1;c[f>>2]=5;c[f+8>>2]=0;h[f+8>>3]=+h[e+24>>3];p=20;break}case 289:{p=id(o,c[e+24>>2]|0)|0;c[f+16>>2]=-1;c[f+20>>2]=-1;c[f>>2]=4;c[f+8>>2]=p;p=20;break}case 270:{c[f+16>>2]=-1;c[f+20>>2]=-1;c[f>>2]=1;c[f+8>>2]=0;p=20;break}case 276:{c[f+16>>2]=-1;c[f+20>>2]=-1;c[f>>2]=2;c[f+8>>2]=0;p=20;break}case 263:{c[f+16>>2]=-1;c[f+20>>2]=-1;c[f>>2]=3;c[f+8>>2]=0;p=20;break}case 280:{if(!(a[(c[o>>2]|0)+77>>0]|0))Ve(e,4272);else{p=Yc(o,38,0,1,0)|0;c[f+16>>2]=-1;c[f+20>>2]=-1;c[f>>2]=13;c[f+8>>2]=p;p=20;break a}break}case 123:{wf(e,f);break}case 265:{Ze(e);zf(e,f,0,c[e+4>>2]|0);break}default:Gf(e,f)}while(0);if((p|0)==8){v=c[e+4>>2]|0;Ze(e);vf(e,f,8)|0;Bd(c[q>>2]|0,j,f,v)}else if((p|0)==20)Ze(e);do switch(c[k>>2]|0){case 43:{j=0;break}case 45:{j=1;break}case 42:{j=2;break}case 47:{j=3;break}case 37:{j=4;break}case 94:{j=5;break}case 279:{j=6;break}case 284:{j=10;break}case 281:{j=7;break}case 60:{j=8;break}case 283:{j=9;break}case 62:{j=11;break}case 282:{j=12;break}case 257:{j=13;break}case 272:{j=14;break}default:{v=15;u=c[s>>2]|0;u=u+38|0;s=b[u>>1]|0;s=s+-1<<16>>16;b[u>>1]=s;i=t;return v|0}}while(0);k=e+4|0;while(1){if((d[4642+(j<<1)>>0]|0)<=(g|0)){p=39;break}v=c[k>>2]|0;Ze(e);Dd(c[q>>2]|0,j,f);u=j;j=vf(e,r,d[4642+(j<<1)+1>>0]|0)|0;Ed(c[q>>2]|0,u,f,r,v);if((j|0)==15){j=15;p=39;break}}if((p|0)==39){v=c[s>>2]|0;v=v+38|0;u=b[v>>1]|0;u=u+-1<<16>>16;b[v>>1]=u;i=t;return j|0}return 0}function wf(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;u=i;i=i+112|0;h=u+88|0;m=u+72|0;l=u+64|0;k=u+48|0;j=u+40|0;o=u;e=a+48|0;p=c[e>>2]|0;f=a+4|0;g=c[f>>2]|0;q=Yc(p,11,0,0,0)|0;n=o+36|0;c[n>>2]=0;r=o+28|0;c[r>>2]=0;s=o+32|0;c[s>>2]=0;t=o+24|0;c[t>>2]=b;c[b+16>>2]=-1;c[b+20>>2]=-1;c[b>>2]=11;c[b+8>>2]=q;c[o+16>>2]=-1;c[o+20>>2]=-1;c[o>>2]=0;c[o+8>>2]=0;od(c[e>>2]|0,b);d=a+16|0;if((c[d>>2]|0)!=123)xf(a,123);Ze(a);a:do if((c[d>>2]|0)!=125){b=0;b:while(1){if(b|0?(od(p,o),c[o>>2]=0,(c[n>>2]|0)==50):0){Hd(p,c[(c[t>>2]|0)+8>>2]|0,c[s>>2]|0,50);c[n>>2]=0}c:do switch(c[d>>2]|0){case 288:{if((df(a)|0)==61){yf(a,o);break c}vf(a,o,0)|0;b=c[s>>2]|0;if((b|0)>2147483645){b=c[e>>2]|0;d=10;break b}c[s>>2]=b+1;c[n>>2]=(c[n>>2]|0)+1;break}case 91:{yf(a,o);break}default:{vf(a,o,0)|0;b=c[s>>2]|0;if((b|0)>2147483645){b=c[e>>2]|0;d=17;break b}c[s>>2]=b+1;c[n>>2]=(c[n>>2]|0)+1}}while(0);switch(c[d>>2]|0){case 125:break a;case 44:{Ze(a);break}case 59:{Ze(a);break}default:{d=26;break b}}if((c[d>>2]|0)==125)break a;b=c[o>>2]|0}if((d|0)==10){d=b+12|0;e=c[(c[d>>2]|0)+52>>2]|0;b=c[(c[b>>2]|0)+64>>2]|0;if(!b){l=4208;c[k>>2]=4327;m=k+4|0;c[m>>2]=2147483645;m=k+8|0;c[m>>2]=l;m=pf(e,4222,k)|0;l=c[d>>2]|0;Ve(l,m)}c[j>>2]=b;l=pf(e,4188,j)|0;c[k>>2]=4327;m=k+4|0;c[m>>2]=2147483645;m=k+8|0;c[m>>2]=l;m=pf(e,4222,k)|0;l=c[d>>2]|0;Ve(l,m)}else if((d|0)==17){d=b+12|0;e=c[(c[d>>2]|0)+52>>2]|0;b=c[(c[b>>2]|0)+64>>2]|0;if(!b){j=4208;c[m>>2]=4327;k=m+4|0;c[k>>2]=2147483645;k=m+8|0;c[k>>2]=j;k=pf(e,4222,m)|0;j=c[d>>2]|0;Ve(j,k)}c[l>>2]=b;k=pf(e,4188,l)|0;c[m>>2]=4327;l=m+4|0;c[l>>2]=2147483645;l=m+8|0;c[l>>2]=k;m=pf(e,4222,m)|0;l=c[d>>2]|0;Ve(l,m)}else if((d|0)==26)if((c[f>>2]|0)==(g|0))xf(a,125);else{m=c[a+52>>2]|0;k=Ue(a,125)|0;l=Ue(a,123)|0;c[h>>2]=k;c[h+4>>2]=l;c[h+8>>2]=g;Ve(a,pf(m,4350,h)|0)}}while(0);Ze(a);b=c[n>>2]|0;d:do if(b|0){switch(c[o>>2]|0){case 13:case 12:{ld(p,o,-1);Hd(p,c[(c[t>>2]|0)+8>>2]|0,c[s>>2]|0,-1);c[s>>2]=(c[s>>2]|0)+-1;break d}case 0:break;default:{od(p,o);b=c[n>>2]|0}}Hd(p,c[(c[t>>2]|0)+8>>2]|0,c[s>>2]|0,b)}while(0);t=c[(c[(c[p>>2]|0)+12>>2]|0)+(q<<2)>>2]&8388607;t=(hf(c[s>>2]|0)|0)<<23|t;c[(c[(c[p>>2]|0)+12>>2]|0)+(q<<2)>>2]=t;t=(hf(c[r>>2]|0)|0)<<14&8372224|t&-8372225;c[(c[(c[p>>2]|0)+12>>2]|0)+(q<<2)>>2]=t;i=u;return}function xf(a,b){a=a|0;b=b|0;var d=0,e=0;d=i;i=i+16|0;e=c[a+52>>2]|0;c[d>>2]=Ue(a,b)|0;Ve(a,pf(e,4315,d)|0)}function yf(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0;r=i;i=i+80|0;q=r+56|0;p=r+48|0;n=r+24|0;o=r;e=b+48|0;j=c[e>>2]|0;k=j+48|0;l=a[k>>0]|0;m=b+16|0;do if((c[m>>2]|0)!=288){Ze(b);vf(b,n,0)|0;td(c[e>>2]|0,n);if((c[m>>2]|0)==93){Ze(b);h=d+28|0;break}else xf(b,93)}else{f=d+28|0;if((c[f>>2]|0)<=2147483645){h=c[b+24>>2]|0;Ze(b);h=id(c[e>>2]|0,h)|0;c[n+16>>2]=-1;c[n+20>>2]=-1;c[n>>2]=4;c[n+8>>2]=h;h=f;break}e=j+12|0;f=c[(c[e>>2]|0)+52>>2]|0;g=c[(c[j>>2]|0)+64>>2]|0;if(!g){t=4208;c[q>>2]=4327;s=q+4|0;c[s>>2]=2147483645;s=q+8|0;c[s>>2]=t;s=pf(f,4222,q)|0;t=c[e>>2]|0;Ve(t,s)}c[p>>2]=g;s=pf(f,4188,p)|0;c[q>>2]=4327;t=q+4|0;c[t>>2]=2147483645;t=q+8|0;c[t>>2]=s;t=pf(f,4222,q)|0;s=c[e>>2]|0;Ve(s,t)}while(0);c[h>>2]=(c[h>>2]|0)+1;if((c[m>>2]|0)==61){Ze(b);t=ud(j,n)|0;vf(b,o,0)|0;s=c[(c[d+24>>2]|0)+8>>2]|0;Yc(j,10,s,t,ud(j,o)|0)|0;a[k>>0]=l;i=r;return}else xf(b,61)}function zf(e,f,g,h){e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0;z=i;i=i+80|0;y=z;x=z+24|0;s=z+12|0;v=e+48|0;q=c[v>>2]|0;w=e+52|0;r=c[w>>2]|0;p=c[q>>2]|0;q=q+36|0;k=p+56|0;l=c[k>>2]|0;o=p+16|0;if(((c[q>>2]|0)>=(l|0)?(m=ef(r,c[o>>2]|0,k,4,262143,4387)|0,c[o>>2]=m,n=c[k>>2]|0,(l|0)<(n|0)):0)?(j=l+1|0,c[m+(l<<2)>>2]=0,(j|0)<(n|0)):0)do{c[(c[o>>2]|0)+(j<<2)>>2]=0;j=j+1|0}while((j|0)!=(n|0));m=ue(r)|0;n=c[q>>2]|0;c[q>>2]=n+1;c[(c[o>>2]|0)+(n<<2)>>2]=m;if(a[m+5>>0]&3?a[p+5>>0]&4:0)xe(r,p,m);c[x>>2]=m;c[m+64>>2]=h;j=c[w>>2]|0;c[x+8>>2]=c[v>>2];k=x+12|0;c[k>>2]=e;c[v>>2]=x;c[x+20>>2]=0;c[x+24>>2]=0;c[x+28>>2]=-1;c[x+32>>2]=0;c[x+36>>2]=0;l=x+44|0;c[l>>2]=0;a[l+4>>0]=0;c[x+40>>2]=c[(c[e+64>>2]|0)+4>>2];l=x+16|0;c[l>>2]=0;c[m+36>>2]=c[e+68>>2];a[m+78>>0]=2;p=ig(j)|0;c[x+4>>2]=p;q=j+8|0;r=c[q>>2]|0;c[r>>2]=p;c[r+8>>2]=69;r=(c[q>>2]|0)+16|0;c[q>>2]=r;if(((c[j+24>>2]|0)-r|0)<16)fe(j,0);a[s+10>>0]=0;a[s+8>>0]=a[x+46>>0]|0;q=c[(c[k>>2]|0)+64>>2]|0;b[s+4>>1]=c[q+28>>2];b[s+6>>1]=c[q+16>>2];a[s+9>>0]=0;c[s>>2]=c[l>>2];c[l>>2]=s;q=e+16|0;if((c[q>>2]|0)!=40)xf(e,40);Ze(e);if(!g){p=c[v>>2]|0;o=p;p=c[p>>2]|0}else{Af(e,Xe(e,4397,4)|0);o=c[v>>2]|0;p=o+46|0;g=(d[p>>0]|0)+1|0;a[p>>0]=g;p=c[o>>2]|0;c[(c[p+24>>2]|0)+((b[(c[c[(c[o+12>>2]|0)+64>>2]>>2]|0)+((c[o+40>>2]|0)+(g&255)+-1<<1)>>1]|0)*12|0)+4>>2]=c[o+20>>2]}m=p+77|0;a[m>>0]=0;j=c[q>>2]|0;a:do if((j|0)!=41){l=e+24|0;k=j;j=0;b:while(1){switch(k|0){case 280:{u=19;break b}case 288:break;default:{u=20;break b}}g=c[l>>2]|0;Ze(e);Af(e,g);j=j+1|0;if(a[m>>0]|0){t=j;break a}if((c[q>>2]|0)!=44){t=j;break a}Ze(e);k=c[q>>2]|0}if((u|0)==19){Ze(e);a[m>>0]=1;t=j;break}else if((u|0)==20)Ve(e,4418)}else t=0;while(0);k=c[v>>2]|0;g=k+46|0;j=(d[g>>0]|0)+t|0;a[g>>0]=j;if(t|0){n=c[k+20>>2]|0;l=c[(c[k>>2]|0)+24>>2]|0;m=c[c[(c[k+12>>2]|0)+64>>2]>>2]|0;k=(c[k+40>>2]|0)+(j&255)|0;j=t;do{c[l+((b[m+(k-j<<1)>>1]|0)*12|0)+4>>2]=n;j=j+-1|0}while((j|0)!=0)}t=a[o+46>>0]|0;a[p+76>>0]=t;hd(o,t&255);if((c[q>>2]|0)!=41)xf(e,41);Ze(e);c:while(1){k=c[q>>2]|0;switch(k|0){case 277:case 286:case 262:case 261:case 260:break c;default:{}}tf(e);if((k|0)==274){u=31;break}}if((u|0)==31)k=c[q>>2]|0;j=c[e+4>>2]|0;c[(c[x>>2]|0)+68>>2]=j;if((k|0)==262){Ze(e);y=c[(c[v>>2]|0)+8>>2]|0;x=_c(y,37,0,(c[y+36>>2]|0)+-1|0)|0;c[f+16>>2]=-1;c[f+20>>2]=-1;c[f>>2]=11;c[f+8>>2]=x;od(y,f);Bf(e);i=z;return}if((j|0)==(h|0))xf(e,262);else{z=c[w>>2]|0;w=Ue(e,262)|0;x=Ue(e,265)|0;c[y>>2]=w;c[y+4>>2]=x;c[y+8>>2]=h;Ve(e,pf(z,4350,y)|0)}}function Af(d,e){d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;q=i;i=i+32|0;o=q+8|0;n=q;m=c[d+48>>2]|0;p=c[d+64>>2]|0;k=c[m>>2]|0;f=k+60|0;h=c[f>>2]|0;l=m+44|0;if((b[l>>1]|0)<(h|0)){g=h;j=c[k+24>>2]|0}else{g=k+24|0;j=ef(c[d+52>>2]|0,c[g>>2]|0,f,12,32767,4402)|0;c[g>>2]=j;g=c[f>>2]|0}if((h|0)<(g|0)){f=h;do{c[j+(f*12|0)>>2]=0;f=f+1|0}while((f|0)!=(g|0))}f=b[l>>1]|0;c[j+((f<<16>>16)*12|0)>>2]=e;if((a[e+5>>0]&3)!=0?(a[k+5>>0]&4)!=0:0){xe(c[d+52>>2]|0,k,e);e=b[l>>1]|0}else e=f;b[l>>1]=e+1<<16>>16;j=p+4|0;k=c[j>>2]|0;if((k+1-(c[m+40>>2]|0)|0)>200){g=m+12|0;h=c[(c[g>>2]|0)+52>>2]|0;f=c[(c[m>>2]|0)+64>>2]|0;if(!f){l=4208;c[o>>2]=4402;m=o+4|0;c[m>>2]=200;m=o+8|0;c[m>>2]=l;m=pf(h,4222,o)|0;l=c[g>>2]|0;Ve(l,m)}c[n>>2]=f;m=pf(h,4188,n)|0;c[o>>2]=4402;n=o+4|0;c[n>>2]=200;n=o+8|0;c[n>>2]=m;o=pf(h,4222,o)|0;n=c[g>>2]|0;Ve(n,o)}f=p+8|0;if((k+2|0)>(c[f>>2]|0)){o=ef(c[d+52>>2]|0,c[p>>2]|0,f,2,2147483645,4402)|0;c[p>>2]=o;d=c[j>>2]|0;p=o;o=d+1|0;c[j>>2]=o;d=p+(d<<1)|0;b[d>>1]=e;i=q;return}else{d=k;p=c[p>>2]|0;o=d+1|0;c[j>>2]=o;d=p+(d<<1)|0;b[d>>1]=e;i=q;return}}function Bf(a){a=a|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0;g=c[a+52>>2]|0;h=a+48|0;i=c[h>>2]|0;j=c[i>>2]|0;ad(i,0,0);Cf(i);f=i+20|0;e=c[f>>2]|0;if((e+1|0)>>>0>1073741823)ff(g);l=j+12|0;k=j+48|0;c[l>>2]=gf(g,c[l>>2]|0,c[k>>2]<<2,e<<2)|0;e=c[f>>2]|0;c[k>>2]=e;if((e+1|0)>>>0>1073741823)ff(g);k=j+20|0;l=j+52|0;c[k>>2]=gf(g,c[k>>2]|0,c[l>>2]<<2,e<<2)|0;c[l>>2]=c[f>>2];e=i+32|0;f=c[e>>2]|0;if((f+1|0)>>>0>268435455)ff(g);k=j+8|0;l=j+44|0;c[k>>2]=gf(g,c[k>>2]|0,c[l>>2]<<4,f<<4)|0;c[l>>2]=c[e>>2];e=i+36|0;f=c[e>>2]|0;if((f+1|0)>>>0>1073741823)ff(g);k=j+16|0;l=j+56|0;c[k>>2]=gf(g,c[k>>2]|0,c[l>>2]<<2,f<<2)|0;c[l>>2]=c[e>>2];e=i+44|0;f=b[e>>1]|0;if((f+1|0)>>>0>357913941)ff(g);l=j+24|0;k=j+60|0;c[l>>2]=gf(g,c[l>>2]|0,(c[k>>2]|0)*12|0,f*12|0)|0;f=c[e>>2]|0;c[k>>2]=f<<16>>16;k=j+28|0;l=j+40|0;c[k>>2]=gf(g,c[k>>2]|0,c[l>>2]<<3,f>>>24<<3)|0;c[l>>2]=d[i+47>>0];c[h>>2]=c[i+8>>2];if((c[a+16>>2]&-2|0)==288){l=c[a+24>>2]|0;Xe(a,l+16|0,c[l+12>>2]|0)|0}l=g+8|0;c[l>>2]=(c[l>>2]|0)+-16;if((c[(c[g+12>>2]|0)+12>>2]|0)<=0)return;Se(g);return}function Cf(e){e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0;w=i;i=i+16|0;u=w;r=e+16|0;s=c[r>>2]|0;v=e+12|0;t=c[v>>2]|0;if(c[s>>2]|0?a[s+9>>0]|0:0){q=Zc(e)|0;ed(e,q,d[s+8>>0]|0);dd(e,q)}a:do if(a[s+10>>0]|0){f=t+52|0;n=_f(c[f>>2]|0,4443)|0;m=t+64|0;k=c[m>>2]|0;g=k+24|0;j=t+48|0;l=c[j>>2]|0;o=c[l+20>>2]|0;p=k+28|0;q=c[p>>2]|0;h=k+32|0;if((q|0)<(c[h>>2]|0)){h=c[g>>2]|0;g=l;f=q}else{h=ef(c[f>>2]|0,c[g>>2]|0,h,16,32767,4449)|0;c[g>>2]=h;g=c[j>>2]|0;f=c[p>>2]|0;k=c[m>>2]|0}c[h+(q<<4)>>2]=n;c[h+(q<<4)+8>>2]=0;a[h+(q<<4)+12>>0]=a[g+46>>0]|0;c[h+(q<<4)+4>>2]=o;c[p>>2]=f+1;j=(c[k+24>>2]|0)+(q<<4)|0;f=b[(c[g+16>>2]|0)+6>>1]|0;h=k+16|0;if((f|0)<(c[h>>2]|0)){g=k+12|0;do{while(1){if(!(Wf(c[(c[g>>2]|0)+(f<<4)>>2]|0,c[j>>2]|0)|0))break;Df(t,f,j);if((f|0)>=(c[h>>2]|0))break a}f=f+1|0}while((f|0)<(c[h>>2]|0))}}while(0);o=c[s>>2]|0;c[r>>2]=o;p=s+8|0;f=a[p>>0]|0;n=e+46|0;g=a[n>>0]|0;h=g&255;r=(c[(c[v>>2]|0)+64>>2]|0)+4|0;c[r>>2]=(f&255)-h+(c[r>>2]|0);if((f&255)<(g&255)){j=c[e+20>>2]|0;m=c[e+40>>2]|0;k=c[(c[e>>2]|0)+24>>2]|0;l=c[c[(c[v>>2]|0)+64>>2]>>2]|0;g=h;while(1){r=(g&255)+-1<<24>>24;c[k+((b[l+((r&255)+m<<1)>>1]|0)*12|0)+8>>2]=j;if((r&255)>(f&255))g=g+-1|0;else break}a[n>>0]=f}else f=g;a[e+48>>0]=f;l=c[s+4>>2]|0;f=c[t+64>>2]|0;c[f+28>>2]=l<<16>>16;l=l>>16;if(!o){if((l|0)>=(c[f+16>>2]|0)){i=w;return}f=c[f+12>>2]|0;g=c[f+(l<<4)>>2]|0;h=c[g+4>>2]|0;if((h&255)<<24>>24!=4){s=4552;r=t+52|0;r=c[r>>2]|0;q=g+16|0;o=f+(l<<4)+8|0;o=c[o>>2]|0;c[u>>2]=q;q=u+4|0;c[q>>2]=o;s=pf(r,s,u)|0;Ef(t,s)}s=h&16711680|0?4518:4552;r=t+52|0;r=c[r>>2]|0;q=g+16|0;o=f+(l<<4)+8|0;o=c[o>>2]|0;c[u>>2]=q;q=u+4|0;c[q>>2]=o;u=pf(r,s,u)|0;Ef(t,u)}f=c[(c[v>>2]|0)+64>>2]|0;n=f+16|0;if((l|0)>=(c[n>>2]|0)){i=w;return}m=f+12|0;do{g=c[m>>2]|0;k=g+(l<<4)+12|0;h=b[p>>1]|0;f=h&255;j=h&255;if((d[k>>0]|0)>(f&255)){if((h&65535)>=256){ed(e,c[g+(l<<4)+4>>2]|0,j);f=a[p>>0]|0}a[k>>0]=f}l=((Ff(c[v>>2]|0,l)|0)==0&1)+l|0}while((l|0)<(c[n>>2]|0));i=w;return}function Df(e,f,g){e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;o=i;i=i+16|0;m=o;h=c[e+48>>2]|0;j=c[e+64>>2]|0;n=j+12|0;k=c[n>>2]|0;l=a[k+(f<<4)+12>>0]|0;if((l&255)<(d[g+12>>0]|0)){p=c[e+52>>2]|0;q=c[k+(f<<4)+8>>2]|0;l=(c[(c[(c[h>>2]|0)+24>>2]|0)+((b[(c[c[(c[h+12>>2]|0)+64>>2]>>2]|0)+((c[h+40>>2]|0)+(l&255)<<1)>>1]|0)*12|0)>>2]|0)+16|0;c[m>>2]=(c[k+(f<<4)>>2]|0)+16;c[m+4>>2]=q;c[m+8>>2]=l;Ef(e,pf(p,4462,m)|0)}cd(h,c[k+(f<<4)+4>>2]|0,c[g+4>>2]|0);j=j+16|0;h=(c[j>>2]|0)+-1|0;if((h|0)<=(f|0)){q=h;c[j>>2]=q;i=o;return}do{q=c[n>>2]|0;h=q+(f<<4)|0;f=f+1|0;q=q+(f<<4)|0;c[h>>2]=c[q>>2];c[h+4>>2]=c[q+4>>2];c[h+8>>2]=c[q+8>>2];c[h+12>>2]=c[q+12>>2];h=(c[j>>2]|0)+-1|0}while((f|0)<(h|0));c[j>>2]=h;i=o;return}function Ef(a,b){a=a|0;b=b|0;c[a+16>>2]=0;Ve(a,b)}function Ff(e,f){e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;l=e+48|0;n=c[(c[l>>2]|0)+16>>2]|0;g=c[e+64>>2]|0;o=c[g+12>>2]|0;p=n+4|0;h=b[p>>1]|0;m=g+28|0;if((h|0)>=(c[m>>2]|0)){q=0;return q|0}j=g+24|0;k=o+(f<<4)|0;g=h;while(1){h=c[j>>2]|0;i=h+(g<<4)|0;if(Wf(c[i>>2]|0,c[k>>2]|0)|0)break;g=g+1|0;if((g|0)>=(c[m>>2]|0)){g=0;q=10;break}}if((q|0)==10)return g|0;g=a[h+(g<<4)+12>>0]|0;do if((d[o+(f<<4)+12>>0]|0)>(g&255)){if((a[n+9>>0]|0)==0?(c[m>>2]|0)<=(b[p>>1]|0):0)break;ed(c[l>>2]|0,c[o+(f<<4)+4>>2]|0,g&255)}while(0);Df(e,f,i);q=1;return q|0}function Gf(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0;n=i;i=i+48|0;f=n+24|0;m=n;h=a+48|0;j=c[h>>2]|0;e=a+4|0;k=c[e>>2]|0;l=a+16|0;a:do switch(c[l>>2]|0){case 40:{Ze(a);vf(a,b,0)|0;if((c[l>>2]|0)==41){Ze(a);nd(c[h>>2]|0,b);d=a+24|0;break a}if((c[e>>2]|0)==(k|0))xf(a,41);else{g=c[a+52>>2]|0;o=Ue(a,41)|0;e=Ue(a,40)|0;c[f>>2]=o;c[f+4>>2]=e;c[f+8>>2]=k;Ve(a,pf(g,4350,f)|0)}break}case 288:{d=a+24|0;e=c[d>>2]|0;Ze(a);f=c[h>>2]|0;if(!(Hf(f,e,b,1)|0)){Hf(f,c[a+72>>2]|0,b,1)|0;o=id(c[h>>2]|0,e)|0;c[m+16>>2]=-1;c[m+20>>2]=-1;c[m>>2]=4;c[m+8>>2]=o;Ad(f,b,m)}break}default:Ve(a,4596)}while(0);e=m+16|0;f=m+20|0;g=m+8|0;b:while(1)switch(c[l>>2]|0){case 46:{If(a,b);continue b}case 91:{sd(j,b);Ze(a);vf(a,m,0)|0;td(c[h>>2]|0,m);if((c[l>>2]|0)!=93){d=14;break b}Ze(a);Ad(j,b,m);continue b}case 58:{Ze(a);if((c[l>>2]|0)!=288){d=17;break b}o=c[d>>2]|0;Ze(a);o=id(c[h>>2]|0,o)|0;c[e>>2]=-1;c[f>>2]=-1;c[m>>2]=4;c[g>>2]=o;wd(j,b,m);Jf(a,b,k);continue b}case 123:case 289:case 40:{od(j,b);Jf(a,b,k);continue b}default:{d=20;break b}}if((d|0)==14)xf(a,93);else if((d|0)==17)xf(a,288);else if((d|0)==20){i=n;return}}function Hf(e,f,g,h){e=e|0;f=f|0;g=g|0;h=h|0;var i=0,j=0,k=0,l=0,m=0,n=0;if(!e){n=0;return n|0}k=e+12|0;l=e+40|0;j=d[e+46>>0]|0;while(1){m=j+-1|0;i=c[e>>2]|0;if((j|0)<=0)break;if(!(Wf(f,c[(c[i+24>>2]|0)+((b[(c[c[(c[k>>2]|0)+64>>2]>>2]|0)+((c[l>>2]|0)+m<<1)>>1]|0)*12|0)>>2]|0)|0))j=m;else{i=m;n=5;break}}if((n|0)==5){c[g+16>>2]=-1;c[g+20>>2]=-1;c[g>>2]=7;c[g+8>>2]=i;if(h|0){n=7;return n|0}i=e+16|0;do i=c[i>>2]|0;while((d[i+8>>0]|0)>=(j|0));a[i+9>>0]=1;n=7;return n|0}j=c[i+28>>2]|0;k=e+47|0;a:do if(a[k>>0]|0){i=0;while(1){if(Wf(c[j+(i<<3)>>2]|0,f)|0)break;i=i+1|0;if((i|0)>=(d[k>>0]|0)){n=13;break a}}if((i|0)<0)n=13}else n=13;while(0);do if((n|0)==13)if(!(Hf(c[e+8>>2]|0,f,g,0)|0)){n=0;return n|0}else{i=sf(e,f,g)|0;break}while(0);c[g+16>>2]=-1;c[g+20>>2]=-1;c[g>>2]=8;c[g+8>>2]=i;n=8;return n|0}function If(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0;g=i;i=i+32|0;f=g;d=a+48|0;e=c[d>>2]|0;sd(e,b);Ze(a);if((c[a+16>>2]|0)==288){h=c[a+24>>2]|0;Ze(a);a=id(c[d>>2]|0,h)|0;c[f+16>>2]=-1;c[f+20>>2]=-1;c[f>>2]=4;c[f+8>>2]=a;Ad(e,b,f);i=g;return}else xf(a,288)}function Jf(b,e,f){b=b|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0;m=i;i=i+48|0;j=m+24|0;l=m;g=b+48|0;k=c[g>>2]|0;h=b+16|0;switch(c[h>>2]|0){case 40:{Ze(b);if((c[h>>2]|0)!=41){vf(b,l,0)|0;if((c[h>>2]|0)==44)do{Ze(b);od(c[g>>2]|0,l);vf(b,l,0)|0}while((c[h>>2]|0)==44);ld(k,l,-1);if((c[h>>2]|0)!=41)if((c[b+4>>2]|0)==(f|0))xf(b,41);else{h=c[b+52>>2]|0;n=Ue(b,41)|0;g=Ue(b,40)|0;c[j>>2]=n;c[j+4>>2]=g;c[j+8>>2]=f;Ve(b,pf(h,4350,j)|0)}}else c[l>>2]=0;Ze(b);break}case 123:{wf(b,l);break}case 289:{n=id(k,c[b+24>>2]|0)|0;c[l+16>>2]=-1;c[l+20>>2]=-1;c[l>>2]=4;c[l+8>>2]=n;Ze(b);break}default:Ve(b,4614)}g=e+8|0;h=c[g>>2]|0;switch(c[l>>2]|0){case 0:break;case 13:case 12:{n=0;n=Yc(k,29,h,n,2)|0;l=e+16|0;c[l>>2]=-1;l=e+20|0;c[l>>2]=-1;c[e>>2]=12;c[g>>2]=n;Gd(k,f);f=h+1|0;f=f&255;n=k+48|0;a[n>>0]=f;i=m;return}default:od(k,l)}n=(d[k+48>>0]|0)-h|0;n=Yc(k,29,h,n,2)|0;l=e+16|0;c[l>>2]=-1;l=e+20|0;c[l>>2]=-1;c[e>>2]=12;c[g>>2]=n;Gd(k,f);f=h+1|0;f=f&255;n=k+48|0;a[n>>0]=f;i=m;return}function Kf(e,f,g,h,j){e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;u=i;i=i+32|0;r=u+12|0;m=u;o=e+48|0;s=c[o>>2]|0;l=s+46|0;t=(d[l>>0]|0)+3|0;a[l>>0]=t;n=c[s+20>>2]|0;k=s+12|0;p=c[(c[s>>2]|0)+24>>2]|0;q=c[c[(c[k>>2]|0)+64>>2]>>2]|0;t=(c[s+40>>2]|0)+(t&255)|0;c[p+((b[q+(t+-3<<1)>>1]|0)*12|0)+4>>2]=n;c[p+((b[q+(t+-2<<1)>>1]|0)*12|0)+4>>2]=n;c[p+((b[q+(t+-1<<1)>>1]|0)*12|0)+4>>2]=n;t=e+16|0;if((c[t>>2]|0)!=259)xf(e,259);Ze(e);p=(j|0)!=0;if(p)q=_c(s,33,f,131070)|0;else q=Zc(s)|0;a[m+10>>0]=0;a[m+8>>0]=a[l>>0]|0;k=c[(c[k>>2]|0)+64>>2]|0;b[m+4>>1]=c[k+28>>2];b[m+6>>1]=c[k+16>>2];a[m+9>>0]=0;k=s+16|0;c[m>>2]=c[k>>2];c[k>>2]=m;k=c[o>>2]|0;n=k+46|0;j=(d[n>>0]|0)+h|0;a[n>>0]=j;if(h|0){n=c[k+20>>2]|0;l=c[(c[k>>2]|0)+24>>2]|0;m=c[c[(c[k+12>>2]|0)+64>>2]>>2]|0;k=(c[k+40>>2]|0)+(j&255)|0;j=h;do{c[l+((b[m+(k-j<<1)>>1]|0)*12|0)+4>>2]=n;j=j+-1|0}while((j|0)!=0)}hd(s,h);k=c[o>>2]|0;a[r+10>>0]=0;a[r+8>>0]=a[k+46>>0]|0;o=c[(c[k+12>>2]|0)+64>>2]|0;b[r+4>>1]=c[o+28>>2];b[r+6>>1]=c[o+16>>2];a[r+9>>0]=0;o=k+16|0;c[r>>2]=c[o>>2];c[o>>2]=r;a:do{j=c[t>>2]|0;switch(j|0){case 277:case 286:case 262:case 261:case 260:break a;default:{}}tf(e)}while((j|0)!=274);Cf(k);Cf(s);dd(s,q);if(p){e=_c(s,32,f,131070)|0;h=q+1|0;cd(s,e,h);Gd(s,g);i=u;return}else{Yc(s,34,f,0,h)|0;Gd(s,g);e=_c(s,35,f+2|0,131070)|0;h=q+1|0;cd(s,e,h);Gd(s,g);i=u;return}}function Lf(f,g,h){f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0;F=i;i=i+80|0;B=F+64|0;A=F+56|0;E=F+32|0;z=F;D=g+8|0;if(((c[D>>2]|0)+-7|0)>>>0>=3)Ve(f,4808);k=f+16|0;a:do switch(c[k>>2]|0){case 44:{Ze(f);c[z>>2]=g;w=z+8|0;Gf(f,w);l=c[w>>2]|0;y=f+48|0;if((l|0)!=9){x=c[y>>2]|0;t=a[x+48>>0]|0;u=t&255;v=z+16|0;n=t&255;s=c[v>>2]|0;if((l|0)==7){j=0;do{if((c[g+8>>2]|0)==9){l=g+16|0;k=l+3|0;if((a[k>>0]|0)==7?(r=l+2|0,(d[r>>0]|0)==(s|0)):0){a[k>>0]=7;a[r>>0]=t;j=1}if((b[l>>1]|0)==(s|0)){b[l>>1]=n;j=1}}g=c[g>>2]|0}while((g|0)!=0)}else{k=g;j=0;do{if(((c[k+8>>2]|0)==9?(o=k+16|0,p=o+3|0,(d[p>>0]|0)==(l|0)):0)?(q=o+2|0,(d[q>>0]|0)==(s|0)):0){a[p>>0]=7;a[q>>0]=t;j=1}k=c[k>>2]|0}while((k|0)!=0)}if(j|0){Yc(x,(c[w>>2]|0)==7?0:5,u,c[v>>2]|0,0)|0;hd(x,1)}}j=c[y>>2]|0;if(((e[(c[f+52>>2]|0)+38>>1]|0)+h|0)<=200){Lf(f,z,h+1|0);C=E;m=y;break a}k=j+12|0;l=c[(c[k>>2]|0)+52>>2]|0;j=c[(c[j>>2]|0)+64>>2]|0;if(!j){f=4208;c[B>>2]=4263;h=B+4|0;c[h>>2]=200;h=B+8|0;c[h>>2]=f;h=pf(l,4222,B)|0;f=c[k>>2]|0;Ve(f,h)}c[A>>2]=j;A=pf(l,4188,A)|0;c[B>>2]=4263;h=B+4|0;c[h>>2]=200;h=B+8|0;c[h>>2]=A;h=pf(l,4222,B)|0;B=c[k>>2]|0;Ve(B,h);break}case 61:{Ze(f);vf(f,E,0)|0;m=f+48|0;if((c[k>>2]|0)==44){j=1;do{Ze(f);od(c[m>>2]|0,E);vf(f,E,0)|0;j=j+1|0}while((c[k>>2]|0)==44)}else j=1;l=c[m>>2]|0;if((j|0)==(h|0)){md(l,E);vd(c[m>>2]|0,D,E);i=F;return}g=h-j|0;switch(c[E>>2]|0){case 13:case 12:{k=g+1|0;k=(k|0)<0?0:k;ld(l,E,k);if((k|0)>1)hd(l,k+-1|0);break}case 0:{n=33;break}default:{od(l,E);n=33}}if((n|0)==33?(g|0)>0:0){C=d[l+48>>0]|0;hd(l,g);Wc(l,C,g)}if((j|0)>(h|0)){C=(c[m>>2]|0)+48|0;a[C>>0]=g+(d[C>>0]|0);C=E}else C=E;break}default:xf(f,61)}while(0);h=c[m>>2]|0;B=(d[h+48>>0]|0)+-1|0;c[E+16>>2]=-1;c[E+20>>2]=-1;c[C>>2]=6;c[E+8>>2]=B;vd(h,D,E);i=F;return}function Mf(a){a=a|0;Nf(c[(c[a+12>>2]|0)+172>>2]|0);return}function Nf(a){a=a|0;var b=0,d=0,e=0,f=0,g=0;d=a+12|0;f=c[d>>2]|0;e=a+28|0;te(a,c[e>>2]|0);Ne(a);d=c[d>>2]|0;gf(a,c[d+24>>2]|0,c[d+32>>2]<<2,0)|0;d=f+144|0;b=f+152|0;c[d>>2]=gf(a,c[d>>2]|0,c[b>>2]|0,0)|0;c[b>>2]=0;b=c[e>>2]|0;if(!b){e=c[f>>2]|0;f=f+4|0;f=c[f>>2]|0;lb[e&31](f,a,400,0)|0;return}c[a+16>>2]=a+72;g=a+84|0;d=c[g>>2]|0;c[g>>2]=0;if(d){b=d;do{g=b;b=c[b+12>>2]|0;gf(a,g,40,0)|0}while((b|0)!=0);b=c[e>>2]|0}gf(a,b,c[a+32>>2]<<4,0)|0;e=c[f>>2]|0;g=f+4|0;g=c[g>>2]|0;lb[e&31](g,a,400,0)|0;return}function Of(d,e){d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0;j=i;i=i+32|0;f=j+8|0;g=j;h=lb[d&31](e,0,8,400)|0;if(!h){h=0;i=j;return h|0}k=h+112|0;c[h>>2]=0;a[h+4>>0]=8;a[h+172>>0]=33;a[h+5>>0]=1;a[h+174>>0]=0;c[h+12>>2]=k;c[h+28>>2]=0;c[h+16>>2]=0;c[h+32>>2]=0;c[h+64>>2]=0;b[h+38>>1]=0;c[h+52>>2]=0;a[h+40>>0]=0;c[h+44>>2]=0;a[h+41>>0]=1;c[h+48>>2]=0;c[h+56>>2]=0;b[h+36>>1]=1;a[h+6>>0]=0;c[h+68>>2]=0;c[k>>2]=d;c[h+116>>2]=e;c[h+284>>2]=h;d=ab(0)|0;c[g>>2]=d;c[f>>2]=h;c[f+4>>2]=g;c[f+8>>2]=12928;c[f+12>>2]=18;c[h+168>>2]=Xf(f,16,d)|0;f=h+224|0;c[h+240>>2]=f;c[h+244>>2]=f;a[h+175>>0]=0;f=h+132|0;c[h+160>>2]=0;c[h+256>>2]=0;c[h+264>>2]=0;c[h+280>>2]=0;c[h+288>>2]=0;c[f>>2]=0;c[f+4>>2]=0;c[f+8>>2]=0;c[f+12>>2]=0;a[h+173>>0]=5;f=h+120|0;d=h+180|0;g=d+40|0;do{c[d>>2]=0;d=d+4|0}while((d|0)<(g|0));c[f>>2]=400;c[h+124>>2]=0;c[h+268>>2]=200;c[h+272>>2]=200;c[h+276>>2]=200;d=h+364|0;g=d+36|0;do{c[d>>2]=0;d=d+4|0}while((d|0)<(g|0));if(!(de(h,24,0)|0)){k=h;i=j;return k|0}Nf(h);k=0;i=j;return k|0}function Pf(b,e){b=b|0;e=e|0;var f=0,g=0,h=0,j=0,k=0;e=i;i=i+16|0;g=e;f=c[b+12>>2]|0;j=gf(b,0,0,640)|0;c[b+28>>2]=j;c[b+32>>2]=40;k=j+8|0;c[k>>2]=0;c[j+24>>2]=0;c[j+40>>2]=0;c[j+56>>2]=0;c[j+72>>2]=0;c[j+88>>2]=0;c[j+104>>2]=0;c[j+120>>2]=0;c[j+136>>2]=0;c[j+152>>2]=0;c[j+168>>2]=0;c[j+184>>2]=0;c[j+200>>2]=0;c[j+216>>2]=0;c[j+232>>2]=0;c[j+248>>2]=0;c[j+264>>2]=0;c[j+280>>2]=0;c[j+296>>2]=0;c[j+312>>2]=0;c[j+328>>2]=0;c[j+344>>2]=0;c[j+360>>2]=0;c[j+376>>2]=0;c[j+392>>2]=0;c[j+408>>2]=0;c[j+424>>2]=0;c[j+440>>2]=0;c[j+456>>2]=0;c[j+472>>2]=0;c[j+488>>2]=0;c[j+504>>2]=0;c[j+520>>2]=0;c[j+536>>2]=0;c[j+552>>2]=0;c[j+568>>2]=0;c[j+584>>2]=0;c[j+600>>2]=0;c[j+616>>2]=0;c[j+632>>2]=0;c[b+24>>2]=j+560;h=b+72|0;c[b+80>>2]=0;c[b+84>>2]=0;a[b+90>>0]=0;c[h>>2]=j;c[b+8>>2]=j+16;c[k>>2]=0;c[b+76>>2]=j+336;c[b+16>>2]=h;h=ig(b)|0;c[f+40>>2]=h;c[f+48>>2]=69;cg(b,h,2,0);c[g>>2]=b;j=g+8|0;c[j>>2]=72;fg(b,h,1,g);c[g>>2]=ig(b)|0;c[j>>2]=69;fg(b,h,2,g);Yf(b,32);ng(b);Te(b);b=Zf(b,4821,17)|0;c[f+180>>2]=b;b=b+5|0;a[b>>0]=d[b>>0]|0|32;a[f+63>>0]=1;c[f+176>>2]=Ab(0)|0;i=e;return}function Qf(d){d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0;e=d+12|0;if((c[(c[e>>2]|0)+12>>2]|0)>0)Se(d);f=Ce(d,8,112,0,0)|0;i=d+8|0;h=c[i>>2]|0;c[h>>2]=f;c[h+8>>2]=72;c[i>>2]=(c[i>>2]|0)+16;c[f+12>>2]=c[e>>2];i=f+28|0;c[i>>2]=0;e=f+16|0;c[e>>2]=0;h=f+32|0;c[h>>2]=0;c[f+64>>2]=0;b[f+38>>1]=0;j=f+52|0;c[j>>2]=0;g=f+40|0;a[g>>0]=0;k=f+44|0;c[k>>2]=0;a[f+41>>0]=1;c[f+56>>2]=0;b[f+36>>1]=1;a[f+6>>0]=0;c[f+68>>2]=0;a[g>>0]=a[d+40>>0]|0;g=c[d+44>>2]|0;c[k>>2]=g;c[j>>2]=c[d+52>>2];c[f+48>>2]=g;g=gf(d,0,0,640)|0;c[i>>2]=g;c[h>>2]=40;h=g+8|0;c[h>>2]=0;c[g+24>>2]=0;c[g+40>>2]=0;c[g+56>>2]=0;c[g+72>>2]=0;c[g+88>>2]=0;c[g+104>>2]=0;c[g+120>>2]=0;c[g+136>>2]=0;c[g+152>>2]=0;c[g+168>>2]=0;c[g+184>>2]=0;c[g+200>>2]=0;c[g+216>>2]=0;c[g+232>>2]=0;c[g+248>>2]=0;c[g+264>>2]=0;c[g+280>>2]=0;c[g+296>>2]=0;c[g+312>>2]=0;c[g+328>>2]=0;c[g+344>>2]=0;c[g+360>>2]=0;c[g+376>>2]=0;c[g+392>>2]=0;c[g+408>>2]=0;c[g+424>>2]=0;c[g+440>>2]=0;c[g+456>>2]=0;c[g+472>>2]=0;c[g+488>>2]=0;c[g+504>>2]=0;c[g+520>>2]=0;c[g+536>>2]=0;c[g+552>>2]=0;c[g+568>>2]=0;c[g+584>>2]=0;c[g+600>>2]=0;c[g+616>>2]=0;c[g+632>>2]=0;c[f+24>>2]=g+560;d=f+72|0;c[f+80>>2]=0;c[f+84>>2]=0;a[f+90>>0]=0;c[d>>2]=g;c[f+8>>2]=g+16;c[h>>2]=0;c[f+76>>2]=g+336;c[e>>2]=d;return f|0}function Rf(a,b){a=a|0;b=b|0;var d=0;d=a+12|0;a=a+8|0;c[a>>2]=(c[d>>2]|0)-b+(c[a>>2]|0);c[d>>2]=b;return}function Sf(a){a=a|0;var b=0;b=gf(a,0,0,40)|0;a=c[a+16>>2]|0;c[a+12>>2]=b;c[b+8>>2]=a;c[b+12>>2]=0;return b|0}function Tf(a){a=a|0;var b=0,d=0;d=(c[a+16>>2]|0)+12|0;b=c[d>>2]|0;c[d>>2]=0;if(!b)return;do{d=b;b=c[b+12>>2]|0;gf(a,d,40,0)|0}while((b|0)!=0);return}function Uf(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0;f=b+28|0;te(b,c[f>>2]|0);d=c[f>>2]|0;if(!d){gf(a,b,112,0)|0;return}c[b+16>>2]=b+72;g=b+84|0;e=c[g>>2]|0;c[g>>2]=0;if(e){d=e;do{g=d;d=c[d+12>>2]|0;gf(b,g,40,0)|0}while((d|0)!=0);d=c[f>>2]|0}gf(b,d,c[b+32>>2]<<4,0)|0;gf(a,b,112,0)|0;return}function Vf(a,b){a=a|0;b=b|0;var d=0;d=c[a+12>>2]|0;if((a|0)!=(b|0))if((d|0)==(c[b+12>>2]|0))d=(Qm(a+16|0,b+16|0,d)|0)==0;else d=0;else d=1;return d&1|0}function Wf(b,d){b=b|0;d=d|0;var e=0;e=a[b+4>>0]|0;do if(e<<24>>24==(a[d+4>>0]|0)){if(e<<24>>24==4){e=(b|0)==(d|0);break}e=c[b+12>>2]|0;if((b|0)!=(d|0))if((e|0)==(c[d+12>>2]|0))e=(Qm(b+16|0,d+16|0,e)|0)==0;else e=0;else e=1}else e=0;while(0);return e&1|0}function Xf(a,b,c){a=a|0;b=b|0;c=c|0;var e=0;c=c^b;e=(b>>>5)+1|0;if(e>>>0>b>>>0){a=c;return a|0}do{c=(c<<5)+(c>>>2)+(d[a+(b+-1)>>0]|0)^c;b=b-e|0}while(b>>>0>=e>>>0);return c|0}function Yf(b,e){b=b|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0;k=c[b+12>>2]|0;j=k+24|0;Me(b,-5);k=k+32|0;f=c[k>>2]|0;if((f|0)<(e|0)){if((e+1|0)>>>0>1073741823)ff(b);h=gf(b,c[j>>2]|0,f<<2,e<<2)|0;c[j>>2]=h;f=c[k>>2]|0;if((f|0)<(e|0)?(c[h+(f<<2)>>2]=0,g=f+1|0,(g|0)!=(e|0)):0)do{c[(c[j>>2]|0)+(g<<2)>>2]=0;g=g+1|0}while((g|0)!=(e|0))}if((f|0)>0){f=c[k>>2]|0;h=e+-1|0;i=0;do{l=(c[j>>2]|0)+(i<<2)|0;g=c[l>>2]|0;c[l>>2]=0;if(g|0)do{l=g;g=c[g>>2]|0;m=(c[j>>2]|0)+((c[l+8>>2]&h)<<2)|0;c[l>>2]=c[m>>2];c[m>>2]=l;l=l+5|0;a[l>>0]=(d[l>>0]|0)&191}while((g|0)!=0);i=i+1|0}while((i|0)<(f|0))}if((f|0)<=(e|0)){c[k>>2]=e;return}if((e+1|0)>>>0>1073741823)ff(b);c[j>>2]=gf(b,c[j>>2]|0,f<<2,e<<2)|0;c[k>>2]=e;return}function Zf(b,e,f){b=b|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0;if(f>>>0>=41){if((f+1|0)>>>0>4294967277)ff(b);m=c[(c[b+12>>2]|0)+56>>2]|0;b=Ce(b,20,f+17|0,0,0)|0;c[b+12>>2]=f;c[b+8>>2]=m;a[b+6>>0]=0;m=b+16|0;zn(m|0,e|0,f|0)|0;a[m+f>>0]=0;e=b;return e|0}j=c[b+12>>2]|0;g=c[j+56>>2]^f;i=(f>>>5)+1|0;if(i>>>0<=f>>>0){h=f;do{g=(g<<5)+(g>>>2)+(d[e+(h+-1)>>0]|0)^g;h=h-i|0}while(h>>>0>=i>>>0)}k=j+32|0;l=c[k>>2]|0;m=j+24|0;h=c[m>>2]|0;i=c[h+((l+-1&g)<<2)>>2]|0;a:do if(i|0){while(1){if(((g|0)==(c[i+8>>2]|0)?(c[i+12>>2]|0)==(f|0):0)?(Qm(e,i+16|0,f)|0)==0:0)break;i=c[i>>2]|0;if(!i)break a}g=i+5|0;h=(d[g>>0]|0)^3;if(((d[j+60>>0]|0)^3)&h|0){e=i;return e|0}a[g>>0]=h;e=i;return e|0}while(0);j=j+28|0;if((l|0)<1073741823?(c[j>>2]|0)>>>0>=l>>>0:0){Yf(b,l<<1);i=c[k>>2]|0;h=c[m>>2]|0}else i=l;b=Ce(b,4,f+17|0,h+((i+-1&g)<<2)|0,0)|0;c[b+12>>2]=f;c[b+8>>2]=g;a[b+6>>0]=0;m=b+16|0;zn(m|0,e|0,f|0)|0;a[m+f>>0]=0;c[j>>2]=(c[j>>2]|0)+1;e=b;return e|0}function _f(a,b){a=a|0;b=b|0;return Zf(a,b,Ql(b)|0)|0}function $f(a,b,d){a=a|0;b=b|0;d=d|0;if(b>>>0>4294967269)ff(a);else{a=Ce(a,7,b+24|0,0,0)|0;c[a+16>>2]=b;c[a+8>>2]=0;c[a+12>>2]=d;return a|0}return 0}function ag(a,b,e){a=a|0;b=b|0;e=e|0;var f=0,g=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0.0;q=i;i=i+16|0;m=q+8|0;f=q;p=e+8|0;switch(c[p>>2]|0){case 0:{n=c[b+8>>2]|0;g=-1;break}case 3:{r=+h[e>>3];h[f>>3]=r+6755399441055744.0;f=c[f>>2]|0;if((f|0)>0&+(f|0)==r?(j=c[b+8>>2]|0,(f|0)<=(j|0)):0){n=j;g=f+-1|0}else o=6;break}default:o=6}do if((o|0)==6){f=bg(b,e)|0;while(1){l=f+16|0;k=f+24|0;j=c[k>>2]|0;if((j|0)==(c[p>>2]|0)){if(Ag(0,l,e)|0){o=13;break}j=c[k>>2]|0}if(((j|0)==11?c[p>>2]&64|0:0)?(c[l>>2]|0)==(c[e>>2]|0):0){o=13;break}f=c[f+28>>2]|0;if(!f){o=16;break}}if((o|0)==13){g=c[b+8>>2]|0;n=g;g=(f-(c[b+16>>2]|0)>>5)+g|0;break}else if((o|0)==16)Sd(a,4839,m)}while(0);l=b+12|0;while(1){f=g+1|0;if((f|0)>=(n|0))break;k=c[l>>2]|0;j=k+(f<<4)+8|0;if(!(c[j>>2]|0))g=f;else{o=19;break}}if((o|0)==19){h[e>>3]=+(g+2|0);c[p>>2]=3;b=k+(f<<4)|0;o=c[b+4>>2]|0;p=e+16|0;c[p>>2]=c[b>>2];c[p+4>>2]=o;c[e+24>>2]=c[j>>2];e=1;i=q;return e|0}f=f-n|0;g=1<<(d[b+7>>0]|0);if((f|0)>=(g|0)){e=0;i=q;return e|0}j=b+16|0;k=c[j>>2]|0;while(1){if(c[k+(f<<5)+8>>2]|0)break;f=f+1|0;if((f|0)>=(g|0)){f=0;o=25;break}}if((o|0)==25){i=q;return f|0}o=k+(f<<5)+16|0;b=c[o+4>>2]|0;n=e;c[n>>2]=c[o>>2];c[n+4>>2]=b;c[p>>2]=c[k+(f<<5)+24>>2];p=c[j>>2]|0;n=p+(f<<5)|0;b=c[n+4>>2]|0;o=e+16|0;c[o>>2]=c[n>>2];c[o+4>>2]=b;c[e+24>>2]=c[p+(f<<5)+8>>2];e=1;i=q;return e|0}function bg(b,e){b=b|0;e=e|0;var f=0,g=0,j=0,k=0;j=i;i=i+16|0;f=j;switch(c[e+8>>2]&63|0){case 3:{h[f>>3]=+h[e>>3]+1.0;f=(c[f+4>>2]|0)+(c[f>>2]|0)|0;if((f|0)<0){e=0-f|0;f=(f|0)==(e|0)?0:e}b=(c[b+16>>2]|0)+(((f|0)%((1<<d[b+7>>0])+-1|1|0)|0)<<5)|0;i=j;return b|0}case 20:{f=c[e>>2]|0;g=f+6|0;if(!(a[g>>0]|0)){k=f+8|0;c[k>>2]=Xf(f+16|0,c[f+12>>2]|0,c[k>>2]|0)|0;a[g>>0]=1;f=c[e>>2]|0}k=(c[b+16>>2]|0)+(((1<<d[b+7>>0])+-1&c[f+8>>2])<<5)|0;i=j;return k|0}case 4:{k=(c[b+16>>2]|0)+(((1<<d[b+7>>0])+-1&c[(c[e>>2]|0)+8>>2])<<5)|0;i=j;return k|0}case 1:{k=(c[b+16>>2]|0)+(((1<<d[b+7>>0])+-1&c[e>>2])<<5)|0;i=j;return k|0}case 2:{k=(c[b+16>>2]|0)+((((c[e>>2]|0)>>>0)%(((1<<d[b+7>>0])+-1|1)>>>0)|0)<<5)|0;i=j;return k|0}case 22:{k=(c[b+16>>2]|0)+((((c[e>>2]|0)>>>0)%(((1<<d[b+7>>0])+-1|1)>>>0)|0)<<5)|0;i=j;return k|0}default:{k=(c[b+16>>2]|0)+((((c[e>>2]|0)>>>0)%(((1<<d[b+7>>0])+-1|1)>>>0)|0)<<5)|0;i=j;return k|0}}return 0}function cg(b,e,f,g){b=b|0;e=e|0;f=f|0;g=g|0;var j=0,k=0,l=0,m=0,n=0,o=0.0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0;z=i;i=i+32|0;l=z+16|0;w=z;r=e+8|0;s=c[r>>2]|0;t=e+7|0;x=a[t>>0]|0;u=x&255;v=e+16|0;y=c[v>>2]|0;if((s|0)<(f|0)){if((f+1|0)>>>0>268435455)ff(b);j=e+12|0;k=gf(b,c[j>>2]|0,s<<4,f<<4)|0;c[j>>2]=k;j=c[r>>2]|0;if((j|0)<(f|0))do{c[k+(j<<4)+8>>2]=0;j=j+1|0}while((j|0)!=(f|0));c[r>>2]=f}if(!g){c[v>>2]=12944;g=0;k=12944;j=0}else{m=kf(g)|0;if((m|0)>30)Sd(b,4861,l);j=1<<m;if((j+1|0)>>>0>134217727)ff(b);k=gf(b,0,0,j<<5)|0;c[v>>2]=k;g=0;do{c[k+(g<<5)+28>>2]=0;c[k+(g<<5)+24>>2]=0;c[k+(g<<5)+8>>2]=0;g=g+1|0}while((g|0)<(j|0));g=j;j=m&255}a[t>>0]=j;c[e+20>>2]=k+(g<<5);do if((s|0)>(f|0)){c[r>>2]=f;n=e+12|0;p=w+8|0;q=w+4|0;k=f;while(1){j=c[n>>2]|0;m=j+(k<<4)+8|0;if(!(c[m>>2]|0))j=k+1|0;else{l=j+(k<<4)|0;j=k+1|0;a:do if(k>>>0<(c[r>>2]|0)>>>0){k=l;g=28}else{o=+(j|0);h[w>>3]=o+1.0;k=(c[q>>2]|0)+(c[w>>2]|0)|0;if((k|0)<0){g=0-k|0;k=(k|0)==(g|0)?0:g}k=(c[v>>2]|0)+(((k|0)%((1<<(d[t>>0]|0))+-1|1|0)|0)<<5)|0;while(1){if((c[k+24>>2]|0)==3?+h[k+16>>3]==o:0)break;k=c[k+28>>2]|0;if(!k){g=30;break a}}g=28}while(0);if((g|0)==28){g=0;if((k|0)==12928){o=+(j|0);g=30}}if((g|0)==30){h[w>>3]=o;c[p>>2]=3;k=dg(b,e,w)|0}A=l;g=c[A+4>>2]|0;l=k;c[l>>2]=c[A>>2];c[l+4>>2]=g;c[k+8>>2]=c[m>>2]}if((j|0)==(s|0))break;else k=j}if((f+1|0)>>>0>268435455)ff(b);else{A=e+12|0;c[A>>2]=gf(b,c[A>>2]|0,s<<4,f<<4)|0;break}}while(0);n=1<<u;if(x<<24>>24!=31){l=n;do{m=l;l=l+-1|0;g=y+(l<<5)+8|0;if(c[g>>2]|0){k=y+(l<<5)+16|0;j=eg(e,k)|0;if((j|0)==12928)j=dg(b,e,k)|0;w=y+(l<<5)|0;x=c[w+4>>2]|0;A=j;c[A>>2]=c[w>>2];c[A+4>>2]=x;c[j+8>>2]=c[g>>2]}}while((m|0)>1)}if((y|0)==12944){i=z;return}gf(b,y,n<<5,0)|0;i=z;return}function dg(b,e,f){b=b|0;e=e|0;f=f|0;var g=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0.0;y=i;i=i+144|0;g=y+16|0;v=y;x=y+20|0;w=f+8|0;switch(c[w>>2]|0){case 0:{Sd(b,4876,y+8|0);break}case 3:{m=3;break}default:{}}if((m|0)==3?(z=+h[f>>3],!(z==z&0.0==0.0)):0)Sd(b,4895,g);n=bg(e,f)|0;o=n+8|0;do if((n|0)==12944|(c[o>>2]|0)!=0){l=e+20|0;s=e+16|0;j=c[s>>2]|0;k=c[l>>2]|0;while(1){if(k>>>0<=j>>>0)break;g=k+-32|0;c[l>>2]=g;if(!(c[k+-8>>2]|0)){m=34;break}else k=g}if((m|0)==34){j=bg(e,n+16|0)|0;if((j|0)==(n|0)){x=n+28|0;c[k+-4>>2]=c[x>>2];c[x>>2]=g;break}else k=j;do{j=k+28|0;k=c[j>>2]|0}while((k|0)!=(n|0));c[j>>2]=g;c[g>>2]=c[n>>2];c[g+4>>2]=c[n+4>>2];c[g+8>>2]=c[n+8>>2];c[g+12>>2]=c[n+12>>2];c[g+16>>2]=c[n+16>>2];c[g+20>>2]=c[n+20>>2];c[g+24>>2]=c[n+24>>2];c[g+28>>2]=c[n+28>>2];c[n+28>>2]=0;c[o>>2]=0;g=n;break}g=x;j=g+124|0;do{c[g>>2]=0;g=g+4|0}while((g|0)<(j|0));o=e+12|0;p=c[e+8>>2]|0;g=0;j=1;q=0;r=1;while(1){if((r|0)>(p|0))if((j|0)>(p|0)){r=g;break}else n=p;else n=r;if((j|0)>(n|0)){k=j;j=0}else{m=c[o>>2]|0;l=j;j=0;while(1){j=((c[m+(l+-1<<4)+8>>2]|0)!=0&1)+j|0;k=l+1|0;if((l|0)<(n|0))l=k;else break}}n=x+(q<<2)|0;c[n>>2]=(c[n>>2]|0)+j;g=j+g|0;q=q+1|0;if((q|0)>=31){r=g;break}else{j=k;r=r<<1}}g=0;j=1<<(d[e+7>>0]|0);l=0;a:while(1){k=j;while(1){j=k+-1|0;if(!k){q=l;break a}k=c[s>>2]|0;if(!(c[k+(j<<5)+8>>2]|0))k=j;else break}if((c[k+(j<<5)+24>>2]|0)==3?(z=+h[k+(j<<5)+16>>3],h[v>>3]=z+6755399441055744.0,t=c[v>>2]|0,+(t|0)==z&(t+-1|0)>>>0<1073741824):0){k=x+((kf(t)|0)<<2)|0;c[k>>2]=(c[k>>2]|0)+1;k=1}else k=0;g=k+g|0;l=l+1|0}j=g+r|0;if((c[w>>2]|0)==3?(z=+h[f>>3],h[v>>3]=z+6755399441055744.0,u=c[v>>2]|0,+(u|0)==z&(u+-1|0)>>>0<1073741824):0){g=x+((kf(u)|0)<<2)|0;c[g>>2]=(c[g>>2]|0)+1;g=1}else g=0;n=j+g|0;b:do if((n|0)>0){l=0;m=0;o=0;j=0;g=0;p=1;while(1){k=c[x+(o<<2)>>2]|0;if((k|0)>0){w=k+m|0;v=(w|0)>(l|0);k=w;j=v?p:j;g=v?w:g}else k=m;if((k|0)==(n|0))break b;if((p|0)<(n|0)){l=p;m=k;o=o+1|0;p=p<<1}else break}}else{j=0;g=0}while(0);cg(b,e,j,r+1+q-g|0);g=eg(e,f)|0;if((g|0)!=12928){e=g;i=y;return e|0}e=dg(b,e,f)|0;i=y;return e|0}else g=n;while(0);u=f;v=c[u+4>>2]|0;x=g+16|0;c[x>>2]=c[u>>2];c[x+4>>2]=v;c[g+24>>2]=c[w>>2];if((c[w>>2]&64|0?a[(c[f>>2]|0)+5>>0]&3:0)?a[e+5>>0]&4:0)ze(b,e);e=g;i=y;return e|0}function eg(a,b){a=a|0;b=b|0;var e=0,f=0,g=0,j=0,k=0,l=0.0,m=0,n=0,o=0,p=0,q=0.0;p=i;i=i+16|0;k=p;f=b+8|0;switch(c[f>>2]&63|0){case 4:{f=c[b>>2]|0;e=(c[a+16>>2]|0)+(((1<<(d[a+7>>0]|0))+-1&c[f+8>>2])<<5)|0;while(1){if((c[e+24>>2]|0)==68?(c[e+16>>2]|0)==(f|0):0){g=e;break}e=c[e+28>>2]|0;if(!e){n=12928;o=22;break}}if((o|0)==22){i=p;return n|0}o=g;i=p;return o|0}case 3:{q=+h[b>>3];h[k>>3]=q+6755399441055744.0;e=c[k>>2]|0;l=+(e|0);if(l==q){e=e+-1|0;if(e>>>0<(c[a+8>>2]|0)>>>0){o=(c[a+12>>2]|0)+(e<<4)|0;i=p;return o|0}h[k>>3]=l+1.0;e=(c[k+4>>2]|0)+(c[k>>2]|0)|0;if((e|0)<0){k=0-e|0;e=(e|0)==(k|0)?0:k}e=(c[a+16>>2]|0)+(((e|0)%((1<<(d[a+7>>0]|0))+-1|1|0)|0)<<5)|0;while(1){if((c[e+24>>2]|0)==3?+h[e+16>>3]==l:0){m=e;break}e=c[e+28>>2]|0;if(!e){n=12928;o=22;break}}if((o|0)==22){i=p;return n|0}o=m;i=p;return o|0}break}case 0:{o=12928;i=p;return o|0}default:{}}e=bg(a,b)|0;while(1){if((c[e+24>>2]|0)==(c[f>>2]|0)?Ag(0,e+16|0,b)|0:0){j=e;break}e=c[e+28>>2]|0;if(!e){n=12928;o=22;break}}if((o|0)==22){i=p;return n|0}o=j;i=p;return o|0}function fg(a,b,e,f){a=a|0;b=b|0;e=e|0;f=f|0;var g=0,j=0.0,k=0,l=0,m=0;m=i;i=i+16|0;l=m;g=e+-1|0;a:do if(g>>>0<(c[b+8>>2]|0)>>>0){g=(c[b+12>>2]|0)+(g<<4)|0;k=10}else{j=+(e|0);h[l>>3]=j+1.0;g=(c[l+4>>2]|0)+(c[l>>2]|0)|0;if((g|0)<0){k=0-g|0;g=(g|0)==(k|0)?0:k}g=(c[b+16>>2]|0)+(((g|0)%((1<<(d[b+7>>0]|0))+-1|1|0)|0)<<5)|0;while(1){if((c[g+24>>2]|0)==3?+h[g+16>>3]==j:0)break;g=c[g+28>>2]|0;if(!g){k=12;break a}}k=10}while(0);if((k|0)==10)if((g|0)==12928){j=+(e|0);k=12}if((k|0)==12){h[l>>3]=j;c[l+8>>2]=3;g=dg(a,b,l)|0}a=f;b=c[a+4>>2]|0;l=g;c[l>>2]=c[a>>2];c[l+4>>2]=b;c[g+8>>2]=c[f+8>>2];i=m;return}function gg(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=eg(b,c)|0;if((d|0)!=12928){b=d;return b|0}b=dg(a,b,c)|0;return b|0}function hg(a,b,e){a=a|0;b=b|0;e=e|0;var f=0;if((c[b+16>>2]|0)==12944)f=0;else f=1<<(d[b+7>>0]|0);cg(a,b,e,f);return}function ig(b){b=b|0;b=Ce(b,5,32,0,0)|0;c[b+24>>2]=0;a[b+6>>0]=-1;c[b+12>>2]=0;c[b+8>>2]=0;c[b+16>>2]=12944;a[b+7>>0]=0;c[b+20>>2]=12944;return b|0}function jg(a,b){a=a|0;b=b|0;var e=0;e=c[b+16>>2]|0;if((e|0)!=12944)gf(a,e,32<<(d[b+7>>0]|0),0)|0;gf(a,c[b+12>>2]|0,c[b+8>>2]<<4,0)|0;gf(a,b,32,0)|0;return}function kg(a,b){a=a|0;b=b|0;var e=0,f=0,g=0.0,j=0,k=0;k=i;i=i+16|0;f=k;e=b+-1|0;if(e>>>0<(c[a+8>>2]|0)>>>0){j=(c[a+12>>2]|0)+(e<<4)|0;i=k;return j|0}g=+(b|0);h[f>>3]=g+1.0;e=(c[f+4>>2]|0)+(c[f>>2]|0)|0;if((e|0)<0){f=0-e|0;e=(e|0)==(f|0)?0:f}e=(c[a+16>>2]|0)+(((e|0)%((1<<(d[a+7>>0]|0))+-1|1|0)|0)<<5)|0;while(1){if((c[e+24>>2]|0)==3?+h[e+16>>3]==g:0)break;e=c[e+28>>2]|0;if(!e){e=12928;j=10;break}}if((j|0)==10){i=k;return e|0}j=e;i=k;return j|0}function lg(a,b){a=a|0;b=b|0;var e=0;a=(c[a+16>>2]|0)+(((1<<(d[a+7>>0]|0))+-1&c[b+8>>2])<<5)|0;while(1){if((c[a+24>>2]|0)==68?(c[a+16>>2]|0)==(b|0):0)break;a=c[a+28>>2]|0;if(!a){a=12928;e=6;break}}if((e|0)==6)return a|0;e=a;return e|0}function mg(a){a=a|0;var b=0,e=0,f=0.0,g=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;q=i;i=i+16|0;p=q;k=a+8|0;b=c[k>>2]|0;if(b|0?(e=c[a+12>>2]|0,(c[e+(b+-1<<4)+8>>2]|0)==0):0){if(b>>>0>1)a=0;else{p=0;i=q;return p|0}do{p=(a+b|0)>>>1;o=(c[e+(p+-1<<4)+8>>2]|0)==0;b=o?p:b;a=o?a:p}while((b-a|0)>>>0>1);i=q;return a|0}n=a+16|0;if((c[n>>2]|0)==12944){p=b;i=q;return p|0}o=a+12|0;m=a+7|0;j=p+4|0;g=b+1|0;a=b;while(1){e=g+-1|0;a:do if(e>>>0<b>>>0)e=(c[o>>2]|0)+(e<<4)|0;else{f=+(g|0);h[p>>3]=f+1.0;e=(c[j>>2]|0)+(c[p>>2]|0)|0;if((e|0)<0){r=0-e|0;e=(e|0)==(r|0)?0:r}e=(c[n>>2]|0)+(((e|0)%((1<<(d[m>>0]|0))+-1|1|0)|0)<<5)|0;while(1){if((c[e+24>>2]|0)==3?+h[e+16>>3]==f:0)break;e=c[e+28>>2]|0;if(!e){e=12928;break a}}}while(0);if(!(c[e+8>>2]|0)){b=g;break}a=g<<1;if(a>>>0>2147483645){l=20;break}else{r=g;g=a;a=r}}if((l|0)==20){e=c[k>>2]|0;g=p+4|0;j=1;while(1){a=j+-1|0;b:do if(a>>>0<e>>>0)b=(c[o>>2]|0)+(a<<4)|0;else{f=+(j|0);h[p>>3]=f+1.0;b=(c[g>>2]|0)+(c[p>>2]|0)|0;if((b|0)<0){r=0-b|0;b=(b|0)==(r|0)?0:r}b=(c[n>>2]|0)+(((b|0)%((1<<(d[m>>0]|0))+-1|1|0)|0)<<5)|0;while(1){if((c[b+24>>2]|0)==3?+h[b+16>>3]==f:0)break;b=c[b+28>>2]|0;if(!b){b=12928;break b}}}while(0);if(!(c[b+8>>2]|0))break;else j=j+1|0}i=q;return a|0}if((b-a|0)>>>0<=1){r=a;i=q;return r|0}j=c[k>>2]|0;k=p+4|0;g=b;do{e=(g+a|0)>>>1;b=e+-1|0;c:do if(b>>>0<j>>>0)b=(c[o>>2]|0)+(b<<4)|0;else{f=+(e|0);h[p>>3]=f+1.0;b=(c[k>>2]|0)+(c[p>>2]|0)|0;if((b|0)<0){r=0-b|0;b=(b|0)==(r|0)?0:r}b=(c[n>>2]|0)+(((b|0)%((1<<(d[m>>0]|0))+-1|1|0)|0)<<5)|0;while(1){if((c[b+24>>2]|0)==3?+h[b+16>>3]==f:0)break;b=c[b+28>>2]|0;if(!b){b=12928;break c}}}while(0);r=(c[b+8>>2]|0)==0;g=r?e:g;a=r?a:e}while((g-a|0)>>>0>1);i=q;return a|0}function ng(b){b=b|0;var e=0,f=0,g=0;e=b+12|0;f=0;do{g=_f(b,c[196+(f<<2)>>2]|0)|0;c[(c[e>>2]|0)+184+(f<<2)>>2]=g;g=(c[(c[e>>2]|0)+184+(f<<2)>>2]|0)+5|0;a[g>>0]=d[g>>0]|0|32;f=f+1|0}while((f|0)!=17);return}function og(b,e,f){b=b|0;e=e|0;f=f|0;f=lg(b,f)|0;if(c[f+8>>2]|0){b=f;return b|0}b=b+6|0;a[b>>0]=d[b>>0]|0|1<<e;b=0;return b|0}function pg(a,b,d){a=a|0;b=b|0;d=d|0;var e=0;e=c[b+8>>2]&15;switch(e|0){case 5:{e=(c[b>>2]|0)+24|0;break}case 7:{e=(c[b>>2]|0)+8|0;break}default:e=(c[a+12>>2]|0)+252+(e<<2)|0}e=c[e>>2]|0;if(!e){d=12928;return d|0}d=lg(e,c[(c[a+12>>2]|0)+184+(d<<2)>>2]|0)|0;return d|0}function qg(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0;k=i;i=i+64|0;g=k+16|0;h=k+34|0;j=k;switch(a[f>>0]|0){case 61:case 64:{c[j+12>>2]=f+1;break}case 27:{c[j+12>>2]=5056;break}default:c[j+12>>2]=f}c[j>>2]=b;c[j+4>>2]=d;c[j+8>>2]=e;c[g>>2]=1635077147;a[g+4>>0]=82;a[g+5>>0]=0;a[g+6>>0]=1;a[g+7>>0]=4;a[g+8>>0]=4;a[g+9>>0]=4;a[g+10>>0]=8;f=g+12|0;a[g+11>>0]=0;a[f>>0]=a[5070]|0;a[f+1>>0]=a[5071]|0;a[f+2>>0]=a[5072]|0;a[f+3>>0]=a[5073]|0;a[f+4>>0]=a[5074]|0;a[f+5>>0]=a[5075]|0;a[h>>0]=27;if(Ig(d,h+1|0,17)|0)rg(j,5077);if(!(Qm(g,h,18)|0)){g=pe(b,1)|0;f=b+8|0;h=c[f>>2]|0;c[h>>2]=g;c[h+8>>2]=70;h=(c[f>>2]|0)+16|0;c[f>>2]=h;if(((c[b+24>>2]|0)-h|0)<16)fe(b,0);e=ue(b)|0;d=g+12|0;c[d>>2]=e;sg(j,e);d=c[d>>2]|0;e=c[d+40>>2]|0;if((e|0)==1){b=g;i=k;return b|0}b=pe(b,e)|0;c[b+12>>2]=d;j=c[f>>2]|0;c[j+-16>>2]=b;c[j+-8>>2]=70;i=k;return b|0}if(Qm(g,h,4)|0)rg(j,5112);if(Qm(g,h,6)|0)rg(j,5118);if(!(Qm(g,h,12)|0))rg(j,5151);else rg(j,5138);return 0}function rg(a,b){a=a|0;b=b|0;var d=0,e=0;d=i;i=i+16|0;e=c[a>>2]|0;c[d>>2]=c[a+12>>2];c[d+4>>2]=b;pf(e,5087,d)|0;_d(c[a>>2]|0,3)}function sg(b,e){b=b|0;e=e|0;var f=0,g=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;r=i;i=i+16|0;q=r;p=b+4|0;if(Ig(c[p>>2]|0,q,4)|0)rg(b,5077);f=c[q>>2]|0;if((f|0)<0)rg(b,5151);c[e+64>>2]=f;if(Ig(c[p>>2]|0,q,4)|0)rg(b,5077);f=c[q>>2]|0;if((f|0)<0)rg(b,5151);c[e+68>>2]=f;if(Ig(c[p>>2]|0,q,1)|0)rg(b,5077);a[e+76>>0]=a[q>>0]|0;if(Ig(c[p>>2]|0,q,1)|0)rg(b,5077);a[e+77>>0]=a[q>>0]|0;if(Ig(c[p>>2]|0,q,1)|0)rg(b,5077);a[e+78>>0]=a[q>>0]|0;if(Ig(c[p>>2]|0,q,4)|0)rg(b,5077);f=c[q>>2]|0;if((f|0)<0)rg(b,5151);g=c[b>>2]|0;if((f+1|0)>>>0>1073741823)ff(g);n=f<<2;m=gf(g,0,0,n)|0;c[e+12>>2]=m;c[e+48>>2]=f;if(Ig(c[p>>2]|0,m,n)|0)rg(b,5077);if(Ig(c[p>>2]|0,q,4)|0)rg(b,5077);n=c[q>>2]|0;if((n|0)<0)rg(b,5151);f=c[b>>2]|0;if((n+1|0)>>>0>268435455)ff(f);f=gf(f,0,0,n<<4)|0;m=e+8|0;c[m>>2]=f;c[e+44>>2]=n;g=(n|0)>0;a:do if(g){j=0;do{c[f+(j<<4)+8>>2]=0;j=j+1|0}while((j|0)!=(n|0));if(g){g=b+8|0;l=0;b:while(1){j=c[m>>2]|0;k=j+(l<<4)|0;if(Ig(c[p>>2]|0,q,1)|0){f=34;break}switch(a[q>>0]|0){case 0:{c[j+(l<<4)+8>>2]=0;break}case 1:{if(Ig(c[p>>2]|0,q,1)|0){f=38;break b}c[k>>2]=a[q>>0];c[j+(l<<4)+8>>2]=1;break}case 3:{if(Ig(c[p>>2]|0,q,8)|0){f=41;break b}h[k>>3]=+h[q>>3];c[j+(l<<4)+8>>2]=3;break}case 4:{if(Ig(c[p>>2]|0,q,4)|0){f=44;break b}f=c[q>>2]|0;if(!f)f=0;else{f=Jg(c[b>>2]|0,c[g>>2]|0,f)|0;if(Ig(c[p>>2]|0,f,c[q>>2]|0)|0){f=47;break b}f=Zf(c[b>>2]|0,f,(c[q>>2]|0)+-1|0)|0}c[k>>2]=f;c[j+(l<<4)+8>>2]=d[f+4>>0]|64;break}default:{}}l=l+1|0;if((l|0)>=(n|0))break a}if((f|0)==34)rg(b,5077);else if((f|0)==38)rg(b,5077);else if((f|0)==41)rg(b,5077);else if((f|0)==44)rg(b,5077);else if((f|0)==47)rg(b,5077)}}while(0);if(Ig(c[p>>2]|0,q,4)|0)rg(b,5077);k=c[q>>2]|0;if((k|0)<0)rg(b,5151);f=c[b>>2]|0;if((k+1|0)>>>0>1073741823)ff(f);f=gf(f,0,0,k<<2)|0;j=e+16|0;c[j>>2]=f;c[e+56>>2]=k;g=(k|0)>0;do if(g){c[f>>2]=0;if((k|0)!=1){f=1;do{c[(c[j>>2]|0)+(f<<2)>>2]=0;f=f+1|0}while((f|0)!=(k|0))}if(g)f=0;else break;do{n=ue(c[b>>2]|0)|0;c[(c[j>>2]|0)+(f<<2)>>2]=n;sg(b,c[(c[j>>2]|0)+(f<<2)>>2]|0);f=f+1|0}while((f|0)!=(k|0))}while(0);if(Ig(c[p>>2]|0,q,4)|0)rg(b,5077);j=c[q>>2]|0;if((j|0)<0)rg(b,5151);f=c[b>>2]|0;if((j+1|0)>>>0>536870911)ff(f);f=gf(f,0,0,j<<3)|0;m=e+28|0;c[m>>2]=f;c[e+40>>2]=j;c:do if((j|0)>0){g=0;do{c[f+(g<<3)>>2]=0;g=g+1|0}while((g|0)!=(j|0));f=0;while(1){if(Ig(c[p>>2]|0,q,1)|0){f=71;break}a[(c[m>>2]|0)+(f<<3)+4>>0]=a[q>>0]|0;if(Ig(c[p>>2]|0,q,1)|0){f=73;break}a[(c[m>>2]|0)+(f<<3)+5>>0]=a[q>>0]|0;f=f+1|0;if((f|0)>=(j|0))break c}if((f|0)==71)rg(b,5077);else if((f|0)==73)rg(b,5077)}while(0);if(Ig(c[p>>2]|0,q,4)|0)rg(b,5077);f=c[q>>2]|0;do if(f){f=Jg(c[b>>2]|0,c[b+8>>2]|0,f)|0;if(!(Ig(c[p>>2]|0,f,c[q>>2]|0)|0)){o=Zf(c[b>>2]|0,f,(c[q>>2]|0)+-1|0)|0;break}else rg(b,5077)}else o=0;while(0);c[e+36>>2]=o;if(Ig(c[p>>2]|0,q,4)|0)rg(b,5077);f=c[q>>2]|0;if((f|0)<0)rg(b,5151);g=c[b>>2]|0;if((f+1|0)>>>0>1073741823)ff(g);o=f<<2;n=gf(g,0,0,o)|0;c[e+20>>2]=n;c[e+52>>2]=f;if(Ig(c[p>>2]|0,n,o)|0)rg(b,5077);if(Ig(c[p>>2]|0,q,4)|0)rg(b,5077);l=c[q>>2]|0;if((l|0)<0)rg(b,5151);f=c[b>>2]|0;if((l+1|0)>>>0>357913941)ff(f);g=gf(f,0,0,l*12|0)|0;k=e+24|0;c[k>>2]=g;c[e+60>>2]=l;d:do if((l|0)>0){f=0;do{c[g+(f*12|0)>>2]=0;f=f+1|0}while((f|0)!=(l|0));g=b+8|0;j=0;while(1){if(Ig(c[p>>2]|0,q,4)|0){f=99;break}f=c[q>>2]|0;if(!f)f=0;else{f=Jg(c[b>>2]|0,c[g>>2]|0,f)|0;if(Ig(c[p>>2]|0,f,c[q>>2]|0)|0){f=102;break}f=Zf(c[b>>2]|0,f,(c[q>>2]|0)+-1|0)|0}c[(c[k>>2]|0)+(j*12|0)>>2]=f;if(Ig(c[p>>2]|0,q,4)|0){f=105;break}f=c[q>>2]|0;if((f|0)<0){f=107;break}c[(c[k>>2]|0)+(j*12|0)+4>>2]=f;if(Ig(c[p>>2]|0,q,4)|0){f=109;break}f=c[q>>2]|0;if((f|0)<0){f=111;break}c[(c[k>>2]|0)+(j*12|0)+8>>2]=f;j=j+1|0;if((j|0)>=(l|0))break d}if((f|0)==99)rg(b,5077);else if((f|0)==102)rg(b,5077);else if((f|0)==105)rg(b,5077);else if((f|0)==107)rg(b,5151);else if((f|0)==109)rg(b,5077);else if((f|0)==111)rg(b,5151)}while(0);if(Ig(c[p>>2]|0,q,4)|0)rg(b,5077);g=c[q>>2]|0;if((g|0)<0)rg(b,5151);if((g|0)<=0){i=r;return}j=b+8|0;k=0;while(1){if(Ig(c[p>>2]|0,q,4)|0){f=120;break}f=c[q>>2]|0;if(!f)f=0;else{f=Jg(c[b>>2]|0,c[j>>2]|0,f)|0;if(Ig(c[p>>2]|0,f,c[q>>2]|0)|0){f=123;break}f=Zf(c[b>>2]|0,f,(c[q>>2]|0)+-1|0)|0}c[(c[m>>2]|0)+(k<<3)>>2]=f;k=k+1|0;if((k|0)>=(g|0)){f=126;break}}if((f|0)==120)rg(b,5077);else if((f|0)==123)rg(b,5077);else if((f|0)==126){i=r;return}}function tg(b){b=b|0;var c=0;a[b>>0]=27;a[b+1>>0]=76;a[b+2>>0]=117;a[b+3>>0]=97;a[b+4>>0]=82;a[b+5>>0]=0;a[b+6>>0]=1;a[b+7>>0]=4;a[b+8>>0]=4;a[b+9>>0]=4;a[b+10>>0]=8;c=b+12|0;a[b+11>>0]=0;a[c>>0]=a[5070]|0;a[c+1>>0]=a[5071]|0;a[c+2>>0]=a[5072]|0;a[c+3>>0]=a[5073]|0;a[c+4>>0]=a[5074]|0;a[c+5>>0]=a[5075]|0;return}function ug(a,b){a=a|0;b=b|0;var d=0,e=0,f=0;f=i;i=i+16|0;e=f;d=c[a+8>>2]|0;if((d|0)!=3)if((d&15|0)==4?(a=c[a>>2]|0,(nf(a+16|0,c[a+12>>2]|0,e)|0)!=0):0){h[b>>3]=+h[e>>3];c[b+8>>2]=3}else b=0;else b=a;i=f;return b|0}function vg(a,b){a=a|0;b=b|0;var e=0,f=0,g=0,j=0;j=i;i=i+48|0;g=j;f=j+8|0;e=b+8|0;if((c[e>>2]|0)!=3){g=0;i=j;return g|0}h[g>>3]=+h[b>>3];g=Zf(a,f,qm(f,7724,g)|0)|0;c[b>>2]=g;c[e>>2]=d[g+4>>0]|0|64;g=1;i=j;return g|0}function wg(b,e,f,g){b=b|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;p=i;i=i+16|0;o=p;n=b+12|0;h=e;e=c[e+8>>2]|0;m=0;while(1){if((e|0)!=69){e=pg(b,h,0)|0;j=c[e+8>>2]|0;if(!j){j=11;break}}else{j=c[h>>2]|0;e=eg(j,f)|0;l=e+8|0;if(c[l>>2]|0){h=l;j=9;break}j=c[j+24>>2]|0;if(!j){h=l;j=9;break}if(a[j+6>>0]&1){h=l;j=9;break}k=og(j,0,c[(c[n>>2]|0)+184>>2]|0)|0;if(!k){h=l;j=9;break}j=c[k+8>>2]|0;e=k}m=m+1|0;if((j&15|0)==6){j=13;break}if((m|0)>=100){j=14;break}else{h=e;e=j}}if((j|0)==9){o=e;f=c[o+4>>2]|0;b=g;c[b>>2]=c[o>>2];c[b+4>>2]=f;c[g+8>>2]=c[h>>2];i=p;return}else if((j|0)==11)Rd(b,h,5161);else if((j|0)==13){m=b+28|0;n=c[m>>2]|0;o=b+8|0;l=c[o>>2]|0;c[o>>2]=l+16;q=e;j=c[q+4>>2]|0;k=l;c[k>>2]=c[q>>2];c[k+4>>2]=j;c[l+8>>2]=c[e+8>>2];l=c[o>>2]|0;c[o>>2]=l+16;k=h;j=c[k+4>>2]|0;e=l;c[e>>2]=c[k>>2];c[e+4>>2]=j;c[l+8>>2]=c[h+8>>2];l=c[o>>2]|0;c[o>>2]=l+16;e=f;j=c[e+4>>2]|0;k=l;c[k>>2]=c[e>>2];c[k+4>>2]=j;c[l+8>>2]=c[f+8>>2];ie(b,(c[o>>2]|0)+-48|0,1,(d[(c[b+16>>2]|0)+18>>0]|0)&1);g=(c[m>>2]|0)+(g-n)|0;b=c[o>>2]|0;n=b+-16|0;c[o>>2]=n;o=c[n+4>>2]|0;f=g;c[f>>2]=c[n>>2];c[f+4>>2]=o;c[g+8>>2]=c[b+-8>>2];i=p;return}else if((j|0)==14)Sd(b,5167,o)}function xg(b,e,f,g){b=b|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;r=i;i=i+16|0;n=r;m=b+12|0;h=e;e=c[e+8>>2]|0;l=0;while(1){if((e|0)!=69){e=pg(b,h,1)|0;j=c[e+8>>2]|0;if(!j){q=16;break}}else{j=c[h>>2]|0;k=eg(j,f)|0;if(c[k+8>>2]|0){p=j;o=k;break}e=c[j+24>>2]|0;if(!e){e=j;h=k;q=9;break}if(a[e+6>>0]&2){e=j;h=k;q=9;break}e=og(e,1,c[(c[m>>2]|0)+188>>2]|0)|0;if(!e){e=j;h=k;q=9;break}j=c[e+8>>2]|0}l=l+1|0;if((j&15|0)==6){q=18;break}if((l|0)>=100){q=19;break}else{h=e;e=j}}if((q|0)==9)if((h|0)==12928){p=e;o=dg(b,e,f)|0}else{p=e;o=h}else if((q|0)==16)Rd(b,h,5161);else if((q|0)==18){q=b+8|0;n=c[q>>2]|0;c[q>>2]=n+16;m=e;p=c[m+4>>2]|0;o=n;c[o>>2]=c[m>>2];c[o+4>>2]=p;c[n+8>>2]=c[e+8>>2];n=c[q>>2]|0;c[q>>2]=n+16;o=h;p=c[o+4>>2]|0;m=n;c[m>>2]=c[o>>2];c[m+4>>2]=p;c[n+8>>2]=c[h+8>>2];n=c[q>>2]|0;c[q>>2]=n+16;m=f;p=c[m+4>>2]|0;o=n;c[o>>2]=c[m>>2];c[o+4>>2]=p;c[n+8>>2]=c[f+8>>2];f=c[q>>2]|0;c[q>>2]=f+16;n=g;o=c[n+4>>2]|0;p=f;c[p>>2]=c[n>>2];c[p+4>>2]=o;c[f+8>>2]=c[g+8>>2];ie(b,(c[q>>2]|0)+-64|0,0,(d[(c[b+16>>2]|0)+18>>0]|0)&1);i=r;return}else if((q|0)==19)Sd(b,5184,n);n=g;f=c[n+4>>2]|0;q=o;c[q>>2]=c[n>>2];c[q+4>>2]=f;q=g+8|0;c[o+8>>2]=c[q>>2];a[p+6>>0]=0;if(!(c[q>>2]&64)){i=r;return}if(!(a[(c[g>>2]|0)+5>>0]&3)){i=r;return}if(!(a[p+5>>0]&4)){i=r;return}ze(b,p);i=r;return}function yg(a,b,e){a=a|0;b=b|0;e=e|0;var f=0,g=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;j=b+8|0;f=c[j>>2]|0;if((f|0)==3){if((c[e+8>>2]|0)==3){e=+h[b>>3]<+h[e>>3]&1;return e|0}}else if((f&15|0)==4?(c[e+8>>2]&15|0)==4:0){i=c[b>>2]|0;j=c[e>>2]|0;g=i+16|0;a=j+16|0;f=jm(g,a)|0;a:do if(!f){b=c[i+12>>2]|0;j=c[j+12>>2]|0;while(1){i=Ql(g)|0;f=(i|0)==(b|0);if((i|0)==(j|0))break;if(f){f=-1;break a}i=i+1|0;g=g+i|0;a=a+i|0;f=jm(g,a)|0;if(f|0)break a;else{b=b-i|0;j=j-i|0}}f=f&1^1}while(0);e=f>>>31;return e|0}g=a+8|0;i=c[g>>2]|0;f=pg(a,b,13)|0;if(!(c[f+8>>2]|0)){f=pg(a,e,13)|0;if(!(c[f+8>>2]|0))Wd(a,b,e);else k=f}else k=f;l=a+28|0;f=c[l>>2]|0;m=c[g>>2]|0;c[g>>2]=m+16;p=k;o=c[p+4>>2]|0;n=m;c[n>>2]=c[p>>2];c[n+4>>2]=o;c[m+8>>2]=c[k+8>>2];m=c[g>>2]|0;c[g>>2]=m+16;n=b;k=c[n+4>>2]|0;b=m;c[b>>2]=c[n>>2];c[b+4>>2]=k;c[m+8>>2]=c[j>>2];b=c[g>>2]|0;c[g>>2]=b+16;m=e;j=c[m+4>>2]|0;k=b;c[k>>2]=c[m>>2];c[k+4>>2]=j;c[b+8>>2]=c[e+8>>2];ie(a,(c[g>>2]|0)+-48|0,1,(d[(c[a+16>>2]|0)+18>>0]|0)&1);f=(c[l>>2]|0)+(i-f)|0;e=c[g>>2]|0;a=e+-16|0;c[g>>2]=a;b=c[a+4>>2]|0;k=f;c[k>>2]=c[a>>2];c[k+4>>2]=b;c[f+8>>2]=c[e+-8>>2];f=c[g>>2]|0;g=c[f+8>>2]|0;if(g)if((g|0)==1)f=(c[f>>2]|0)!=0;else f=1;else f=0;p=f&1;return p|0}function zg(a,b,e){a=a|0;b=b|0;e=e|0;var f=0,g=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;k=b+8|0;f=c[k>>2]|0;if((f|0)==3){if((c[e+8>>2]|0)==3){e=+h[b>>3]<=+h[e>>3]&1;return e|0}}else if((f&15|0)==4?(c[e+8>>2]&15|0)==4:0){i=c[b>>2]|0;j=c[e>>2]|0;g=i+16|0;k=j+16|0;f=jm(g,k)|0;a:do if(!f){a=c[i+12>>2]|0;j=c[j+12>>2]|0;while(1){i=Ql(g)|0;f=(i|0)==(a|0);if((i|0)==(j|0))break;if(f){f=-1;break a}i=i+1|0;g=g+i|0;k=k+i|0;f=jm(g,k)|0;if(f|0)break a;else{a=a-i|0;j=j-i|0}}f=f&1^1}while(0);e=(f|0)<1&1;return e|0}i=a+8|0;g=c[i>>2]|0;f=pg(a,b,14)|0;if(!(c[f+8>>2]|0)){f=pg(a,e,14)|0;if(!(c[f+8>>2]|0)){g=c[i>>2]|0;f=pg(a,e,13)|0;if(!(c[f+8>>2]|0)){f=pg(a,b,13)|0;if(!(c[f+8>>2]|0))Wd(a,b,e);else j=f}else j=f;l=a+28|0;f=c[l>>2]|0;m=c[i>>2]|0;c[i>>2]=m+16;p=j;n=c[p+4>>2]|0;o=m;c[o>>2]=c[p>>2];c[o+4>>2]=n;c[m+8>>2]=c[j+8>>2];m=c[i>>2]|0;c[i>>2]=m+16;o=e;n=c[o+4>>2]|0;j=m;c[j>>2]=c[o>>2];c[j+4>>2]=n;c[m+8>>2]=c[e+8>>2];e=c[i>>2]|0;c[i>>2]=e+16;m=b;j=c[m+4>>2]|0;b=e;c[b>>2]=c[m>>2];c[b+4>>2]=j;c[e+8>>2]=c[k>>2];ie(a,(c[i>>2]|0)+-48|0,1,(d[(c[a+16>>2]|0)+18>>0]|0)&1);f=(c[l>>2]|0)+(g-f)|0;g=c[i>>2]|0;a=g+-16|0;c[i>>2]=a;b=c[a+4>>2]|0;e=f;c[e>>2]=c[a>>2];c[e+4>>2]=b;c[f+8>>2]=c[g+-8>>2];f=c[i>>2]|0;g=c[f+8>>2]|0;if(g)if((g|0)==1)f=(c[f>>2]|0)!=0;else f=1;else f=0;p=f&1^1;return p|0}}o=a+28|0;n=c[o>>2]|0;p=c[i>>2]|0;c[i>>2]=p+16;j=f;l=c[j+4>>2]|0;m=p;c[m>>2]=c[j>>2];c[m+4>>2]=l;c[p+8>>2]=c[f+8>>2];f=c[i>>2]|0;c[i>>2]=f+16;p=b;m=c[p+4>>2]|0;l=f;c[l>>2]=c[p>>2];c[l+4>>2]=m;c[f+8>>2]=c[k>>2];f=c[i>>2]|0;c[i>>2]=f+16;l=e;m=c[l+4>>2]|0;p=f;c[p>>2]=c[l>>2];c[p+4>>2]=m;c[f+8>>2]=c[e+8>>2];ie(a,(c[i>>2]|0)+-48|0,1,(d[(c[a+16>>2]|0)+18>>0]|0)&1);f=(c[o>>2]|0)+(g-n)|0;g=c[i>>2]|0;n=g+-16|0;c[i>>2]=n;o=c[n+4>>2]|0;p=f;c[p>>2]=c[n>>2];c[p+4>>2]=o;c[f+8>>2]=c[g+-8>>2];f=c[i>>2]|0;g=c[f+8>>2]|0;if(g)if((g|0)==1)f=(c[f>>2]|0)!=0;else f=1;else f=0;p=f&1;return p|0}function Ag(b,e,f){b=b|0;e=e|0;f=f|0;var g=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;l=e+8|0;a:do switch(c[l>>2]&63|0){case 3:{f=+h[e>>3]==+h[f>>3]&1;return f|0}case 1:{f=(c[e>>2]|0)==(c[f>>2]|0)&1;return f|0}case 2:{f=(c[e>>2]|0)==(c[f>>2]|0)&1;return f|0}case 22:{f=(c[e>>2]|0)==(c[f>>2]|0)&1;return f|0}case 4:{f=(c[e>>2]|0)==(c[f>>2]|0)&1;return f|0}case 20:{f=Vf(c[e>>2]|0,c[f>>2]|0)|0;return f|0}case 7:{g=c[e>>2]|0;i=c[f>>2]|0;if((g|0)==(i|0)){f=1;return f|0}if(!b){f=0;return f|0}k=c[g+8>>2]|0;i=c[i+8>>2]|0;if(!k){f=0;return f|0}if(a[k+6>>0]&32){f=0;return f|0}j=b+12|0;g=og(k,5,c[(c[j>>2]|0)+204>>2]|0)|0;if(!g){f=0;return f|0}if((k|0)!=(i|0)){if(!i){f=0;return f|0}if(a[i+6>>0]&32){f=0;return f|0}i=og(i,5,c[(c[j>>2]|0)+204>>2]|0)|0;if(!i){f=0;return f|0}j=c[g+8>>2]|0;if((j|0)!=(c[i+8>>2]|0)){f=0;return f|0}switch(j&63|0){case 0:break a;case 3:{i=+h[g>>3]==+h[i>>3]&1;break}case 1:{i=(c[g>>2]|0)==(c[i>>2]|0)&1;break}case 2:{i=(c[g>>2]|0)==(c[i>>2]|0)&1;break}case 22:{i=(c[g>>2]|0)==(c[i>>2]|0)&1;break}case 4:{i=(c[g>>2]|0)==(c[i>>2]|0)&1;break}case 20:{i=Vf(c[g>>2]|0,c[i>>2]|0)|0;break}case 7:{if((c[g>>2]|0)==(c[i>>2]|0))break a;else g=0;return g|0}case 5:{if((c[g>>2]|0)==(c[i>>2]|0))break a;else g=0;return g|0}default:i=(c[g>>2]|0)==(c[i>>2]|0)&1}if(!i){f=0;return f|0}}break}case 5:{g=c[e>>2]|0;i=c[f>>2]|0;if((g|0)==(i|0)){f=1;return f|0}if(!b){f=0;return f|0}k=c[g+24>>2]|0;i=c[i+24>>2]|0;if(!k){f=0;return f|0}if(a[k+6>>0]&32){f=0;return f|0}j=b+12|0;g=og(k,5,c[(c[j>>2]|0)+204>>2]|0)|0;if(!g){f=0;return f|0}if((k|0)!=(i|0)){if(!i){f=0;return f|0}if(a[i+6>>0]&32){f=0;return f|0}i=og(i,5,c[(c[j>>2]|0)+204>>2]|0)|0;if(!i){f=0;return f|0}j=c[g+8>>2]|0;if((j|0)!=(c[i+8>>2]|0)){f=0;return f|0}switch(j&63|0){case 0:break a;case 3:{i=+h[g>>3]==+h[i>>3]&1;break}case 1:{i=(c[g>>2]|0)==(c[i>>2]|0)&1;break}case 2:{i=(c[g>>2]|0)==(c[i>>2]|0)&1;break}case 22:{i=(c[g>>2]|0)==(c[i>>2]|0)&1;break}case 4:{i=(c[g>>2]|0)==(c[i>>2]|0)&1;break}case 20:{i=Vf(c[g>>2]|0,c[i>>2]|0)|0;break}case 7:{if((c[g>>2]|0)==(c[i>>2]|0))break a;else g=0;return g|0}case 5:{if((c[g>>2]|0)==(c[i>>2]|0))break a;else g=0;return g|0}default:i=(c[g>>2]|0)==(c[i>>2]|0)&1}if(!i){f=0;return f|0}}break}case 0:{f=1;return f|0}default:{f=(c[e>>2]|0)==(c[f>>2]|0)&1;return f|0}}while(0);i=b+8|0;j=c[i>>2]|0;m=b+28|0;k=c[m>>2]|0;c[i>>2]=j+16;p=g;n=c[p+4>>2]|0;o=j;c[o>>2]=c[p>>2];c[o+4>>2]=n;c[j+8>>2]=c[g+8>>2];g=c[i>>2]|0;c[i>>2]=g+16;o=e;e=c[o+4>>2]|0;n=g;c[n>>2]=c[o>>2];c[n+4>>2]=e;c[g+8>>2]=c[l>>2];g=c[i>>2]|0;c[i>>2]=g+16;n=f;e=c[n+4>>2]|0;l=g;c[l>>2]=c[n>>2];c[l+4>>2]=e;c[g+8>>2]=c[f+8>>2];ie(b,(c[i>>2]|0)+-48|0,1,(d[(c[b+16>>2]|0)+18>>0]|0)&1);g=(c[m>>2]|0)+(j-k)|0;f=c[i>>2]|0;l=f+-16|0;c[i>>2]=l;b=c[l+4>>2]|0;e=g;c[e>>2]=c[l>>2];c[e+4>>2]=b;c[g+8>>2]=c[f+-8>>2];g=c[i>>2]|0;i=c[g+8>>2]|0;if(i)if((i|0)==1)g=(c[g>>2]|0)!=0;else g=1;else g=0;p=g&1;return p|0}function Bg(a,b){a=a|0;b=b|0;var e=0,f=0,g=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0;x=i;i=i+64|0;w=x+24|0;v=x+16|0;u=x+8|0;t=x;s=x+32|0;o=a+8|0;p=a+12|0;q=a+28|0;r=a+16|0;n=b;m=c[o>>2]|0;a:while(1){e=m+-32|0;l=m+-24|0;g=c[l>>2]|0;b=m+-16|0;do if((g|0)==3|(g&15|0)==4){k=m+-8|0;f=c[k>>2]|0;if((f&15|0)!=4){if((f|0)!=3){y=6;break}h[t>>3]=+h[b>>3];g=Zf(a,s,qm(s,7724,t)|0)|0;c[b>>2]=g;c[k>>2]=d[g+4>>0]|0|64;g=c[l>>2]|0}j=c[(c[b>>2]|0)+12>>2]|0;f=(g&15|0)==4;if(!j){if(!((g|0)==3&(f^1))){b=2;break}h[u>>3]=+h[e>>3];b=Zf(a,s,qm(s,7724,u)|0)|0;c[e>>2]=b;c[l>>2]=d[b+4>>0]|0|64;b=2;break}if(f?(c[(c[e>>2]|0)+12>>2]|0)==0:0){j=b;m=c[j+4>>2]|0;b=e;c[b>>2]=c[j>>2];c[b+4>>2]=m;c[l>>2]=c[k>>2];b=2;break}b:do if((n|0)>1){b=1;e=j;do{f=m+(0-b<<4)+-16|0;g=f+8|0;j=c[g>>2]|0;if((j&15|0)!=4){if((j|0)!=3)break b;h[v>>3]=+h[f>>3];l=Zf(a,s,qm(s,7724,v)|0)|0;c[f>>2]=l;c[g>>2]=d[l+4>>0]|0|64}f=c[(c[f>>2]|0)+12>>2]|0;if(f>>>0>=(-3-e|0)>>>0){y=21;break a}e=f+e|0;b=b+1|0}while((b|0)<(n|0))}else{b=1;e=j}while(0);g=Jg(a,(c[p>>2]|0)+144|0,e)|0;f=b;e=0;while(1){k=c[m+(0-f<<4)>>2]|0;l=c[k+12>>2]|0;zn(g+e|0,k+16|0,l|0)|0;e=l+e|0;if((f|0)>1)f=f+-1|0;else break}l=0-b|0;k=Zf(a,g,e)|0;c[m+(l<<4)>>2]=k;c[m+(l<<4)+8>>2]=d[k+4>>0]|0|64}else y=6;while(0);if((y|0)==6){y=0;f=pg(a,e,15)|0;if(!(c[f+8>>2]|0)){f=pg(a,b,15)|0;if(!(c[f+8>>2]|0)){y=9;break}}j=c[q>>2]|0;k=c[o>>2]|0;c[o>>2]=k+16;A=f;g=c[A+4>>2]|0;z=k;c[z>>2]=c[A>>2];c[z+4>>2]=g;c[k+8>>2]=c[f+8>>2];k=c[o>>2]|0;c[o>>2]=k+16;z=e;f=c[z+4>>2]|0;g=k;c[g>>2]=c[z>>2];c[g+4>>2]=f;c[k+8>>2]=c[l>>2];k=c[o>>2]|0;c[o>>2]=k+16;g=b;l=c[g+4>>2]|0;b=k;c[b>>2]=c[g>>2];c[b+4>>2]=l;c[k+8>>2]=c[m+-8>>2];ie(a,(c[o>>2]|0)+-48|0,1,(d[(c[r>>2]|0)+18>>0]|0)&1);b=(c[q>>2]|0)+(e-j)|0;m=c[o>>2]|0;j=m+-16|0;c[o>>2]=j;k=c[j+4>>2]|0;l=b;c[l>>2]=c[j>>2];c[l+4>>2]=k;c[b+8>>2]=c[m+-8>>2];b=2}n=n+1-b|0;m=(c[o>>2]|0)+(1-b<<4)|0;c[o>>2]=m;if((n|0)<=1){y=27;break}}if((y|0)==9)Ud(a,e,b);else if((y|0)==21)Sd(a,5201,w);else if((y|0)==27){i=x;return}}function Cg(b,e,f){b=b|0;e=e|0;f=f|0;var g=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;k=f+8|0;a:do switch(c[k>>2]&15|0){case 5:{g=c[f>>2]|0;i=c[g+24>>2]|0;if((i|0?(a[i+6>>0]&16)==0:0)?(j=og(i,4,c[(c[b+12>>2]|0)+200>>2]|0)|0,j|0):0){i=j;break a}h[e>>3]=+(mg(g)|0);c[e+8>>2]=3;return}case 4:{h[e>>3]=+((c[(c[f>>2]|0)+12>>2]|0)>>>0);c[e+8>>2]=3;return}default:{g=pg(b,f,4)|0;if(!(c[g+8>>2]|0))Rd(b,f,5224);else i=g}}while(0);l=b+28|0;j=c[l>>2]|0;g=b+8|0;o=c[g>>2]|0;c[g>>2]=o+16;p=i;n=c[p+4>>2]|0;m=o;c[m>>2]=c[p>>2];c[m+4>>2]=n;c[o+8>>2]=c[i+8>>2];i=c[g>>2]|0;c[g>>2]=i+16;o=f;m=c[o+4>>2]|0;n=i;c[n>>2]=c[o>>2];c[n+4>>2]=m;c[i+8>>2]=c[k>>2];i=c[g>>2]|0;c[g>>2]=i+16;n=f;m=c[n+4>>2]|0;f=i;c[f>>2]=c[n>>2];c[f+4>>2]=m;c[i+8>>2]=c[k>>2];ie(b,(c[g>>2]|0)+-48|0,1,(d[(c[b+16>>2]|0)+18>>0]|0)&1);f=(c[l>>2]|0)+(e-j)|0;e=c[g>>2]|0;j=e+-16|0;c[g>>2]=j;k=c[j+4>>2]|0;b=f;c[b>>2]=c[j>>2];c[b+4>>2]=k;c[f+8>>2]=c[e+-8>>2];return}function Dg(a,b,e,f,g){a=a|0;b=b|0;e=e|0;f=f|0;g=g|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;p=i;i=i+32|0;j=p+16|0;l=p;n=e+8|0;k=c[n>>2]|0;do if((k|0)!=3){if((k&15|0)==4?(k=c[e>>2]|0,nf(k+16|0,c[k+12>>2]|0,j)|0):0){h[l>>3]=+h[j>>3];c[l+8>>2]=3;m=6;break}}else{l=e;m=6}while(0);a:do if((m|0)==6){k=c[f+8>>2]|0;do if((k|0)==3)j=f;else{if((k&15|0)==4?(m=c[f>>2]|0,nf(m+16|0,c[m+12>>2]|0,j)|0):0)break;break a}while(0);h[b>>3]=+lf(g+-6|0,+h[l>>3],+h[j>>3]);c[b+8>>2]=3;i=p;return}while(0);j=pg(a,e,g)|0;if(!(c[j+8>>2]|0)){j=pg(a,f,g)|0;if(!(c[j+8>>2]|0))Vd(a,e,f);else o=j}else o=j;l=a+28|0;g=c[l>>2]|0;m=a+8|0;j=c[m>>2]|0;c[m>>2]=j+16;r=o;q=c[r+4>>2]|0;k=j;c[k>>2]=c[r>>2];c[k+4>>2]=q;c[j+8>>2]=c[o+8>>2];o=c[m>>2]|0;c[m>>2]=o+16;j=e;e=c[j+4>>2]|0;k=o;c[k>>2]=c[j>>2];c[k+4>>2]=e;c[o+8>>2]=c[n>>2];o=c[m>>2]|0;c[m>>2]=o+16;k=f;n=c[k+4>>2]|0;e=o;c[e>>2]=c[k>>2];c[e+4>>2]=n;c[o+8>>2]=c[f+8>>2];ie(a,(c[m>>2]|0)+-48|0,1,(d[(c[a+16>>2]|0)+18>>0]|0)&1);b=(c[l>>2]|0)+(b-g)|0;o=c[m>>2]|0;g=o+-16|0;c[m>>2]=g;e=c[g+4>>2]|0;f=b;c[f>>2]=c[g>>2];c[f+4>>2]=e;c[b+8>>2]=c[o+-8>>2];i=p;return}function Eg(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0;f=c[a+16>>2]|0;g=f+24|0;j=c[g>>2]|0;i=f+28|0;k=c[(c[i>>2]|0)+-4>>2]|0;h=k&63;switch(h|0){case 12:case 7:case 6:case 21:case 19:case 18:case 17:case 16:case 15:case 14:case 13:{h=a+8|0;a=c[h>>2]|0;g=a+-16|0;c[h>>2]=g;k=k>>>6&255;h=c[g+4>>2]|0;i=j+(k<<4)|0;c[i>>2]=c[g>>2];c[i+4>>2]=h;c[j+(k<<4)+8>>2]=c[a+-8>>2];return}case 24:case 25:case 26:{e=a+8|0;f=c[e>>2]|0;b=c[f+-8>>2]|0;if(b)if((b|0)==1)b=(c[f+-16>>2]|0)==0;else b=0;else b=1;d=b&1;b=d^1;c[e>>2]=f+-16;if((h|0)==26){a=(c[(pg(a,j+(k>>>23<<4)|0,14)|0)+8>>2]|0)==0;b=a?d:b}if((b|0)==(k>>>6&255|0))return;c[i>>2]=(c[i>>2]|0)+4;return}case 22:{d=a+8|0;i=c[d>>2]|0;e=i+-32|0;b=e-(j+(k>>>23<<4))|0;l=i+-16|0;h=c[l+4>>2]|0;j=i+-48|0;c[j>>2]=c[l>>2];c[j+4>>2]=h;c[i+-40>>2]=c[i+-8>>2];if((b|0)>16){c[d>>2]=e;Bg(a,b>>4)}j=c[d>>2]|0;a=c[g>>2]|0;l=k>>>6&255;h=j+-16|0;i=c[h+4>>2]|0;k=a+(l<<4)|0;c[k>>2]=c[h>>2];c[k+4>>2]=i;c[a+(l<<4)+8>>2]=c[j+-8>>2];c[d>>2]=c[f+4>>2];return}case 34:{c[a+8>>2]=c[f+4>>2];return}case 29:{if(!(k&8372224))return;c[a+8>>2]=c[f+4>>2];return}default:return}}function Fg(b){b=b|0;var e=0,f=0,g=0,j=0,k=0,l=0,m=0,n=0,o=0.0,p=0.0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,N=0,O=0,Q=0,R=0,S=0,T=0,U=0.0;R=i;i=i+32|0;Q=R+24|0;O=R+16|0;N=R+8|0;L=R;C=b+16|0;D=b+40|0;F=b+12|0;S=b+8|0;G=b+24|0;T=b+48|0;I=b+20|0;J=b+6|0;K=b+44|0;j=c[C>>2]|0;a:while(1){v=c[c[j>>2]>>2]|0;A=v+12|0;w=c[(c[A>>2]|0)+8>>2]|0;x=j+24|0;y=j+28|0;z=j+4|0;f=c[x>>2]|0;b:while(1){t=c[y>>2]|0;c[y>>2]=t+4;t=c[t>>2]|0;e=a[D>>0]|0;if((e&12)!=0?(E=(c[T>>2]|0)+-1|0,c[T>>2]=E,E=(E|0)==0,!((e&4)==0&(E^1))):0){s=c[C>>2]|0;e=e&255;if((e&8|0)==0|E^1)q=0;else{c[T>>2]=c[K>>2];q=1}r=s+18|0;f=d[r>>0]|0;if(!(f&128)){if(q)be(b,3,-1);do if(!(e&4)){e=s+28|0;f=e}else{k=c[(c[c[s>>2]>>2]|0)+12>>2]|0;n=s+28|0;e=c[n>>2]|0;f=c[k+12>>2]|0;g=(e-f>>2)+-1|0;k=c[k+20>>2]|0;l=(k|0)==0;if(l)m=0;else m=c[k+(g<<2)>>2]|0;if(g|0?(H=c[I>>2]|0,e>>>0>H>>>0):0){if(l)e=0;else e=c[k+((H-f>>2)+-1<<2)>>2]|0;if((m|0)==(e|0)){f=n;e=n;break}}be(b,2,m);f=n;e=n}while(0);e=c[e>>2]|0;c[I>>2]=e;if((a[J>>0]|0)==1){B=22;break a}}else a[r>>0]=f&127;f=c[x>>2]|0}u=t>>>6&255;g=f+(u<<4)|0;do switch(t&63|0){case 31:{e=t;B=147;break b}case 0:{t=t>>>23;q=f+(t<<4)|0;r=c[q+4>>2]|0;s=g;c[s>>2]=c[q>>2];c[s+4>>2]=r;c[f+(u<<4)+8>>2]=c[f+(t<<4)+8>>2];continue b}case 1:{t=t>>>14;q=w+(t<<4)|0;r=c[q+4>>2]|0;s=g;c[s>>2]=c[q>>2];c[s+4>>2]=r;c[f+(u<<4)+8>>2]=c[w+(t<<4)+8>>2];continue b}case 2:{t=c[y>>2]|0;c[y>>2]=t+4;t=(c[t>>2]|0)>>>6;q=w+(t<<4)|0;r=c[q+4>>2]|0;s=g;c[s>>2]=c[q>>2];c[s+4>>2]=r;c[f+(u<<4)+8>>2]=c[w+(t<<4)+8>>2];continue b}case 3:{c[g>>2]=t>>>23;c[f+(u<<4)+8>>2]=1;if(!(t&8372224))continue b;c[y>>2]=(c[y>>2]|0)+4;continue b}case 4:{e=t>>>23;while(1){c[g+8>>2]=0;if(!e)continue b;else{e=e+-1|0;g=g+16|0}}}case 5:{t=c[(c[v+16+(t>>>23<<2)>>2]|0)+8>>2]|0;q=t;r=c[q+4>>2]|0;s=g;c[s>>2]=c[q>>2];c[s+4>>2]=r;c[f+(u<<4)+8>>2]=c[t+8>>2];continue b}case 6:{u=t>>>14;wg(b,c[(c[v+16+(t>>>23<<2)>>2]|0)+8>>2]|0,(u&256|0)==0?f+((u&511)<<4)|0:w+((u&255)<<4)|0,g);f=c[x>>2]|0;continue b}case 7:{u=t>>>14;wg(b,f+(t>>>23<<4)|0,(u&256|0)==0?f+((u&511)<<4)|0:w+((u&255)<<4)|0,g);f=c[x>>2]|0;continue b}case 8:{s=t>>>23;t=t>>>14;xg(b,c[(c[v+16+(u<<2)>>2]|0)+8>>2]|0,(s&256|0)==0?f+(s<<4)|0:w+((s&255)<<4)|0,(t&256|0)==0?f+((t&511)<<4)|0:w+((t&255)<<4)|0);f=c[x>>2]|0;continue b}case 9:{k=c[v+16+(t>>>23<<2)>>2]|0;t=c[k+8>>2]|0;q=g;r=c[q+4>>2]|0;s=t;c[s>>2]=c[q>>2];c[s+4>>2]=r;u=f+(u<<4)+8|0;c[t+8>>2]=c[u>>2];if(!(c[u>>2]&64))continue b;e=c[g>>2]|0;if(!(a[e+5>>0]&3))continue b;if(!(a[k+5>>0]&4))continue b;xe(b,k,e);continue b}case 10:{s=t>>>23;u=t>>>14;xg(b,g,(s&256|0)==0?f+(s<<4)|0:w+((s&255)<<4)|0,(u&256|0)==0?f+((u&511)<<4)|0:w+((u&255)<<4)|0);f=c[x>>2]|0;continue b}case 11:{l=t>>>23;e=t>>>14&511;k=ig(b)|0;c[g>>2]=k;c[f+(u<<4)+8>>2]=69;if(e|l|0){u=jf(l)|0;cg(b,k,u,jf(e)|0)}if((c[(c[F>>2]|0)+12>>2]|0)>0){c[S>>2]=g+16;Se(b);c[S>>2]=c[z>>2]}f=c[x>>2]|0;continue b}case 12:{r=t>>>23;s=f+(r<<4)|0;u=g+16|0;m=s;n=c[m+4>>2]|0;q=u;c[q>>2]=c[m>>2];c[q+4>>2]=n;c[u+8>>2]=c[f+(r<<4)+8>>2];u=t>>>14;wg(b,s,(u&256|0)==0?f+((u&511)<<4)|0:w+((u&255)<<4)|0,g);f=c[x>>2]|0;continue b}case 13:{k=t>>>23;k=(k&256|0)==0?f+(k<<4)|0:w+((k&255)<<4)|0;e=t>>>14;e=(e&256|0)==0?f+((e&511)<<4)|0:w+((e&255)<<4)|0;if((c[k+8>>2]|0)==3?(c[e+8>>2]|0)==3:0){h[g>>3]=+h[k>>3]+ +h[e>>3];c[f+(u<<4)+8>>2]=3;continue b}Dg(b,g,k,e,6);f=c[x>>2]|0;continue b}case 14:{k=t>>>23;k=(k&256|0)==0?f+(k<<4)|0:w+((k&255)<<4)|0;e=t>>>14;e=(e&256|0)==0?f+((e&511)<<4)|0:w+((e&255)<<4)|0;if((c[k+8>>2]|0)==3?(c[e+8>>2]|0)==3:0){h[g>>3]=+h[k>>3]-+h[e>>3];c[f+(u<<4)+8>>2]=3;continue b}Dg(b,g,k,e,7);f=c[x>>2]|0;continue b}case 15:{k=t>>>23;k=(k&256|0)==0?f+(k<<4)|0:w+((k&255)<<4)|0;e=t>>>14;e=(e&256|0)==0?f+((e&511)<<4)|0:w+((e&255)<<4)|0;if((c[k+8>>2]|0)==3?(c[e+8>>2]|0)==3:0){h[g>>3]=+h[k>>3]*+h[e>>3];c[f+(u<<4)+8>>2]=3;continue b}Dg(b,g,k,e,8);f=c[x>>2]|0;continue b}case 16:{k=t>>>23;k=(k&256|0)==0?f+(k<<4)|0:w+((k&255)<<4)|0;e=t>>>14;e=(e&256|0)==0?f+((e&511)<<4)|0:w+((e&255)<<4)|0;if((c[k+8>>2]|0)==3?(c[e+8>>2]|0)==3:0){h[g>>3]=+h[k>>3]/+h[e>>3];c[f+(u<<4)+8>>2]=3;continue b}Dg(b,g,k,e,9);f=c[x>>2]|0;continue b}case 17:{k=t>>>23;k=(k&256|0)==0?f+(k<<4)|0:w+((k&255)<<4)|0;e=t>>>14;e=(e&256|0)==0?f+((e&511)<<4)|0:w+((e&255)<<4)|0;if((c[k+8>>2]|0)==3?(c[e+8>>2]|0)==3:0){o=+h[k>>3];p=+h[e>>3];h[g>>3]=o-p*+M(+(o/p));c[f+(u<<4)+8>>2]=3;continue b}Dg(b,g,k,e,10);f=c[x>>2]|0;continue b}case 18:{k=t>>>23;k=(k&256|0)==0?f+(k<<4)|0:w+((k&255)<<4)|0;e=t>>>14;e=(e&256|0)==0?f+((e&511)<<4)|0:w+((e&255)<<4)|0;if((c[k+8>>2]|0)==3?(c[e+8>>2]|0)==3:0){h[g>>3]=+P(+(+h[k>>3]),+(+h[e>>3]));c[f+(u<<4)+8>>2]=3;continue b}Dg(b,g,k,e,11);f=c[x>>2]|0;continue b}case 19:{t=t>>>23;e=f+(t<<4)|0;if((c[f+(t<<4)+8>>2]|0)==3){h[g>>3]=-+h[e>>3];c[f+(u<<4)+8>>2]=3;continue b}else{Dg(b,g,e,e,12);f=c[x>>2]|0;continue b}}case 20:{e=t>>>23;k=c[f+(e<<4)+8>>2]|0;if(k)if((k|0)==1)e=(c[f+(e<<4)>>2]|0)==0;else e=0;else e=1;c[g>>2]=e&1;c[f+(u<<4)+8>>2]=1;continue b}case 21:{Cg(b,g,f+(t>>>23<<4)|0);f=c[x>>2]|0;continue b}case 22:{g=t>>>23;t=t>>>14&511;c[S>>2]=f+(t<<4)+16;Bg(b,1-g+t|0);t=c[x>>2]|0;e=t+(u<<4)|0;f=t+(g<<4)|0;q=f;r=c[q+4>>2]|0;s=e;c[s>>2]=c[q>>2];c[s+4>>2]=r;c[t+(u<<4)+8>>2]=c[t+(g<<4)+8>>2];if((c[(c[F>>2]|0)+12>>2]|0)>0){c[S>>2]=u>>>0>=g>>>0?e+16|0:f;Se(b);e=c[z>>2]|0;c[S>>2]=e}else e=c[z>>2]|0;f=c[x>>2]|0;c[S>>2]=e;continue b}case 23:{if(u|0)te(b,(c[x>>2]|0)+(u<<4)+-16|0);c[y>>2]=(c[y>>2]|0)+((t>>>14)+-131071<<2);continue b}case 24:{g=t>>>23;g=(g&256|0)==0?f+(g<<4)|0:w+((g&255)<<4)|0;e=t>>>14;e=(e&256|0)==0?f+((e&511)<<4)|0:w+((e&255)<<4)|0;if((c[g+8>>2]|0)==(c[e+8>>2]|0))f=(Ag(b,g,e)|0)!=0;else f=0;e=c[y>>2]|0;if((f&1|0)==(u|0)){g=c[e>>2]|0;f=g>>>6&255;if(f){te(b,(c[x>>2]|0)+(f<<4)+-16|0);e=c[y>>2]|0}e=e+((g>>>14)+-131070<<2)|0}else e=e+4|0;c[y>>2]=e;f=c[x>>2]|0;continue b}case 25:{s=t>>>23;e=t>>>14;u=(yg(b,(s&256|0)==0?f+(s<<4)|0:w+((s&255)<<4)|0,(e&256|0)==0?f+((e&511)<<4)|0:w+((e&255)<<4)|0)|0)==(u|0);e=c[y>>2]|0;if(u){g=c[e>>2]|0;f=g>>>6&255;if(f){te(b,(c[x>>2]|0)+(f<<4)+-16|0);e=c[y>>2]|0}e=e+((g>>>14)+-131070<<2)|0}else e=e+4|0;c[y>>2]=e;f=c[x>>2]|0;continue b}case 26:{s=t>>>23;e=t>>>14;u=(zg(b,(s&256|0)==0?f+(s<<4)|0:w+((s&255)<<4)|0,(e&256|0)==0?f+((e&511)<<4)|0:w+((e&255)<<4)|0)|0)==(u|0);e=c[y>>2]|0;if(u){g=c[e>>2]|0;f=g>>>6&255;if(f){te(b,(c[x>>2]|0)+(f<<4)+-16|0);e=c[y>>2]|0}e=e+((g>>>14)+-131070<<2)|0}else e=e+4|0;c[y>>2]=e;f=c[x>>2]|0;continue b}case 27:{e=c[f+(u<<4)+8>>2]|0;k=(e|0)==0;if(!(t&8372224)){if(!k)if(!((e|0)==1?!(c[g>>2]|0):0))B=115}else if(!k){if((e|0)==1?(c[g>>2]|0)==0:0)B=115}else B=115;if((B|0)==115){B=0;c[y>>2]=(c[y>>2]|0)+4;continue b}e=c[y>>2]|0;k=c[e>>2]|0;g=k>>>6&255;if(g){te(b,(c[x>>2]|0)+(g<<4)+-16|0);e=c[y>>2]|0}c[y>>2]=e+((k>>>14)+-131070<<2);continue b}case 28:{l=t>>>23;k=f+(l<<4)|0;l=c[f+(l<<4)+8>>2]|0;e=(l|0)==0;if(!(t&8372224))if(!e)if((l|0)==1?(c[k>>2]|0)==0:0)B=127;else B=126;else B=127;else if(!e)if((l|0)==1?(c[k>>2]|0)==0:0)B=126;else B=127;else B=126;if((B|0)==126){B=0;e=(c[y>>2]|0)+4|0}else if((B|0)==127){B=0;t=k;k=c[t+4>>2]|0;e=g;c[e>>2]=c[t>>2];c[e+4>>2]=k;c[f+(u<<4)+8>>2]=l;e=c[y>>2]|0;k=c[e>>2]|0;g=k>>>6&255;if(g){te(b,(c[x>>2]|0)+(g<<4)+-16|0);e=c[y>>2]|0}e=e+((k>>>14)+-131070<<2)|0}c[y>>2]=e;continue b}case 29:{f=t>>>23;e=t>>>14&511;if(f|0)c[S>>2]=g+(f<<4);if(!($d(b,g,e+-1|0)|0)){B=137;break b}if(e|0)c[S>>2]=c[z>>2];f=c[x>>2]|0;continue b}case 30:{e=t>>>23;if(e|0)c[S>>2]=g+(e<<4);if(!($d(b,g,-1)|0)){B=142;break b}f=c[x>>2]|0;continue b}case 32:{U=+h[g+32>>3];o=U+ +h[g>>3];p=+h[g+16>>3];if(U>0.0){if(!(o<=p))continue b}else if(!(p<=o))continue b;c[y>>2]=(c[y>>2]|0)+((t>>>14)+-131071<<2);h[g>>3]=o;c[f+(u<<4)+8>>2]=3;u=g+48|0;h[u>>3]=o;c[u+8>>2]=3;continue b}case 33:{l=g+16|0;n=g+32|0;m=f+(u<<4)+8|0;e=c[m>>2]|0;if((e|0)!=3){if((e&15|0)!=4){B=162;break a}u=c[g>>2]|0;if(!(nf(u+16|0,c[u+12>>2]|0,L)|0)){B=162;break a}h[g>>3]=+h[L>>3];c[m>>2]=3}e=l+8|0;k=c[e>>2]|0;if((k|0)!=3){if((k&15|0)!=4){B=167;break a}u=c[l>>2]|0;if(!(nf(u+16|0,c[u+12>>2]|0,L)|0)){B=167;break a}h[l>>3]=+h[L>>3];c[e>>2]=3}e=n+8|0;k=c[e>>2]|0;if((k|0)!=3){if((k&15|0)!=4){B=172;break a}u=c[n>>2]|0;if(!(nf(u+16|0,c[u+12>>2]|0,L)|0)){B=172;break a}h[n>>3]=+h[L>>3];c[e>>2]=3}h[g>>3]=+h[g>>3]-+h[n>>3];c[m>>2]=3;c[y>>2]=(c[y>>2]|0)+((t>>>14)+-131071<<2);continue b}case 34:{k=g+48|0;r=g+32|0;s=k+32|0;q=r;n=c[q+4>>2]|0;m=s;c[m>>2]=c[q>>2];c[m+4>>2]=n;c[s+8>>2]=c[r+8>>2];s=g+16|0;r=k+16|0;m=s;n=c[m+4>>2]|0;q=r;c[q>>2]=c[m>>2];c[q+4>>2]=n;c[r+8>>2]=c[s+8>>2];r=g;s=c[r+4>>2]|0;g=k;c[g>>2]=c[r>>2];c[g+4>>2]=s;c[k+8>>2]=c[f+(u<<4)+8>>2];c[S>>2]=k+48;ie(b,k,t>>>14&511,1);u=c[x>>2]|0;c[S>>2]=c[z>>2];g=c[y>>2]|0;c[y>>2]=g+4;g=c[g>>2]|0;f=u;k=g;g=u+((g>>>6&255)<<4)|0;break}case 35:{k=t;break}case 36:{e=t>>>23;k=t>>>14&511;if(!e)e=((c[S>>2]|0)-g>>4)+-1|0;if(!k){k=c[y>>2]|0;c[y>>2]=k+4;k=(c[k>>2]|0)>>>6}m=c[g>>2]|0;k=e+-50+(k*50|0)|0;if((k|0)>(c[m+8>>2]|0))hg(b,m,k);if((e|0)>0){l=m+5|0;while(1){u=g+(e<<4)|0;fg(b,m,k,u);k=k+-1|0;if((c[u+8>>2]&64|0?a[(c[u>>2]|0)+5>>0]&3:0)?a[l>>0]&4:0)ze(b,m);if((e|0)<=1)break;else e=e+-1|0}}c[S>>2]=c[z>>2];continue b}case 37:{r=c[(c[(c[A>>2]|0)+16>>2]|0)+(t>>>14<<2)>>2]|0;s=r+32|0;k=c[s>>2]|0;n=c[r+40>>2]|0;q=c[r+28>>2]|0;c:do if(!k)B=199;else{if((n|0)>0){l=k+16|0;m=0;do{e=d[q+(m<<3)+5>>0]|0;if(!(a[q+(m<<3)+4>>0]|0))e=c[(c[v+16+(e<<2)>>2]|0)+8>>2]|0;else e=f+(e<<4)|0;if((c[(c[l+(m<<2)>>2]|0)+8>>2]|0)!=(e|0)){B=199;break c}m=m+1|0}while((m|0)<(n|0))}c[g>>2]=k;c[f+(u<<4)+8>>2]=70}while(0);if((B|0)==199){B=0;m=pe(b,n)|0;c[m+12>>2]=r;c[g>>2]=m;c[f+(u<<4)+8>>2]=70;if((n|0)>0){e=m+16|0;l=0;do{k=d[q+(l<<3)+5>>0]|0;if(!(a[q+(l<<3)+4>>0]|0))c[e+(l<<2)>>2]=c[v+16+(k<<2)>>2];else c[e+(l<<2)>>2]=re(b,f+(k<<4)|0)|0;l=l+1|0}while((l|0)!=(n|0))}if(a[r+5>>0]&4)Ae(b,r,m);c[s>>2]=m}if((c[(c[F>>2]|0)+12>>2]|0)>0){c[S>>2]=g+16;Se(b);c[S>>2]=c[z>>2]}f=c[x>>2]|0;continue b}case 38:{t=t>>>23;e=t+-1|0;k=(f-(c[j>>2]|0)>>4)-(d[(c[A>>2]|0)+76>>0]|0)|0;n=k+-1|0;if(!t){if(((c[G>>2]|0)-(c[S>>2]|0)>>4|0)<(k|0))fe(b,n);f=c[x>>2]|0;g=f+(u<<4)|0;c[S>>2]=g+(n<<4);e=n}if((e|0)<=0)continue b;m=f+(1-k<<4)|0;k=0;while(1){if((k|0)<(n|0)){l=m+(k<<4)|0;s=l;t=c[s+4>>2]|0;u=g+(k<<4)|0;c[u>>2]=c[s>>2];c[u+4>>2]=t;l=c[l+8>>2]|0}else l=0;c[g+(k<<4)+8>>2]=l;k=k+1|0;if((k|0)==(e|0))continue b}}default:continue b}while(0);e=c[g+24>>2]|0;if(!e)continue;s=g+16|0;t=c[s+4>>2]|0;u=g;c[u>>2]=c[s>>2];c[u+4>>2]=t;c[g+8>>2]=e;c[y>>2]=(c[y>>2]|0)+((k>>>14)+-131071<<2)}if((B|0)==137){B=0;j=c[C>>2]|0;A=j+18|0;a[A>>0]=d[A>>0]|4;continue}else if((B|0)==142){B=0;g=c[C>>2]|0;j=c[g+8>>2]|0;k=c[g>>2]|0;l=c[j>>2]|0;m=g+24|0;n=(c[m>>2]|0)+(d[(c[(c[k>>2]|0)+12>>2]|0)+76>>0]<<4)|0;if((c[(c[A>>2]|0)+56>>2]|0)>0)te(b,c[j+24>>2]|0);if(k>>>0<n>>>0){e=k;f=0;do{y=e;z=c[y+4>>2]|0;A=l+(f<<4)|0;c[A>>2]=c[y>>2];c[A+4>>2]=z;c[l+(f<<4)+8>>2]=c[k+(f<<4)+8>>2];f=f+1|0;e=k+(f<<4)|0}while(e>>>0<n>>>0)}A=k;c[j+24>>2]=l+((c[m>>2]|0)-A>>4<<4);A=l+((c[S>>2]|0)-A>>4<<4)|0;c[S>>2]=A;c[j+4>>2]=A;c[j+28>>2]=c[g+28>>2];A=j+18|0;a[A>>0]=d[A>>0]|64;c[C>>2]=j;continue}else if((B|0)==147){B=0;e=e>>>23;if(e|0)c[S>>2]=g+(e<<4)+-16;if((c[(c[A>>2]|0)+56>>2]|0)>0)te(b,f);f=he(b,g)|0;if(!(a[j+18>>0]&4)){B=221;break}e=c[C>>2]|0;if(!f){j=e;continue}c[S>>2]=c[e+4>>2];j=e;continue}}if((B|0)==22){if(!q){R=e+-4|0;c[f>>2]=R;R=a[r>>0]|0;R=R&255;R=R|128;R=R&255;a[r>>0]=R;R=c[S>>2]|0;R=R+-16|0;c[s>>2]=R;_d(b,1)}c[T>>2]=1;T=e+-4|0;c[f>>2]=T;T=a[r>>0]|0;T=T&255;T=T|128;T=T&255;a[r>>0]=T;T=c[S>>2]|0;T=T+-16|0;c[s>>2]=T;_d(b,1)}else if((B|0)==162)Sd(b,5238,N);else if((B|0)==167)Sd(b,5275,O);else if((B|0)==172)Sd(b,5304,Q);else if((B|0)==221){i=R;return}}function Gg(a){a=a|0;var b=0,e=0,f=0;f=i;i=i+16|0;e=f;b=hb[c[a+8>>2]&31](c[a+16>>2]|0,c[a+12>>2]|0,e)|0;e=c[e>>2]|0;if((b|0)==0|(e|0)==0){a=-1;i=f;return a|0}c[a>>2]=e+-1;c[a+4>>2]=b+1;a=d[b>>0]|0;i=f;return a|0}function Hg(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;c[b+16>>2]=a;c[b+8>>2]=d;c[b+12>>2]=e;c[b>>2]=0;c[b+4>>2]=0;return}function Ig(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0;n=i;i=i+16|0;m=n;if(!d){a=0;i=n;return a|0}h=a+16|0;j=a+8|0;k=a+12|0;l=a+4|0;e=c[a>>2]|0;while(1){if(!e){f=hb[c[j>>2]&31](c[h>>2]|0,c[k>>2]|0,m)|0;e=c[m>>2]|0;if((f|0)==0|(e|0)==0){b=8;break}c[a>>2]=e;c[l>>2]=f;g=f}else g=c[l>>2]|0;f=d>>>0>e>>>0?e:d;zn(b|0,g|0,f|0)|0;e=(c[a>>2]|0)-f|0;c[a>>2]=e;c[l>>2]=(c[l>>2]|0)+f;if((d|0)==(f|0)){d=0;b=8;break}else{d=d-f|0;b=b+f|0}}if((b|0)==8){i=n;return d|0}return 0}function Jg(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=b+8|0;f=c[e>>2]|0;if(f>>>0>=d>>>0){b=c[b>>2]|0;return b|0}d=d>>>0<32?32:d;if((d+1|0)>>>0>4294967293)ff(a);a=gf(a,c[b>>2]|0,f,d)|0;c[b>>2]=a;c[e>>2]=d;b=a;return b|0}function Kg(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0;l=i;i=i+16|0;h=c[a+12>>2]|0;j=a+4|0;e=c[j>>2]|0;k=a+8|0;g=c[k>>2]|0;if((e-g|0)>>>0>=d>>>0){j=c[a>>2]|0;a=g;a=j+a|0;zn(a|0,b|0,d|0)|0;b=c[k>>2]|0;b=b+d|0;c[k>>2]=b;i=l;return}f=e<<1;f=(f-g|0)>>>0<d>>>0?g+d|0:f;if(f>>>0<g>>>0|(f-g|0)>>>0<d>>>0)Lg(h,5332,l)|0;e=Rc(h,f)|0;zn(e|0,c[a>>2]|0,c[k>>2]|0)|0;if((c[a>>2]|0)!=(a+16|0))Eb(h,-2);c[a>>2]=e;c[j>>2]=f;j=e;a=c[k>>2]|0;a=j+a|0;zn(a|0,b|0,d|0)|0;b=c[k>>2]|0;b=b+d|0;c[k>>2]=b;i=l;return}function Lg(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0;g=i;i=i+128|0;h=g;f=g+24|0;g=g+8|0;c[g>>2]=d;if(Od(a,1,f)|0?(Ld(a,5349,f)|0,e=c[f+20>>2]|0,(e|0)>0):0){c[h>>2]=f+36;c[h+4>>2]=e;hc(a,5352,h)|0;gc(a,b,g)|0;Nc(a,2);Lc(a)|0}ec(a,15608,0)|0;gc(a,b,g)|0;Nc(a,2);Lc(a)|0;return 0}function Mg(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0;l=i;i=i+16|0;g=Ql(b)|0;h=c[a+12>>2]|0;j=a+4|0;d=c[j>>2]|0;k=a+8|0;f=c[k>>2]|0;if((d-f|0)>>>0>=g>>>0){j=c[a>>2]|0;a=f;a=j+a|0;zn(a|0,b|0,g|0)|0;b=c[k>>2]|0;b=b+g|0;c[k>>2]=b;i=l;return}e=d<<1;e=(e-f|0)>>>0<g>>>0?f+g|0:e;if(e>>>0<f>>>0|(e-f|0)>>>0<g>>>0)Lg(h,5332,l)|0;d=Rc(h,e)|0;zn(d|0,c[a>>2]|0,c[k>>2]|0)|0;if((c[a>>2]|0)!=(a+16|0))Eb(h,-2);c[a>>2]=d;c[j>>2]=e;j=d;a=c[k>>2]|0;a=j+a|0;zn(a|0,b|0,g|0)|0;b=c[k>>2]|0;b=b+g|0;c[k>>2]=b;i=l;return}function Ng(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0;o=i;i=i+16|0;h=o;b=o+4|0;d=a+12|0;l=c[d>>2]|0;m=Wb(l,-1,b)|0;n=a+16|0;if((c[a>>2]|0)!=(n|0))Fb(l,-2);k=c[b>>2]|0;f=c[d>>2]|0;g=a+4|0;d=c[g>>2]|0;j=a+8|0;b=c[j>>2]|0;if((d-b|0)>>>0<k>>>0){e=d<<1;e=(e-b|0)>>>0<k>>>0?b+k|0:e;if(e>>>0<b>>>0|(e-b|0)>>>0<k>>>0)Lg(f,5332,h)|0;d=Rc(f,e)|0;zn(d|0,c[a>>2]|0,c[j>>2]|0)|0;if((c[a>>2]|0)!=(n|0))Eb(f,-2);c[a>>2]=d;c[g>>2]=e;b=c[j>>2]|0}else d=c[a>>2]|0;zn(d+b|0,m|0,k|0)|0;c[j>>2]=(c[j>>2]|0)+k;Eb(l,(c[a>>2]|0)!=(n|0)?-2:-1);i=o;return}function Og(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0;j=i;i=i+128|0;h=j+16|0;f=j+8|0;e=j;g=j+28|0;if(!(Od(a,0,g)|0)){c[e>>2]=b;c[e+4>>2]=d;h=Lg(a,5360,e)|0;i=j;return h|0}Ld(a,9271,g)|0;if(!(Kl(c[g+8>>2]|0,5382)|0)){b=b+-1|0;if(!b){c[f>>2]=c[g+4>>2];c[f+4>>2]=d;h=Lg(a,5389,f)|0;i=j;return h|0}else f=b}else f=b;e=g+4|0;b=c[e>>2]|0;if(!b){if(!(Pg(a,g)|0))b=9458;else b=Wb(a,-1,0)|0;c[e>>2]=b}c[h>>2]=f;c[h+4>>2]=b;c[h+8>>2]=d;h=Lg(a,5419,h)|0;i=j;return h|0}function Pg(a,b){a=a|0;b=b|0;var c=0;c=Cb(a)|0;Ld(a,10011,b)|0;qc(a,-1001e3,2);b=c+1|0;if(!(Qg(a,b,2)|0)){Db(a,c);a=0;return a|0}else{Hb(a,-1,b);Db(a,-3);a=1;return a|0}return 0}function Qg(a,b,c){a=a|0;b=b|0;c=c|0;if(!c){a=0;return a|0}if((Jb(a,-1)|0)!=5){a=0;return a|0}ac(a);if(!(Mc(a,-2)|0)){a=0;return a|0}c=c+-1|0;while(1){if((Jb(a,-2)|0)==4){if(Pb(a,b,-1)|0){b=7;break}if(Qg(a,b,c)|0){b=9;break}}Db(a,-2);if(!(Mc(a,-2)|0)){c=0;b=11;break}}if((b|0)==7){Db(a,-2);a=1;return a|0}else if((b|0)==9){Eb(a,-2);ec(a,12616,1)|0;Fb(a,-2);Nc(a,3);a=1;return a|0}else if((b|0)==11)return c|0;return 0}function Rg(a,b){a=a|0;b=b|0;c[b+12>>2]=a;c[b>>2]=b+16;c[b+8>>2]=0;c[b+4>>2]=1024;return}function Sg(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0;c[b+12>>2]=a;f=b+16|0;c[b>>2]=f;g=b+8|0;c[g>>2]=0;h=b+4|0;c[h>>2]=1024;if(d>>>0<=1024){b=f;a=0;a=b+a|0;return a|0}d=d>>>0>2048?d:2048;e=Rc(a,d)|0;zn(e|0,c[b>>2]|0,c[g>>2]|0)|0;if((c[b>>2]|0)!=(f|0))Eb(a,-2);c[b>>2]=e;c[h>>2]=d;b=e;a=c[g>>2]|0;a=b+a|0;return a|0}function Tg(a,b,c){a=a|0;b=b|0;c=c|0;b=Bb(a,b)|0;if(!(tc(a,b)|0)){c=0;return c|0}fc(a,c)|0;pc(a,-2);if(!(Jb(a,-1)|0)){Db(a,-3);c=0;return c|0}else{Eb(a,-2);Ib(a,b);Ec(a,1,1,0,0);c=1;return c|0}return 0}function Ug(a,b){a=a|0;b=b|0;if((Jb(a,b)|0)!=-1)return;Og(a,b,6472)|0;return}function Vg(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0;f=i;i=i+16|0;e=f;g=f+8|0;d=Tb(a,b,g)|0;if(c[g>>2]|0){i=f;return d|0}h=Kb(a,3)|0;g=Kb(a,Jb(a,b)|0)|0;c[e>>2]=h;c[e+4>>2]=g;Og(a,b,hc(a,5449,e)|0)|0;i=f;return d|0}function Wg(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0;f=i;i=i+16|0;e=f;d=Wb(a,b,d)|0;if(d|0){i=f;return d|0}h=Kb(a,4)|0;g=Kb(a,Jb(a,b)|0)|0;c[e>>2]=h;c[e+4>>2]=g;Og(a,b,hc(a,5449,e)|0)|0;i=f;return d|0}function Xg(a,b){a=a|0;b=b|0;var d=0.0,e=0,f=0,g=0,h=0;f=i;i=i+16|0;e=f;g=f+8|0;d=+Sb(a,b,g);if(c[g>>2]|0){i=f;return +d}h=Kb(a,3)|0;g=Kb(a,Jb(a,b)|0)|0;c[e>>2]=h;c[e+4>>2]=g;Og(a,b,hc(a,5449,e)|0)|0;i=f;return +d}function Yg(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0;j=i;i=i+16|0;h=j+8|0;f=j;if(!d){d=Wb(a,b,0)|0;if(!d){d=Kb(a,4)|0;g=Kb(a,Jb(a,b)|0)|0;c[f>>2]=d;c[f+4>>2]=g;Og(a,b,hc(a,5449,f)|0)|0;g=0}else g=d}else g=Zg(a,b,d,0)|0;d=c[e>>2]|0;a:do if(d|0){f=d;d=0;while(1){if(!(Kl(f,g)|0))break;d=d+1|0;f=c[e+(d<<2)>>2]|0;if(!f)break a}i=j;return d|0}while(0);c[h>>2]=g;h=Og(a,b,hc(a,5469,h)|0)|0;i=j;return h|0}function Zg(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0;h=i;i=i+16|0;g=h;if((Jb(a,b)|0)>=1){f=Wb(a,b,e)|0;if(f|0){g=f;i=h;return g|0}d=Kb(a,4)|0;e=Kb(a,Jb(a,b)|0)|0;c[g>>2]=d;c[g+4>>2]=e;Og(a,b,hc(a,5449,g)|0)|0;g=0;i=h;return g|0}if(!e){g=d;i=h;return g|0}if(!d)f=0;else f=Ql(d)|0;c[e>>2]=f;g=d;i=h;return g|0}function _g(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;f=i;i=i+16|0;e=f;if(wb(a,b+20|0)|0){i=f;return}if(!d){Lg(a,6940,f+8|0)|0;i=f;return}else{c[e>>2]=d;Lg(a,5489,e)|0;i=f;return}}function $g(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0;f=i;i=i+16|0;e=f;if((Jb(a,b)|0)==(d|0)){i=f;return}g=Kb(a,d)|0;d=Kb(a,Jb(a,b)|0)|0;c[e>>2]=g;c[e+4>>2]=d;Og(a,b,hc(a,5449,e)|0)|0;i=f;return}function ah(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0;g=i;i=i+16|0;f=g;e=Zb(a,b)|0;if((e|0?tc(a,b)|0:0)?(oc(a,-1001e3,d),h=(Pb(a,-1,-2)|0)==0,Db(a,-3),!h):0){h=e;i=g;return h|0}h=Kb(a,Jb(a,b)|0)|0;c[f>>2]=d;c[f+4>>2]=h;Og(a,b,hc(a,5449,f)|0)|0;h=0;i=g;return h|0}function bh(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0;f=i;i=i+16|0;e=f;g=f+8|0;d=Ub(a,b,g)|0;if(c[g>>2]|0){i=f;return d|0}h=Kb(a,3)|0;g=Kb(a,Jb(a,b)|0)|0;c[e>>2]=h;c[e+4>>2]=g;Og(a,b,hc(a,5449,e)|0)|0;i=f;return d|0}function ch(a,b){a=a|0;b=+b;var c=0.0,d=0,e=0,f=0,g=0,j=0;j=i;i=i+32|0;g=j+24|0;f=j+8|0;e=j;d=Ab(a)|0;if((d|0)==(Ab(0)|0)){c=+h[d>>3];if(c!=b){h[f>>3]=b;h[f+8>>3]=c;Lg(a,5535,f)|0}}else Lg(a,5509,e)|0;bc(a,-4660.0);if((Tb(a,-1,0)|0)==-4660?(Ub(a,-1,0)|0)==-4660:0){Db(a,-2);i=j;return}Lg(a,5589,g)|0;Db(a,-2);i=j;return}function dh(a,b){a=a|0;b=b|0;switch(b|0){case -1:{b=c[(il()|0)>>2]|0;ac(a);fc(a,dm(b)|0)|0;cc(a,b);return 3}case 0:{jc(a,1);break}default:ac(a)}fc(a,8208)|0;cc(a,b);return 3}function eh(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0;g=i;i=i+16|0;f=g;e=c[(il()|0)>>2]|0;if(b|0){jc(a,1);f=1;i=g;return f|0}ac(a);b=dm(e)|0;if(!d)fc(a,b)|0;else{c[f>>2]=d;c[f+4>>2]=b;hc(a,5657,f)|0}cc(a,e);f=3;i=g;return f|0}function fh(a,b,c){a=a|0;b=b|0;c=c|0;if(!(tc(a,b)|0)){b=0;return b|0}fc(a,c)|0;pc(a,-2);if(!(Jb(a,-1)|0)){Db(a,-3);b=0;return b|0}else{Eb(a,-2);b=1;return b|0}return 0}function gh(a,b,c){a=a|0;b=b|0;c=c|0;oc(a,b,c);if((Jb(a,-1)|0)==5){b=1;return b|0}Db(a,-2);b=Bb(a,b)|0;sc(a,0,0);Ib(a,-1);xc(a,b,c);b=0;return b|0}function hh(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;u=i;i=i+1072|0;o=u+16|0;n=u+8|0;m=u;t=u+24|0;l=Ql(d)|0;q=t+12|0;c[q>>2]=a;s=t+16|0;c[t>>2]=s;r=t+8|0;c[r>>2]=0;p=t+4|0;c[p>>2]=1024;j=Pm(b,d)|0;if(!j){k=b;b=0;f=1024;h=a}else{g=b;b=0;f=1024;h=a;do{k=j-g|0;if((f-b|0)>>>0<k>>>0){f=f<<1;f=(f-b|0)>>>0<k>>>0?b+k|0:f;if(f>>>0<b>>>0|(f-b|0)>>>0<k>>>0)Lg(h,5332,m)|0;b=Rc(h,f)|0;zn(b|0,c[t>>2]|0,c[r>>2]|0)|0;if((c[t>>2]|0)!=(s|0))Eb(h,-2);c[t>>2]=b;c[p>>2]=f;f=b;b=c[r>>2]|0}else f=c[t>>2]|0;zn(f+b|0,g|0,k|0)|0;b=(c[r>>2]|0)+k|0;c[r>>2]=b;h=Ql(e)|0;g=c[q>>2]|0;f=c[p>>2]|0;if((f-b|0)>>>0<h>>>0){f=f<<1;f=(f-b|0)>>>0<h>>>0?h+b|0:f;if(f>>>0<b>>>0|(f-b|0)>>>0<h>>>0)Lg(g,5332,n)|0;b=Rc(g,f)|0;zn(b|0,c[t>>2]|0,c[r>>2]|0)|0;if((c[t>>2]|0)!=(s|0))Eb(g,-2);c[t>>2]=b;c[p>>2]=f;f=b;b=c[r>>2]|0}else f=c[t>>2]|0;zn(f+b|0,e|0,h|0)|0;b=(c[r>>2]|0)+h|0;c[r>>2]=b;g=j+l|0;j=Pm(g,d)|0;h=c[q>>2]|0;f=c[p>>2]|0}while((j|0)!=0);k=g}j=Ql(k)|0;if((f-b|0)>>>0<j>>>0){g=f<<1;g=(g-b|0)>>>0<j>>>0?b+j|0:g;if(g>>>0<b>>>0|(g-b|0)>>>0<j>>>0)Lg(h,5332,o)|0;f=Rc(h,g)|0;zn(f|0,c[t>>2]|0,c[r>>2]|0)|0;if((c[t>>2]|0)!=(s|0))Eb(h,-2);c[t>>2]=f;c[p>>2]=g;b=c[r>>2]|0}else f=c[t>>2]|0;zn(f+b|0,k|0,j|0)|0;p=(c[r>>2]|0)+j|0;c[r>>2]=p;b=c[q>>2]|0;ec(b,c[t>>2]|0,p)|0;if((c[t>>2]|0)==(s|0)){t=Wb(a,-1,0)|0;i=u;return t|0}Eb(b,-2);t=Wb(a,-1,0)|0;i=u;return t|0}function ih(a,b){a=a|0;b=b|0;var d=0,e=0;d=i;i=i+16|0;e=d+4|0;Oc(a,b);b=Tb(a,-1,e)|0;if(!(c[e>>2]|0))Lg(a,5664,d)|0;Db(a,-2);i=d;return b|0}function jh(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;g=i;i=i+16|0;h=g;c[h>>2]=b;c[h+4>>2]=d;d=Hc(a,23,h,e,f)|0;i=g;return d|0}function kh(a,b,d){a=a|0;b=b|0;d=d|0;var e=0;a=b+4|0;e=c[a>>2]|0;if(!e){b=0;return b|0}c[d>>2]=e;c[a>>2]=0;b=c[b>>2]|0;return b|0}function lh(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0;o=i;i=i+1088|0;n=o+40|0;j=o+24|0;g=o+8|0;f=o;l=o+56|0;h=o+52|0;m=(Cb(b)|0)+1|0;if(d){c[f>>2]=d;hc(b,5701,f)|0;k=zm(d,9460)|0;c[l+4>>2]=k;if(!k){n=dm(c[(il()|0)>>2]|0)|0;l=(Wb(b,m,0)|0)+1|0;c[g>>2]=7628;c[g+4>>2]=l;c[g+8>>2]=n;hc(b,5705,g)|0;Eb(b,m);n=7;i=o;return n|0}}else{ec(b,5694,6)|0;c[l+4>>2]=c[480]}if(mh(l,h)|0){k=c[l>>2]|0;c[l>>2]=k+1;a[l+8+k>>0]=10}f=c[h>>2]|0;k=(d|0)!=0;do if(k&(f|0)==27){g=l+4|0;d=_m(d,5722,c[g>>2]|0)|0;c[g>>2]=d;if(d|0){mh(l,h)|0;f=c[h>>2]|0;break}n=dm(c[(il()|0)>>2]|0)|0;l=(Wb(b,m,0)|0)+1|0;c[j>>2]=5725;c[j+4>>2]=l;c[j+8>>2]=n;hc(b,5705,j)|0;Eb(b,m);n=7;i=o;return n|0}while(0);if((f|0)!=-1){j=c[l>>2]|0;c[l>>2]=j+1;a[l+8+j>>0]=f}h=Hc(b,24,l,Wb(b,-1,0)|0,e)|0;f=c[l+4>>2]|0;g=Im(f)|0;if(k)Dm(f)|0;if(!g){Eb(b,m);n=h;i=o;return n|0}else{Db(b,m);l=dm(c[(il()|0)>>2]|0)|0;k=(Wb(b,m,0)|0)+1|0;c[n>>2]=7683;c[n+4>>2]=k;c[n+8>>2]=l;hc(b,5705,n)|0;Eb(b,m);n=7;i=o;return n|0}return 0}function mh(b,d){b=b|0;d=d|0;var e=0,f=0,g=0;c[b>>2]=0;f=b+4|0;e=kn(c[f>>2]|0)|0;a:do switch(e|0){case -1:{g=5;break}case 239:{e=c[b>>2]|0;c[b>>2]=e+1;a[b+8+e>>0]=-17;e=kn(c[f>>2]|0)|0;switch(e|0){case -1:{g=5;break a}case 187:break;default:break a}e=c[b>>2]|0;c[b>>2]=e+1;a[b+8+e>>0]=-69;e=kn(c[f>>2]|0)|0;switch(e|0){case -1:{g=5;break a}case 191:break;default:break a}a[(c[b>>2]|0)+(b+8)>>0]=-65;c[b>>2]=0;e=kn(c[f>>2]|0)|0;break}default:{}}while(0);if((g|0)==5){c[d>>2]=-1;g=0;return g|0}c[d>>2]=e;if((e|0)!=35){g=0;return g|0}b:while(1)switch(kn(c[f>>2]|0)|0){case 10:case -1:break b;default:{}}c[d>>2]=kn(c[f>>2]|0)|0;g=1;return g|0}function nh(a,b,d){a=a|0;b=b|0;d=d|0;a=c[b>>2]|0;if((a|0)>0){c[d>>2]=a;c[b>>2]=0;b=b+8|0;return b|0}a=b+4|0;if(Hm(c[a>>2]|0)|0){b=0;return b|0}b=b+8|0;c[d>>2]=hn(b,1,1024,c[a>>2]|0)|0;return b|0}function oh(a,b){a=a|0;b=b|0;var d=0,e=0,f=0;d=i;i=i+16|0;e=d;f=Ql(b)|0;c[e>>2]=b;c[e+4>>2]=f;b=Hc(a,23,e,b,0)|0;i=d;return b|0}function ph(a,b){a=a|0;b=b|0;oc(a,-1001e3,b);if(Jb(a,-1)|0){b=0;return b|0}Db(a,-2);sc(a,0,0);Ib(a,-1);xc(a,-1001e3,b);b=1;return b|0}function qh(){var a=0;a=Of(18,0)|0;if(!a)return a|0;zb(a,159)|0;return a|0}function rh(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;if(!d){nn(b);a=0;return a|0}else{a=on(b,d)|0;return a|0}return 0}function sh(a){a=a|0;var b=0,d=0,e=0;b=i;i=i+16|0;e=b;d=c[539]|0;c[e>>2]=Wb(a,-1,0)|0;Om(d,5732,e)|0;Em(d)|0;i=b;return 0}function th(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0;ch(a,502.0);if(b|0){if((d|0)!=0?(c[d>>2]|0)!=0:0){g=d;f=0;do{f=f+1|0;g=g+8|0}while((c[g>>2]|0)!=0)}else f=0;uh(a,b,f);Fb(a,~e)}if(!d){Db(a,~e);return}else{wh(a,d,e);return}}function uh(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;f=i;i=i+16|0;e=f;vh(a,-1001e3,9963,1)|0;oc(a,-1,b);if((Jb(a,-1)|0)==5){Eb(a,-2);i=f;return}Db(a,-2);qc(a,-1001e3,2);if(vh(a,0,b,d)|0){c[e>>2]=b;Lg(a,5782,e)|0}Ib(a,-1);xc(a,-3,b);Eb(a,-2);i=f;return}function vh(b,c,d,e){b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0;if(c)Ib(b,c);while(1){c=Bm(d,46)|0;if(!c)c=d+(Ql(d)|0)|0;f=c-d|0;ec(b,d,f)|0;pc(b,-2);if(Jb(b,-1)|0){if((Jb(b,-1)|0)!=5)break}else{Db(b,-2);sc(b,0,(a[c>>0]|0)==46?1:e);ec(b,d,f)|0;Ib(b,-2);wc(b,-4)}Eb(b,-2);if((a[c>>0]|0)==46)d=c+1|0;else{d=0;g=10;break}}if((g|0)==10)return d|0;Db(b,-3);g=d;return g|0}
function wh(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0;h=i;i=i+16|0;e=h;ch(a,502.0);if(!(wb(a,d+20|0)|0)){c[e>>2]=5812;Lg(a,5489,e)|0}if(!(c[b>>2]|0)){d=~d;Db(a,d);i=h;return}g=-2-d|0;f=0-d|0;if((d|0)<=0){do{ic(a,c[b+4>>2]|0,d);xc(a,g,c[b>>2]|0);b=b+8|0}while((c[b>>2]|0)!=0);d=~d;Db(a,d);i=h;return}do{e=0;do{Ib(a,f);e=e+1|0}while((e|0)!=(d|0));ic(a,c[b+4>>2]|0,d);xc(a,g,c[b>>2]|0);b=b+8|0}while((c[b>>2]|0)!=0);d=~d;Db(a,d);i=h;return}function xh(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0;g=i;i=i+16|0;f=g;e=g+8|0;if((Jb(a,b)|0)<1){f=d;i=g;return f|0}d=Tb(a,b,e)|0;if(!(c[e>>2]|0)){h=Kb(a,3)|0;e=Kb(a,Jb(a,b)|0)|0;c[f>>2]=h;c[f+4>>2]=e;Og(a,b,hc(a,5449,f)|0)|0}h=d;i=g;return h|0}function yh(a,b,d){a=a|0;b=b|0;d=+d;var e=0,f=0,g=0,h=0;g=i;i=i+16|0;f=g;e=g+8|0;if((Jb(a,b)|0)<1){i=g;return +d}d=+Sb(a,b,e);if(!(c[e>>2]|0)){h=Kb(a,3)|0;e=Kb(a,Jb(a,b)|0)|0;c[f>>2]=h;c[f+4>>2]=e;Og(a,b,hc(a,5449,f)|0)|0}i=g;return +d}function zh(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0;g=i;i=i+16|0;f=g;e=g+8|0;if((Jb(a,b)|0)<1){f=d;i=g;return f|0}d=Ub(a,b,e)|0;if(!(c[e>>2]|0)){h=Kb(a,3)|0;e=Kb(a,Jb(a,b)|0)|0;c[f>>2]=h;c[f+4>>2]=e;Og(a,b,hc(a,5449,f)|0)|0}h=d;i=g;return h|0}function Ah(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0;k=i;i=i+16|0;g=c[a+12>>2]|0;h=a+4|0;d=c[h>>2]|0;j=a+8|0;f=c[j>>2]|0;if((d-f|0)>>>0>=b>>>0){j=c[a>>2]|0;a=f;a=j+a|0;i=k;return a|0}e=d<<1;e=(e-f|0)>>>0<b>>>0?f+b|0:e;if(e>>>0<f>>>0|(e-f|0)>>>0<b>>>0)Lg(g,5332,k)|0;d=Rc(g,e)|0;zn(d|0,c[a>>2]|0,c[j>>2]|0)|0;if((c[a>>2]|0)!=(a+16|0))Eb(g,-2);c[a>>2]=d;c[h>>2]=e;h=d;a=c[j>>2]|0;a=h+a|0;i=k;return a|0}function Bh(a){a=a|0;var b=0;b=c[a+12>>2]|0;ec(b,c[a>>2]|0,c[a+8>>2]|0)|0;if((c[a>>2]|0)==(a+16|0))return;Eb(b,-2);return}function Ch(a,b){a=a|0;b=b|0;var d=0,e=0;e=a+8|0;d=(c[e>>2]|0)+b|0;c[e>>2]=d;b=c[a+12>>2]|0;ec(b,c[a>>2]|0,d)|0;if((c[a>>2]|0)==(a+16|0))return;Eb(b,-2);return}function Dh(a,b){a=a|0;b=b|0;var c=0;if(!(Jb(a,-1)|0)){Db(a,-2);a=-1;return a|0}c=Bb(a,b)|0;qc(a,c,0);b=Tb(a,-1,0)|0;Db(a,-2);if(!b)b=(Xb(a,c)|0)+1|0;else{qc(a,c,b);zc(a,c,0)}zc(a,c,b);a=b;return a|0}function Eh(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;ic(a,c,0);fc(a,b)|0;Ec(a,1,1,0,0);gh(a,-1001e3,9963)|0;Ib(a,-2);xc(a,-2,b);Db(a,-2);if(!d)return;Ib(a,-1);vc(a,b);return}function Fh(a,b){a=a|0;b=b|0;oc(a,-1001e3,b);Bc(a,-2)|0;return}function Gh(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=Zb(a,b)|0;if(!d){b=0;return b|0}if(!(tc(a,b)|0)){b=0;return b|0}oc(a,-1001e3,c);b=(Pb(a,-1,-2)|0)==0;Db(a,-3);b=b?0:d;return b|0}function Hh(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0;f=i;i=i+16|0;e=f;a:do if(!(Tg(a,b,7799)|0))switch(Jb(a,b)|0){case 4:case 3:{Ib(a,b);break a}case 1:{e=(Vb(a,b)|0)!=0;fc(a,e?5830:5835)|0;break a}case 0:{ec(a,5841,3)|0;break a}default:{g=Kb(a,Jb(a,b)|0)|0;b=$b(a,b)|0;c[e>>2]=g;c[e+4>>2]=b;hc(a,5845,e)|0;break a}}while(0);g=Wb(a,-1,d)|0;i=f;return g|0}function Ih(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0;y=i;i=i+256|0;v=y+40|0;u=y+32|0;x=y+24|0;w=y+16|0;t=y+8|0;k=y;j=y+148|0;s=y+48|0;r=Cb(b)|0;g=1;h=1;while(1)if(!(Od(d,g,j)|0))break;else{h=g;g=g<<1}if((h|0)<(g|0))do{q=(g+h|0)/2|0;p=(Od(d,q,j)|0)==0;g=p?q:g;h=p?h:q+1|0}while((h|0)<(g|0));q=(g+-1|0)>22?12:0;if(e|0){c[k>>2]=e;hc(b,6867,k)|0}ec(b,5852,16)|0;if(!(Od(d,f,s)|0)){x=Cb(b)|0;x=x-r|0;Nc(b,x);i=y;return}j=g+-11|0;e=s+36|0;k=s+20|0;l=s+8|0;m=s+12|0;n=s+24|0;o=s+35|0;p=s+4|0;g=f;do{g=g+1|0;if((g|0)==(q|0)){ec(b,5869,5)|0;g=j}else{Ld(d,5875,s)|0;c[t>>2]=e;hc(b,5880,t)|0;h=c[k>>2]|0;if((h|0)>0){c[w>>2]=h;hc(b,5886,w)|0}ec(b,5890,4)|0;a:do if(!(a[c[l>>2]>>0]|0))switch(a[c[m>>2]>>0]|0){case 109:{ec(b,5909,10)|0;break a}case 67:if(!(Pg(b,s)|0)){ec(b,9458,1)|0;break a}else{c[u>>2]=Wb(b,-1,0)|0;hc(b,5895,u)|0;Eb(b,-2);break a}default:{f=c[n>>2]|0;c[v>>2]=e;c[v+4>>2]=f;hc(b,5920,v)|0;break a}}else{c[x>>2]=c[p>>2];hc(b,5895,x)|0}while(0);if(a[o>>0]|0)ec(b,5937,20)|0;Nc(b,(Cb(b)|0)-r|0)}}while((Od(d,g,s)|0)!=0);x=Cb(b)|0;x=x-r|0;Nc(b,x);i=y;return}function Jh(a,b,c){a=a|0;b=b|0;c=c|0;if((c|0)<=-1)return;b=Bb(a,b)|0;qc(a,b,0);zc(a,b,c);cc(a,c);zc(a,b,0);return}function Kh(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0;g=i;i=i+112|0;f=g;e=g+8|0;if(Od(a,b,e)|0?(Ld(a,5349,e)|0,d=c[e+20>>2]|0,(d|0)>0):0){c[f>>2]=e+36;c[f+4>>2]=d;hc(a,5352,f)|0;i=g;return}ec(a,15608,0)|0;i=g;return}function Lh(a){a=a|0;qc(a,-1001e3,2);qc(a,-1001e3,2);xc(a,-2,10122);wh(a,264,0);ec(a,6487,7)|0;xc(a,-2,6495);return 1}function Mh(a){a=a|0;var b=0,d=0;d=i;i=i+16|0;b=d;if(!(Vb(a,1)|0)){c[b>>2]=Zg(a,2,5965,0)|0;b=Lg(a,7625,b)|0;i=d;return b|0}else{b=Cb(a)|0;i=d;return b|0}return 0}function Nh(a){a=a|0;var b=0,d=0;d=c[504+((Yg(a,1,5998,456)|0)<<2)>>2]|0;b=Kc(a,d,xh(a,2,0)|0)|0;switch(d|0){case 3:{d=Kc(a,4,0)|0;bc(a,+(b|0)+ +(d|0)*.0009765625);cc(a,d);d=2;return d|0}case 9:case 5:{jc(a,b);d=1;return d|0}default:{cc(a,b);d=1;return d|0}}return 0}function Oh(a){a=a|0;var b=0;b=Zg(a,1,0,0)|0;Db(a,1);if(!(lh(a,b,0)|0)){Ec(a,0,-1,0,160);return (Cb(a)|0)+-1|0}else Lc(a)|0;return 0}function Ph(a){a=a|0;return (Cb(a)|0)+-1|0}function Qh(a){a=a|0;var b=0;b=xh(a,2,1)|0;Db(a,1);if(!((b|0)>0&(Nb(a,1)|0)!=0))Lc(a)|0;Kh(a,b);Ib(a,1);Nc(a,2);Lc(a)|0;return 0}function Rh(a){a=a|0;Ug(a,1);if(!(tc(a,1)|0)){ac(a);return 1}else{fh(a,1,6104)|0;return 1}return 0}function Sh(a){a=a|0;Uh(a,6123,1,161);return 3}function Th(a){a=a|0;var b=0;b=Vg(a,2)|0;$g(a,1,5);b=b+1|0;cc(a,b);qc(a,1,b);a=(Jb(a,-1)|0)==0;return (a?1:2)|0}function Uh(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;if(fh(a,1,b)|0){Ib(a,1);Ec(a,1,3,0,0);return}$g(a,1,5);ic(a,d,0);Ib(a,1);if(!c){ac(a);return}else{cc(a,0);return}}function Vh(a){a=a|0;var b=0,c=0,d=0;d=Zg(a,1,0,0)|0;c=Zg(a,2,0,0)|0;b=(Jb(a,3)|0)!=-1;if(lh(a,d,c)|0){ac(a);Fb(a,-2);d=2;return d|0}if(!b){d=1;return d|0}Ib(a,b?3:0);if(Tc(a,-2,1)|0){d=1;return d|0}Db(a,-2);d=1;return d|0}function Wh(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0;g=i;i=i+16|0;e=g;b=Wb(a,1,e)|0;d=Zg(a,3,6146,0)|0;f=(Jb(a,4)|0)!=-1;if(!b){b=Zg(a,2,6149,0)|0;$g(a,1,6);Db(a,5);b=Hc(a,25,0,b,d)|0}else{h=Zg(a,2,b,0)|0;b=jh(a,b,c[e>>2]|0,h,d)|0}if(b|0){ac(a);Fb(a,-2);h=2;i=g;return h|0}if(!f){h=1;i=g;return h|0}Ib(a,f?4:0);if(Tc(a,-2,1)|0){h=1;i=g;return h|0}Db(a,-2);h=1;i=g;return h|0}function Xh(a,b,d){a=a|0;b=b|0;d=d|0;b=i;i=i+16|0;_g(a,2,6157);Ib(a,1);Ec(a,0,1,0,0);if(!(Jb(a,-1)|0)){Db(a,-2);c[d>>2]=0;d=0;i=b;return d|0}if(!(Nb(a,-1)|0))Lg(a,6183,b)|0;Gb(a,5);d=Wb(a,5,d)|0;i=b;return d|0}function Yh(a){a=a|0;$g(a,1,5);Db(a,2);if(Mc(a,1)|0){a=2;return a|0}ac(a);a=1;return a|0}function Zh(a){a=a|0;Uh(a,6242,0,26);return 3}function _h(a){a=a|0;var b=0;Ug(a,1);ac(a);Fb(a,1);b=Fc(a,(Cb(a)|0)+-2|0,-1,0,0,162)|0;if(!(wb(a,1)|0)){Db(a,0);jc(a,0);fc(a,6940)|0;a=2;return a|0}else{jc(a,(b|0)==0&1);Gb(a,1);a=Cb(a)|0;return a|0}return 0}function $h(a){a=a|0;var b=0;b=Dc(a,0)|0;if(!(wb(a,1)|0)){Db(a,0);jc(a,0);fc(a,6940)|0;a=2;return a|0}else{jc(a,(b|0)==1&1);Gb(a,1);a=Cb(a)|0;return a|0}return 0}function ai(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0;j=i;i=i+16|0;h=j;g=j+4|0;d=Cb(a)|0;mc(a,6262);a:do if((d|0)<1)b=c[509]|0;else{b=c[509]|0;f=1;while(1){Ib(a,-1);Ib(a,f);Ec(a,1,1,0,0);e=Wb(a,-1,g)|0;if(!e)break;if((f|0)>1)Wm(9,b)|0;dn(e,1,c[g>>2]|0,b)|0;Db(a,-2);if((f|0)<(d|0))f=f+1|0;else break a}h=Lg(a,6271,h)|0;i=j;return h|0}while(0);Wm(10,b)|0;Em(b)|0;h=0;i=j;return h|0}function bi(a){a=a|0;Ug(a,1);Ug(a,2);jc(a,Pb(a,1,2)|0);return 1}function ci(a){a=a|0;if((Jb(a,1)|0|1|0)!=5)Og(a,1,6330)|0;cc(a,Xb(a,1)|0);return 1}function di(a){a=a|0;$g(a,1,5);Ug(a,2);Db(a,2);pc(a,1);return 1}function ei(a){a=a|0;$g(a,1,5);Ug(a,2);Ug(a,3);Db(a,3);yc(a,1);return 1}function fi(b){b=b|0;var c=0,d=0;c=Cb(b)|0;if((Jb(b,1)|0)==4?(a[(Wb(b,1,0)|0)>>0]|0)==35:0){cc(b,c+-1|0);d=1;return d|0}d=Vg(b,1)|0;d=(d|0)<0?d+c|0:(d|0)>(c|0)?c:d;if((d|0)<=0)Og(b,1,6376)|0;d=c-d|0;return d|0}function gi(a){a=a|0;var b=0,c=0,d=0;c=i;i=i+16|0;b=c;d=Jb(a,2)|0;$g(a,1,5);switch(d|0){case 0:case 5:break;default:Og(a,2,7355)|0}if(!(fh(a,1,6104)|0)){Db(a,2);Bc(a,1)|0;d=1;i=c;return d|0}else{d=Lg(a,6395,b)|0;i=c;return d|0}return 0}function hi(b){b=b|0;var e=0.0,f=0,g=0,h=0,j=0.0,k=0,l=0,m=0,n=0;n=i;i=i+16|0;f=n;do if((Jb(b,2)|0)>=1){g=Wg(b,1,f)|0;m=g+(c[f>>2]|0)|0;k=Vg(b,2)|0;if((k+-2|0)>>>0>=35)Og(b,2,6440)|0;f=g+(wm(g,6458)|0)|0;switch(a[f>>0]|0){case 45:{l=1;f=f+1|0;break}case 43:{l=0;f=f+1|0;break}default:l=0}if(Ml(d[f>>0]|0)|0){j=+(k|0);e=0.0;do{g=a[f>>0]|0;h=g&255;if((h+-48|0)>>>0<10)g=(g<<24>>24)+-48|0;else g=(Gl(h)|0)+-55|0;if((g|0)>=(k|0))break;e=j*e+ +(g|0);f=f+1|0}while((Ml(d[f>>0]|0)|0)!=0);if((f+(wm(f,6458)|0)|0)==(m|0)){bc(b,l|0?-e:e);i=n;return 1}}}else{e=+Sb(b,1,f);if(!(c[f>>2]|0)){Ug(b,1);break}bc(b,e);i=n;return 1}while(0);ac(b);i=n;return 1}function ii(a){a=a|0;Ug(a,1);Hh(a,1,0)|0;return 1}function ji(a){a=a|0;Ug(a,1);fc(a,Kb(a,Jb(a,1)|0)|0)|0;return 1}function ki(a){a=a|0;var b=0;b=Cb(a)|0;if((b|0)<=1)Og(a,2,6472)|0;Ib(a,1);Hb(a,2,1);Gb(a,2);b=Fc(a,b+-2|0,-1,1,0,162)|0;if(!(wb(a,1)|0)){Db(a,0);jc(a,0);fc(a,6940)|0;a=2;return a|0}else{jc(a,(b|0)==0&1);Gb(a,1);a=Cb(a)|0;return a|0}return 0}function li(a){a=a|0;sc(a,0,12);wh(a,548,0);return 1}function mi(a){a=a|0;var b=0,c=0;b=bh(a,1)|0;c=Vg(a,2)|0;if((b|0)<0&(c|0)>-1){if((c|0)>31)b=-1;else b=b>>>c|~(-1>>>c);dc(a,b);return 1}if((c|0)>0)b=(c|0)>31?0:b>>>c;else b=(c|0)<-31?0:b<<0-c;dc(a,b);return 1}function ni(a){a=a|0;var b=0,c=0,d=0;c=Cb(a)|0;if((c|0)<1)b=-1;else{d=1;b=-1;while(1){b=(bh(a,d)|0)&b;if((d|0)==(c|0))break;else d=d+1|0}}dc(a,b);return 1}function oi(a){a=a|0;dc(a,~(bh(a,1)|0));return 1}function pi(a){a=a|0;var b=0,c=0,d=0;c=Cb(a)|0;if((c|0)<1)b=0;else{d=1;b=0;while(1){b=bh(a,d)|0|b;if((d|0)==(c|0))break;else d=d+1|0}}dc(a,b);return 1}function qi(a){a=a|0;var b=0,c=0,d=0;c=Cb(a)|0;if((c|0)<1)b=0;else{d=1;b=0;while(1){b=(bh(a,d)|0)^b;if((d|0)==(c|0))break;else d=d+1|0}}dc(a,b);return 1}function ri(a){a=a|0;var b=0,c=0,d=0;c=Cb(a)|0;if((c|0)<1)b=1;else{d=1;b=-1;while(1){b=(bh(a,d)|0)&b;if((d|0)==(c|0))break;else d=d+1|0}b=(b|0)!=0}jc(a,b&1);return 1}function si(a){a=a|0;var b=0,c=0,d=0,e=0;e=i;i=i+16|0;b=bh(a,1)|0;c=Vg(a,2)|0;d=xh(a,3,1)|0;if((c|0)<=-1)Og(a,2,6545)|0;if((d|0)<=0)Og(a,3,6570)|0;if((d+c|0)>32)Lg(a,6593,e)|0;dc(a,b>>>c&~(-2<<d+-1));i=e;return 1}function ti(a){a=a|0;var b=0,c=0;c=Vg(a,2)|0;b=bh(a,1)|0;c=c&31;if(!c){c=b;dc(a,c);return 1}c=b>>>(32-c|0)|b<<c;dc(a,c);return 1}function ui(a){a=a|0;var b=0,c=0;b=bh(a,1)|0;c=Vg(a,2)|0;if((c|0)<0)if((c|0)<-31)b=0;else b=b>>>(0-c|0);else b=(c|0)>31?0:b<<c;dc(a,b);return 1}function vi(a){a=a|0;var b=0,c=0,d=0,e=0,f=0;f=i;i=i+16|0;b=bh(a,1)|0;c=bh(a,2)|0;d=Vg(a,3)|0;e=xh(a,4,1)|0;if((d|0)<=-1)Og(a,3,6545)|0;if((e|0)<=0)Og(a,4,6570)|0;if((e+d|0)>32)Lg(a,6593,f)|0;e=~(-2<<e+-1);dc(a,b&~(e<<d)|(c&e)<<d);i=f;return 1}function wi(a){a=a|0;var b=0,c=0;c=0-(Vg(a,2)|0)|0;b=bh(a,1)|0;c=c&31;if(!c){c=b;dc(a,c);return 1}c=b>>>(32-c|0)|b<<c;dc(a,c);return 1}function xi(a){a=a|0;var b=0,c=0;b=bh(a,1)|0;c=Vg(a,2)|0;if((c|0)>0){c=(c|0)>31?0:b>>>c;dc(a,c);return 1}else{c=(c|0)<-31?0:b<<0-c;dc(a,c);return 1}return 0}function yi(a){a=a|0;sc(a,0,6);wh(a,652,0);return 1}function zi(a){a=a|0;var b=0;$g(a,1,6);b=Qf(a)|0;Ib(a,1);yb(a,b,1);return 1}function Ai(a){a=a|0;var b=0;b=_b(a,1)|0;if(!b)Og(a,1,6680)|0;b=Bi(a,b,(Cb(a)|0)+-1|0)|0;if((b|0)<0){jc(a,0);Fb(a,-2);a=2;return a|0}else{jc(a,1);Fb(a,~b);a=b+1|0;return a|0}return 0}function Bi(a,b,c){a=a|0;b=b|0;c=c|0;if(!(wb(b,c)|0)){ec(a,6699,28)|0;b=-1;return b|0}if((Jc(b)|0)==0?(Cb(b)|0)==0:0){ec(a,6728,28)|0;b=-1;return b|0}yb(a,b,c);if((Xd(b,a,c)|0|1|0)!=1){yb(b,a,1);b=-1;return b|0}c=Cb(b)|0;if(!(wb(a,c+1|0)|0)){Db(b,~c);ec(a,6757,26)|0;b=-1;return b|0}else{yb(b,a,c);b=c;return b|0}return 0}function Ci(a){a=a|0;jc(a,lc(a)|0);return 2}function Di(a){a=a|0;var b=0,c=0;c=i;i=i+112|0;b=_b(a,1)|0;if(!b)Og(a,1,6680)|0;if((b|0)==(a|0)){ec(a,6784,7)|0;i=c;return 1}switch(Jc(b)|0){case 1:{ec(a,6799,9)|0;i=c;return 1}case 0:{do if((Od(b,0,c)|0)<=0)if(!(Cb(b)|0)){ec(a,6816,4)|0;break}else{ec(a,6799,9)|0;break}else ec(a,6809,6)|0;while(0);i=c;return 1}default:{ec(a,6816,4)|0;i=c;return 1}}return 0}function Ei(a){a=a|0;var b=0;$g(a,1,6);b=Qf(a)|0;Ib(a,1);yb(a,b,1);ic(a,163,1);return 1}function Fi(a){a=a|0;var b=0;b=_b(a,-1001001)|0;b=Bi(a,b,Cb(a)|0)|0;if((b|0)>=0)return b|0;if(!(Nb(a,-1)|0))Lc(a)|0;Kh(a,1);Fb(a,-2);Nc(a,2);Lc(a)|0;return 0}function Gi(a){a=a|0;return ee(a,Cb(a)|0,0,0)|0}function Hi(a){a=a|0;sc(a,0,16);wh(a,708,0);return 1}function Ii(a){a=a|0;var b=0,d=0,e=0,f=0,g=0;g=i;i=i+256|0;f=g;e=g+4|0;b=c[539]|0;dn(6832,11,1,b)|0;Em(b)|0;d=c[480]|0;if(!(Gm(e,250,d)|0)){i=g;return 0}while(1){if(!(Kl(e,6844)|0)){b=7;break}if(!((jh(a,e,Ql(e)|0,6850,0)|0)==0?!(Fc(a,0,0,0,0,0)|0):0)){c[f>>2]=Wb(a,-1,0)|0;Om(b,6867,f)|0;Em(b)|0}Db(a,0);dn(6832,11,1,b)|0;Em(b)|0;if(!(Gm(e,250,d)|0)){b=7;break}}if((b|0)==7){i=g;return 0}return 0}function Ji(a){a=a|0;if((Jb(a,1)|0)==7){uc(a,1);return 1}else{ac(a);return 1}return 0}function Ki(b){b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0;g=i;i=i+16|0;c=g;f=g+4|0;if((Jb(b,1)|0)==8)d=_b(b,1)|0;else d=b;e=Kd(d)|0;h=Id(d)|0;if((h|0)!=0&(h|0)!=25)ec(b,6926,13)|0;else{gh(b,-1001e3,6892)|0;if((d|0)!=(b|0)?(wb(d,1)|0)==0:0)Lg(b,6940,c)|0;lc(d)|0;yb(d,b,1);pc(b,-2);Eb(b,-2)}if(!(e&1))c=0;else{a[f>>0]=99;c=1}if(e&2){a[f+c>>0]=114;c=c+1|0}if(!(e&4)){h=c;h=f+h|0;a[h>>0]=0;fc(b,f)|0;h=Jd(d)|0;cc(b,h);i=g;return 3}a[f+c>>0]=108;h=c+1|0;h=f+h|0;a[h>>0]=0;fc(b,f)|0;h=Jd(d)|0;cc(b,h);i=g;return 3}function Li(a,b){a=a|0;b=b|0;gh(a,-1001e3,6892)|0;lc(a)|0;pc(a,-2);if((Jb(a,-1)|0)!=6)return;fc(a,c[844+(c[b>>2]<<2)>>2]|0)|0;b=c[b+20>>2]|0;if((b|0)>-1)cc(a,b);else ac(a);Ec(a,2,0,0,0);return}function Mi(b){b=b|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0;m=i;i=i+112|0;k=m+8|0;g=m;l=m+12|0;if((Jb(b,1)|0)==8){f=_b(b,1)|0;e=Zg(b,3,6963,0)|0;h=(f|0)==(b|0);if(!h)if(!(wb(f,3)|0)){Lg(b,6940,g)|0;j=3;g=2}else{j=3;h=0;g=2}else{j=3;h=1;g=2}}else{f=b;e=Zg(b,2,6963,0)|0;j=2;h=1;g=1}do if(Mb(b,g)|0){if(!(Od(f,Tb(b,g,0)|0,l)|0)){ac(b);l=1;i=m;return l|0}}else{if((Jb(b,g)|0)==6){c[k>>2]=e;hc(b,6970,k)|0;e=Wb(b,-1,0)|0;Ib(b,g);yb(b,f,1);break}l=Og(b,g,6974)|0;i=m;return l|0}while(0);if(!(Ld(f,e,l)|0)){l=Og(b,j,7591)|0;i=m;return l|0}sc(b,0,2);if(Bm(e,83)|0){fc(b,c[l+16>>2]|0)|0;xc(b,-2,7001);fc(b,l+36|0)|0;xc(b,-2,7008);cc(b,c[l+24>>2]|0);xc(b,-2,7018);cc(b,c[l+28>>2]|0);xc(b,-2,7030);fc(b,c[l+12>>2]|0)|0;xc(b,-2,7046)}if(Bm(e,108)|0){cc(b,c[l+20>>2]|0);xc(b,-2,7051)}if(Bm(e,117)|0){cc(b,d[l+32>>0]|0);xc(b,-2,7063);cc(b,d[l+33>>0]|0);xc(b,-2,7068);jc(b,a[l+34>>0]|0);xc(b,-2,7076)}if(Bm(e,110)|0){fc(b,c[l+4>>2]|0)|0;xc(b,-2,7085);fc(b,c[l+8>>2]|0)|0;xc(b,-2,7090)}if(Bm(e,116)|0){jc(b,a[l+35>>0]|0);xc(b,-2,7099)}if(Bm(e,76)|0){if(h){Ib(b,-2);Eb(b,-3)}else yb(f,b,1);xc(b,-2,7110)}if(!(Bm(e,102)|0)){l=1;i=m;return l|0}if(h){Ib(b,-2);Eb(b,-3)}else yb(f,b,1);xc(b,-2,7122);l=1;i=m;return l|0}function Ni(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0;g=i;i=i+112|0;e=g;d=g+4|0;if((Jb(a,1)|0)==8){f=_b(a,1)|0;b=1}else{f=a;b=0}c=Vg(a,b|2)|0;b=b+1|0;if((Jb(a,b)|0)==6){Ib(a,b);fc(a,Nd(a,0,c)|0)|0;a=1;i=g;return a|0}if(!(Od(f,Vg(a,b)|0,d)|0)){a=Og(a,b,7136)|0;i=g;return a|0}if((f|0)!=(a|0)?(wb(f,1)|0)==0:0)Lg(a,6940,e)|0;b=Nd(f,d,c)|0;if(!b){ac(a);a=1;i=g;return a|0}else{yb(f,a,1);fc(a,b)|0;Ib(a,-2);a=2;i=g;return a|0}return 0}function Oi(a){a=a|0;Ib(a,-1001e3);return 1}function Pi(a){a=a|0;Ug(a,1);if(tc(a,1)|0)return 1;ac(a);return 1}function Qi(a){a=a|0;var b=0;b=Vg(a,2)|0;$g(a,1,6);b=Sc(a,1,b)|0;if(!b){a=0;return a|0}fc(a,b)|0;Fb(a,-2);a=2;return a|0}function Ri(a){a=a|0;var b=0,c=0,e=0,f=0;f=i;i=i+112|0;e=f;b=Vg(a,2)|0;$g(a,1,6);Ib(a,1);Ld(a,7203,e)|0;if(!((b|0)>0?(b|0)<=(d[e+32>>0]|0|0):0))Og(a,2,7206)|0;c=Vg(a,4)|0;$g(a,3,6);Ib(a,3);Ld(a,7203,e)|0;if(!((c|0)>0?(c|0)<=(d[e+32>>0]|0|0):0))Og(a,4,7206)|0;if(Lb(a,1)|0)Og(a,1,7228)|0;if(!(Lb(a,3)|0)){Vc(a,1,b,3,c);i=f;return 0}Og(a,3,7228)|0;Vc(a,1,b,3,c);i=f;return 0}function Si(a){a=a|0;var b=0,c=0,e=0;c=i;i=i+112|0;e=c;b=Vg(a,2)|0;$g(a,1,6);Ib(a,1);Ld(a,7203,e)|0;if(!((b|0)>0?(b|0)<=(d[e+32>>0]|0|0):0))Og(a,2,7206)|0;kc(a,Uc(a,1,b)|0);i=c;return 1}function Ti(a){a=a|0;if((Jb(a,1)|0)==2)Og(a,1,7273)|0;$g(a,1,7);if((Jb(a,2)|0)>=1)$g(a,2,5);Db(a,2);Cc(a,1);return 1}function Ui(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0,h=0,j=0;h=i;i=i+16|0;g=h;if((Jb(a,1)|0)==8){e=_b(a,1)|0;b=1}else{e=a;b=0}f=b+1|0;if((Jb(a,f)|0)<1){Db(a,f);b=0;c=0;d=0}else{c=Wg(a,b|2,0)|0;$g(a,f,6);j=xh(a,b+3|0,0)|0;d=(Bm(c,99)|0)!=0&1;b=(Bm(c,114)|0)==0;d=b?d:d|2;b=(Bm(c,108)|0)==0;d=b?d:d|4;b=j;c=25;d=(j|0)>0?d|8:d}if(!(gh(a,-1001e3,6892)|0)){fc(a,7324)|0;xc(a,-2,7326);Ib(a,-1);Bc(a,-2)|0}if((e|0)!=(a|0)?(wb(e,1)|0)==0:0)Lg(a,6940,g)|0;lc(e)|0;yb(e,a,1);Ib(a,f);yc(a,-3);Pd(e,c,d,b)|0;i=h;return 0}function Vi(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0;g=i;i=i+112|0;f=g;d=g+4|0;if((Jb(a,1)|0)==8){b=_b(a,1)|0;e=1}else{b=a;e=0}c=e+1|0;if(!(Od(b,Vg(a,c)|0,d)|0)){f=Og(a,c,7136)|0;i=g;return f|0}c=e+3|0;Ug(a,c);Db(a,c);if((b|0)!=(a|0)?(wb(b,1)|0)==0:0)Lg(a,6940,f)|0;yb(a,b,1);fc(a,Qd(b,d,Vg(a,e|2)|0)|0)|0;f=1;i=g;return f|0}function Wi(a){a=a|0;switch(Jb(a,2)|0){case 0:case 5:break;default:Og(a,2,7355)|0}Db(a,2);Bc(a,1)|0;return 1}function Xi(a){a=a|0;var b=0;Ug(a,3);b=Vg(a,2)|0;$g(a,1,6);b=Tc(a,1,b)|0;if(!b){a=0;return a|0}fc(a,b)|0;Fb(a,-1);a=1;return a|0}function Yi(a){a=a|0;var b=0,c=0,d=0,e=0;if((Jb(a,1)|0)==8){b=_b(a,1)|0;e=1}else{b=a;e=0}c=e+1|0;d=Wb(a,c,0)|0;if((d|0)==0?(Jb(a,c)|0)>=1:0){Ib(a,c);return 1}Ih(a,b,d,xh(a,e|2,(b|0)==(a|0)&1)|0);return 1}function Zi(a){a=a|0;var b=0,d=0,e=0;sc(a,0,11);wh(a,864,0);ph(a,7415)|0;Ib(a,-1);xc(a,-2,9484);wh(a,960,0);Db(a,-2);e=c[480]|0;d=Rc(a,8)|0;b=d+4|0;c[b>>2]=0;Fh(a,7415);c[d>>2]=e;c[b>>2]=164;Ib(a,-1);xc(a,-1001e3,7489);xc(a,-2,7861);b=c[509]|0;d=Rc(a,8)|0;e=d+4|0;c[e>>2]=0;Fh(a,7415);c[d>>2]=b;c[e>>2]=164;Ib(a,-1);xc(a,-1001e3,7404);xc(a,-2,7867);e=c[539]|0;d=Rc(a,8)|0;b=d+4|0;c[b>>2]=0;Fh(a,7415);c[d>>2]=e;c[b>>2]=164;xc(a,-2,7874);return 1}function _i(a){a=a|0;var b=0,d=0,e=0;b=i;i=i+16|0;if((Jb(a,1)|0)==-1)oc(a,-1001e3,7404);if(!(c[(ah(a,1,7415)|0)+4>>2]|0))Lg(a,7421,b)|0;e=(ah(a,1,7415)|0)+4|0;d=c[e>>2]|0;c[e>>2]=0;a=kb[d&255](a)|0;i=b;return a|0}function $i(a){a=a|0;var b=0,d=0,e=0;e=i;i=i+16|0;d=e;oc(a,-1001e3,7404);b=Zb(a,-1)|0;if(!(c[b+4>>2]|0)){c[d>>2]=7408;Lg(a,7456,d)|0}d=eh(a,(Em(c[b>>2]|0)|0)==0&1,0)|0;i=e;return d|0}function aj(a){a=a|0;bj(a,7489,9460);return 1}function bj(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0;h=i;i=i+16|0;g=h+8|0;f=h;if((Jb(a,1)|0)<1){oc(a,-1001e3,b);i=h;return}e=Wb(a,1,0)|0;if(e){j=Rc(a,8)|0;g=j+4|0;c[g>>2]=0;Fh(a,7415);c[j>>2]=0;c[g>>2]=165;g=zm(e,d)|0;c[j>>2]=g;if(!g){j=dm(c[(il()|0)>>2]|0)|0;c[f>>2]=e;c[f+4>>2]=j;Lg(a,7499,f)|0}}else{if(!(c[(ah(a,1,7415)|0)+4>>2]|0))Lg(a,7421,g)|0;Ib(a,1)}xc(a,-1001e3,b);oc(a,-1001e3,b);i=h;return}function cj(a){a=a|0;return eh(a,(Dm(c[(ah(a,1,7415)|0)>>2]|0)|0)==0&1,0)|0}function dj(a){a=a|0;var b=0,d=0,e=0,f=0,g=0;e=i;i=i+16|0;d=e+8|0;b=e;if((Jb(a,1)|0)==-1)ac(a);if(!(Jb(a,1)|0)){oc(a,-1001e3,7489);Gb(a,1);if(c[(ah(a,1,7415)|0)+4>>2]|0){d=0;ej(a,d);i=e;return 1}Lg(a,7421,b)|0;d=0;ej(a,d);i=e;return 1}else{b=Wg(a,1,0)|0;g=Rc(a,8)|0;f=g+4|0;c[f>>2]=0;Fh(a,7415);c[g>>2]=0;c[f>>2]=165;f=zm(b,9460)|0;c[g>>2]=f;if(!f){g=dm(c[(il()|0)>>2]|0)|0;c[d>>2]=b;c[d+4>>2]=g;Lg(a,7499,d)|0}Gb(a,1);g=1;ej(a,g);i=e;return 1}return 0}function ej(a,b){a=a|0;b=b|0;var c=0;c=Cb(a)|0;if((c|0)>=19)Og(a,17,7532)|0;Ib(a,1);cc(a,c+-1|0);jc(a,b);if((c|0)>1)b=1;else{c=c+2|0;ic(a,166,c);return}do{b=b+1|0;Ib(a,b)}while((b|0)!=(c|0));c=c+2|0;ic(a,166,c);return}function fj(a){a=a|0;var b=0,d=0,e=0,f=0,g=0;g=i;i=i+16|0;f=g+8|0;b=Zb(a,-1001001)|0;d=Tb(a,-1001002,0)|0;if(!(c[b+4>>2]|0)){f=Lg(a,7549,g)|0;i=g;return f|0}Db(a,1);if((d|0)>=1){e=1;while(1){Ib(a,-1001003-e|0);if((e|0)==(d|0))break;else e=e+1|0}}b=gj(a,c[b>>2]|0,2)|0;if(Jb(a,0-b|0)|0){f=b;i=g;return f|0}if((b|0)>1){c[f>>2]=Wb(a,1-b|0,0)|0;f=Lg(a,7625,f)|0;i=g;return f|0}if(!(Vb(a,-1001003)|0)){f=0;i=g;return f|0}Db(a,0);Ib(a,-1001001);e=(ah(a,1,7415)|0)+4|0;f=c[e>>2]|0;c[e>>2]=0;kb[f&255](a)|0;f=0;i=g;return f|0}function gj(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;o=i;i=i+1056|0;n=o+1040|0;m=o;f=Cb(b)|0;cn(d);a:do if((f|0)==1){f=e+1|0;g=hj(b,d,1)|0}else{_g(b,f+19|0,7572);k=m+8|0;l=m+8|0;j=f+-2|0;f=e;b:while(1){c:do if((Jb(b,f)|0)==3){g=Tb(b,f,0)|0;if(!g){g=kn(d)|0;bn(g,d)|0;ec(b,0,0)|0;g=(g|0)!=-1&1;break}else{Rg(b,m);g=hn(Ah(m,g)|0,1,g,d)|0;c[k>>2]=(c[k>>2]|0)+g;Bh(m);g=(g|0)!=0&1;break}}else{g=Wb(b,f,0)|0;if(!((g|0)!=0?(a[g>>0]|0)==42:0))Og(b,f,7591)|0;switch(a[g+1>>0]|0){case 110:{c[n>>2]=m;if((Jm(d,7606,n)|0)==1){bc(b,+h[m>>3]);g=1}else{ac(b);g=0}break c}case 108:{g=hj(b,d,1)|0;break c}case 76:{g=hj(b,d,0)|0;break c}case 97:{Rg(b,m);g=hn(Ah(m,1024)|0,1,1024,d)|0;c[l>>2]=(c[l>>2]|0)+g;if(g>>>0>=1024){g=1024;do{g=g<<(g>>>0<1073741824&1);p=hn(Ah(m,g)|0,1,g,d)|0;c[l>>2]=(c[l>>2]|0)+p}while(p>>>0>=g>>>0)}Bh(m);g=1;break c}default:break b}}while(0);f=f+1|0;if((g|0)!=0&(j|0)!=0)j=j+-1|0;else break a}p=Og(b,f,7610)|0;i=o;return p|0}while(0);if(Im(d)|0){p=eh(b,0,0)|0;i=o;return p|0}if(!g){Db(b,-2);ac(b)}p=f-e|0;i=o;return p|0}function hj(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0;k=i;i=i+1040|0;j=k;Rg(b,j);f=Ah(j,1024)|0;a:do if(Gm(f,1024,d)|0){h=j+8|0;g=f;while(1){f=Ql(g)|0;if(f|0?(a[g+(f+-1)>>0]|0)==10:0)break;c[h>>2]=(c[h>>2]|0)+f;g=Ah(j,1024)|0;if(!(Gm(g,1024,d)|0))break a}c[h>>2]=f-e+(c[h>>2]|0);Bh(j);e=1;i=k;return e|0}while(0);Bh(j);e=(Xb(b,-1)|0)!=0&1;i=k;return e|0}function ij(b){b=b|0;var d=0,e=0,f=0,g=0,h=0;d=Wg(b,1,0)|0;e=Zg(b,2,9460,0)|0;f=Rc(b,8)|0;g=f+4|0;c[g>>2]=0;Fh(b,7415);c[f>>2]=0;c[g>>2]=165;g=a[e>>0]|0;if(!((g<<24>>24!=0?(h=e+1|0,(em(12897,g<<24>>24,4)|0)!=0):0)?(h=(a[h>>0]|0)==43?e+2|0:h,!(a[((a[h>>0]|0)==98?h+1|0:h)>>0]|0)):0))Og(b,2,7633)|0;h=zm(d,e)|0;c[f>>2]=h;if(h|0){b=1;return b|0}b=eh(b,0,d)|0;return b|0}function jj(a){a=a|0;bj(a,7404,7653);return 1}function kj(a){a=a|0;var b=0,d=0,e=0,f=0;b=i;i=i+16|0;d=Wg(a,1,0)|0;Zg(a,2,9460,0)|0;f=Rc(a,8)|0;e=f+4|0;c[e>>2]=0;Fh(a,7415);Lg(a,7661,b)|0;c[f>>2]=0;c[e>>2]=167;a=eh(a,0,d)|0;i=b;return a|0}function lj(a){a=a|0;ah(a,1,7415)|0;return dh(a,-1)|0}function mj(a){a=a|0;var b=0,d=0,e=0;e=i;i=i+16|0;d=e;oc(a,-1001e3,7489);b=Zb(a,-1)|0;if(!(c[b+4>>2]|0)){c[d>>2]=7493;Lg(a,7456,d)|0}d=gj(a,c[b>>2]|0,1)|0;i=e;return d|0}function nj(a){a=a|0;var b=0,d=0;d=Rc(a,8)|0;b=d+4|0;c[b>>2]=0;Fh(a,7415);c[d>>2]=0;c[b>>2]=165;b=fn()|0;c[d>>2]=b;if(b|0){d=1;return d|0}d=eh(a,0,0)|0;return d|0}function oj(a){a=a|0;var b=0;Ug(a,1);b=Gh(a,1,7415)|0;if(!b){ac(a);return 1}if(!(c[b+4>>2]|0)){ec(a,7701,11)|0;return 1}else{ec(a,7713,4)|0;return 1}return 0}function pj(a){a=a|0;var b=0,d=0,e=0;e=i;i=i+16|0;d=e;oc(a,-1001e3,7404);b=Zb(a,-1)|0;if(!(c[b+4>>2]|0)){c[d>>2]=7408;Lg(a,7456,d)|0}d=qj(a,c[b>>2]|0,1)|0;i=e;return d|0}function qj(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,j=0,k=0,l=0;l=i;i=i+16|0;k=l;j=l+8|0;e=Cb(a)|0;if((e|0)==(d|0)){a=1;i=l;return a|0}g=d;f=e-d|0;e=1;while(1){f=f+-1|0;if((Jb(a,g)|0)==3){if(!e)e=0;else{h[k>>3]=+Sb(a,g,0);e=(Om(b,7724,k)|0)>0}e=e&1}else{d=Wg(a,g,j)|0;if(!e)e=0;else{e=dn(d,1,c[j>>2]|0,b)|0;e=(e|0)==(c[j>>2]|0)}e=e&1}if(!f)break;else g=g+1|0}if(e|0){a=1;i=l;return a|0}a=eh(a,0,0)|0;i=l;return a|0}function rj(a){a=a|0;var b=0,d=0;d=i;i=i+16|0;b=ah(a,1,7415)|0;if(!(c[b+4>>2]|0))Lg(a,7421,d)|0;a=eh(a,(Em(c[b>>2]|0)|0)==0&1,0)|0;i=d;return a|0}function sj(a){a=a|0;var b=0;b=i;i=i+16|0;if(!(c[(ah(a,1,7415)|0)+4>>2]|0))Lg(a,7421,b)|0;ej(a,0);i=b;return 1}function tj(a){a=a|0;var b=0,d=0;d=i;i=i+16|0;b=ah(a,1,7415)|0;if(!(c[b+4>>2]|0))Lg(a,7421,d)|0;a=gj(a,c[b>>2]|0,2)|0;i=d;return a|0}function uj(a){a=a|0;var b=0,d=0,e=0,f=0,g=0.0;f=i;i=i+16|0;b=ah(a,1,7415)|0;if(!(c[b+4>>2]|0))Lg(a,7421,f)|0;b=c[b>>2]|0;d=Yg(a,2,7735,1040)|0;g=+yh(a,3,0.0);e=~~g;if(!(+(e|0)==g))Og(a,3,7747)|0;if(!(Lm(b,e,c[1056+(d<<2)>>2]|0)|0)){bc(a,+(en(b)|0));a=1;i=f;return a|0}else{a=eh(a,0,0)|0;i=f;return a|0}return 0}function vj(a){a=a|0;var b=0,d=0,e=0,f=0;d=i;i=i+16|0;b=ah(a,1,7415)|0;if(!(c[b+4>>2]|0))Lg(a,7421,d)|0;f=c[b>>2]|0;e=Yg(a,2,0,1068)|0;b=xh(a,3,1024)|0;a=eh(a,(an(f,0,c[1084+(e<<2)>>2]|0,b)|0)==0&1,0)|0;i=d;return a|0}function wj(a){a=a|0;var b=0,d=0;d=i;i=i+16|0;b=ah(a,1,7415)|0;if(!(c[b+4>>2]|0))Lg(a,7421,d)|0;b=c[b>>2]|0;Ib(a,1);a=qj(a,b,2)|0;i=d;return a|0}function xj(a){a=a|0;var b=0,d=0;b=ah(a,1,7415)|0;if(!(c[b+4>>2]|0))return 0;if(!(c[b>>2]|0))return 0;d=(ah(a,1,7415)|0)+4|0;b=c[d>>2]|0;c[d>>2]=0;kb[b&255](a)|0;return 0}function yj(a){a=a|0;var b=0,d=0,e=0;e=i;i=i+16|0;d=e;b=ah(a,1,7415)|0;if(!(c[b+4>>2]|0)){ec(a,7810,13)|0;i=e;return 1}else{c[d>>2]=c[b>>2];hc(a,7824,d)|0;i=e;return 1}return 0}function zj(a){a=a|0;c[(ah(a,1,7415)|0)+4>>2]=164;ac(a);ec(a,7834,26)|0;return 2}function Aj(a){a=a|0;sc(a,0,28);wh(a,1096,0);bc(a,3.141592653589793);xc(a,-2,8063);bc(a,s);xc(a,-2,8066);return 1}function Bj(a){a=a|0;bc(a,+N(+(+Xg(a,1))));return 1}function Cj(a){a=a|0;bc(a,+T(+(+Xg(a,1))));return 1}function Dj(a){a=a|0;bc(a,+U(+(+Xg(a,1))));return 1}function Ej(a){a=a|0;var b=0.0;b=+Xg(a,1);bc(a,+W(+b,+(+Xg(a,2))));return 1}function Fj(a){a=a|0;bc(a,+V(+(+Xg(a,1))));return 1}function Gj(a){a=a|0;bc(a,+Z(+(+Xg(a,1))));return 1}function Hj(a){a=a|0;bc(a,+yl(+Xg(a,1)));return 1}function Ij(a){a=a|0;bc(a,+Q(+(+Xg(a,1))));return 1}function Jj(a){a=a|0;bc(a,+Xg(a,1)/.017453292519943295);return 1}function Kj(a){a=a|0;bc(a,+X(+(+Xg(a,1))));return 1}function Lj(a){a=a|0;bc(a,+M(+(+Xg(a,1))));return 1}function Mj(a){a=a|0;var b=0.0;b=+Xg(a,1);bc(a,+Bl(b,+Xg(a,2)));return 1}function Nj(a){a=a|0;var b=0,d=0;b=i;i=i+16|0;d=b;bc(a,+tl(+Xg(a,1),d));cc(a,c[d>>2]|0);i=b;return 2}function Oj(a){a=a|0;var b=0.0;b=+Xg(a,1);bc(a,+Cl(b,Vg(a,2)|0));return 1}function Pj(a){a=a|0;bc(a,+rl(+Xg(a,1)));return 1}function Qj(a){a=a|0;var b=0.0,c=0.0;b=+Xg(a,1);do if((Jb(a,2)|0)>=1){c=+Xg(a,2);if(c==10.0){b=+rl(b);break}else{b=+Y(+b)/+Y(+c);break}}else b=+Y(+b);while(0);bc(a,b);return 1}function Rj(a){a=a|0;var b=0.0,c=0,d=0,e=0.0;d=Cb(a)|0;b=+Xg(a,1);if((d|0)<2){bc(a,b);return 1}else c=2;while(1){e=+Xg(a,c);b=e>b?e:b;if((c|0)==(d|0))break;else c=c+1|0}bc(a,b);return 1}function Sj(a){a=a|0;var b=0.0,c=0,d=0,e=0.0;d=Cb(a)|0;b=+Xg(a,1);if((d|0)<2){bc(a,b);return 1}else c=2;while(1){e=+Xg(a,c);b=e<b?e:b;if((c|0)==(d|0))break;else c=c+1|0}bc(a,b);return 1}function Tj(a){a=a|0;var b=0,c=0.0,d=0;b=i;i=i+16|0;d=b;c=+xl(+Xg(a,1),d);bc(a,+h[d>>3]);bc(a,c);i=b;return 2}function Uj(a){a=a|0;var b=0.0;b=+Xg(a,1);bc(a,+P(+b,+(+Xg(a,2))));return 1}function Vj(a){a=a|0;bc(a,+Xg(a,1)*.017453292519943295);return 1}function Wj(a){a=a|0;var b=0.0,c=0.0,d=0.0,e=0;e=i;i=i+16|0;d=+((Vm()|0)%2147483647|0|0)/2147483647.0;switch(Cb(a)|0){case 0:{bc(a,d);a=1;i=e;return a|0}case 1:{b=+Xg(a,1);if(!(b>=1.0))Og(a,1,7985)|0;bc(a,+M(+(d*b))+1.0);a=1;i=e;return a|0}case 2:{b=+Xg(a,1);c=+Xg(a,2);if(!(b<=c))Og(a,2,7985)|0;bc(a,b+ +M(+(d*(c-b+1.0))));a=1;i=e;return a|0}default:{a=Lg(a,8003,e)|0;i=e;return a|0}}return 0}function Xj(a){a=a|0;Um(bh(a,1)|0);Vm()|0;return 0}function Yj(a){a=a|0;bc(a,+Dl(+Xg(a,1)));return 1}function Zj(a){a=a|0;bc(a,+R(+(+Xg(a,1))));return 1}function _j(a){a=a|0;bc(a,+O(+(+Xg(a,1))));return 1}function $j(a){a=a|0;bc(a,+vl(+Xg(a,1)));return 1}function ak(a){a=a|0;bc(a,+S(+(+Xg(a,1))));return 1}function bk(a){a=a|0;sc(a,0,11);wh(a,1328,0);return 1}function ck(a){a=a|0;bc(a,+(Ma()|0)/1.0e6);return 1}function dk(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;q=i;i=i+1264|0;p=q;f=q+1048|0;o=q+1256|0;m=q+8|0;n=q+1056|0;d=Zg(b,1,8082,0)|0;if((Jb(b,2)|0)<1)e=ab(0)|0;else e=~~+Xg(b,2);c[f>>2]=e;if((a[d>>0]|0)==33){d=d+1|0;l=Oa(f|0)|0}else l=cb(f|0)|0;if(!l){ac(b);i=q;return 1}if(!(Kl(d,8085)|0)){sc(b,0,9);cc(b,c[l>>2]|0);xc(b,-2,8088);cc(b,c[l+4>>2]|0);xc(b,-2,8092);cc(b,c[l+8>>2]|0);xc(b,-2,8096);cc(b,c[l+12>>2]|0);xc(b,-2,8101);cc(b,(c[l+16>>2]|0)+1|0);xc(b,-2,8105);cc(b,(c[l+20>>2]|0)+1900|0);xc(b,-2,8111);cc(b,(c[l+24>>2]|0)+1|0);xc(b,-2,8116);cc(b,(c[l+28>>2]|0)+1|0);xc(b,-2,8121);d=c[l+32>>2]|0;if((d|0)<0){i=q;return 1}jc(b,d);xc(b,-2,8126);i=q;return 1}a[o>>0]=37;Rg(b,m);g=m+8|0;h=m+4|0;j=o+1|0;k=o+2|0;a:while(1){f=a[d>>0]|0;switch(f<<24>>24){case 0:break a;case 37:break;default:{e=c[g>>2]|0;if(e>>>0>=(c[h>>2]|0)>>>0){Ah(m,1)|0;e=c[g>>2]|0;f=a[d>>0]|0}c[g>>2]=e+1;a[(c[m>>2]|0)+e>>0]=f;d=d+1|0;continue a}}f=d+1|0;d=d+2|0;e=a[f>>0]|0;if(e<<24>>24!=0?(em(8132,e<<24>>24,23)|0)!=0:0){a[j>>0]=e;a[k>>0]=0}else{c[p>>2]=f;Og(b,1,hc(b,8155,p)|0)|0;d=f}Kg(m,n,La(n|0,200,o|0,l|0)|0)}Bh(m);i=q;return 1}function ek(a){a=a|0;var b=0;b=~~+Xg(a,1);bc(a,+ya(b|0,~~+yh(a,2,0.0)|0));return 1}function fk(a){a=a|0;var b=0,c=0;c=Zg(a,1,0,0)|0;b=za(c|0)|0;if(!c){jc(a,b);c=1;return c|0}else{c=dh(a,b)|0;return c|0}return 0}function gk(a){a=a|0;var b=0;if((Jb(a,1)|0)==1)b=(Vb(a,1)|0)==0&1;else b=xh(a,1,0)|0;if(Vb(a,2)|0)Mf(a);if(!a)return 0;else db(b|0);return 0}function hk(a){a=a|0;fc(a,Qa(Wg(a,1,0)|0)|0)|0;return 1}function ik(a){a=a|0;var b=0;b=Wg(a,1,0)|0;return eh(a,(ln(b)|0)==0&1,b)|0}function jk(a){a=a|0;var b=0;b=Wg(a,1,0)|0;return eh(a,(jn(b,Wg(a,2,0)|0)|0)==0&1,0)|0}function kk(a){a=a|0;var b=0;b=Zg(a,1,0,0)|0;fc(a,Vl(c[1452+((Yg(a,2,8237,1424)|0)<<2)>>2]|0,b)|0)|0;return 1}function lk(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0;j=i;i=i+80|0;g=j+16|0;e=j+8|0;d=j;f=j+64|0;h=j+20|0;if((Jb(a,1)|0)<1)b=ab(0)|0;else{$g(a,1,5);Db(a,1);oc(a,-1,8088);b=Tb(a,-1,f)|0;b=(c[f>>2]|0)==0?0:b;Db(a,-2);c[h>>2]=b;oc(a,-1,8092);b=Tb(a,-1,f)|0;b=(c[f>>2]|0)==0?0:b;Db(a,-2);c[h+4>>2]=b;oc(a,-1,8096);b=Tb(a,-1,f)|0;b=(c[f>>2]|0)==0?12:b;Db(a,-2);c[h+8>>2]=b;oc(a,-1,8101);b=Tb(a,-1,f)|0;if(!(c[f>>2]|0)){c[d>>2]=8101;b=Lg(a,8277,d)|0}else Db(a,-2);c[h+12>>2]=b;oc(a,-1,8105);b=Tb(a,-1,f)|0;if(!(c[f>>2]|0)){c[e>>2]=8105;b=Lg(a,8277,e)|0}else Db(a,-2);c[h+16>>2]=b+-1;oc(a,-1,8111);b=Tb(a,-1,f)|0;if(!(c[f>>2]|0)){c[g>>2]=8111;b=Lg(a,8277,g)|0}else Db(a,-2);c[h+20>>2]=b+-1900;oc(a,-1,8126);if(!(Jb(a,-1)|0))b=-1;else b=Vb(a,-1)|0;Db(a,-2);c[h+32>>2]=b;b=Ka(h|0)|0}if((b|0)==-1){ac(a);i=j;return 1}else{bc(a,+(b|0));i=j;return 1}return 0}function mk(a){a=a|0;var b=0,c=0;c=i;i=i+32|0;b=c+4|0;if(!(gn(b)|0)){b=Lg(a,8318,c)|0;i=c;return b|0}else{fc(a,b)|0;b=1;i=c;return b|0}return 0}function nk(a){a=a|0;sc(a,0,14);wh(a,1476,0);sc(a,0,1);ec(a,15608,0)|0;Ib(a,-2);Bc(a,-2)|0;Db(a,-2);Ib(a,-2);xc(a,-2,9484);Db(a,-2);return 1}function ok(a){a=a|0;var b=0,e=0,f=0,g=0,h=0,j=0,k=0;k=i;i=i+16|0;h=k;f=k+4|0;j=Wg(a,1,f)|0;b=xh(a,2,1)|0;e=c[f>>2]|0;if((b|0)<=-1)if(e>>>0<(0-b|0)>>>0)b=0;else b=b+1+e|0;e=xh(a,3,b)|0;g=c[f>>2]|0;if((e|0)<=-1)if(g>>>0<(0-e|0)>>>0)e=0;else e=e+1+g|0;f=(b|0)==0?1:b;e=e>>>0>g>>>0?g:e;if(e>>>0<f>>>0){a=0;i=k;return a|0}b=e-f+1|0;if((e|0)==-1){a=Lg(a,8360,h)|0;i=k;return a|0}_g(a,b,8360);if((b|0)<=0){a=b;i=k;return a|0}e=f+-1|0;f=0;do{cc(a,d[j+(e+f)>>0]|0);f=f+1|0}while((f|0)<(b|0));i=k;return b|0}function pk(b){b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0;h=i;i=i+1040|0;f=h;c=Cb(b)|0;d=Sg(b,f,c)|0;if((c|0)<1){Ch(f,c);i=h;return 1}else g=1;while(1){e=Vg(b,g)|0;if((e&255|0)!=(e|0))Og(b,g,8387)|0;a[d+(g+-1)>>0]=e;if((g|0)==(c|0))break;else g=g+1|0}Ch(f,c);i=h;return 1}function qk(a){a=a|0;var b=0,c=0;c=i;i=i+1056|0;b=c+8|0;$g(a,1,6);Db(a,1);Rg(a,b);if(!(Ic(a,19,b)|0)){Bh(b);b=1;i=c;return b|0}else{b=Lg(a,8411,c)|0;i=c;return b|0}return 0}function rk(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;Kg(d,b,c);return 0}function sk(a){a=a|0;return tk(a,1)|0}function tk(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;r=i;i=i+288|0;j=r+284|0;n=r+280|0;o=r;q=Wg(b,1,j)|0;h=Wg(b,2,n)|0;e=xh(b,3,1)|0;f=c[j>>2]|0;if((e|0)<=-1)if(f>>>0<(0-e|0)>>>0)g=1;else{e=e+1+f|0;p=4}else p=4;if((p|0)==4)if(e)if(e>>>0>(f+1|0)>>>0){ac(b);b=1;i=r;return b|0}else g=e;else g=1;m=(d|0)!=0;a:do if(m){l=(Vb(b,4)|0)==0;d=c[n>>2]|0;if(l){f=0;do{e=h+f|0;if(Tm(e,8446)|0){p=19;break a}f=f+1+(Ql(e)|0)|0}while(f>>>0<=d>>>0)}e=q+g+-1|0;f=(c[j>>2]|0)-g+1|0;b:do if(d){if(d>>>0>f>>>0)break a;k=d+-1|0;if((f|0)==(k|0))break a;l=a[h>>0]|0;j=h+1|0;h=f-k|0;while(1){f=em(e,l,h)|0;if(!f)break a;d=e;e=f+1|0;if(!(Qm(e,j,k)|0)){e=f;break b}g=e;f=d+h|0;if((f|0)==(g|0))break a;else h=f-g|0}}while(0);q=e-q|0;cc(b,q+1|0);cc(b,q+(c[n>>2]|0)|0);b=2;i=r;return b|0}else p=19;while(0);do if((p|0)==19){e=q+g+-1|0;d=(a[h>>0]|0)==94;if(d){f=(c[n>>2]|0)+-1|0;c[n>>2]=f;k=h+1|0}else{f=c[n>>2]|0;k=h}l=o+16|0;c[l>>2]=b;c[o>>2]=200;c[o+4>>2]=q;h=o+8|0;c[h>>2]=q+(c[j>>2]|0);c[o+12>>2]=k+f;j=o+20|0;c[j>>2]=0;g=uk(o,e,k)|0;f=(g|0)==0;c:do if(d)if(f)p=33;else d=e;else if(f)while(1){if(e>>>0>=(c[h>>2]|0)>>>0){p=33;break c}e=e+1|0;c[j>>2]=0;f=uk(o,e,k)|0;if(f){g=f;d=e;break}}else d=e;while(0);if((p|0)==33)break;if(!m){e=c[j>>2]|0;e=(e|0)==0?1:e;_g(c[l>>2]|0,e,8477);if((e|0)>0){f=0;do{wk(o,f,d,g);f=f+1|0}while((f|0)!=(e|0))}}else{f=q;cc(b,1-f+d|0);cc(b,g-f|0);f=c[j>>2]|0;_g(c[l>>2]|0,f,8477);if((f|0)>0){e=0;do{wk(o,e,0,0);e=e+1|0}while((e|0)!=(f|0))}e=f+2|0}b=e;i=r;return b|0}while(0);ac(b);b=1;i=r;return b|0}function uk(b,e,f){b=b|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0;Q=i;i=i+96|0;E=Q+80|0;D=Q+72|0;C=Q+64|0;B=Q+56|0;A=Q+48|0;G=Q+40|0;F=Q+32|0;J=Q+24|0;I=Q+16|0;H=Q+8|0;P=c[b>>2]|0;c[b>>2]=P+-1;if(!P)Lg(c[b+16>>2]|0,8457,Q)|0;y=b+12|0;j=c[y>>2]|0;a:do if((j|0)!=(f|0)){P=b+8|0;L=b+16|0;z=b+4|0;K=b+20|0;b:while(1){t=e+-1|0;c:while(1){g=a[f>>0]|0;d:do switch(g<<24>>24|0){case 40:{O=7;break b}case 41:{O=16;break b}case 36:{h=f+1|0;if((h|0)==(j|0)){O=23;break b}else{g=h;O=91}break}case 37:{h=f+1|0;g=a[h>>0]|0;switch(g<<24>>24|0){case 98:{g=j;O=25;break c}case 57:case 56:case 55:case 54:case 53:case 52:case 51:case 50:case 49:case 48:{h=g;O=71;break c}case 102:break;default:{if((h|0)==(j|0))Lg(c[L>>2]|0,8601,D)|0;g=f+2|0;O=91;break d}}q=f+2|0;if((a[q>>0]|0)==91)g=91;else{Lg(c[L>>2]|0,8566,G)|0;g=a[q>>0]|0}r=f+3|0;switch(g<<24>>24|0){case 37:{if((r|0)==(c[y>>2]|0))Lg(c[L>>2]|0,8601,A)|0;f=f+4|0;break}case 91:{f=(a[r>>0]|0)==94?f+4|0:r;do{if((f|0)==(c[y>>2]|0))Lg(c[L>>2]|0,8636,B)|0;g=f+1|0;if((a[f>>0]|0)==37)f=g>>>0<(c[y>>2]|0)>>>0?f+2|0:g;else f=g}while((a[f>>0]|0)!=93);f=f+1|0;break}default:f=r}if((e|0)==(c[z>>2]|0))j=0;else j=a[t>>0]|0;o=j&255;s=f+-1|0;p=(a[r>>0]|0)==94;h=p?r:q;p=p&1;g=p^1;k=h+1|0;e:do if(k>>>0<s>>>0){n=j&255;while(1){j=a[k>>0]|0;l=h+2|0;m=a[l>>0]|0;do if(j<<24>>24==37)if(!(vk(o,m&255)|0))h=l;else break e;else{if(m<<24>>24==45?(u=h+3|0,u>>>0<s>>>0):0){if((j&255)>>>0>o>>>0){h=u;break}if((d[u>>0]|0)>>>0<o>>>0){h=u;break}else break e}if(j<<24>>24==n<<24>>24)break e;else h=k}while(0);k=h+1|0;if(k>>>0>=s>>>0){g=p;break}}}else g=p;while(0);if(g|0){e=0;break a}o=a[e>>0]|0;p=o&255;n=(a[r>>0]|0)==94;h=n?r:q;n=n&1;g=n^1;j=h+1|0;f:do if(j>>>0<s>>>0)while(1){k=a[j>>0]|0;l=h+2|0;m=a[l>>0]|0;do if(k<<24>>24==37)if(!(vk(p,m&255)|0))h=l;else break f;else{if(m<<24>>24==45?(v=h+3|0,v>>>0<s>>>0):0){if((k&255)>(o&255)){h=v;break}if((d[v>>0]|0)<(o&255)){h=v;break}else break f}if(k<<24>>24==o<<24>>24)break f;else h=j}while(0);j=h+1|0;if(j>>>0>=s>>>0){g=n;break}}else g=n;while(0);if(!g){e=0;break a}break}default:{h=f+1|0;if(g<<24>>24==91){g=(a[h>>0]|0)==94?f+2|0:h;while(1){if((g|0)==(j|0))Lg(c[L>>2]|0,8636,E)|0;j=g+1|0;if((a[g>>0]|0)==37)g=j>>>0<(c[y>>2]|0)>>>0?g+2|0:j;else g=j;if((a[g>>0]|0)==93)break;j=c[y>>2]|0}g=g+1|0;O=91}else{g=h;O=91}}}while(0);if((O|0)==91){O=0;if((c[P>>2]|0)>>>0>e>>>0){r=a[e>>0]|0;s=r&255;j=a[f>>0]|0;g:do switch(j<<24>>24|0){case 46:{j=g;O=94;break c}case 37:{k=vk(s,d[h>>0]|0)|0;break}case 91:{p=g+-1|0;q=(a[h>>0]|0)==94;j=q?h:f;q=q&1;k=q^1;l=j+1|0;if(l>>>0<p>>>0)while(1){m=a[l>>0]|0;n=j+2|0;o=a[n>>0]|0;do if(m<<24>>24==37)if(!(vk(s,o&255)|0))j=n;else break g;else{if(o<<24>>24==45?(x=j+3|0,x>>>0<p>>>0):0){if((m&255)>(r&255)){j=x;break}if((d[x>>0]|0)<(r&255)){j=x;break}else break g}if(m<<24>>24==r<<24>>24)break g;else j=l}while(0);l=j+1|0;if(l>>>0>=p>>>0){k=q;break}}else k=q;break}default:k=j<<24>>24==r<<24>>24&1}while(0);j=a[g>>0]|0;if(!k)f=j;else{O=109;break}}else f=a[g>>0]|0;switch(f<<24>>24){case 45:case 63:case 42:break;default:{e=0;break a}}f=g+1|0}j=c[y>>2]|0;if((f|0)==(j|0))break a}if((O|0)==25){O=0;h=f+2|0;if((g+-1|0)>>>0<=h>>>0)Lg(c[L>>2]|0,8519,F)|0;m=a[e>>0]|0;if(m<<24>>24!=(a[h>>0]|0)){e=0;break a}k=a[f+3>>0]|0;g=e+1|0;l=c[P>>2]|0;if(g>>>0<l>>>0)h=1;else{e=0;break a}while(1){j=a[g>>0]|0;if(j<<24>>24==k<<24>>24){h=h+-1|0;if(!h)break}else h=(j<<24>>24==m<<24>>24&1)+h|0;e=g+1|0;if(e>>>0<l>>>0){t=g;g=e;e=t}else{e=0;break a}}e=e+2|0;f=f+4|0}else if((O|0)==71){O=0;j=h&255;g=j+-49|0;if(((h&255)>=49?(g|0)<(c[K>>2]|0):0)?(w=c[b+24+(g<<3)+4>>2]|0,(w|0)!=-1):0)h=w;else{h=c[L>>2]|0;c[C>>2]=j+-48;h=Lg(h,8668,C)|0;g=h;h=c[b+24+(h<<3)+4>>2]|0}if(((c[P>>2]|0)-e|0)>>>0<h>>>0){e=0;break a}j=e+h|0;if((j|0)==0|(Qm(c[b+24+(g<<3)>>2]|0,e,h)|0)!=0){e=0;break a}e=j;f=f+2|0}else if((O|0)==94){g=j;j=a[j>>0]|0;O=109}h:do if((O|0)==109){O=0;switch(j<<24>>24|0){case 43:{O=112;break b}case 42:{t=f;r=h;break b}case 45:{O=110;break b}case 63:{f=g+1|0;g=uk(b,e+1|0,f)|0;if(!g)break h;else{e=g;break a}}default:{e=e+1|0;f=g;break h}}}while(0);j=c[y>>2]|0;if((f|0)==(j|0))break a}if((O|0)==7){g=f+1|0;if((a[g>>0]|0)==41){g=c[K>>2]|0;if((g|0)>31)Lg(c[L>>2]|0,8477,H)|0;c[b+24+(g<<3)>>2]=e;c[b+24+(g<<3)+4>>2]=-2;c[K>>2]=g+1;e=uk(b,e,f+2|0)|0;if(e|0)break;c[K>>2]=(c[K>>2]|0)+-1;e=0;break}else{f=c[K>>2]|0;if((f|0)>31)Lg(c[L>>2]|0,8477,I)|0;c[b+24+(f<<3)>>2]=e;c[b+24+(f<<3)+4>>2]=-1;c[K>>2]=f+1;e=uk(b,e,g)|0;if(e|0)break;c[K>>2]=(c[K>>2]|0)+-1;e=0;break}}else if((O|0)==16){h=f+1|0;g=c[K>>2]|0;while(1){f=g+-1|0;if((g|0)<=0){O=19;break}if((c[b+24+(f<<3)+4>>2]|0)==-1)break;else g=f}if((O|0)==19)f=Lg(c[L>>2]|0,8495,J)|0;g=b+24+(f<<3)+4|0;c[g>>2]=e-(c[b+24+(f<<3)>>2]|0);e=uk(b,e,h)|0;if(e|0)break;c[g>>2]=-1;e=0;break}else if((O|0)==23){e=(e|0)==(c[P>>2]|0)?e:0;break}else if((O|0)==110){s=g+1|0;r=g+-1|0;while(1){g=uk(b,e,s)|0;if(g){e=g;break a}i:while(1){if((c[P>>2]|0)>>>0<=e>>>0){e=0;break a}g=a[e>>0]|0;j=a[f>>0]|0;switch(j<<24>>24|0){case 37:{O=136;break i}case 91:{p=g;O=137;break i}case 46:break;default:{O=146;break i}}e=e+1|0;g=uk(b,e,s)|0;if(g|0){e=g;break a}}j:do if((O|0)==136)g=vk(g&255,d[h>>0]|0)|0;else if((O|0)==137){o=p&255;q=(a[h>>0]|0)==94;j=q?h:f;q=q&1;g=q^1;k=j+1|0;if(k>>>0<r>>>0)while(1){l=a[k>>0]|0;m=j+2|0;n=a[m>>0]|0;do if(l<<24>>24==37)if(!(vk(o,n&255)|0))j=m;else break j;else{if(n<<24>>24==45?(N=j+3|0,N>>>0<r>>>0):0){if((l&255)>(p&255)){j=N;break}if((d[N>>0]|0)<(p&255)){j=N;break}else break j}if(l<<24>>24==p<<24>>24)break j;else j=k}while(0);k=j+1|0;if(k>>>0>=r>>>0){g=q;break}}else g=q}else if((O|0)==146)g=j<<24>>24==g<<24>>24&1;while(0);if(!g){e=0;break a}else e=e+1|0}}else if((O|0)==112){t=f;e=e+1|0;r=h}h=c[P>>2]|0;k:do if(h>>>0>e>>>0){s=g+-1|0;j=e;f=0;while(1){p=a[j>>0]|0;q=p&255;j=a[t>>0]|0;l:do switch(j<<24>>24|0){case 46:break;case 37:{h=vk(q,d[r>>0]|0)|0;O=128;break}case 91:{o=(a[r>>0]|0)==94;j=o?r:t;o=o&1;h=o^1;k=j+1|0;if(k>>>0<s>>>0)while(1){l=a[k>>0]|0;m=j+2|0;n=a[m>>0]|0;do if(l<<24>>24==37)if(!(vk(q,n&255)|0))j=m;else{O=128;break l}else{if(n<<24>>24==45?(M=j+3|0,M>>>0<s>>>0):0){if((l&255)>(p&255)){j=M;break}if((d[M>>0]|0)<(p&255)){j=M;break}else{O=128;break l}}if(l<<24>>24==p<<24>>24){O=128;break l}else j=k}while(0);k=j+1|0;if(k>>>0>=s>>>0){h=o;O=128;break}}else{h=o;O=128}break}default:{h=j<<24>>24==p<<24>>24&1;O=128}}while(0);if((O|0)==128){O=0;if(!h)break k;h=c[P>>2]|0}f=f+1|0;j=e+f|0;if(h>>>0<=j>>>0)break k}}else f=0;while(0);j=g+1|0;while(1){if((f|0)<=-1){e=0;break a}g=uk(b,e+f|0,j)|0;h=(g|0)==0;if(h)f=(h<<31>>31)+f|0;else{e=g;break}}}while(0);c[b>>2]=(c[b>>2]|0)+1;i=Q;return e|0}function vk(a,b){a=a|0;b=b|0;do switch(Il(b)|0){case 97:{a=Nl(a)|0;break}case 99:{a=Ol(a)|0;break}case 100:{a=(a+-48|0)>>>0<10&1;break}case 103:{a=Ul(a)|0;break}case 108:{a=Hl(a)|0;break}case 112:{a=hm(a)|0;break}case 115:{a=Pl(a)|0;break}case 117:{a=Jl(a)|0;break}case 119:{a=Ml(a)|0;break}case 120:{a=im(a)|0;break}case 122:{a=(a|0)==0&1;break}default:{b=(b|0)==(a|0)&1;return b|0}}while(0);b=(Hl(b)|0)==0;b=b?(a|0)==0&1:a;return b|0}function wk(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0;h=i;i=i+16|0;f=h+8|0;g=h;if((c[a+20>>2]|0)<=(b|0)){f=c[a+16>>2]|0;if(!b){ec(f,d,e-d|0)|0;i=h;return}else{Lg(f,8695,g)|0;i=h;return}}d=c[a+24+(b<<3)+4>>2]|0;if((d|0)!=-1){e=c[a+16>>2]|0;f=c[a+24+(b<<3)>>2]|0;if((d|0)==-2){cc(e,f+1-(c[a+4>>2]|0)|0);i=h;return}}else{e=a+16|0;Lg(c[e>>2]|0,8717,f)|0;e=c[e>>2]|0;f=c[a+24+(b<<3)>>2]|0}ec(e,f,d)|0;i=h;return}function xk(b){b=b|0;var e=0,f=0,g=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0.0,I=0,J=0;G=i;i=i+1168|0;F=G+72|0;A=G+64|0;z=G+56|0;y=G+48|0;x=G+40|0;D=G+32|0;C=G+24|0;B=G+16|0;w=G+8|0;v=G;u=G+1124|0;s=G+1146|0;q=G+1120|0;r=G+80|0;t=G+1128|0;l=Cb(b)|0;e=Wg(b,1,q)|0;q=c[q>>2]|0;m=e+q|0;Rg(b,r);a:do if((q|0)>0){n=r+8|0;o=r+4|0;p=t+1|0;q=1;g=e;b:while(1){e=g;while(1){g=a[e>>0]|0;if(g<<24>>24==37){g=e+1|0;if((a[g>>0]|0)!=37)break;f=c[n>>2]|0;if(f>>>0<(c[o>>2]|0)>>>0)g=37;else{Ah(r,1)|0;f=c[n>>2]|0;g=a[g>>0]|0}c[n>>2]=f+1;a[(c[r>>2]|0)+f>>0]=g;e=e+2|0}else{f=c[n>>2]|0;if(f>>>0>=(c[o>>2]|0)>>>0){Ah(r,1)|0;f=c[n>>2]|0;g=a[e>>0]|0}c[n>>2]=f+1;a[(c[r>>2]|0)+f>>0]=g;e=e+1|0}if(e>>>0>=m>>>0)break a}k=Ah(r,512)|0;j=q;q=q+1|0;if((j|0)>=(l|0))Og(b,q,8743)|0;e=a[g>>0]|0;c:do if(!(e<<24>>24)){e=0;f=g}else{f=g;while(1){if(!(em(8752,e<<24>>24,6)|0))break c;f=f+1|0;e=a[f>>0]|0;if(!(e<<24>>24)){e=0;break}}}while(0);j=g;if((f-j|0)>>>0>5){Lg(b,8758,v)|0;e=a[f>>0]|0}f=((e&255)+-48|0)>>>0<10?f+1|0:f;f=((d[f>>0]|0)+-48|0)>>>0<10?f+1|0:f;e=a[f>>0]|0;if(e<<24>>24==46){e=f+1|0;f=((d[e>>0]|0)+-48|0)>>>0<10?f+2|0:e;f=((d[f>>0]|0)+-48|0)>>>0<10?f+1|0:f;e=a[f>>0]|0}if(((e&255)+-48|0)>>>0<10)Lg(b,8790,w)|0;a[t>>0]=37;e=f-j+1|0;zn(p|0,g|0,e|0)|0;a[p+e>>0]=0;g=f+1|0;e=a[f>>0]|0;switch(e|0){case 99:{c[B>>2]=Vg(b,q)|0;e=qm(k,t,B)|0;break}case 105:case 100:{H=+Xg(b,q);e=~~H;H=H-+(e|0);if(!(H>-1.0&H<1.0))Og(b,q,8835)|0;j=Ql(t)|0;I=a[t+(j+-1)>>0]|0;f=t+j|0;J=f+-1|0;a[J>>0]=108;a[J+1>>0]=0;a[f>>0]=I;a[t+(j+1)>>0]=0;c[C>>2]=e;e=qm(k,t,C)|0;break}case 88:case 120:case 117:case 111:{H=+Xg(b,q);e=~~H>>>0;H=H-+(e>>>0);if(!(H>-1.0&H<1.0))Og(b,q,8864)|0;J=Ql(t)|0;j=a[t+(J+-1)>>0]|0;I=t+J|0;f=I+-1|0;a[f>>0]=108;a[f+1>>0]=0;a[I>>0]=j;a[t+(J+1)>>0]=0;c[D>>2]=e;e=qm(k,t,D)|0;break}case 71:case 103:case 102:case 69:case 101:{e=Ql(t)|0;J=t+(e+-1)|0;I=a[J>>0]|0;e=t+e|0;a[e+-1>>0]=0;a[J>>0]=I;a[e>>0]=0;h[x>>3]=+Xg(b,q);e=qm(k,t,x)|0;break}case 113:{f=Wg(b,q,u)|0;e=c[n>>2]|0;if(e>>>0>=(c[o>>2]|0)>>>0){Ah(r,1)|0;e=c[n>>2]|0}c[n>>2]=e+1;a[(c[r>>2]|0)+e>>0]=34;J=c[u>>2]|0;c[u>>2]=J+-1;d:do if(J|0)while(1){e=a[f>>0]|0;e:do switch(e<<24>>24){case 10:case 92:case 34:{e=c[n>>2]|0;if(e>>>0>=(c[o>>2]|0)>>>0){Ah(r,1)|0;e=c[n>>2]|0}c[n>>2]=e+1;a[(c[r>>2]|0)+e>>0]=92;e=c[n>>2]|0;if(e>>>0>=(c[o>>2]|0)>>>0){Ah(r,1)|0;e=c[n>>2]|0}J=a[f>>0]|0;c[n>>2]=e+1;a[(c[r>>2]|0)+e>>0]=J;break}case 0:{e=0;E=44;break}default:{if(Ol(e&255)|0){e=a[f>>0]|0;E=44;break e}e=c[n>>2]|0;if(e>>>0>=(c[o>>2]|0)>>>0){Ah(r,1)|0;e=c[n>>2]|0}J=a[f>>0]|0;c[n>>2]=e+1;a[(c[r>>2]|0)+e>>0]=J}}while(0);if((E|0)==44){E=0;e=e&255;if(((d[f+1>>0]|0)+-48|0)>>>0<10){c[z>>2]=e;qm(s,8910,z)|0}else{c[y>>2]=e;qm(s,8906,y)|0}Mg(r,s)}J=c[u>>2]|0;c[u>>2]=J+-1;if(!J)break d;else f=f+1|0}while(0);e=c[n>>2]|0;if(e>>>0>=(c[o>>2]|0)>>>0){Ah(r,1)|0;e=c[n>>2]|0}c[n>>2]=e+1;a[(c[r>>2]|0)+e>>0]=34;e=0;break}case 115:{e=Hh(b,q,u)|0;J=(Bm(t,46)|0)==0;if(J&(c[u>>2]|0)>>>0>99){Ng(r);e=0}else{c[A>>2]=e;e=qm(k,t,A)|0;Db(b,-2)}break}default:break b}c[n>>2]=(c[n>>2]|0)+e;if(g>>>0>=m>>>0)break a}c[F>>2]=e;J=Lg(b,8916,F)|0;i=G;return J|0}while(0);Bh(r);J=1;i=G;return J|0}function yk(a){a=a|0;Wg(a,1,0)|0;Wg(a,2,0)|0;Db(a,2);cc(a,0);ic(a,168,3);return 1}function zk(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0;m=i;i=i+288|0;l=m+8|0;h=m+4|0;b=m;g=Wb(a,-1001001,h)|0;d=Wb(a,-1001002,b)|0;j=l+16|0;c[j>>2]=a;c[l>>2]=200;c[l+4>>2]=g;h=c[h>>2]|0;f=l+8|0;c[f>>2]=g+h;c[l+12>>2]=d+(c[b>>2]|0);b=Tb(a,-1001003,0)|0;if((b|0)>(h|0)){l=0;i=m;return l|0}h=l+20|0;e=g+b|0;while(1){c[h>>2]=0;b=uk(l,e,d)|0;if(b|0){f=b;break}e=e+1|0;if(e>>>0>(c[f>>2]|0)>>>0){b=0;k=7;break}}if((k|0)==7){i=m;return b|0}cc(a,f-g+((f|0)==(e|0)&1)|0);Gb(a,-1001003);b=c[h>>2]|0;b=(e|0)!=0&(b|0)==0?1:b;_g(c[j>>2]|0,b,8477);if((b|0)>0)d=0;else{l=b;i=m;return l|0}do{wk(l,d,e,f);d=d+1|0}while((d|0)!=(b|0));i=m;return b|0}function Ak(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0;G=i;i=i+1360|0;E=G+16|0;D=G+8|0;C=G;A=G+1352|0;g=G+1348|0;e=G+1344|0;B=G+1064|0;F=G+24|0;d=Wg(b,1,g)|0;f=Wg(b,2,e)|0;x=Jb(b,3)|0;y=xh(b,4,(c[g>>2]|0)+1|0)|0;z=(a[f>>0]|0)==94;if((x+-3|0)>>>0>=4)Og(b,3,8962)|0;Rg(b,F);if(z){w=(c[e>>2]|0)+-1|0;c[e>>2]=w;e=w;f=f+1|0}else e=c[e>>2]|0;u=B+16|0;c[u>>2]=b;c[B>>2]=200;v=B+4|0;c[v>>2]=d;w=B+8|0;c[w>>2]=d+(c[g>>2]|0);c[B+12>>2]=f+e;o=B+20|0;p=F+8|0;q=F+4|0;r=B+28|0;s=B+24|0;e=0;while(1){if(e>>>0>=y>>>0){t=49;break}c[o>>2]=0;n=uk(B,d,f)|0;if(n){e=e+1|0;k=c[u>>2]|0;switch(x|0){case 6:{Ib(k,3);g=c[o>>2]|0;g=(d|0)!=0&(g|0)==0?1:g;_g(c[u>>2]|0,g,8477);if((g|0)>0){h=0;do{wk(B,h,d,n);h=h+1|0}while((h|0)!=(g|0))}Ec(k,g,1,0,0);t=38;break}case 5:{do if((c[o>>2]|0)>0){h=c[r>>2]|0;if((h|0)!=-1){g=c[s>>2]|0;if((h|0)==-2){cc(k,g+1-(c[v>>2]|0)|0);break}else j=k}else{Lg(k,8717,C)|0;j=c[u>>2]|0;g=c[s>>2]|0}ec(j,g,h)|0}else ec(k,d,n-d|0)|0;while(0);nc(k,3);t=38;break}default:{l=Wb(k,3,A)|0;if(c[A>>2]|0){m=n-d|0;g=0;do{k=l+g|0;h=a[k>>0]|0;do if(h<<24>>24==37){g=g+1|0;k=l+g|0;h=a[k>>0]|0;j=h<<24>>24;if(((h&255)+-48|0)>>>0<10)if(h<<24>>24==48){Kg(F,d,m);break}else{wk(B,j+-49|0,d,n);Ng(F);break}if(h<<24>>24!=37){j=c[u>>2]|0;c[D>>2]=37;Lg(j,8993,D)|0}h=c[p>>2]|0;if(h>>>0>=(c[q>>2]|0)>>>0){Ah(F,1)|0;h=c[p>>2]|0}k=a[k>>0]|0;c[p>>2]=h+1;a[(c[F>>2]|0)+h>>0]=k}else{j=c[p>>2]|0;if(j>>>0>=(c[q>>2]|0)>>>0){Ah(F,1)|0;j=c[p>>2]|0;h=a[k>>0]|0}c[p>>2]=j+1;a[(c[F>>2]|0)+j>>0]=h}while(0);g=g+1|0}while(g>>>0<(c[A>>2]|0)>>>0)}}}if((t|0)==38){t=0;if(Vb(k,-1)|0){if(!(Nb(k,-1)|0)){c[E>>2]=Kb(k,Jb(k,-1)|0)|0;Lg(k,9035,E)|0}}else{Db(k,-2);ec(k,d,n-d|0)|0}Ng(F)}if(n>>>0>d>>>0)d=n;else t=44}else t=44;if((t|0)==44){t=0;if(d>>>0>=(c[w>>2]|0)>>>0){t=49;break}g=c[p>>2]|0;if(g>>>0>=(c[q>>2]|0)>>>0){Ah(F,1)|0;g=c[p>>2]|0}n=a[d>>0]|0;c[p>>2]=g+1;a[(c[F>>2]|0)+g>>0]=n;d=d+1|0}if(z){t=49;break}}if((t|0)==49){Kg(F,d,(c[w>>2]|0)-d|0);Bh(F);cc(b,e);i=G;return 2}return 0}function Bk(a){a=a|0;var b=0,d=0;b=i;i=i+16|0;d=b;Wg(a,1,d)|0;cc(a,c[d>>2]|0);i=b;return 1}function Ck(b){b=b|0;var e=0,f=0,g=0,h=0,j=0,k=0;k=i;i=i+1056|0;h=k+1040|0;j=k;g=Wg(b,1,h)|0;e=Sg(b,j,c[h>>2]|0)|0;if(!(c[h>>2]|0)){h=0;Ch(j,h);i=k;return 1}else f=0;do{a[e+f>>0]=Il(d[g+f>>0]|0)|0;f=f+1|0;b=c[h>>2]|0}while(f>>>0<b>>>0);Ch(j,b);i=k;return 1}function Dk(a){a=a|0;return tk(a,0)|0}function Ek(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0;n=i;i=i+1056|0;e=n;l=n+1052|0;m=n+1048|0;k=n+8|0;h=Wg(a,1,l)|0;f=Vg(a,2)|0;j=Zg(a,3,15608,m)|0;if((f|0)<1){ec(a,15608,0)|0;m=1;i=n;return m|0}b=c[l>>2]|0;d=c[m>>2]|0;g=d+b|0;if(g>>>0>=b>>>0?g>>>0<(2147483647/(f>>>0)|0)>>>0:0){g=(_(d,f+-1|0)|0)+(_(b,f)|0)|0;b=Sg(a,k,g)|0;zn(b|0,h|0,c[l>>2]|0)|0;if((f|0)>1)do{f=f+-1|0;e=c[l>>2]|0;b=b+e|0;d=c[m>>2]|0;if(!d)d=e;else{zn(b|0,j|0,d|0)|0;d=c[l>>2]|0;b=b+(c[m>>2]|0)|0}zn(b|0,h|0,d|0)|0}while((f|0)>1);Ch(k,g);m=1;i=n;return m|0}m=Lg(a,9088,e)|0;i=n;return m|0}function Fk(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0;j=i;i=i+1056|0;g=j+1040|0;h=j;f=Wg(b,1,g)|0;e=Sg(b,h,c[g>>2]|0)|0;b=c[g>>2]|0;if(!b){g=0;Ch(h,g);i=j;return 1}else d=0;do{a[e+d>>0]=a[f+(b+~d)>>0]|0;d=d+1|0;b=c[g>>2]|0}while(b>>>0>d>>>0);Ch(h,b);i=j;return 1}function Gk(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0;h=i;i=i+16|0;f=h;g=Wg(a,1,f)|0;b=Vg(a,2)|0;d=c[f>>2]|0;if((b|0)<=-1)if(d>>>0<(0-b|0)>>>0)b=0;else b=b+1+d|0;e=xh(a,3,-1)|0;f=c[f>>2]|0;if((e|0)<=-1)if(f>>>0<(0-e|0)>>>0)e=0;else e=e+1+f|0;d=(b|0)==0?1:b;b=e>>>0>f>>>0?f:e;if(b>>>0<d>>>0){ec(a,15608,0)|0;i=h;return 1}else{ec(a,g+d+-1|0,1-d+b|0)|0;i=h;return 1}return 0}function Hk(b){b=b|0;var e=0,f=0,g=0,h=0,j=0,k=0;k=i;i=i+1056|0;h=k+1040|0;j=k;g=Wg(b,1,h)|0;e=Sg(b,j,c[h>>2]|0)|0;if(!(c[h>>2]|0)){h=0;Ch(j,h);i=k;return 1}else f=0;do{a[e+f>>0]=Gl(d[g+f>>0]|0)|0;f=f+1|0;b=c[h>>2]|0}while(f>>>0<b>>>0);Ch(j,b);i=k;return 1}function Ik(a){a=a|0;sc(a,0,7);wh(a,1596,0);oc(a,-1,9273);vc(a,9273);return 1}function Jk(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0;k=i;i=i+1072|0;j=k+8|0;h=k;f=k+24|0;g=k+16|0;d=Zg(a,2,15608,g)|0;$g(a,1,5);b=xh(a,3,1)|0;if((Jb(a,4)|0)<1)e=ih(a,1)|0;else e=Vg(a,4)|0;Rg(a,f);if((b|0)>=(e|0)){if((b|0)!=(e|0)){Bh(f);i=k;return 1}}else do{qc(a,1,b);if(!(Nb(a,-1)|0)){c[h>>2]=Kb(a,Jb(a,-1)|0)|0;c[h+4>>2]=b;Lg(a,9140,h)|0}Ng(f);Kg(f,d,c[g>>2]|0);b=b+1|0}while((b|0)!=(e|0));qc(a,1,e);if(!(Nb(a,-1)|0)){c[j>>2]=Kb(a,Jb(a,-1)|0)|0;c[j+4>>2]=e;Lg(a,9140,j)|0}Ng(f);Bh(f);i=k;return 1}function Kk(a){a=a|0;var b=0.0,c=0.0;$g(a,1,5);ac(a);b=0.0;a:while(1){do{if(!(Mc(a,1)|0))break a;Db(a,-2)}while((Jb(a,-1)|0)!=3);c=+Sb(a,-1,0);b=c>b?c:b}bc(a,b);return 1}function Lk(a){a=a|0;var b=0,c=0,d=0,e=0;e=i;i=i+16|0;$g(a,1,5);c=ih(a,1)|0;b=c+1|0;switch(Cb(a)|0){case 2:break;case 3:{d=2;break}default:{a=Lg(a,9228,e)|0;i=e;return a|0}}if((d|0)==2){d=Vg(a,2)|0;if((d|0)<1|(d|0)>(b|0))Og(a,2,9205)|0;if((c|0)<(d|0))b=d;else{do{c=b;b=b+-1|0;qc(a,1,b);zc(a,1,c)}while((b|0)>(d|0));b=d}}zc(a,1,b);a=0;i=e;return a|0}function Mk(a){a=a|0;var b=0;b=Cb(a)|0;sc(a,b,1);cc(a,b);xc(a,-2,9271);if((b|0)<=0)return 1;Ib(a,1);zc(a,-2,1);Gb(a,1);if((b|0)<=1)return 1;do{zc(a,1,b);b=b+-1|0}while((b|0)>1);return 1}function Nk(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0;g=i;i=i+16|0;e=g;$g(a,1,5);c=xh(a,2,1)|0;if((Jb(a,3)|0)<1)f=ih(a,1)|0;else f=Vg(a,3)|0;if((f|0)<(c|0)){a=0;i=g;return a|0}d=f-c|0;if(d>>>0<=2147483637?(b=d+1|0,wb(a,b)|0):0){qc(a,1,c);if((f|0)<=(c|0)){a=b;i=g;return a|0}do{c=c+1|0;qc(a,1,c)}while((c|0)!=(f|0));i=g;return b|0}a=Lg(a,9280,e)|0;i=g;return a|0}function Ok(a){a=a|0;var b=0,c=0,d=0;$g(a,1,5);b=ih(a,1)|0;c=xh(a,2,b)|0;if((c|0)!=(b|0)?(c|0)<1|(c|0)>(b+1|0):0)Og(a,1,9205)|0;qc(a,1,c);if((c|0)>=(b|0)){ac(a);zc(a,1,c);return 1}do{d=c;c=c+1|0;qc(a,1,c);zc(a,1,d)}while((c|0)!=(b|0));ac(a);zc(a,1,b);return 1}function Pk(a){a=a|0;var b=0;$g(a,1,5);b=ih(a,1)|0;_g(a,40,15608);if((Jb(a,2)|0)>=1)$g(a,2,6);Db(a,2);Qk(a,1,b);return 0}function Qk(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0;m=i;i=i+16|0;l=m+8|0;k=m;if((c|0)<=(b|0)){i=m;return}while(1){qc(a,1,b);qc(a,1,c);if(!(Rk(a,-1,-2)|0))Db(a,-3);else{zc(a,1,b);zc(a,1,c)}d=c-b|0;if((d|0)==1){c=24;break}e=(c+b|0)/2|0;qc(a,1,e);qc(a,1,b);do if(!(Rk(a,-2,-1)|0)){Db(a,-2);qc(a,1,c);if(!(Rk(a,-1,-2)|0)){Db(a,-3);break}else{zc(a,1,e);zc(a,1,c);break}}else{zc(a,1,e);zc(a,1,b)}while(0);if((d|0)==2){c=24;break}qc(a,1,e);Ib(a,-1);j=c+-1|0;qc(a,1,j);zc(a,1,e);zc(a,1,j);h=b;g=j;while(1){d=h+1|0;qc(a,1,d);if(!(Rk(a,-1,-2)|0)){e=d;d=h}else while(1){if((c|0)<=(d|0))Lg(a,9319,k)|0;Db(a,-2);e=d+1|0;qc(a,1,e);if(!(Rk(a,-1,-2)|0))break;else d=e}f=g+-1|0;qc(a,1,f);if(Rk(a,-3,-1)|0){g=f;while(1){if((g|0)<=(b|0))Lg(a,9319,l)|0;Db(a,-2);f=g+-1|0;qc(a,1,f);if(!(Rk(a,-3,-1)|0))break;else g=f}}if((g|0)<=(e|0))break;zc(a,1,e);zc(a,1,f);h=e;g=f}Db(a,-4);qc(a,1,j);qc(a,1,e);zc(a,1,j);zc(a,1,e);h=(e-b|0)<(c-e|0);g=d+2|0;f=b;b=h?g:b;j=c;c=h?c:d;Qk(a,h?f:g,h?d:j);if((c|0)<=(b|0)){c=24;break}}if((c|0)==24){i=m;return}}function Rk(a,b,c){a=a|0;b=b|0;c=c|0;if(!(Jb(a,2)|0)){c=Rb(a,b,c,1)|0;return c|0}else{Ib(a,2);Ib(a,b+-1|0);Ib(a,c+-2|0);Ec(a,2,1,0,0);c=Vb(a,-1)|0;Db(a,-2);return c|0}return 0}function Sk(a){a=a|0;gh(a,-1001e3,9354)|0;sc(a,0,1);ic(a,169,0);xc(a,-2,9361);Bc(a,-2)|0;sc(a,0,3);wh(a,1660,0);sc(a,4,0);Ib(a,-2);ic(a,170,1);zc(a,-2,1);Ib(a,-2);ic(a,171,1);zc(a,-2,2);Ib(a,-2);ic(a,172,1);zc(a,-2,3);Ib(a,-2);ic(a,173,1);zc(a,-2,4);Ib(a,-1);xc(a,-3,9655);xc(a,-2,9663);cl(a,9525,9673,9686,9695);cl(a,9606,9852,9866,9876);ec(a,9945,10)|0;xc(a,-2,9956);gh(a,-1001e3,9963)|0;xc(a,-2,9971);gh(a,-1001e3,10179)|0;xc(a,-2,9978);qc(a,-1001e3,2);Ib(a,-2);wh(a,1692,1);Db(a,-2);return 1}function Tk(a){a=a|0;var b=0;b=ih(a,1)|0;if((b|0)<=0)return 0;while(1){qc(a,1,b);Db(a,-2);if((b|0)>1)b=b+-1|0;else break}return 0}function Uk(a){a=a|0;var b=0;b=Wg(a,1,0)|0;b=Vk(a,b,Wg(a,2,0)|0)|0;if(!b){a=1;return a|0}ac(a);Fb(a,-2);fc(a,(b|0)==1?9433:9440)|0;a=3;return a|0}function Vk(b,c,d){b=b|0;c=c|0;d=d|0;oc(b,-1001e3,9354);oc(b,-1,c);c=Zb(b,-1)|0;Db(b,-3);if(!c){ec(b,9374,58)|0;d=1;return d|0}if((a[d>>0]|0)==42){jc(b,1);d=0;return d|0}else{ec(b,9374,58)|0;d=2;return d|0}return 0}function Wk(a){a=a|0;var b=0,c=0,d=0;d=Wg(a,1,0)|0;c=Wg(a,2,0)|0;b=Zg(a,3,12616,0)|0;if(Xk(a,d,c,b,Zg(a,4,9456,0)|0)|0){d=1;return d|0}ac(a);Fb(a,-2);d=2;return d|0}function Xk(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0;k=i;i=i+1056|0;h=k;j=k+8|0;Rg(b,j);if(a[f>>0]|0)d=hh(b,d,f,g)|0;a:while(1){switch(a[e>>0]|0){case 0:{d=12;break a}case 59:{e=e+1|0;continue a}default:{}}g=Bm(e,59)|0;if(!g)f=e+(Ql(e)|0)|0;else f=g;ec(b,e,f-e|0)|0;if(!f){d=12;break}e=hh(b,Wb(b,-1,0)|0,9458,d)|0;Eb(b,-2);g=zm(e,9460)|0;if(g|0){d=11;break}c[h>>2]=e;hc(b,9462,h)|0;Eb(b,-2);Ng(j);e=f}if((d|0)==11){Dm(g)|0;j=e;i=k;return j|0}else if((d|0)==12){Bh(j);j=0;i=k;return j|0}return 0}function Yk(a){a=a|0;$g(a,1,5);if(!(tc(a,1)|0)){sc(a,0,1);Ib(a,-1);Bc(a,1)|0}qc(a,-1001e3,2);xc(a,-2,9484);return 0}function Zk(a){a=a|0;var b=0,d=0,e=0;e=i;i=i+16|0;d=e;b=Wg(a,1,0)|0;oc(a,-1001e3,10179);oc(a,-1,b);if(Jb(a,-1)|0){i=e;return 1}c[d>>2]=b;hc(a,9492,d)|0;i=e;return 1}function _k(a){a=a|0;var b=0,d=0,e=0,f=0,g=0;g=i;i=i+32|0;f=g+8|0;e=g;b=Wg(a,1,0)|0;oc(a,-1001001,9525);d=Wb(a,-1,0)|0;if(!d){c[e>>2]=9525;Lg(a,9530,e)|0}b=Xk(a,b,d,12616,9456)|0;if(!b){f=1;i=g;return f|0}if(!(lh(a,b,0)|0)){fc(a,b)|0;f=2;i=g;return f|0}else{d=Wb(a,1,0)|0;e=Wb(a,-1,0)|0;c[f>>2]=d;c[f+4>>2]=b;c[f+8>>2]=e;f=Lg(a,9560,f)|0;i=g;return f|0}return 0}function $k(a){a=a|0;var b=0,d=0,e=0,f=0,g=0;g=i;i=i+32|0;f=g+8|0;d=g;e=Wg(a,1,0)|0;oc(a,-1001001,9606);b=Wb(a,-1,0)|0;if(!b){c[d>>2]=9606;Lg(a,9530,d)|0}b=Xk(a,e,b,12616,9456)|0;if(!b){f=1;i=g;return f|0}if(!(al(a,b,e)|0)){fc(a,b)|0;f=2;i=g;return f|0}else{d=Wb(a,1,0)|0;e=Wb(a,-1,0)|0;c[f>>2]=d;c[f+4>>2]=b;c[f+8>>2]=e;f=Lg(a,9560,f)|0;i=g;return f|0}return 0}function al(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0;h=i;i=i+16|0;g=h+8|0;f=h;d=hh(a,d,12616,9612)|0;e=Bm(d,45)|0;if(e){c[f>>2]=ec(a,d,e-d|0)|0;d=Vk(a,b,hc(a,9614,f)|0)|0;if((d|0)==2)d=e+1|0;else{g=d;i=h;return g|0}}c[g>>2]=d;g=Vk(a,b,hc(a,9614,g)|0)|0;i=h;return g|0}function bl(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0;j=i;i=i+32|0;h=j+24|0;g=j+8|0;e=j;f=Wg(a,1,0)|0;b=Bm(f,46)|0;if(!b){h=0;i=j;return h|0}ec(a,f,b-f|0)|0;b=Wb(a,-1,0)|0;oc(a,-1001001,9606);d=Wb(a,-1,0)|0;if(!d){c[e>>2]=9606;Lg(a,9530,e)|0}b=Xk(a,b,d,12616,9456)|0;if(!b){h=1;i=j;return h|0}switch(al(a,b,f)|0){case 0:{fc(a,b)|0;h=2;i=j;return h|0}case 2:{c[h>>2]=f;c[h+4>>2]=b;hc(a,9625,h)|0;h=1;i=j;return h|0}default:{f=Wb(a,1,0)|0;h=Wb(a,-1,0)|0;c[g>>2]=f;c[g+4>>2]=b;c[g+8>>2]=h;h=Lg(a,9560,g)|0;i=j;return h|0}}return 0}function cl(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0;c=Qa(c|0)|0;if(!c){c=Qa(d|0)|0;if(c|0){f=c;g=3}}else{f=c;g=3}if((g|0)==3?(oc(a,-1001e3,9833),g=Vb(a,-1)|0,Db(a,-2),(g|0)==0):0){hh(a,hh(a,f,9843,9846)|0,9850,e)|0;Eb(a,-2);xc(a,-2,b);return}fc(a,e)|0;xc(a,-2,b);return}function dl(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0;f=i;i=i+112|0;d=f;c=f+4|0;b=Wg(a,1,0)|0;e=Cb(a)|0;uh(a,b,1);oc(a,-1,9993);g=(Jb(a,-1)|0)==0;Db(a,-2);if(g){Ib(a,-1);xc(a,-2,9999);fc(a,b)|0;xc(a,-2,9993);g=Rm(b,46)|0;ec(a,b,((g|0)==0?b:g+1|0)-b|0)|0;xc(a,-2,10002)}Ib(a,-1);if(!(((Od(a,1,c)|0)!=0?(Ld(a,10011,c)|0)!=0:0)?!(Lb(a,-1)|0):0))Lg(a,10013,d)|0;Ib(a,-2);Tc(a,-2,1)|0;Db(a,-2);if((e|0)<2){i=f;return 1}else b=2;while(1){if((Jb(a,b)|0)==6){Ib(a,b);Ib(a,-2);Ec(a,1,0,0,0)}if((b|0)==(e|0))break;else b=b+1|0}i=f;return 1}function el(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0;g=i;i=i+1056|0;f=g+8|0;e=g+16|0;b=Wg(a,1,0)|0;Db(a,1);oc(a,-1001e3,9963);oc(a,2,b);if(Vb(a,-1)|0){i=g;return 1}Db(a,-2);Rg(a,e);oc(a,-1001001,9663);if((Jb(a,3)|0)==5)d=1;else{Lg(a,10061,g)|0;d=1}while(1){qc(a,3,d);if(!(Jb(a,-1)|0)){Db(a,-2);Bh(e);h=Wb(a,-1,0)|0;c[f>>2]=b;c[f+4>>2]=h;Lg(a,10097,f)|0}fc(a,b)|0;Ec(a,1,2,0,0);if((Jb(a,-2)|0)==6)break;if(!(Nb(a,-2)|0))Db(a,-3);else{Db(a,-2);Ng(e)}d=d+1|0}fc(a,b)|0;Fb(a,-2);Ec(a,2,1,0,0);if(Jb(a,-1)|0)xc(a,2,b);oc(a,2,b);if(Jb(a,-1)|0){i=g;return 1}jc(a,1);Ib(a,-1);xc(a,2,b);i=g;return 1}function fl(a){a=a|0;Eh(a,10122,174,1);Db(a,-2);Eh(a,10125,175,1);Db(a,-2);Eh(a,10133,176,1);Db(a,-2);Eh(a,10143,177,1);Db(a,-2);Eh(a,10149,178,1);Db(a,-2);Eh(a,10152,179,1);Db(a,-2);Eh(a,10155,180,1);Db(a,-2);Eh(a,10162,181,1);Db(a,-2);Eh(a,10168,182,1);Db(a,-2);Eh(a,10173,183,1);Db(a,-2);gh(a,-1001e3,10179)|0;Db(a,-2);return}function gl(a){a=a|0;var b=0,d=0;b=i;i=i+16|0;d=b;c[d>>2]=c[a+60>>2];a=hl(_a(6,d|0)|0)|0;i=b;return a|0}function hl(a){a=a|0;if(a>>>0>4294963200){c[(il()|0)>>2]=0-a;a=-1}return a|0}function il(){var a=0;if(!(c[3246]|0))a=13028;else a=c[(Pa()|0)+64>>2]|0;return a|0}function jl(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0;m=i;i=i+48|0;h=m+16|0;g=m;f=m+32|0;c[f>>2]=d;j=f+4|0;l=b+48|0;n=c[l>>2]|0;c[j>>2]=e-((n|0)!=0&1);k=b+44|0;c[f+8>>2]=c[k>>2];c[f+12>>2]=n;if(!(c[3246]|0)){c[h>>2]=c[b+60>>2];c[h+4>>2]=f;c[h+8>>2]=2;f=hl(eb(145,h|0)|0)|0}else{xa(18,b|0);c[g>>2]=c[b+60>>2];c[g+4>>2]=f;c[g+8>>2]=2;f=hl(eb(145,g|0)|0)|0;pa(0)}if((f|0)>=1){j=c[j>>2]|0;if(f>>>0>j>>>0){g=c[k>>2]|0;h=b+4|0;c[h>>2]=g;c[b+8>>2]=g+(f-j);if(!(c[l>>2]|0))f=e;else{c[h>>2]=g+1;a[d+(e+-1)>>0]=a[g>>0]|0;f=e}}}else{c[b>>2]=c[b>>2]|f&48^16;c[b+8>>2]=0;c[b+4>>2]=0}i=m;return f|0}function kl(a){a=a|0;if(!(c[a+68>>2]|0))ll(a);return}function ll(a){a=a|0;return}function ml(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0;f=i;i=i+32|0;g=f;e=f+20|0;c[g>>2]=c[a+60>>2];c[g+4>>2]=0;c[g+8>>2]=b;c[g+12>>2]=e;c[g+16>>2]=d;if((hl(bb(140,g|0)|0)|0)<0){c[e>>2]=-1;a=-1}else a=c[e>>2]|0;i=f;return a|0}function nl(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0;g=i;i=i+80|0;f=g;c[b+36>>2]=21;if((c[b>>2]&64|0)==0?(c[f>>2]=c[b+60>>2],c[f+4>>2]=21505,c[f+8>>2]=g+12,Sa(54,f|0)|0):0)a[b+75>>0]=-1;f=ol(b,d,e)|0;i=g;return f|0}function ol(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;q=i;i=i+48|0;n=q+16|0;m=q;e=q+32|0;o=a+28|0;f=c[o>>2]|0;c[e>>2]=f;p=a+20|0;f=(c[p>>2]|0)-f|0;c[e+4>>2]=f;c[e+8>>2]=b;c[e+12>>2]=d;k=a+60|0;l=a+44|0;b=2;f=f+d|0;while(1){if(!(c[3246]|0)){c[n>>2]=c[k>>2];c[n+4>>2]=e;c[n+8>>2]=b;h=hl(fb(146,n|0)|0)|0}else{xa(19,a|0);c[m>>2]=c[k>>2];c[m+4>>2]=e;c[m+8>>2]=b;h=hl(fb(146,m|0)|0)|0;pa(0)}if((f|0)==(h|0)){f=6;break}if((h|0)<0){f=8;break}f=f-h|0;g=c[e+4>>2]|0;if(h>>>0<=g>>>0)if((b|0)==2){c[o>>2]=(c[o>>2]|0)+h;j=g;b=2}else j=g;else{j=c[l>>2]|0;c[o>>2]=j;c[p>>2]=j;j=c[e+12>>2]|0;h=h-g|0;e=e+8|0;b=b+-1|0}c[e>>2]=(c[e>>2]|0)+h;c[e+4>>2]=j-h}if((f|0)==6){n=c[l>>2]|0;c[a+16>>2]=n+(c[a+48>>2]|0);a=n;c[o>>2]=a;c[p>>2]=a}else if((f|0)==8){c[a+16>>2]=0;c[o>>2]=0;c[p>>2]=0;c[a>>2]=c[a>>2]|32;if((b|0)==2)d=0;else d=d-(c[e+4>>2]|0)|0}i=q;return d|0}function pl(a){a=a|0;if(!(c[a+68>>2]|0))ll(a);return}function ql(a,b){a=+a;b=b|0;var d=0;if((b|0)>1023){a=a*8988465674311579538646525.0e283;d=b+-1023|0;if((d|0)>1023){d=b+-2046|0;d=(d|0)>1023?1023:d;a=a*8988465674311579538646525.0e283}}else if((b|0)<-1022){a=a*2.2250738585072014e-308;d=b+1022|0;if((d|0)<-1022){d=b+2044|0;d=(d|0)<-1022?-1022:d;a=a*2.2250738585072014e-308}}else d=b;d=un(d+1023|0,0,52)|0;b=C;c[k>>2]=d;c[k+4>>2]=b;return +(a*+h[k>>3])}function rl(a){a=+a;var b=0,d=0,e=0,f=0,g=0.0,i=0.0,j=0.0,l=0.0,m=0.0;h[k>>3]=a;d=c[k>>2]|0;b=c[k+4>>2]|0;e=(b|0)<0;do if(e|b>>>0<1048576){g=+N(+a);h[k>>3]=g;if((c[k>>2]|0)==0&(c[k+4>>2]|0)==0){a=-1.0/(a*a);break}if(e){a=(a-a)/0.0;break}else{h[k>>3]=a*18014398509481984.0;b=c[k+4>>2]|0;e=c[k>>2]|0;d=-1077;f=9;break}}else if(b>>>0<=2146435071)if((d|0)==0&0==0&(b|0)==1072693248)a=0.0;else{e=d;d=-1023;f=9}while(0);if((f|0)==9){f=b+614242|0;c[k>>2]=e;c[k+4>>2]=(f&1048575)+1072079006;j=+h[k>>3]+-1.0;i=j*(j*.5);l=j/(j+2.0);m=l*l;a=m*m;h[k>>3]=j-i;e=c[k+4>>2]|0;c[k>>2]=0;c[k+4>>2]=e;g=+h[k>>3];a=j-g-i+l*(i+(a*(a*(a*.15313837699209373+.22222198432149784)+.3999999999940942)+m*(a*(a*(a*.14798198605116586+.1818357216161805)+.2857142874366239)+.6666666666666735)));m=g*.4342944818781689;i=+(d+(f>>>20)|0);l=i*.30102999566361177;j=l+m;a=j+(m+(l-j)+(a*.4342944818781689+(i*3.694239077158931e-13+(g+a)*2.5082946711645275e-11)))}return +a}function sl(a,b){a=+a;b=b|0;return +(+tl(a,b))}function tl(a,b){a=+a;b=b|0;var d=0,e=0,f=0;h[k>>3]=a;d=c[k>>2]|0;e=c[k+4>>2]|0;f=xn(d|0,e|0,52)|0;f=f&2047;switch(f|0){case 0:{if(a!=0.0){a=+tl(a*18446744073709551616.0,b);d=(c[b>>2]|0)+-64|0}else d=0;c[b>>2]=d;break}case 2047:break;default:{c[b>>2]=f+-1022;c[k>>2]=d;c[k+4>>2]=e&-2146435073|1071644672;a=+h[k>>3]}}return +a}function ul(a,b){a=+a;b=b|0;return +(+ql(a,b))}function vl(a){a=+a;var b=0,d=0;h[k>>3]=a;d=c[k+4>>2]|0;a=+N(+a);h[k>>3]=a;b=c[k+4>>2]|0;do if(b>>>0>1071748074)if(b>>>0>1077149696){a=1.0-0.0/a;break}else{a=1.0-2.0/(+wl(a*2.0)+2.0);break}else{if(b>>>0>1070618798){a=+wl(a*2.0);a=a/(a+2.0);break}if(b>>>0>1048575){a=+wl(a*-2.0);a=-a/(a+2.0)}}while(0);return +((d|0)<0?-a:a)}function wl(a){a=+a;var b=0,d=0,e=0.0,f=0.0,g=0.0,i=0,j=0,l=0.0;h[k>>3]=a;d=c[k+4>>2]|0;b=d&2147483647;d=xn(c[k>>2]|0,d|0,63)|0;do if(b>>>0>1078159481){g=+N(+a);h[k>>3]=g;i=c[k+4>>2]|0;if(!(i>>>0>2146435072|(i|0)==2146435072&(c[k>>2]|0)>>>0>0))if(!d)if(a>709.782712893384)a=a*8988465674311579538646525.0e283;else j=11;else a=-1.0}else{if(b>>>0<=1071001154)if(b>>>0<1016070144)break;else{g=0.0;i=0;j=14;break}if(b>>>0<1072734898)if(!d){e=a+-.6931471803691238;b=1;f=1.9082149292705877e-10;j=12;break}else{e=a+.6931471803691238;b=-1;f=-1.9082149292705877e-10;j=12;break}else j=11}while(0);if((j|0)==11){b=~~(a*1.4426950408889634+(d|0?-.5:.5));f=+(b|0);e=a-f*.6931471803691238;f=f*1.9082149292705877e-10;j=12}if((j|0)==12){g=e-f;a=g;g=e-g-f;i=b;j=14}a:do if((j|0)==14){f=a*.5;e=a*f;l=e*(e*(e*(e*(4.008217827329362e-06-e*2.0109921818362437e-07)+-7.93650757867488e-05)+1.5873015872548146e-03)+-.03333333333333313)+1.0;f=3.0-f*l;f=e*((l-f)/(6.0-a*f));if(!i){a=a-(a*f-e);break}e=a*(f-g)-g-e;switch(i|0){case -1:{a=(a-e)*.5+-.5;break a}case 1:if(a<-.25){a=(e-(a+.5))*-2.0;break a}else{a=(a-e)*2.0+1.0;break a}default:{d=un(i+1023|0,0,52)|0;j=C;c[k>>2]=d;c[k+4>>2]=j;f=+h[k>>3];if(i>>>0>56){a=a-e+1.0;a=((i|0)==1024?a*2.0*8988465674311579538646525.0e283:f*a)+-1.0;break a}b=un(1023-i|0,0,52)|0;d=C;if((i|0)<20){c[k>>2]=b;c[k+4>>2]=d;a=1.0-+h[k>>3]+(a-e)}else{c[k>>2]=b;c[k+4>>2]=d;a=a-(+h[k>>3]+e)+1.0}a=f*a;break a}}}while(0);return +a}function xl(a,b){a=+a;b=b|0;var d=0,e=0,f=0,g=0,i=0.0;h[k>>3]=a;f=c[k>>2]|0;g=c[k+4>>2]|0;d=xn(f|0,g|0,52)|0;d=d&2047;e=d+-1023|0;do if((e|0)>51){h[b>>3]=a;if((f|0)==0&(g&1048575|0)==0|(e|0)!=1024){c[k>>2]=0;c[k+4>>2]=g&-2147483648;a=+h[k>>3]}}else{if(d>>>0<1023){c[b>>2]=0;c[b+4>>2]=g&-2147483648;break}d=xn(-1,1048575,e|0)|0;e=C;if((d&f|0)==0&(e&g|0)==0){h[b>>3]=a;c[k>>2]=0;c[k+4>>2]=g&-2147483648;a=+h[k>>3];break}else{f=f&~d;g=g&~e;c[k>>2]=f;c[k+4>>2]=g;i=+h[k>>3];c[b>>2]=f;c[b+4>>2]=g;a=a-i;break}}while(0);return +a}function yl(a){a=+a;var b=0;a=+N(+a);h[k>>3]=a;b=c[k+4>>2]|0;do if(b>>>0<1072049730)if(b>>>0<1045430272)a=1.0;else{a=+wl(a);a=a*a/((a+1.0)*2.0)+1.0}else if(b>>>0<1082535490){a=+X(+a);a=(a+1.0/a)*.5;break}else{a=+zl(a);break}while(0);return +a}function zl(a){a=+a;return +(+X(+(a+-1416.0996898839683))*2247116418577894884661631.0e283*2247116418577894884661631.0e283)}function Al(a,b){a=+a;b=+b;return +(+Bl(a,b))}function Bl(a,b){a=+a;b=+b;var d=0,e=0,f=0,g=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0.0;h[k>>3]=a;d=c[k>>2]|0;m=c[k+4>>2]|0;h[k>>3]=b;n=c[k>>2]|0;o=c[k+4>>2]|0;e=xn(d|0,m|0,52)|0;e=e&2047;j=xn(n|0,o|0,52)|0;j=j&2047;p=m&-2147483648;i=un(n|0,o|0,1)|0;l=C;a:do if(!((i|0)==0&(l|0)==0)?(r=+N(+b),h[k>>3]=r,g=c[k+4>>2]|0,!(g>>>0>2146435072|(g|0)==2146435072&(c[k>>2]|0)>>>0>0|(e|0)==2047)):0){f=un(d|0,m|0,1)|0;g=C;if(!(g>>>0>l>>>0|(g|0)==(l|0)&f>>>0>i>>>0))return +((f|0)==(i|0)&(g|0)==(l|0)?a*0.0:a);if(!e){e=un(d|0,m|0,12)|0;f=C;if((f|0)>-1|(f|0)==-1&e>>>0>4294967295){g=e;e=0;do{e=e+-1|0;g=un(g|0,f|0,1)|0;f=C}while((f|0)>-1|(f|0)==-1&g>>>0>4294967295)}else e=0;d=un(d|0,m|0,1-e|0)|0;f=C}else f=m&1048575|1048576;if(!j){g=un(n|0,o|0,12)|0;i=C;if((i|0)>-1|(i|0)==-1&g>>>0>4294967295){j=0;do{j=j+-1|0;g=un(g|0,i|0,1)|0;i=C}while((i|0)>-1|(i|0)==-1&g>>>0>4294967295)}else j=0;n=un(n|0,o|0,1-j|0)|0;m=C}else m=o&1048575|1048576;l=sn(d|0,f|0,n|0,m|0)|0;i=C;g=(i|0)>-1|(i|0)==-1&l>>>0>4294967295;b:do if((e|0)>(j|0)){while(1){if(g)if((d|0)==(n|0)&(f|0)==(m|0))break;else{d=l;f=i}d=un(d|0,f|0,1)|0;f=C;e=e+-1|0;l=sn(d|0,f|0,n|0,m|0)|0;i=C;g=(i|0)>-1|(i|0)==-1&l>>>0>4294967295;if((e|0)<=(j|0))break b}b=a*0.0;break a}while(0);if(g)if((d|0)==(n|0)&(f|0)==(m|0)){b=a*0.0;break}else{f=i;d=l}if(f>>>0<1048576|(f|0)==1048576&d>>>0<0)do{d=un(d|0,f|0,1)|0;f=C;e=e+-1|0}while(f>>>0<1048576|(f|0)==1048576&d>>>0<0);if((e|0)>0){o=vn(d|0,f|0,0,-1048576)|0;d=C;e=un(e|0,0,52)|0;d=d|C;e=o|e}else{e=xn(d|0,f|0,1-e|0)|0;d=C}c[k>>2]=e;c[k+4>>2]=d|p;b=+h[k>>3]}else q=3;while(0);if((q|0)==3){b=a*b;b=b/b}return +b}function Cl(a,b){a=+a;b=b|0;return +(+ql(a,b))}function Dl(a){a=+a;var b=0.0,d=0.0,e=0;h[k>>3]=a;d=(c[k+4>>2]|0)<0?-.5:.5;b=+N(+a);h[k>>3]=b;e=c[k+4>>2]|0;do if(e>>>0<1082535490){b=+wl(b);if(e>>>0>=1072693248){a=d*(b+b/(b+1.0));break}if(e>>>0>=1045430272)a=d*(b*2.0-b*b/(b+1.0))}else a=d*2.0*+zl(b);while(0);return +a}function El(a,b){a=+a;b=+b;var d=0;h[k>>3]=b;d=c[k+4>>2]|0;b=+N(+a);h[k>>3]=b;d=d&-2147483648|c[k+4>>2];c[k>>2]=c[k>>2];c[k+4>>2]=d;return +(+h[k>>3])}function Fl(a,b){a=+a;b=+b;return +(+El(a,b))}function Gl(a){a=a|0;var b=0;b=(Hl(a)|0)==0;return (b?a:a&95)|0}function Hl(a){a=a|0;return (a+-97|0)>>>0<26|0}function Il(a){a=a|0;var b=0;b=(Jl(a)|0)==0;return (b?a:a|32)|0}function Jl(a){a=a|0;return (a+-65|0)>>>0<26|0}function Kl(b,c){b=b|0;c=c|0;var d=0,e=0;e=a[b>>0]|0;d=a[c>>0]|0;if(e<<24>>24==0?1:e<<24>>24!=d<<24>>24)c=e;else{do{b=b+1|0;c=c+1|0;e=a[b>>0]|0;d=a[c>>0]|0}while(!(e<<24>>24==0?1:e<<24>>24!=d<<24>>24));c=e}return (c&255)-(d&255)|0}function Ll(){return 2272}function Ml(a){a=a|0;return ((a+-48|0)>>>0<10|(Nl(a)|0)!=0)&1|0}function Nl(a){a=a|0;return ((a|32)+-97|0)>>>0<26|0}function Ol(a){a=a|0;return (a>>>0<32|(a|0)==127)&1|0}function Pl(a){a=a|0;return ((a|0)==32|(a+-9|0)>>>0<5)&1|0}function Ql(b){b=b|0;var d=0,e=0,f=0;f=b;a:do if(!(f&3))e=4;else{d=b;b=f;while(1){if(!(a[d>>0]|0))break a;d=d+1|0;b=d;if(!(b&3)){b=d;e=4;break}}}while(0);if((e|0)==4){while(1){d=c[b>>2]|0;if(!((d&-2139062144^-2139062144)&d+-16843009))b=b+4|0;else break}if((d&255)<<24>>24)do b=b+1|0;while((a[b>>0]|0)!=0)}return b-f|0}function Rl(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0;l=i;i=i+16|0;g=l;j=(f|0)==0?13032:f;f=c[j>>2]|0;a:do if(!d)if(!f)f=0;else k=15;else{h=(b|0)==0?g:b;if(!e)f=-2;else{if(!f){f=a[d>>0]|0;g=f&255;if(f<<24>>24>-1){c[h>>2]=g;f=f<<24>>24!=0&1;break}f=g+-194|0;if(f>>>0>50){k=15;break}f=c[1716+(f<<2)>>2]|0;g=e+-1|0;if(g){d=d+1|0;k=9}}else{g=e;k=9}b:do if((k|0)==9){b=a[d>>0]|0;m=(b&255)>>>3;if((m+-16|m+(f>>26))>>>0>7){k=15;break a}while(1){d=d+1|0;f=(b&255)+-128|f<<6;g=g+-1|0;if((f|0)>=0)break;if(!g)break b;b=a[d>>0]|0;if((b&-64)<<24>>24!=-128){k=15;break a}}c[j>>2]=0;c[h>>2]=f;f=e-g|0;break a}while(0);c[j>>2]=f;f=-2}}while(0);if((k|0)==15){c[j>>2]=0;c[(il()|0)>>2]=84;f=-1}i=l;return f|0}function Sl(a,b){a=a|0;b=b|0;if(!a)a=0;else a=Tl(a,b,0)|0;return a|0}function Tl(b,d,e){b=b|0;d=d|0;e=e|0;do if(b){if(d>>>0<128){a[b>>0]=d;b=1;break}if(d>>>0<2048){a[b>>0]=d>>>6|192;a[b+1>>0]=d&63|128;b=2;break}if(d>>>0<55296|(d&-8192|0)==57344){a[b>>0]=d>>>12|224;a[b+1>>0]=d>>>6&63|128;a[b+2>>0]=d&63|128;b=3;break}if((d+-65536|0)>>>0<1048576){a[b>>0]=d>>>18|240;a[b+1>>0]=d>>>12&63|128;a[b+2>>0]=d>>>6&63|128;a[b+3>>0]=d&63|128;b=4;break}else{c[(il()|0)>>2]=84;b=-1;break}}else b=1;while(0);return b|0}function Ul(a){a=a|0;return (a+-33|0)>>>0<94|0}function Vl(a,b){a=a|0;b=b|0;return 10188}function Wl(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0;f=i;i=i+16|0;g=f;c[g>>2]=e;e=Xl(a,b,d,g)|0;i=f;return e|0}function Xl(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0;n=i;i=i+128|0;g=n+112|0;m=n;h=m;j=2328;k=h+112|0;do{c[h>>2]=c[j>>2];h=h+4|0;j=j+4|0}while((h|0)<(k|0));if((d+-1|0)>>>0>2147483646)if(!d){d=1;l=4}else{c[(il()|0)>>2]=75;d=-1}else{g=b;l=4}if((l|0)==4){l=-2-g|0;l=d>>>0>l>>>0?l:d;c[m+48>>2]=l;b=m+20|0;c[b>>2]=g;c[m+44>>2]=g;d=g+l|0;g=m+16|0;c[g>>2]=d;c[m+28>>2]=d;d=Zl(m,e,f)|0;if(l){e=c[b>>2]|0;a[e+(((e|0)==(c[g>>2]|0))<<31>>31)>>0]=0}}i=n;return d|0}function Yl(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=a+20|0;f=c[e>>2]|0;a=(c[a+16>>2]|0)-f|0;a=a>>>0>d>>>0?d:a;zn(f|0,b|0,a|0)|0;c[e>>2]=(c[e>>2]|0)+a;return d|0}function Zl(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;s=i;i=i+224|0;o=s+120|0;r=s+80|0;q=s;p=s+136|0;f=r;g=f+40|0;do{c[f>>2]=0;f=f+4|0}while((f|0)<(g|0));c[o>>2]=c[e>>2];if((_l(0,d,o,q,r)|0)<0)e=-1;else{if((c[b+76>>2]|0)>-1)m=gm(b)|0;else m=0;e=c[b>>2]|0;n=e&32;if((a[b+74>>0]|0)<1)c[b>>2]=e&-33;e=b+48|0;if(!(c[e>>2]|0)){g=b+44|0;h=c[g>>2]|0;c[g>>2]=p;j=b+28|0;c[j>>2]=p;k=b+20|0;c[k>>2]=p;c[e>>2]=80;l=b+16|0;c[l>>2]=p+80;f=_l(b,d,o,q,r)|0;if(h){hb[c[b+36>>2]&31](b,0,0)|0;f=(c[k>>2]|0)==0?-1:f;c[g>>2]=h;c[e>>2]=0;c[l>>2]=0;c[j>>2]=0;c[k>>2]=0}}else f=_l(b,d,o,q,r)|0;e=c[b>>2]|0;c[b>>2]=e|n;if(m|0)ll(b);e=(e&32|0)==0?f:-1}i=s;return e|0}function _l(e,f,g,j,l){e=e|0;f=f|0;g=g|0;j=j|0;l=l|0;var m=0,n=0,o=0,p=0,q=0.0,r=0,s=0,t=0,u=0,v=0,w=0,x=0.0,y=0,z=0,A=0,B=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0;ia=i;i=i+624|0;da=ia+24|0;fa=ia+16|0;ea=ia+588|0;aa=ia+576|0;ca=ia;W=ia+536|0;ha=ia+8|0;ga=ia+528|0;M=(e|0)!=0;N=W+40|0;V=N;W=W+39|0;X=ha+4|0;Y=ea;Z=0-Y|0;$=aa+12|0;aa=aa+11|0;ba=$;O=ba-Y|0;P=-2-Y|0;Q=ba+2|0;R=da+288|0;S=ea+9|0;T=S;U=ea+8|0;m=0;o=0;n=0;y=f;a:while(1){do if((m|0)>-1)if((o|0)>(2147483647-m|0)){c[(il()|0)>>2]=75;m=-1;break}else{m=o+m|0;break}while(0);f=a[y>>0]|0;if(!(f<<24>>24)){L=244;break}else o=y;b:while(1){switch(f<<24>>24){case 37:{f=o;L=9;break b}case 0:{f=o;break b}default:{}}K=o+1|0;f=a[K>>0]|0;o=K}c:do if((L|0)==9)while(1){L=0;if((a[f+1>>0]|0)!=37)break c;o=o+1|0;f=f+2|0;if((a[f>>0]|0)==37)L=9;else break}while(0);w=o-y|0;if(M?(c[e>>2]&32|0)==0:0)$l(y,w,e)|0;if((o|0)!=(y|0)){o=w;y=f;continue}r=f+1|0;o=a[r>>0]|0;p=(o<<24>>24)+-48|0;if(p>>>0<10){K=(a[f+2>>0]|0)==36;r=K?f+3|0:r;o=a[r>>0]|0;u=K?p:-1;n=K?1:n}else u=-1;f=o<<24>>24;d:do if((f&-32|0)==32){p=0;while(1){if(!(1<<f+-32&75913)){s=p;break d}p=1<<(o<<24>>24)+-32|p;r=r+1|0;o=a[r>>0]|0;f=o<<24>>24;if((f&-32|0)!=32){s=p;break}}}else s=0;while(0);do if(o<<24>>24==42){o=r+1|0;f=(a[o>>0]|0)+-48|0;if(f>>>0<10?(a[r+2>>0]|0)==36:0){c[l+(f<<2)>>2]=10;n=1;r=r+3|0;f=c[j+((a[o>>0]|0)+-48<<3)>>2]|0}else{if(n|0){m=-1;break a}if(!M){v=s;n=0;r=o;K=0;break}n=(c[g>>2]|0)+(4-1)&~(4-1);f=c[n>>2]|0;c[g>>2]=n+4;n=0;r=o}if((f|0)<0){v=s|8192;K=0-f|0}else{v=s;K=f}}else{p=(o<<24>>24)+-48|0;if(p>>>0<10){f=r;o=0;do{o=(o*10|0)+p|0;f=f+1|0;p=(a[f>>0]|0)+-48|0}while(p>>>0<10);if((o|0)<0){m=-1;break a}else{v=s;r=f;K=o}}else{v=s;K=0}}while(0);e:do if((a[r>>0]|0)==46){f=r+1|0;o=a[f>>0]|0;if(o<<24>>24!=42){p=(o<<24>>24)+-48|0;if(p>>>0<10)o=0;else{s=0;break}while(1){o=(o*10|0)+p|0;f=f+1|0;p=(a[f>>0]|0)+-48|0;if(p>>>0>=10){s=o;break e}}}f=r+2|0;o=(a[f>>0]|0)+-48|0;if(o>>>0<10?(a[r+3>>0]|0)==36:0){c[l+(o<<2)>>2]=10;s=c[j+((a[f>>0]|0)+-48<<3)>>2]|0;f=r+4|0;break}if(n|0){m=-1;break a}if(M){J=(c[g>>2]|0)+(4-1)&~(4-1);s=c[J>>2]|0;c[g>>2]=J+4}else s=0}else{s=-1;f=r}while(0);t=0;while(1){o=(a[f>>0]|0)+-65|0;if(o>>>0>57){m=-1;break a}p=f+1|0;o=a[10196+(t*58|0)+o>>0]|0;r=o&255;if((r+-1|0)>>>0<8){f=p;t=r}else{J=p;break}}if(!(o<<24>>24)){m=-1;break}p=(u|0)>-1;do if(o<<24>>24==19)if(p){m=-1;break a}else L=52;else{if(p){c[l+(u<<2)>>2]=r;H=j+(u<<3)|0;I=c[H+4>>2]|0;L=ca;c[L>>2]=c[H>>2];c[L+4>>2]=I;L=52;break}if(!M){m=0;break a}bm(ca,r,g)}while(0);if((L|0)==52?(L=0,!M):0){o=w;y=J;continue}u=a[f>>0]|0;u=(t|0)!=0&(u&15|0)==3?u&-33:u;p=v&-65537;I=(v&8192|0)==0?v:p;f:do switch(u|0){case 110:switch(t|0){case 0:{c[c[ca>>2]>>2]=m;o=w;y=J;continue a}case 1:{c[c[ca>>2]>>2]=m;o=w;y=J;continue a}case 2:{o=c[ca>>2]|0;c[o>>2]=m;c[o+4>>2]=((m|0)<0)<<31>>31;o=w;y=J;continue a}case 3:{b[c[ca>>2]>>1]=m;o=w;y=J;continue a}case 4:{a[c[ca>>2]>>0]=m;o=w;y=J;continue a}case 6:{c[c[ca>>2]>>2]=m;o=w;y=J;continue a}case 7:{o=c[ca>>2]|0;c[o>>2]=m;c[o+4>>2]=((m|0)<0)<<31>>31;o=w;y=J;continue a}default:{o=w;y=J;continue a}}case 112:{t=I|8;s=s>>>0>8?s:8;u=120;L=64;break}case 88:case 120:{t=I;L=64;break}case 111:{p=ca;o=c[p>>2]|0;p=c[p+4>>2]|0;if((o|0)==0&(p|0)==0)f=N;else{f=N;do{f=f+-1|0;a[f>>0]=o&7|48;o=xn(o|0,p|0,3)|0;p=C}while(!((o|0)==0&(p|0)==0))}if(!(I&8)){o=I;t=0;r=10676;L=77}else{t=V-f|0;o=I;s=(s|0)>(t|0)?s:t+1|0;t=0;r=10676;L=77}break}case 105:case 100:{o=ca;f=c[o>>2]|0;o=c[o+4>>2]|0;if((o|0)<0){f=sn(0,0,f|0,o|0)|0;o=C;p=ca;c[p>>2]=f;c[p+4>>2]=o;p=1;r=10676;L=76;break f}if(!(I&2048)){r=I&1;p=r;r=(r|0)==0?10676:10678;L=76}else{p=1;r=10677;L=76}break}case 117:{o=ca;f=c[o>>2]|0;o=c[o+4>>2]|0;p=0;r=10676;L=76;break}case 99:{a[W>>0]=c[ca>>2];f=W;u=1;w=0;v=10676;o=N;break}case 109:{o=dm(c[(il()|0)>>2]|0)|0;L=82;break}case 115:{o=c[ca>>2]|0;o=o|0?o:12578;L=82;break}case 67:{c[ha>>2]=c[ca>>2];c[X>>2]=0;c[ca>>2]=ha;f=ha;s=-1;L=86;break}case 83:{f=c[ca>>2]|0;if(!s){fm(e,32,K,0,I);f=0;L=97}else L=86;break}case 65:case 71:case 70:case 69:case 97:case 103:case 102:case 101:{q=+h[ca>>3];c[fa>>2]=0;h[k>>3]=q;if((c[k+4>>2]|0)>=0)if(!(I&2048)){H=I&1;G=H;H=(H|0)==0?12586:12591}else{G=1;H=12588}else{q=-q;G=1;H=12585}h[k>>3]=q;F=c[k+4>>2]&2146435072;do if(F>>>0<2146435072|(F|0)==2146435072&0<0){x=+sl(q,fa)*2.0;o=x!=0.0;if(o)c[fa>>2]=(c[fa>>2]|0)+-1;D=u|32;if((D|0)==97){v=u&32;y=(v|0)==0?H:H+9|0;w=G|2;f=12-s|0;do if(!(s>>>0>11|(f|0)==0)){q=8.0;do{f=f+-1|0;q=q*16.0}while((f|0)!=0);if((a[y>>0]|0)==45){q=-(q+(-x-q));break}else{q=x+q-q;break}}else q=x;while(0);o=c[fa>>2]|0;f=(o|0)<0?0-o|0:o;f=cm(f,((f|0)<0)<<31>>31,$)|0;if((f|0)==($|0)){a[aa>>0]=48;f=aa}a[f+-1>>0]=(o>>31&2)+43;t=f+-2|0;a[t>>0]=u+15;r=(s|0)<1;p=(I&8|0)==0;o=ea;while(1){H=~~q;f=o+1|0;a[o>>0]=d[10660+H>>0]|v;q=(q-+(H|0))*16.0;do if((f-Y|0)==1){if(p&(r&q==0.0))break;a[f>>0]=46;f=o+2|0}while(0);if(!(q!=0.0))break;else o=f}p=t;s=(s|0)!=0&(P+f|0)<(s|0)?Q+s-p|0:O-p+f|0;r=s+w|0;fm(e,32,K,r,I);if(!(c[e>>2]&32))$l(y,w,e)|0;fm(e,48,K,r,I^65536);o=f-Y|0;if(!(c[e>>2]&32))$l(ea,o,e)|0;f=ba-p|0;fm(e,48,s-(o+f)|0,0,0);if(!(c[e>>2]&32))$l(t,f,e)|0;fm(e,32,K,r,I^8192);f=(r|0)<(K|0)?K:r;break}f=(s|0)<0?6:s;if(o){o=(c[fa>>2]|0)+-28|0;c[fa>>2]=o;q=x*268435456.0}else{q=x;o=c[fa>>2]|0}F=(o|0)<0?da:R;E=F;o=F;do{B=~~q>>>0;c[o>>2]=B;o=o+4|0;q=(q-+(B>>>0))*1.0e9}while(q!=0.0);p=o;o=c[fa>>2]|0;if((o|0)>0){s=F;while(1){t=(o|0)>29?29:o;r=p+-4|0;do if(r>>>0<s>>>0)r=s;else{o=0;do{B=un(c[r>>2]|0,0,t|0)|0;B=vn(B|0,C|0,o|0,0)|0;o=C;A=Hn(B|0,o|0,1e9,0)|0;c[r>>2]=A;o=Gn(B|0,o|0,1e9,0)|0;r=r+-4|0}while(r>>>0>=s>>>0);if(!o){r=s;break}r=s+-4|0;c[r>>2]=o}while(0);while(1){if(p>>>0<=r>>>0)break;o=p+-4|0;if(!(c[o>>2]|0))p=o;else break}o=(c[fa>>2]|0)-t|0;c[fa>>2]=o;if((o|0)>0)s=r;else break}}else r=F;if((o|0)<0){y=((f+25|0)/9|0)+1|0;z=(D|0)==102;v=r;while(1){w=0-o|0;w=(w|0)>9?9:w;do if(v>>>0<p>>>0){o=(1<<w)+-1|0;s=1e9>>>w;r=0;t=v;do{B=c[t>>2]|0;c[t>>2]=(B>>>w)+r;r=_(B&o,s)|0;t=t+4|0}while(t>>>0<p>>>0);o=(c[v>>2]|0)==0?v+4|0:v;if(!r){r=o;break}c[p>>2]=r;r=o;p=p+4|0}else r=(c[v>>2]|0)==0?v+4|0:v;while(0);o=z?F:r;p=(p-o>>2|0)>(y|0)?o+(y<<2)|0:p;o=(c[fa>>2]|0)+w|0;c[fa>>2]=o;if((o|0)>=0){z=r;break}else v=r}}else z=r;do if(z>>>0<p>>>0){o=(E-z>>2)*9|0;s=c[z>>2]|0;if(s>>>0<10)break;else r=10;do{r=r*10|0;o=o+1|0}while(s>>>0>=r>>>0)}else o=0;while(0);A=(D|0)==103;B=(f|0)!=0;r=f-((D|0)!=102?o:0)+((B&A)<<31>>31)|0;if((r|0)<(((p-E>>2)*9|0)+-9|0)){t=r+9216|0;r=F+4+(((t|0)/9|0)+-1024<<2)|0;t=((t|0)%9|0)+1|0;if((t|0)<9){s=10;do{s=s*10|0;t=t+1|0}while((t|0)!=9)}else s=10;w=c[r>>2]|0;y=(w>>>0)%(s>>>0)|0;t=(r+4|0)==(p|0);do if(t&(y|0)==0)s=z;else{x=(((w>>>0)/(s>>>0)|0)&1|0)==0?9007199254740992.0:9007199254740994.0;v=(s|0)/2|0;if(y>>>0<v>>>0)q=.5;else q=t&(y|0)==(v|0)?1.0:1.5;do if(G){if((a[H>>0]|0)!=45)break;x=-x;q=-q}while(0);t=w-y|0;c[r>>2]=t;if(!(x+q!=x)){s=z;break}D=t+s|0;c[r>>2]=D;if(D>>>0>999999999){o=z;while(1){s=r+-4|0;c[r>>2]=0;if(s>>>0<o>>>0){o=o+-4|0;c[o>>2]=0}D=(c[s>>2]|0)+1|0;c[s>>2]=D;if(D>>>0>999999999)r=s;else{v=o;r=s;break}}}else v=z;o=(E-v>>2)*9|0;t=c[v>>2]|0;if(t>>>0<10){s=v;break}else s=10;do{s=s*10|0;o=o+1|0}while(t>>>0>=s>>>0);s=v}while(0);D=r+4|0;z=s;p=p>>>0>D>>>0?D:p}w=0-o|0;while(1){if(p>>>0<=z>>>0){y=0;D=p;break}r=p+-4|0;if(!(c[r>>2]|0))p=r;else{y=1;D=p;break}}do if(A){f=(B&1^1)+f|0;if((f|0)>(o|0)&(o|0)>-5){u=u+-1|0;f=f+-1-o|0}else{u=u+-2|0;f=f+-1|0}p=I&8;if(p|0)break;do if(y){p=c[D+-4>>2]|0;if(!p){r=9;break}if(!((p>>>0)%10|0)){s=10;r=0}else{r=0;break}do{s=s*10|0;r=r+1|0}while(!((p>>>0)%(s>>>0)|0|0))}else r=9;while(0);p=((D-E>>2)*9|0)+-9|0;if((u|32|0)==102){p=p-r|0;p=(p|0)<0?0:p;f=(f|0)<(p|0)?f:p;p=0;break}else{p=p+o-r|0;p=(p|0)<0?0:p;f=(f|0)<(p|0)?f:p;p=0;break}}else p=I&8;while(0);v=f|p;s=(v|0)!=0&1;t=(u|32|0)==102;if(t){o=(o|0)>0?o:0;u=0}else{r=(o|0)<0?w:o;r=cm(r,((r|0)<0)<<31>>31,$)|0;if((ba-r|0)<2)do{r=r+-1|0;a[r>>0]=48}while((ba-r|0)<2);a[r+-1>>0]=(o>>31&2)+43;E=r+-2|0;a[E>>0]=u;o=ba-E|0;u=E}w=G+1+f+s+o|0;fm(e,32,K,w,I);if(!(c[e>>2]&32))$l(H,G,e)|0;fm(e,48,K,w,I^65536);do if(t){r=z>>>0>F>>>0?F:z;o=r;do{p=cm(c[o>>2]|0,0,S)|0;do if((o|0)==(r|0)){if((p|0)!=(S|0))break;a[U>>0]=48;p=U}else{if(p>>>0<=ea>>>0)break;tn(ea|0,48,p-Y|0)|0;do p=p+-1|0;while(p>>>0>ea>>>0)}while(0);if(!(c[e>>2]&32))$l(p,T-p|0,e)|0;o=o+4|0}while(o>>>0<=F>>>0);do if(v|0){if(c[e>>2]&32|0)break;$l(12616,1,e)|0}while(0);if((f|0)>0&o>>>0<D>>>0){p=o;while(1){o=cm(c[p>>2]|0,0,S)|0;if(o>>>0>ea>>>0){tn(ea|0,48,o-Y|0)|0;do o=o+-1|0;while(o>>>0>ea>>>0)}if(!(c[e>>2]&32))$l(o,(f|0)>9?9:f,e)|0;p=p+4|0;o=f+-9|0;if(!((f|0)>9&p>>>0<D>>>0)){f=o;break}else f=o}}fm(e,48,f+9|0,9,0)}else{t=y?D:z+4|0;if((f|0)>-1){s=(p|0)==0;r=z;do{o=cm(c[r>>2]|0,0,S)|0;if((o|0)==(S|0)){a[U>>0]=48;o=U}do if((r|0)==(z|0)){p=o+1|0;if(!(c[e>>2]&32))$l(o,1,e)|0;if(s&(f|0)<1){o=p;break}if(c[e>>2]&32|0){o=p;break}$l(12616,1,e)|0;o=p}else{if(o>>>0<=ea>>>0)break;tn(ea|0,48,o+Z|0)|0;do o=o+-1|0;while(o>>>0>ea>>>0)}while(0);p=T-o|0;if(!(c[e>>2]&32))$l(o,(f|0)>(p|0)?p:f,e)|0;f=f-p|0;r=r+4|0}while(r>>>0<t>>>0&(f|0)>-1)}fm(e,48,f+18|0,18,0);if(c[e>>2]&32|0)break;$l(u,ba-u|0,e)|0}while(0);fm(e,32,K,w,I^8192);f=(w|0)<(K|0)?K:w}else{t=(u&32|0)!=0;s=q!=q|0.0!=0.0;o=s?0:G;r=o+3|0;fm(e,32,K,r,p);f=c[e>>2]|0;if(!(f&32)){$l(H,o,e)|0;f=c[e>>2]|0}if(!(f&32))$l(s?(t?12893:12612):t?12604:12608,3,e)|0;fm(e,32,K,r,I^8192);f=(r|0)<(K|0)?K:r}while(0);o=f;y=J;continue a}default:{f=y;p=I;u=s;w=0;v=10676;o=N}}while(0);g:do if((L|0)==64){p=ca;o=c[p>>2]|0;p=c[p+4>>2]|0;r=u&32;if(!((o|0)==0&(p|0)==0)){f=N;do{f=f+-1|0;a[f>>0]=d[10660+(o&15)>>0]|r;o=xn(o|0,p|0,4)|0;p=C}while(!((o|0)==0&(p|0)==0));L=ca;if((t&8|0)==0|(c[L>>2]|0)==0&(c[L+4>>2]|0)==0){o=t;t=0;r=10676;L=77}else{o=t;t=2;r=10676+(u>>4)|0;L=77}}else{f=N;o=t;t=0;r=10676;L=77}}else if((L|0)==76){f=cm(f,o,N)|0;o=I;t=p;L=77}else if((L|0)==82){L=0;I=em(o,0,s)|0;H=(I|0)==0;f=o;u=H?s:I-o|0;w=0;v=10676;o=H?o+s|0:I}else if((L|0)==86){L=0;p=0;o=0;t=f;while(1){r=c[t>>2]|0;if(!r)break;o=Sl(ga,r)|0;if((o|0)<0|o>>>0>(s-p|0)>>>0)break;p=o+p|0;if(s>>>0>p>>>0)t=t+4|0;else break}if((o|0)<0){m=-1;break a}fm(e,32,K,p,I);if(!p){f=0;L=97}else{r=0;while(1){o=c[f>>2]|0;if(!o){f=p;L=97;break g}o=Sl(ga,o)|0;r=o+r|0;if((r|0)>(p|0)){f=p;L=97;break g}if(!(c[e>>2]&32))$l(ga,o,e)|0;if(r>>>0>=p>>>0){f=p;L=97;break}else f=f+4|0}}}while(0);if((L|0)==97){L=0;fm(e,32,K,f,I^8192);o=(K|0)>(f|0)?K:f;y=J;continue}if((L|0)==77){L=0;p=(s|0)>-1?o&-65537:o;o=ca;o=(c[o>>2]|0)!=0|(c[o+4>>2]|0)!=0;if((s|0)!=0|o){u=(o&1^1)+(V-f)|0;u=(s|0)>(u|0)?s:u;w=t;v=r;o=N}else{f=N;u=0;w=t;v=r;o=N}}t=o-f|0;r=(u|0)<(t|0)?t:u;s=w+r|0;o=(K|0)<(s|0)?s:K;fm(e,32,o,s,p);if(!(c[e>>2]&32))$l(v,w,e)|0;fm(e,48,o,s,p^65536);fm(e,48,r,t,0);if(!(c[e>>2]&32))$l(f,t,e)|0;fm(e,32,o,s,p^8192);y=J}h:do if((L|0)==244)if(!e)if(n){m=1;while(1){n=c[l+(m<<2)>>2]|0;if(!n)break;bm(j+(m<<3)|0,n,g);m=m+1|0;if((m|0)>=10){m=1;break h}}if((m|0)<10)while(1){if(c[l+(m<<2)>>2]|0){m=-1;break h}m=m+1|0;if((m|0)>=10){m=1;break}}else m=1}else m=0;while(0);i=ia;return m|0}function $l(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0;f=e+16|0;g=c[f>>2]|0;if(!g)if(!(am(e)|0)){g=c[f>>2]|0;h=5}else f=0;else h=5;a:do if((h|0)==5){i=e+20|0;f=c[i>>2]|0;h=f;if((g-f|0)>>>0<d>>>0){f=hb[c[e+36>>2]&31](e,b,d)|0;break}b:do if((a[e+75>>0]|0)>-1){f=d;while(1){if(!f){g=h;f=0;break b}g=f+-1|0;if((a[b+g>>0]|0)==10)break;else f=g}if((hb[c[e+36>>2]&31](e,b,f)|0)>>>0<f>>>0)break a;d=d-f|0;b=b+f|0;g=c[i>>2]|0}else{g=h;f=0}while(0);zn(g|0,b|0,d|0)|0;c[i>>2]=(c[i>>2]|0)+d;f=f+d|0}while(0);return f|0}function am(b){b=b|0;var d=0,e=0;d=b+74|0;e=a[d>>0]|0;a[d>>0]=e+255|e;d=c[b>>2]|0;if(!(d&8)){c[b+8>>2]=0;c[b+4>>2]=0;d=c[b+44>>2]|0;c[b+28>>2]=d;c[b+20>>2]=d;c[b+16>>2]=d+(c[b+48>>2]|0);d=0}else{c[b>>2]=d|32;d=-1}return d|0}function bm(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0.0;a:do if(b>>>0<=20)do switch(b|0){case 9:{e=(c[d>>2]|0)+(4-1)&~(4-1);b=c[e>>2]|0;c[d>>2]=e+4;c[a>>2]=b;break a}case 10:{e=(c[d>>2]|0)+(4-1)&~(4-1);b=c[e>>2]|0;c[d>>2]=e+4;e=a;c[e>>2]=b;c[e+4>>2]=((b|0)<0)<<31>>31;break a}case 11:{e=(c[d>>2]|0)+(4-1)&~(4-1);b=c[e>>2]|0;c[d>>2]=e+4;e=a;c[e>>2]=b;c[e+4>>2]=0;break a}case 12:{e=(c[d>>2]|0)+(8-1)&~(8-1);b=e;f=c[b>>2]|0;b=c[b+4>>2]|0;c[d>>2]=e+8;e=a;c[e>>2]=f;c[e+4>>2]=b;break a}case 13:{f=(c[d>>2]|0)+(4-1)&~(4-1);e=c[f>>2]|0;c[d>>2]=f+4;e=(e&65535)<<16>>16;f=a;c[f>>2]=e;c[f+4>>2]=((e|0)<0)<<31>>31;break a}case 14:{f=(c[d>>2]|0)+(4-1)&~(4-1);e=c[f>>2]|0;c[d>>2]=f+4;f=a;c[f>>2]=e&65535;c[f+4>>2]=0;break a}case 15:{f=(c[d>>2]|0)+(4-1)&~(4-1);e=c[f>>2]|0;c[d>>2]=f+4;e=(e&255)<<24>>24;f=a;c[f>>2]=e;c[f+4>>2]=((e|0)<0)<<31>>31;break a}case 16:{f=(c[d>>2]|0)+(4-1)&~(4-1);e=c[f>>2]|0;c[d>>2]=f+4;f=a;c[f>>2]=e&255;c[f+4>>2]=0;break a}case 17:{f=(c[d>>2]|0)+(8-1)&~(8-1);g=+h[f>>3];c[d>>2]=f+8;h[a>>3]=g;break a}case 18:{f=(c[d>>2]|0)+(8-1)&~(8-1);g=+h[f>>3];c[d>>2]=f+8;h[a>>3]=g;break a}default:break a}while(0);while(0);return}function cm(b,c,d){b=b|0;c=c|0;d=d|0;var e=0;if(c>>>0>0|(c|0)==0&b>>>0>4294967295)while(1){e=Hn(b|0,c|0,10,0)|0;d=d+-1|0;a[d>>0]=e|48;e=Gn(b|0,c|0,10,0)|0;if(c>>>0>9|(c|0)==9&b>>>0>4294967295){b=e;c=C}else{b=e;break}}if(b)while(1){d=d+-1|0;a[d>>0]=(b>>>0)%10|0|48;if(b>>>0<10)break;else b=(b>>>0)/10|0}return d|0}function dm(b){b=b|0;var c=0,e=0;c=0;while(1){if((d[10686+c>>0]|0)==(b|0)){e=2;break}c=c+1|0;if((c|0)==87){c=87;b=10774;e=5;break}}if((e|0)==2)if(!c)b=10774;else{b=10774;e=5}if((e|0)==5)while(1){e=b;while(1){b=e+1|0;if(!(a[e>>0]|0))break;else e=b}c=c+-1|0;if(!c)break;else e=5}return b|0}function em(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0;h=d&255;f=(e|0)!=0;a:do if(f&(b&3|0)!=0){g=d&255;while(1){if((a[b>>0]|0)==g<<24>>24){i=6;break a}b=b+1|0;e=e+-1|0;f=(e|0)!=0;if(!(f&(b&3|0)!=0)){i=5;break}}}else i=5;while(0);if((i|0)==5)if(f)i=6;else e=0;b:do if((i|0)==6){g=d&255;if((a[b>>0]|0)!=g<<24>>24){f=_(h,16843009)|0;c:do if(e>>>0>3)while(1){h=c[b>>2]^f;if((h&-2139062144^-2139062144)&h+-16843009|0)break;b=b+4|0;e=e+-4|0;if(e>>>0<=3){i=11;break c}}else i=11;while(0);if((i|0)==11)if(!e){e=0;break}while(1){if((a[b>>0]|0)==g<<24>>24)break b;b=b+1|0;e=e+-1|0;if(!e){e=0;break}}}}while(0);return (e|0?b:0)|0}function fm(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0;j=i;i=i+256|0;h=j;do if((d|0)>(e|0)&(f&73728|0)==0){f=d-e|0;tn(h|0,b|0,(f>>>0>256?256:f)|0)|0;b=c[a>>2]|0;g=(b&32|0)==0;if(f>>>0>255){e=d-e|0;do{if(g){$l(h,256,a)|0;b=c[a>>2]|0}f=f+-256|0;g=(b&32|0)==0}while(f>>>0>255);if(g)f=e&255;else break}else if(!g)break;$l(h,f,a)|0}while(0);i=j;return}function gm(a){a=a|0;return 0}function hm(a){a=a|0;if(!(Ul(a)|0))a=0;else a=(Ml(a)|0)==0;return a&1|0}function im(a){a=a|0;if((a+-48|0)>>>0<10)a=1;else a=((a|32)+-97|0)>>>0<6;return a&1|0}function jm(a,b){a=a|0;b=b|0;return Kl(a,b)|0}function km(a){a=a|0;if(!a)a=1;else a=(c[a>>2]|0)==0;return a&1|0}function lm(a,b){a=a|0;b=b|0;var d=0,e=0,f=0;c[a+104>>2]=b;d=c[a+8>>2]|0;e=c[a+4>>2]|0;f=d-e|0;c[a+108>>2]=f;if((b|0)!=0&(f|0)>(b|0))c[a+100>>2]=e+b;else c[a+100>>2]=d;return}function mm(b,e,f,g,h){b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;var i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;a:do if(e>>>0>36){c[(il()|0)>>2]=22;h=0;g=0}else{r=b+4|0;q=b+100|0;do{i=c[r>>2]|0;if(i>>>0<(c[q>>2]|0)>>>0){c[r>>2]=i+1;i=d[i>>0]|0}else i=nm(b)|0}while((Pl(i)|0)!=0);b:do switch(i|0){case 43:case 45:{j=((i|0)==45)<<31>>31;i=c[r>>2]|0;if(i>>>0<(c[q>>2]|0)>>>0){c[r>>2]=i+1;i=d[i>>0]|0;p=j;break b}else{i=nm(b)|0;p=j;break b}}default:p=0}while(0);j=(e|0)==0;do if((e|16|0)==16&(i|0)==48){i=c[r>>2]|0;if(i>>>0<(c[q>>2]|0)>>>0){c[r>>2]=i+1;i=d[i>>0]|0}else i=nm(b)|0;if((i|32|0)!=120)if(j){e=8;n=46;break}else{n=32;break}e=c[r>>2]|0;if(e>>>0<(c[q>>2]|0)>>>0){c[r>>2]=e+1;i=d[e>>0]|0}else i=nm(b)|0;if((d[12619+i>>0]|0)>15){g=(c[q>>2]|0)==0;if(!g)c[r>>2]=(c[r>>2]|0)+-1;if(!f){lm(b,0);h=0;g=0;break a}if(g){h=0;g=0;break a}c[r>>2]=(c[r>>2]|0)+-1;h=0;g=0;break a}else{e=16;n=46}}else{e=j?10:e;if((d[12619+i>>0]|0)>>>0<e>>>0)n=32;else{if(c[q>>2]|0)c[r>>2]=(c[r>>2]|0)+-1;lm(b,0);c[(il()|0)>>2]=22;h=0;g=0;break a}}while(0);if((n|0)==32)if((e|0)==10){e=i+-48|0;if(e>>>0<10){i=0;while(1){j=(i*10|0)+e|0;e=c[r>>2]|0;if(e>>>0<(c[q>>2]|0)>>>0){c[r>>2]=e+1;i=d[e>>0]|0}else i=nm(b)|0;e=i+-48|0;if(!(e>>>0<10&j>>>0<429496729)){e=j;break}else i=j}j=0}else{e=0;j=0}f=i+-48|0;if(f>>>0<10){while(1){k=Fn(e|0,j|0,10,0)|0;l=C;m=((f|0)<0)<<31>>31;o=~m;if(l>>>0>o>>>0|(l|0)==(o|0)&k>>>0>~f>>>0){k=e;break}e=vn(k|0,l|0,f|0,m|0)|0;j=C;i=c[r>>2]|0;if(i>>>0<(c[q>>2]|0)>>>0){c[r>>2]=i+1;i=d[i>>0]|0}else i=nm(b)|0;f=i+-48|0;if(!(f>>>0<10&(j>>>0<429496729|(j|0)==429496729&e>>>0<2576980378))){k=e;break}}if(f>>>0>9){i=k;e=p}else{e=10;n=72}}else{i=e;e=p}}else n=46;c:do if((n|0)==46){if(!(e+-1&e)){n=a[12875+((e*23|0)>>>5&7)>>0]|0;j=a[12619+i>>0]|0;f=j&255;if(f>>>0<e>>>0){i=0;while(1){k=f|i<<n;i=c[r>>2]|0;if(i>>>0<(c[q>>2]|0)>>>0){c[r>>2]=i+1;i=d[i>>0]|0}else i=nm(b)|0;j=a[12619+i>>0]|0;f=j&255;if(!(k>>>0<134217728&f>>>0<e>>>0))break;else i=k}f=0}else{f=0;k=0}l=xn(-1,-1,n|0)|0;m=C;if((j&255)>>>0>=e>>>0|(f>>>0>m>>>0|(f|0)==(m|0)&k>>>0>l>>>0)){j=f;n=72;break}else i=f;while(1){k=un(k|0,i|0,n|0)|0;f=C;k=j&255|k;i=c[r>>2]|0;if(i>>>0<(c[q>>2]|0)>>>0){c[r>>2]=i+1;i=d[i>>0]|0}else i=nm(b)|0;j=a[12619+i>>0]|0;if((j&255)>>>0>=e>>>0|(f>>>0>m>>>0|(f|0)==(m|0)&k>>>0>l>>>0)){j=f;n=72;break c}else i=f}}j=a[12619+i>>0]|0;f=j&255;if(f>>>0<e>>>0){i=0;while(1){k=f+(_(i,e)|0)|0;i=c[r>>2]|0;if(i>>>0<(c[q>>2]|0)>>>0){c[r>>2]=i+1;i=d[i>>0]|0}else i=nm(b)|0;j=a[12619+i>>0]|0;f=j&255;if(!(k>>>0<119304647&f>>>0<e>>>0))break;else i=k}f=0}else{k=0;f=0}if((j&255)>>>0<e>>>0){n=Gn(-1,-1,e|0,0)|0;o=C;m=f;while(1){if(m>>>0>o>>>0|(m|0)==(o|0)&k>>>0>n>>>0){j=m;n=72;break c}f=Fn(k|0,m|0,e|0,0)|0;l=C;j=j&255;if(l>>>0>4294967295|(l|0)==-1&f>>>0>~j>>>0){j=m;n=72;break c}k=vn(j|0,0,f|0,l|0)|0;f=C;i=c[r>>2]|0;if(i>>>0<(c[q>>2]|0)>>>0){c[r>>2]=i+1;i=d[i>>0]|0}else i=nm(b)|0;j=a[12619+i>>0]|0;if((j&255)>>>0>=e>>>0){j=f;n=72;break}else m=f}}else{j=f;n=72}}while(0);if((n|0)==72)if((d[12619+i>>0]|0)>>>0<e>>>0){do{i=c[r>>2]|0;if(i>>>0<(c[q>>2]|0)>>>0){c[r>>2]=i+1;i=d[i>>0]|0}else i=nm(b)|0}while((d[12619+i>>0]|0)>>>0<e>>>0);c[(il()|0)>>2]=34;j=h;i=g;e=(g&1|0)==0&0==0?p:0}else{i=k;e=p}if(c[q>>2]|0)c[r>>2]=(c[r>>2]|0)+-1;if(!(j>>>0<h>>>0|(j|0)==(h|0)&i>>>0<g>>>0)){if(!((g&1|0)!=0|0!=0|(e|0)!=0)){c[(il()|0)>>2]=34;g=vn(g|0,h|0,-1,-1)|0;h=C;break}if(j>>>0>h>>>0|(j|0)==(h|0)&i>>>0>g>>>0){c[(il()|0)>>2]=34;break}}g=((e|0)<0)<<31>>31;g=sn(i^e|0,j^g|0,e|0,g|0)|0;h=C}while(0);C=h;return g|0}function nm(b){b=b|0;var e=0,f=0,g=0,h=0,i=0,j=0;f=b+104|0;i=c[f>>2]|0;if((i|0)!=0?(c[b+108>>2]|0)>=(i|0):0)j=4;else{e=om(b)|0;if((e|0)>=0){f=c[f>>2]|0;i=c[b+8>>2]|0;if(f){h=c[b+4>>2]|0;f=f-(c[b+108>>2]|0)|0;g=i;if((i-h|0)<(f|0))j=9;else c[b+100>>2]=h+(f+-1)}else{g=i;j=9}if((j|0)==9)c[b+100>>2]=i;f=b+4|0;if(!g)f=c[f>>2]|0;else{f=c[f>>2]|0;b=b+108|0;c[b>>2]=g+1-f+(c[b>>2]|0)}f=f+-1|0;if((d[f>>0]|0|0)!=(e|0))a[f>>0]=e}else j=4}if((j|0)==4){c[b+100>>2]=0;e=-1}return e|0}function om(a){a=a|0;var b=0,e=0;e=i;i=i+16|0;b=e;if((c[a+8>>2]|0)==0?(pm(a)|0)!=0:0)b=-1;else if((hb[c[a+32>>2]&31](a,b,1)|0)==1)b=d[b>>0]|0;else b=-1;i=e;return b|0}function pm(b){b=b|0;var d=0,e=0;d=b+74|0;e=a[d>>0]|0;a[d>>0]=e+255|e;d=b+20|0;e=b+44|0;if((c[d>>2]|0)>>>0>(c[e>>2]|0)>>>0)hb[c[b+36>>2]&31](b,0,0)|0;c[b+16>>2]=0;c[b+28>>2]=0;c[d>>2]=0;d=c[b>>2]|0;if(d&20)if(!(d&4))d=-1;else{c[b>>2]=d|32;d=-1}else{d=c[e>>2]|0;c[b+8>>2]=d;c[b+4>>2]=d;d=0}return d|0}function qm(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=i;i=i+16|0;f=e;c[f>>2]=d;d=rm(a,b,f)|0;i=e;return d|0}function rm(a,b,c){a=a|0;b=b|0;c=c|0;return Xl(a,2147483647,b,c)|0}function sm(a,b,d){a=a|0;b=b|0;d=d|0;var e=0.0,f=0,g=0,h=0,j=0;j=i;i=i+112|0;h=j;f=h;g=f+112|0;do{c[f>>2]=0;f=f+4|0}while((f|0)<(g|0));f=h+4|0;c[f>>2]=a;g=h+8|0;c[g>>2]=-1;c[h+44>>2]=a;c[h+76>>2]=-1;lm(h,0);e=+tm(h,d,1);d=(c[f>>2]|0)-(c[g>>2]|0)+(c[h+108>>2]|0)|0;if(b|0)c[b>>2]=d|0?a+d|0:a;i=j;return +e}function tm(b,e,f){b=b|0;e=e|0;f=f|0;var g=0.0,h=0,j=0.0,k=0,l=0,m=0.0,n=0,o=0,p=0,q=0.0,t=0.0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0.0;L=i;i=i+512|0;H=L;switch(e|0){case 0:{K=24;J=-149;A=4;break}case 1:{K=53;J=-1074;A=4;break}case 2:{K=53;J=-1074;A=4;break}default:g=0.0}a:do if((A|0)==4){E=b+4|0;D=b+100|0;do{e=c[E>>2]|0;if(e>>>0<(c[D>>2]|0)>>>0){c[E>>2]=e+1;e=d[e>>0]|0}else e=nm(b)|0}while((Pl(e)|0)!=0);b:do switch(e|0){case 43:case 45:{h=1-(((e|0)==45&1)<<1)|0;e=c[E>>2]|0;if(e>>>0<(c[D>>2]|0)>>>0){c[E>>2]=e+1;e=d[e>>0]|0;I=h;break b}else{e=nm(b)|0;I=h;break b}}default:I=1}while(0);h=e;e=0;do{if((h|32|0)!=(a[12884+e>>0]|0))break;do if(e>>>0<7){h=c[E>>2]|0;if(h>>>0<(c[D>>2]|0)>>>0){c[E>>2]=h+1;h=d[h>>0]|0;break}else{h=nm(b)|0;break}}while(0);e=e+1|0}while(e>>>0<8);c:do switch(e|0){case 8:break;case 3:{A=23;break}default:{k=(f|0)!=0;if(k&e>>>0>3)if((e|0)==8)break c;else{A=23;break c}d:do if(!e){e=0;do{if((h|32|0)!=(a[12893+e>>0]|0))break d;do if(e>>>0<2){h=c[E>>2]|0;if(h>>>0<(c[D>>2]|0)>>>0){c[E>>2]=h+1;h=d[h>>0]|0;break}else{h=nm(b)|0;break}}while(0);e=e+1|0}while(e>>>0<3)}while(0);switch(e|0){case 3:{e=c[E>>2]|0;if(e>>>0<(c[D>>2]|0)>>>0){c[E>>2]=e+1;e=d[e>>0]|0}else e=nm(b)|0;if((e|0)==40)e=1;else{if(!(c[D>>2]|0)){g=r;break a}c[E>>2]=(c[E>>2]|0)+-1;g=r;break a}while(1){h=c[E>>2]|0;if(h>>>0<(c[D>>2]|0)>>>0){c[E>>2]=h+1;h=d[h>>0]|0}else h=nm(b)|0;if(!((h+-48|0)>>>0<10|(h+-65|0)>>>0<26)?!((h|0)==95|(h+-97|0)>>>0<26):0)break;e=e+1|0}if((h|0)==41){g=r;break a}h=(c[D>>2]|0)==0;if(!h)c[E>>2]=(c[E>>2]|0)+-1;if(!k){c[(il()|0)>>2]=22;lm(b,0);g=0.0;break a}if(!e){g=r;break a}while(1){e=e+-1|0;if(!h)c[E>>2]=(c[E>>2]|0)+-1;if(!e){g=r;break a}}}case 0:{do if((h|0)==48){e=c[E>>2]|0;if(e>>>0<(c[D>>2]|0)>>>0){c[E>>2]=e+1;e=d[e>>0]|0}else e=nm(b)|0;if((e|32|0)!=120){if(!(c[D>>2]|0)){e=48;break}c[E>>2]=(c[E>>2]|0)+-1;e=48;break}e=c[E>>2]|0;if(e>>>0<(c[D>>2]|0)>>>0){c[E>>2]=e+1;e=d[e>>0]|0;k=0}else{e=nm(b)|0;k=0}e:while(1){switch(e|0){case 46:{A=74;break e}case 48:break;default:{y=0;l=0;x=0;h=0;n=k;o=0;w=0;m=1.0;k=0;g=0.0;break e}}e=c[E>>2]|0;if(e>>>0<(c[D>>2]|0)>>>0){c[E>>2]=e+1;e=d[e>>0]|0;k=1;continue}else{e=nm(b)|0;k=1;continue}}if((A|0)==74){e=c[E>>2]|0;if(e>>>0<(c[D>>2]|0)>>>0){c[E>>2]=e+1;e=d[e>>0]|0}else e=nm(b)|0;if((e|0)==48){k=0;h=0;do{e=c[E>>2]|0;if(e>>>0<(c[D>>2]|0)>>>0){c[E>>2]=e+1;e=d[e>>0]|0}else e=nm(b)|0;k=vn(k|0,h|0,-1,-1)|0;h=C}while((e|0)==48);y=0;l=0;x=k;n=1;o=1;w=0;m=1.0;k=0;g=0.0}else{y=0;l=0;x=0;h=0;n=k;o=1;w=0;m=1.0;k=0;g=0.0}}while(1){u=e+-48|0;p=e|32;if(u>>>0>=10){v=(e|0)==46;if(!(v|(p+-97|0)>>>0<6)){p=x;u=y;break}if(v)if(!o){v=l;h=y;u=y;o=1;p=w;j=m}else{p=x;u=y;e=46;break}else A=86}else A=86;if((A|0)==86){A=0;e=(e|0)>57?p+-87|0:u;do if(!((y|0)<0|(y|0)==0&l>>>0<8)){if((y|0)<0|(y|0)==0&l>>>0<14){t=m*.0625;p=w;j=t;g=g+t*+(e|0);break}if((w|0)!=0|(e|0)==0){p=w;j=m}else{p=1;j=m;g=g+m*.5}}else{p=w;j=m;k=e+(k<<4)|0}while(0);l=vn(l|0,y|0,1,0)|0;v=x;u=C;n=1}e=c[E>>2]|0;if(e>>>0<(c[D>>2]|0)>>>0){c[E>>2]=e+1;y=u;x=v;e=d[e>>0]|0;w=p;m=j;continue}else{y=u;x=v;e=nm(b)|0;w=p;m=j;continue}}if(!n){e=(c[D>>2]|0)==0;if(!e)c[E>>2]=(c[E>>2]|0)+-1;if(f){if(!e?(z=c[E>>2]|0,c[E>>2]=z+-1,o|0):0)c[E>>2]=z+-2}else lm(b,0);g=+(I|0)*0.0;break a}n=(o|0)==0;o=n?l:p;n=n?u:h;if((u|0)<0|(u|0)==0&l>>>0<8){h=u;do{k=k<<4;l=vn(l|0,h|0,1,0)|0;h=C}while((h|0)<0|(h|0)==0&l>>>0<8)}if((e|32|0)==112){h=um(b,f)|0;e=C;if((h|0)==0&(e|0)==-2147483648){if(!f){lm(b,0);g=0.0;break a}if(!(c[D>>2]|0)){h=0;e=0}else{c[E>>2]=(c[E>>2]|0)+-1;h=0;e=0}}}else if(!(c[D>>2]|0)){h=0;e=0}else{c[E>>2]=(c[E>>2]|0)+-1;h=0;e=0}H=un(o|0,n|0,2)|0;H=vn(H|0,C|0,-32,-1)|0;e=vn(H|0,C|0,h|0,e|0)|0;h=C;if(!k){g=+(I|0)*0.0;break a}if((h|0)>0|(h|0)==0&e>>>0>(0-J|0)>>>0){c[(il()|0)>>2]=34;g=+(I|0)*1797693134862315708145274.0e284*1797693134862315708145274.0e284;break a}H=J+-106|0;G=((H|0)<0)<<31>>31;if((h|0)<(G|0)|(h|0)==(G|0)&e>>>0<H>>>0){c[(il()|0)>>2]=34;g=+(I|0)*2.2250738585072014e-308*2.2250738585072014e-308;break a}if((k|0)>-1){do{G=!(g>=.5);H=G&1|k<<1;k=H^1;g=g+(G?g:g+-1.0);e=vn(e|0,h|0,-1,-1)|0;h=C}while((H|0)>-1);l=e;m=g}else{l=e;m=g}e=sn(32,0,J|0,((J|0)<0)<<31>>31|0)|0;e=vn(l|0,h|0,e|0,C|0)|0;J=C;if(0>(J|0)|0==(J|0)&K>>>0>e>>>0)if((e|0)<0){e=0;A=127}else A=125;else{e=K;A=125}if((A|0)==125)if((e|0)<53)A=127;else{h=e;j=+(I|0);g=0.0}if((A|0)==127){g=+(I|0);h=e;j=g;g=+Fl(+ql(1.0,84-e|0),g)}K=(k&1|0)==0&(m!=0.0&(h|0)<32);g=j*(K?0.0:m)+(g+j*+(((K&1)+k|0)>>>0))-g;if(!(g!=0.0))c[(il()|0)>>2]=34;g=+ul(g,l);break a}else e=h;while(0);F=J+K|0;G=0-F|0;k=0;f:while(1){switch(e|0){case 46:{A=138;break f}case 48:break;default:{h=0;p=0;o=0;break f}}e=c[E>>2]|0;if(e>>>0<(c[D>>2]|0)>>>0){c[E>>2]=e+1;e=d[e>>0]|0;k=1;continue}else{e=nm(b)|0;k=1;continue}}if((A|0)==138){e=c[E>>2]|0;if(e>>>0<(c[D>>2]|0)>>>0){c[E>>2]=e+1;e=d[e>>0]|0}else e=nm(b)|0;if((e|0)==48){h=0;e=0;while(1){h=vn(h|0,e|0,-1,-1)|0;k=C;e=c[E>>2]|0;if(e>>>0<(c[D>>2]|0)>>>0){c[E>>2]=e+1;e=d[e>>0]|0}else e=nm(b)|0;if((e|0)==48)e=k;else{p=k;k=1;o=1;break}}}else{h=0;p=0;o=1}}c[H>>2]=0;n=e+-48|0;l=(e|0)==46;g:do if(l|n>>>0<10){B=H+496|0;y=0;v=0;w=l;A=p;u=k;z=o;k=0;l=0;o=0;h:while(1){do if(w)if(!z){h=y;p=v;z=1}else{p=A;e=y;n=v;break h}else{w=vn(y|0,v|0,1,0)|0;v=C;x=(e|0)!=48;if((l|0)>=125){if(!x){p=A;y=w;break}c[B>>2]=c[B>>2]|1;p=A;y=w;break}p=H+(l<<2)|0;if(k)n=e+-48+((c[p>>2]|0)*10|0)|0;c[p>>2]=n;k=k+1|0;n=(k|0)==9;p=A;y=w;u=1;k=n?0:k;l=(n&1)+l|0;o=x?w:o}while(0);e=c[E>>2]|0;if(e>>>0<(c[D>>2]|0)>>>0){c[E>>2]=e+1;e=d[e>>0]|0}else e=nm(b)|0;n=e+-48|0;w=(e|0)==46;if(!(w|n>>>0<10)){n=z;A=161;break g}else A=p}u=(u|0)!=0;A=169}else{y=0;v=0;u=k;n=o;k=0;l=0;o=0;A=161}while(0);do if((A|0)==161){B=(n|0)==0;h=B?y:h;p=B?v:p;u=(u|0)!=0;if(!((e|32|0)==101&u))if((e|0)>-1){e=y;n=v;A=169;break}else{e=y;n=v;A=171;break}n=um(b,f)|0;e=C;if((n|0)==0&(e|0)==-2147483648){if(!f){lm(b,0);g=0.0;break}if(!(c[D>>2]|0)){n=0;e=0}else{c[E>>2]=(c[E>>2]|0)+-1;n=0;e=0}}h=vn(n|0,e|0,h|0,p|0)|0;u=y;p=C;n=v;A=173}while(0);if((A|0)==169)if(c[D>>2]|0){c[E>>2]=(c[E>>2]|0)+-1;if(u){u=e;A=173}else A=172}else A=171;if((A|0)==171)if(u){u=e;A=173}else A=172;do if((A|0)==172){c[(il()|0)>>2]=22;lm(b,0);g=0.0}else if((A|0)==173){e=c[H>>2]|0;if(!e){g=+(I|0)*0.0;break}if(((n|0)<0|(n|0)==0&u>>>0<10)&((h|0)==(u|0)&(p|0)==(n|0))?K>>>0>30|(e>>>K|0)==0:0){g=+(I|0)*+(e>>>0);break}b=(J|0)/-2|0;E=((b|0)<0)<<31>>31;if((p|0)>(E|0)|(p|0)==(E|0)&h>>>0>b>>>0){c[(il()|0)>>2]=34;g=+(I|0)*1797693134862315708145274.0e284*1797693134862315708145274.0e284;break}b=J+-106|0;E=((b|0)<0)<<31>>31;if((p|0)<(E|0)|(p|0)==(E|0)&h>>>0<b>>>0){c[(il()|0)>>2]=34;g=+(I|0)*2.2250738585072014e-308*2.2250738585072014e-308;break}if(k){if((k|0)<9){n=H+(l<<2)|0;e=c[n>>2]|0;do{e=e*10|0;k=k+1|0}while((k|0)!=9);c[n>>2]=e}l=l+1|0}if((o|0)<9?(o|0)<=(h|0)&(h|0)<18:0){if((h|0)==9){g=+(I|0)*+((c[H>>2]|0)>>>0);break}if((h|0)<9){g=+(I|0)*+((c[H>>2]|0)>>>0)/+(c[2440+(8-h<<2)>>2]|0);break}b=K+27+(_(h,-3)|0)|0;e=c[H>>2]|0;if((b|0)>30|(e>>>b|0)==0){g=+(I|0)*+(e>>>0)*+(c[2440+(h+-10<<2)>>2]|0);break}}e=(h|0)%9|0;if(!e){k=0;e=0}else{u=(h|0)>-1?e:e+9|0;n=c[2440+(8-u<<2)>>2]|0;if(l){o=1e9/(n|0)|0;k=0;e=0;p=0;do{D=H+(p<<2)|0;E=c[D>>2]|0;b=((E>>>0)/(n>>>0)|0)+e|0;c[D>>2]=b;e=_((E>>>0)%(n>>>0)|0,o)|0;b=(p|0)==(k|0)&(b|0)==0;p=p+1|0;h=b?h+-9|0:h;k=b?p&127:k}while((p|0)!=(l|0));if(e){c[H+(l<<2)>>2]=e;l=l+1|0}}else{k=0;l=0}e=0;h=9-u+h|0}i:while(1){v=(h|0)<18;w=(h|0)==18;x=H+(k<<2)|0;do{if(!v){if(!w){y=l;break i}if((c[x>>2]|0)>>>0>=9007199){h=18;y=l;break i}}n=0;o=l+127|0;while(1){u=o&127;p=H+(u<<2)|0;o=un(c[p>>2]|0,0,29)|0;o=vn(o|0,C|0,n|0,0)|0;n=C;if(n>>>0>0|(n|0)==0&o>>>0>1e9){b=Gn(o|0,n|0,1e9,0)|0;o=Hn(o|0,n|0,1e9,0)|0;n=b}else n=0;c[p>>2]=o;b=(u|0)==(k|0);l=(u|0)!=(l+127&127|0)|b?l:(o|0)==0?u:l;if(b)break;else o=u+-1|0}e=e+-29|0}while((n|0)==0);k=k+127&127;if((k|0)==(l|0)){b=l+127&127;l=H+((l+126&127)<<2)|0;c[l>>2]=c[l>>2]|c[H+(b<<2)>>2];l=b}c[H+(k<<2)>>2]=n;h=h+9|0}j:while(1){l=y+1&127;x=H+((y+127&127)<<2)|0;while(1){v=(h|0)==18;w=(h|0)>27?9:1;u=v^1;while(1){o=k&127;p=(o|0)==(y|0);do if(!p){n=c[H+(o<<2)>>2]|0;if(n>>>0<9007199){A=219;break}if(n>>>0>9007199)break;n=k+1&127;if((n|0)==(y|0)){A=219;break}n=c[H+(n<<2)>>2]|0;if(n>>>0<254740991){A=219;break}if(!(n>>>0>254740991|u)){h=o;l=y;break j}}else A=219;while(0);if((A|0)==219?(A=0,v):0){A=220;break j}e=e+w|0;if((k|0)==(y|0))k=y;else break}u=(1<<w)+-1|0;v=1e9>>>w;o=k;n=0;p=k;while(1){E=H+(p<<2)|0;b=c[E>>2]|0;k=(b>>>w)+n|0;c[E>>2]=k;n=_(b&u,v)|0;k=(p|0)==(o|0)&(k|0)==0;p=p+1&127;h=k?h+-9|0:h;k=k?p:o;if((p|0)==(y|0))break;else o=k}if(!n)continue;if((l|0)!=(k|0))break;c[x>>2]=c[x>>2]|1}c[H+(y<<2)>>2]=n;y=l}if((A|0)==220)if(p){c[H+(l+-1<<2)>>2]=0;h=y}else{h=o;l=y}g=+((c[H+(h<<2)>>2]|0)>>>0);h=k+1&127;if((h|0)==(l|0)){l=k+2&127;c[H+(l+-1<<2)>>2]=0}t=+(I|0);j=t*(g*1.0e9+ +((c[H+(h<<2)>>2]|0)>>>0));v=e+53|0;p=v-J|0;u=(p|0)<(K|0);h=u&1;o=u?((p|0)<0?0:p):K;if((o|0)<53){M=+Fl(+ql(1.0,105-o|0),j);m=+Al(j,+ql(1.0,53-o|0));q=M;g=m;m=M+(j-m)}else{q=0.0;g=0.0;m=j}n=k+2&127;do if((n|0)==(l|0))j=g;else{n=c[H+(n<<2)>>2]|0;do if(n>>>0>=5e8){if(n>>>0>5e8){g=t*.75+g;break}if((k+3&127|0)==(l|0)){g=t*.5+g;break}else{g=t*.75+g;break}}else{if((n|0)==0?(k+3&127|0)==(l|0):0)break;g=t*.25+g}while(0);if((53-o|0)<=1){j=g;break}if(+Al(g,1.0)!=0.0){j=g;break}j=g+1.0}while(0);g=m+j-q;do if((v&2147483647|0)>(-2-F|0)){if(+N(+g)>=9007199254740992.0){h=u&(o|0)==(p|0)?0:h;e=e+1|0;g=g*.5}if((e+50|0)<=(G|0)?!(j!=0.0&(h|0)!=0):0)break;c[(il()|0)>>2]=34}while(0);g=+ul(g,e)}while(0);break a}default:{if(c[D>>2]|0)c[E>>2]=(c[E>>2]|0)+-1;c[(il()|0)>>2]=22;lm(b,0);g=0.0;break a}}}}while(0);if((A|0)==23){h=(c[D>>2]|0)==0;if(!h)c[E>>2]=(c[E>>2]|0)+-1;if((f|0)!=0&e>>>0>3)do{if(!h)c[E>>2]=(c[E>>2]|0)+-1;e=e+-1|0}while(e>>>0>3)}g=+(I|0)*s}while(0);i=L;return +g}function um(a,b){a=a|0;b=b|0;var e=0,f=0,g=0,h=0,i=0,j=0;i=a+4|0;e=c[i>>2]|0;j=a+100|0;if(e>>>0<(c[j>>2]|0)>>>0){c[i>>2]=e+1;e=d[e>>0]|0}else e=nm(a)|0;switch(e|0){case 43:case 45:{f=(e|0)==45&1;e=c[i>>2]|0;if(e>>>0<(c[j>>2]|0)>>>0){c[i>>2]=e+1;e=d[e>>0]|0}else e=nm(a)|0;if((b|0)!=0&(e+-48|0)>>>0>9?(c[j>>2]|0)!=0:0){c[i>>2]=(c[i>>2]|0)+-1;h=f}else h=f;break}default:h=0}if((e+-48|0)>>>0>9)if(!(c[j>>2]|0)){f=-2147483648;e=0}else{c[i>>2]=(c[i>>2]|0)+-1;f=-2147483648;e=0}else{f=0;do{f=e+-48+(f*10|0)|0;e=c[i>>2]|0;if(e>>>0<(c[j>>2]|0)>>>0){c[i>>2]=e+1;e=d[e>>0]|0}else e=nm(a)|0}while((e+-48|0)>>>0<10&(f|0)<214748364);b=((f|0)<0)<<31>>31;if((e+-48|0)>>>0<10){do{b=Fn(f|0,b|0,10,0)|0;f=C;e=vn(e|0,((e|0)<0)<<31>>31|0,-48,-1)|0;f=vn(e|0,C|0,b|0,f|0)|0;b=C;e=c[i>>2]|0;if(e>>>0<(c[j>>2]|0)>>>0){c[i>>2]=e+1;e=d[e>>0]|0}else e=nm(a)|0}while((e+-48|0)>>>0<10&((b|0)<21474836|(b|0)==21474836&f>>>0<2061584302));g=f}else g=f;if((e+-48|0)>>>0<10)do{e=c[i>>2]|0;if(e>>>0<(c[j>>2]|0)>>>0){c[i>>2]=e+1;e=d[e>>0]|0}else e=nm(a)|0}while((e+-48|0)>>>0<10);if(c[j>>2]|0)c[i>>2]=(c[i>>2]|0)+-1;a=(h|0)!=0;e=sn(0,0,g|0,b|0)|0;f=a?C:b;e=a?e:g}C=f;return e|0}function vm(a,b){a=a|0;b=b|0;return +(+sm(a,b,1))}function wm(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0;h=i;i=i+32|0;g=h;c[g>>2]=0;c[g+4>>2]=0;c[g+8>>2]=0;c[g+12>>2]=0;c[g+16>>2]=0;c[g+20>>2]=0;c[g+24>>2]=0;c[g+28>>2]=0;f=a[d>>0]|0;do if(!(f<<24>>24))d=0;else{if(!(a[d+1>>0]|0)){d=b;while(1)if((a[d>>0]|0)==f<<24>>24)d=d+1|0;else break;d=d-b|0;break}else{e=d;d=f}do{f=g+(((d&255)>>>5&255)<<2)|0;c[f>>2]=c[f>>2]|1<<(d&31);e=e+1|0;d=a[e>>0]|0}while(d<<24>>24!=0);e=a[b>>0]|0;a:do if(!(e<<24>>24))d=b;else{d=b;do{if(!(c[g+(((e&255)>>>5&255)<<2)>>2]&1<<(e&31)))break a;d=d+1|0;e=a[d>>0]|0}while(e<<24>>24!=0)}while(0);d=d-b|0}while(0);i=h;return d|0}function xm(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0;g=i;i=i+32|0;f=g;e=a[d>>0]|0;if(e<<24>>24!=0?(a[d+1>>0]|0)!=0:0){c[f>>2]=0;c[f+4>>2]=0;c[f+8>>2]=0;c[f+12>>2]=0;c[f+16>>2]=0;c[f+20>>2]=0;c[f+24>>2]=0;c[f+28>>2]=0;do{h=f+(((e&255)>>>5&255)<<2)|0;c[h>>2]=c[h>>2]|1<<(e&31);d=d+1|0;e=a[d>>0]|0}while(e<<24>>24!=0);d=a[b>>0]|0;a:do if(!(d<<24>>24))e=b;else{e=b;do{if(c[f+(((d&255)>>>5&255)<<2)>>2]&1<<(d&31)|0)break a;e=e+1|0;d=a[e>>0]|0}while(d<<24>>24!=0)}while(0);e=e-b|0}else e=(ym(b,e<<24>>24)|0)-b|0;i=g;return e|0}function ym(b,d){b=b|0;d=d|0;var e=0,f=0,g=0;f=d&255;a:do if(!f)b=b+(Ql(b)|0)|0;else{if(b&3){e=d&255;do{g=a[b>>0]|0;if(g<<24>>24==0?1:g<<24>>24==e<<24>>24)break a;b=b+1|0}while((b&3|0)!=0)}f=_(f,16843009)|0;e=c[b>>2]|0;b:do if(!((e&-2139062144^-2139062144)&e+-16843009))do{g=e^f;if((g&-2139062144^-2139062144)&g+-16843009|0)break b;b=b+4|0;e=c[b>>2]|0}while(!((e&-2139062144^-2139062144)&e+-16843009|0));while(0);e=d&255;while(1){g=a[b>>0]|0;if(g<<24>>24==0?1:g<<24>>24==e<<24>>24)break;else b=b+1|0}}while(0);return b|0}function zm(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0;g=i;i=i+32|0;f=g+16|0;e=g;if(em(12897,a[d>>0]|0,4)|0){h=Am(d)|0|32768;c[e>>2]=b;c[e+4>>2]=h;c[e+8>>2]=438;e=hl($a(5,e|0)|0)|0;if((e|0)>=0){b=Cm(e,d)|0;if(!b){c[f>>2]=e;_a(6,f|0)|0;b=0}}else b=0}else{c[(il()|0)>>2]=22;b=0}i=g;return b|0}function Am(b){b=b|0;var c=0,d=0,e=0;d=(Bm(b,43)|0)==0;c=a[b>>0]|0;d=d?c<<24>>24!=114&1:2;e=(Bm(b,120)|0)==0;d=e?d:d|128;b=(Bm(b,101)|0)==0;b=b?d:d|524288;b=c<<24>>24==114?b:b|64;b=c<<24>>24==119?b|512:b;return (c<<24>>24==97?b|1024:b)|0}function Bm(b,c){b=b|0;c=c|0;b=ym(b,c)|0;return ((a[b>>0]|0)==(c&255)<<24>>24?b:0)|0}function Cm(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0;o=i;i=i+112|0;n=o+40|0;l=o+24|0;k=o+16|0;g=o;m=o+52|0;f=a[d>>0]|0;if(em(12897,f<<24>>24,4)|0){e=mn(1144)|0;if(!e)e=0;else{h=e;j=h+112|0;do{c[h>>2]=0;h=h+4|0}while((h|0)<(j|0));if(!(Bm(d,43)|0))c[e>>2]=f<<24>>24==114?8:4;if(Bm(d,101)|0){c[g>>2]=b;c[g+4>>2]=2;c[g+8>>2]=1;qa(221,g|0)|0;f=a[d>>0]|0}if(f<<24>>24==97){c[k>>2]=b;c[k+4>>2]=3;f=qa(221,k|0)|0;if(!(f&1024)){c[l>>2]=b;c[l+4>>2]=4;c[l+8>>2]=f|1024;qa(221,l|0)|0}d=c[e>>2]|128;c[e>>2]=d}else d=c[e>>2]|0;c[e+60>>2]=b;c[e+44>>2]=e+120;c[e+48>>2]=1024;f=e+75|0;a[f>>0]=-1;if((d&8|0)==0?(c[n>>2]=b,c[n+4>>2]=21505,c[n+8>>2]=m,(Sa(54,n|0)|0)==0):0)a[f>>0]=10;c[e+32>>2]=18;c[e+36>>2]=21;c[e+40>>2]=19;c[e+12>>2]=158;if(!(c[3247]|0))c[e+76>>2]=-1;Za(13012);f=c[3252]|0;c[e+56>>2]=f;if(f|0)c[f+52>>2]=e;c[3252]=e;Ta(13012)}}else{c[(il()|0)>>2]=22;e=0}i=o;return e|0}function Dm(a){a=a|0;var b=0,d=0,e=0;e=(c[a>>2]&1|0)!=0;if(!e){Za(13012);d=c[a+52>>2]|0;b=a+56|0;if(d|0)c[d+56>>2]=c[b>>2];b=c[b>>2]|0;if(b|0)c[b+52>>2]=d;if((c[3252]|0)==(a|0))c[3252]=b;Ta(13012)}b=Em(a)|0;b=kb[c[a+12>>2]&255](a)|0|b;d=c[a+92>>2]|0;if(d|0)nn(d);if(!e)nn(a);return b|0}function Em(a){a=a|0;var b=0,d=0;do if(a){if((c[a+76>>2]|0)<=-1){b=Fm(a)|0;break}d=(gm(a)|0)==0;b=Fm(a)|0;if(!d)ll(a)}else{if(!(c[538]|0))b=0;else b=Em(c[538]|0)|0;Za(13012);a=c[3252]|0;if(a)do{if((c[a+76>>2]|0)>-1)d=gm(a)|0;else d=0;if((c[a+20>>2]|0)>>>0>(c[a+28>>2]|0)>>>0)b=Fm(a)|0|b;if(d|0)ll(a);a=c[a+56>>2]|0}while((a|0)!=0);Ta(13012)}while(0);return b|0}function Fm(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0;b=a+20|0;g=a+28|0;if((c[b>>2]|0)>>>0>(c[g>>2]|0)>>>0?(hb[c[a+36>>2]&31](a,0,0)|0,(c[b>>2]|0)==0):0)b=-1;else{h=a+4|0;d=c[h>>2]|0;e=a+8|0;f=c[e>>2]|0;if(d>>>0<f>>>0)hb[c[a+40>>2]&31](a,d-f|0,1)|0;c[a+16>>2]=0;c[g>>2]=0;c[b>>2]=0;c[e>>2]=0;c[h>>2]=0;b=0}return b|0}function Gm(b,e,f){b=b|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;if((c[f+76>>2]|0)>-1)m=gm(f)|0;else m=0;g=e+-1|0;if((e|0)<2){n=f+74|0;l=a[n>>0]|0;a[n>>0]=l+255|l;if(m|0)ll(f);if(!g)a[b>>0]=0;else b=0}else{a:do if(g){k=f+4|0;l=f+8|0;e=b;while(1){h=c[k>>2]|0;j=h;p=(c[l>>2]|0)-j|0;i=em(h,10,p)|0;o=(i|0)==0;i=o?p:1-j+i|0;j=i>>>0<g>>>0;i=j?i:g;zn(e|0,h|0,i|0)|0;h=(c[k>>2]|0)+i|0;c[k>>2]=h;e=e+i|0;i=g-i|0;if(!(o&j)){n=17;break a}if(h>>>0>=(c[l>>2]|0)>>>0){g=om(f)|0;if((g|0)<0)break;else j=g}else{c[k>>2]=h+1;j=d[h>>0]|0}g=i+-1|0;h=e+1|0;a[e>>0]=j;if(!((g|0)!=0&(j&255|0)!=10)){e=h;n=17;break a}else e=h}if((e|0)!=(b|0)?(c[f>>2]&16|0)!=0:0)n=17;else b=0}else{e=b;n=17}while(0);if((n|0)==17)if(!b)b=0;else a[e>>0]=0;if(m)ll(f)}return b|0}function Hm(a){a=a|0;var b=0;if((c[a+76>>2]|0)>-1){b=(gm(a)|0)==0;a=(c[a>>2]|0)>>>4&1}else a=(c[a>>2]|0)>>>4&1;return a|0}function Im(a){a=a|0;var b=0;if((c[a+76>>2]|0)>-1){b=(gm(a)|0)==0;a=(c[a>>2]|0)>>>5&1}else a=(c[a>>2]|0)>>>5&1;return a|0}function Jm(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=i;i=i+16|0;f=e;c[f>>2]=d;d=Km(a,b,f)|0;i=e;return d|0}function Km(e,f,j){e=e|0;f=f|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0.0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0;P=i;i=i+304|0;H=P+16|0;J=P+8|0;I=P+33|0;K=P;y=P+32|0;if((c[e+76>>2]|0)>-1)O=gm(e)|0;else O=0;k=a[f>>0]|0;a:do if(k<<24>>24){L=e+4|0;M=e+100|0;G=e+108|0;z=e+8|0;A=I+10|0;B=I+33|0;D=J+4|0;E=I+46|0;F=I+94|0;m=k;k=0;n=f;s=0;l=0;f=0;b:while(1){c:do if(!(Pl(m&255)|0)){m=(a[n>>0]|0)==37;d:do if(m){q=n+1|0;o=a[q>>0]|0;e:do switch(o<<24>>24){case 37:break d;case 42:{x=0;o=n+2|0;break}default:{o=(o&255)+-48|0;if(o>>>0<10?(a[n+2>>0]|0)==36:0){c[H>>2]=c[j>>2];while(1){x=(c[H>>2]|0)+(4-1)&~(4-1);m=c[x>>2]|0;c[H>>2]=x+4;if(o>>>0>1)o=o+-1|0;else break}x=m;o=n+3|0;break e}o=(c[j>>2]|0)+(4-1)&~(4-1);x=c[o>>2]|0;c[j>>2]=o+4;o=q}}while(0);m=a[o>>0]|0;n=m&255;if((n+-48|0)>>>0<10){m=0;while(1){q=(m*10|0)+-48+n|0;o=o+1|0;m=a[o>>0]|0;n=m&255;if((n+-48|0)>>>0>=10)break;else m=q}}else q=0;if(m<<24>>24==109){o=o+1|0;r=a[o>>0]|0;m=(x|0)!=0&1;l=0;f=0}else{r=m;m=0}n=o+1|0;switch(r&255|0){case 104:{w=(a[n>>0]|0)==104;n=w?o+2|0:n;o=w?-2:-1;break}case 108:{w=(a[n>>0]|0)==108;n=w?o+2|0:n;o=w?3:1;break}case 106:{o=3;break}case 116:case 122:{o=1;break}case 76:{o=2;break}case 110:case 112:case 67:case 83:case 91:case 99:case 115:case 88:case 71:case 70:case 69:case 65:case 103:case 102:case 101:case 97:case 120:case 117:case 111:case 105:case 100:{n=o;o=0;break}default:{N=154;break b}}r=d[n>>0]|0;t=(r&47|0)==3;r=t?r|32:r;t=t?1:o;switch(r|0){case 99:{w=s;v=(q|0)<1?1:q;break}case 91:{w=s;v=q;break}case 110:{if(!x){o=s;break c}switch(t|0){case -2:{a[x>>0]=s;o=s;break c}case -1:{b[x>>1]=s;o=s;break c}case 0:{c[x>>2]=s;o=s;break c}case 1:{c[x>>2]=s;o=s;break c}case 3:{o=x;c[o>>2]=s;c[o+4>>2]=((s|0)<0)<<31>>31;o=s;break c}default:{o=s;break c}}}default:{lm(e,0);do{o=c[L>>2]|0;if(o>>>0<(c[M>>2]|0)>>>0){c[L>>2]=o+1;o=d[o>>0]|0}else o=nm(e)|0}while((Pl(o)|0)!=0);if(!(c[M>>2]|0))o=c[L>>2]|0;else{o=(c[L>>2]|0)+-1|0;c[L>>2]=o}w=(c[G>>2]|0)+s+o-(c[z>>2]|0)|0;v=q}}lm(e,v);o=c[L>>2]|0;q=c[M>>2]|0;if(o>>>0<q>>>0)c[L>>2]=o+1;else{if((nm(e)|0)<0){N=154;break b}q=c[M>>2]|0}if(q|0)c[L>>2]=(c[L>>2]|0)+-1;f:do switch(r|0){case 91:case 99:case 115:{u=(r|0)==99;g:do if((r|16|0)==115){tn(I|0,-1,257)|0;a[I>>0]=0;if((r|0)==115){a[B>>0]=0;a[A>>0]=0;a[A+1>>0]=0;a[A+2>>0]=0;a[A+3>>0]=0;a[A+4>>0]=0}}else{r=n+1|0;s=(a[r>>0]|0)==94;o=s&1;n=s?n+2|0:r;tn(I|0,s&1|0,257)|0;a[I>>0]=0;switch(a[n>>0]|0){case 45:{s=(o^1)&255;a[E>>0]=s;n=n+1|0;break}case 93:{s=(o^1)&255;a[F>>0]=s;n=n+1|0;break}default:s=(o^1)&255}while(1){o=a[n>>0]|0;h:do switch(o<<24>>24){case 0:{N=154;break b}case 93:break g;case 45:{r=n+1|0;o=a[r>>0]|0;switch(o<<24>>24){case 93:case 0:{o=45;break h}default:{}}n=a[n+-1>>0]|0;if((n&255)<(o&255)){n=n&255;do{n=n+1|0;a[I+n>>0]=s;o=a[r>>0]|0}while((n|0)<(o&255|0));n=r}else n=r;break}default:{}}while(0);a[I+((o&255)+1)>>0]=s;n=n+1|0}}while(0);r=u?v+1|0:31;s=(t|0)==1;t=(m|0)!=0;i:do if(s){if(t){f=mn(r<<2)|0;if(!f){l=0;N=154;break b}}else f=x;c[J>>2]=0;c[D>>2]=0;l=0;j:while(1){q=(f|0)==0;do{k:while(1){o=c[L>>2]|0;if(o>>>0<(c[M>>2]|0)>>>0){c[L>>2]=o+1;o=d[o>>0]|0}else o=nm(e)|0;if(!(a[I+(o+1)>>0]|0))break j;a[y>>0]=o;switch(Rl(K,y,1,J)|0){case -1:{l=0;N=154;break b}case -2:break;default:break k}}if(!q){c[f+(l<<2)>>2]=c[K>>2];l=l+1|0}}while(!(t&(l|0)==(r|0)));l=r<<1|1;o=on(f,l<<2)|0;if(!o){l=0;N=154;break b}else{q=r;r=l;f=o;l=q}}if(!(km(J)|0)){l=0;N=154;break b}else{q=l;l=0}}else{if(t){l=mn(r)|0;if(!l){l=0;f=0;N=154;break b}else o=0;while(1){do{f=c[L>>2]|0;if(f>>>0<(c[M>>2]|0)>>>0){c[L>>2]=f+1;f=d[f>>0]|0}else f=nm(e)|0;if(!(a[I+(f+1)>>0]|0)){q=o;f=0;break i}a[l+o>>0]=f;o=o+1|0}while((o|0)!=(r|0));f=r<<1|1;o=on(l,f)|0;if(!o){f=0;N=154;break b}else{q=r;r=f;l=o;o=q}}}if(!x){l=q;while(1){f=c[L>>2]|0;if(f>>>0<l>>>0){c[L>>2]=f+1;f=d[f>>0]|0}else f=nm(e)|0;if(!(a[I+(f+1)>>0]|0)){q=0;l=0;f=0;break i}l=c[M>>2]|0}}else{l=0;while(1){f=c[L>>2]|0;if(f>>>0<q>>>0){c[L>>2]=f+1;f=d[f>>0]|0}else f=nm(e)|0;if(!(a[I+(f+1)>>0]|0)){q=l;l=x;f=0;break i}a[x+l>>0]=f;q=c[M>>2]|0;l=l+1|0}}}while(0);if(!(c[M>>2]|0))o=c[L>>2]|0;else{o=(c[L>>2]|0)+-1|0;c[L>>2]=o}o=o-(c[z>>2]|0)+(c[G>>2]|0)|0;if(!o)break b;if(!((o|0)==(v|0)|u^1))break b;do if(t)if(s){c[x>>2]=f;break}else{c[x>>2]=l;break}while(0);if(!u){if(f|0)c[f+(q<<2)>>2]=0;if(!l){l=0;break f}a[l+q>>0]=0}break}case 120:case 88:case 112:{o=16;N=136;break}case 111:{o=8;N=136;break}case 117:case 100:{o=10;N=136;break}case 105:{o=0;N=136;break}case 71:case 103:case 70:case 102:case 69:case 101:case 65:case 97:{p=+tm(e,t,0);if((c[G>>2]|0)==((c[z>>2]|0)-(c[L>>2]|0)|0))break b;if(x)switch(t|0){case 0:{g[x>>2]=p;break f}case 1:{h[x>>3]=p;break f}case 2:{h[x>>3]=p;break f}default:break f}break}default:{}}while(0);l:do if((N|0)==136){N=0;o=mm(e,o,0,-1,-1)|0;if((c[G>>2]|0)==((c[z>>2]|0)-(c[L>>2]|0)|0))break b;if((x|0)!=0&(r|0)==112){c[x>>2]=o;break}if(x)switch(t|0){case -2:{a[x>>0]=o;break l}case -1:{b[x>>1]=o;break l}case 0:{c[x>>2]=o;break l}case 1:{c[x>>2]=o;break l}case 3:{v=x;c[v>>2]=o;c[v+4>>2]=C;break l}default:break l}}while(0);k=((x|0)!=0&1)+k|0;o=(c[G>>2]|0)+w+(c[L>>2]|0)-(c[z>>2]|0)|0;break c}while(0);n=n+(m&1)|0;lm(e,0);m=c[L>>2]|0;if(m>>>0<(c[M>>2]|0)>>>0){c[L>>2]=m+1;m=d[m>>0]|0}else m=nm(e)|0;if((m|0)!=(d[n>>0]|0)){N=22;break b}o=s+1|0}else{while(1){m=n+1|0;if(!(Pl(d[m>>0]|0)|0))break;else n=m}lm(e,0);do{m=c[L>>2]|0;if(m>>>0<(c[M>>2]|0)>>>0){c[L>>2]=m+1;m=d[m>>0]|0}else m=nm(e)|0}while((Pl(m)|0)!=0);if(!(c[M>>2]|0))m=c[L>>2]|0;else{m=(c[L>>2]|0)+-1|0;c[L>>2]=m}o=(c[G>>2]|0)+s+m-(c[z>>2]|0)|0}while(0);n=n+1|0;m=a[n>>0]|0;if(!(m<<24>>24))break a;else s=o}if((N|0)==22){if(c[M>>2]|0)c[L>>2]=(c[L>>2]|0)+-1;if((k|0)!=0|(m|0)>-1)break;else{k=0;N=155}}else if((N|0)==154)if(!k){k=m;N=155}if((N|0)==155){m=k;k=-1}if(m){nn(l);nn(f)}}else k=0;while(0);if(O|0)ll(e);i=P;return k|0}function Lm(a,b,c){a=a|0;b=b|0;c=c|0;return Mm(a,b,c)|0}function Mm(a,b,d){a=a|0;b=b|0;d=d|0;var e=0;if((c[a+76>>2]|0)>-1){e=(gm(a)|0)==0;b=Nm(a,b,d)|0;if(!e)ll(a)}else b=Nm(a,b,d)|0;return b|0}function Nm(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;if((d|0)==1)b=b-(c[a+8>>2]|0)+(c[a+4>>2]|0)|0;e=a+20|0;f=a+28|0;if((c[e>>2]|0)>>>0>(c[f>>2]|0)>>>0?(hb[c[a+36>>2]&31](a,0,0)|0,(c[e>>2]|0)==0):0)b=-1;else{c[a+16>>2]=0;c[f>>2]=0;c[e>>2]=0;if((hb[c[a+40>>2]&31](a,b,d)|0)<0)b=-1;else{c[a+8>>2]=0;c[a+4>>2]=0;c[a>>2]=c[a>>2]&-17;b=0}}return b|0}function Om(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=i;i=i+16|0;f=e;c[f>>2]=d;d=Zl(a,b,f)|0;i=e;return d|0}function Pm(b,e){b=b|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0;w=i;i=i+1056|0;u=w+1024|0;v=w;k=a[e>>0]|0;do if(k<<24>>24){t=Bm(b,k<<24>>24)|0;if(t){j=a[e+1>>0]|0;if(j<<24>>24){f=t+1|0;m=a[f>>0]|0;if(m<<24>>24){h=a[e+2>>0]|0;if(!(h<<24>>24)){j=j&255|(k&255)<<8;b=m;g=d[t>>0]<<8|m&255;while(1){g=g&65535;if((g|0)==(j|0))break;f=f+1|0;h=a[f>>0]|0;if(!(h<<24>>24)){b=0;break}else{b=h;g=h&255|g<<8}}b=b<<24>>24?f+-1|0:0;break}f=t+2|0;b=a[f>>0]|0;if(b<<24>>24){g=a[e+3>>0]|0;if(!(g<<24>>24)){h=(j&255)<<16|(k&255)<<24|(h&255)<<8;g=(b&255)<<8|(m&255)<<16|d[t>>0]<<24;if((g|0)!=(h|0))do{f=f+1|0;b=a[f>>0]|0;g=(b&255|g)<<8}while(!(b<<24>>24==0|(g|0)==(h|0)));b=b<<24>>24?f+-2|0:0;break}f=t+3|0;l=a[f>>0]|0;if(l<<24>>24){if(!(a[e+4>>0]|0)){h=(j&255)<<16|(k&255)<<24|(h&255)<<8|g&255;b=(b&255)<<8|(m&255)<<16|l&255|d[t>>0]<<24;if((b|0)==(h|0))b=l;else{g=b;do{f=f+1|0;b=a[f>>0]|0;g=b&255|g<<8}while(!(b<<24>>24==0|(g|0)==(h|0)))}b=b<<24>>24?f+-3|0:0;break};c[u>>2]=0;c[u+4>>2]=0;c[u+8>>2]=0;c[u+12>>2]=0;c[u+16>>2]=0;c[u+20>>2]=0;c[u+24>>2]=0;c[u+28>>2]=0;b=k;g=0;while(1){if(!(a[t+g>>0]|0)){b=0;break}f=u+(((b&255)>>>5&255)<<2)|0;c[f>>2]=c[f>>2]|1<<(b&31);f=g+1|0;c[v+((b&255)<<2)>>2]=f;b=a[e+f>>0]|0;if(!(b<<24>>24)){n=23;break}else g=f}a:do if((n|0)==23){b:do if(f>>>0>1){h=1;n=-1;b=0;c:while(1){m=1;while(1){d:while(1){j=1;while(1){k=a[e+(j+n)>>0]|0;l=a[e+h>>0]|0;if(k<<24>>24!=l<<24>>24){m=h;j=k;h=l;break d}if((j|0)==(m|0))break;j=j+1|0;h=j+b|0;if(h>>>0>=f>>>0){b=n;p=m;break c}}b=b+m|0;h=b+1|0;if(h>>>0>=f>>>0){b=n;p=m;break c}}k=m-n|0;if((j&255)<=(h&255))break;b=m+1|0;if(b>>>0<f>>>0){h=b;b=m;m=k}else{b=n;p=k;break c}}h=b+2|0;if(h>>>0>=f>>>0){p=1;break}else{n=b;b=b+1|0}}j=1;k=-1;h=0;while(1){l=h;h=1;while(1){o=l;e:while(1){l=1;while(1){n=a[e+(l+k)>>0]|0;m=a[e+j>>0]|0;if(n<<24>>24!=m<<24>>24){l=j;j=o;break e}if((l|0)==(h|0))break;l=l+1|0;j=l+o|0;if(j>>>0>=f>>>0){j=p;break b}}o=o+h|0;j=o+1|0;if(j>>>0>=f>>>0){j=p;break b}}h=l-k|0;if((n&255)>=(m&255)){h=j;break}j=l+1|0;if(j>>>0>=f>>>0){j=p;break b}}j=h+2|0;if(j>>>0>=f>>>0){k=h;j=p;h=1;break}else{k=h;h=h+1|0}}}else{b=-1;k=-1;j=1;h=1}while(0);r=(k+1|0)>>>0>(b+1|0)>>>0;h=r?h:j;r=r?k:b;q=r+1|0;if(!(Qm(e,e+h|0,q)|0))s=f-h|0;else{h=f-r+-1|0;s=0;h=(r>>>0>h>>>0?r:h)+1|0}n=f|63;o=(s|0)!=0;p=f-h|0;b=t;m=0;l=t;f:while(1){j=b;do if((l-j|0)>>>0<f>>>0){k=em(l,0,n)|0;if(k)if((k-j|0)>>>0<f>>>0){b=0;break a}else break;else{k=l+n|0;break}}else k=l;while(0);j=a[b+g>>0]|0;if(!(1<<(j&31)&c[u+(((j&255)>>>5&255)<<2)>>2])){b=b+f|0;m=0;l=k;continue}t=c[v+((j&255)<<2)>>2]|0;j=f-t|0;if((f|0)!=(t|0)){b=b+(o&(m|0)!=0&j>>>0<h>>>0?p:j)|0;m=0;l=k;continue}j=q>>>0>m>>>0?q:m;l=a[e+j>>0]|0;g:do if(!(l<<24>>24))j=q;else{while(1){if(l<<24>>24!=(a[b+j>>0]|0))break;j=j+1|0;l=a[e+j>>0]|0;if(!(l<<24>>24)){j=q;break g}}b=b+(j-r)|0;m=0;l=k;continue f}while(0);do{if(j>>>0<=m>>>0)break a;j=j+-1|0}while((a[e+j>>0]|0)==(a[b+j>>0]|0));b=b+h|0;m=s;l=k}}while(0)}else b=0}else b=0}else b=0}else b=t}else b=0}while(0);i=w;return b|0}function Qm(b,c,d){b=b|0;c=c|0;d=d|0;var e=0,f=0;a:do if(!d)d=0;else{f=d;e=b;while(1){b=a[e>>0]|0;d=a[c>>0]|0;if(b<<24>>24!=d<<24>>24)break;f=f+-1|0;if(!f){d=0;break a}else{e=e+1|0;c=c+1|0}}d=(b&255)-(d&255)|0}while(0);return d|0}function Rm(a,b){a=a|0;b=b|0;return Sm(a,b,(Ql(a)|0)+1|0)|0}function Sm(b,c,d){b=b|0;c=c|0;d=d|0;var e=0;e=c&255;do{if(!d){c=0;break}d=d+-1|0;c=b+d|0}while((a[c>>0]|0)!=e<<24>>24);return c|0}function Tm(b,c){b=b|0;c=c|0;b=b+(xm(b,c)|0)|0;return (a[b>>0]|0?b:0)|0}function Um(a){a=a|0;var b=0;b=12976;c[b>>2]=a+-1;c[b+4>>2]=0;return}function Vm(){var a=0,b=0,d=0;b=12976;b=Fn(c[b>>2]|0,c[b+4>>2]|0,1284865837,1481765933)|0;b=vn(b|0,C|0,1,0)|0;a=C;d=12976;c[d>>2]=b;c[d+4>>2]=a;a=xn(b|0,a|0,33)|0;return a|0}
function nb(a){a=a|0;var b=0;b=i;i=i+a|0;i=i+15&-16;return b|0}function ob(){return i|0}function pb(a){a=a|0;i=a}function qb(a,b){a=a|0;b=b|0;i=a;j=b}function rb(a,b){a=a|0;b=b|0;if(!n){n=a;o=b}}function sb(b){b=b|0;a[k>>0]=a[b>>0];a[k+1>>0]=a[b+1>>0];a[k+2>>0]=a[b+2>>0];a[k+3>>0]=a[b+3>>0]}function tb(b){b=b|0;a[k>>0]=a[b>>0];a[k+1>>0]=a[b+1>>0];a[k+2>>0]=a[b+2>>0];a[k+3>>0]=a[b+3>>0];a[k+4>>0]=a[b+4>>0];a[k+5>>0]=a[b+5>>0];a[k+6>>0]=a[b+6>>0];a[k+7>>0]=a[b+7>>0]}function ub(a){a=a|0;C=a}function vb(){return C|0}function wb(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0;h=i;i=i+16|0;f=h;c[f>>2]=b;g=c[a+16>>2]|0;d=a+8|0;e=c[d>>2]|0;do if(((c[a+24>>2]|0)-e>>4|0)<=(b|0)){if(((e-(c[a+28>>2]|0)>>4)+5|0)>(1e6-b|0)){g=0;i=h;return g|0}if(!(de(a,18,f)|0)){e=c[d>>2]|0;b=c[f>>2]|0;break}else{g=0;i=h;return g|0}}while(0);d=g+4|0;b=e+(b<<4)|0;if((c[d>>2]|0)>>>0>=b>>>0){g=1;i=h;return g|0}c[d>>2]=b;g=1;i=h;return g|0}function xb(a,b){a=a|0;b=b|0;fe(a,c[b>>2]|0);return}function yb(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0;if((a|0)==(b|0))return;g=a+8|0;a=c[g>>2]|0;e=0-d|0;f=a+(e<<4)|0;c[g>>2]=f;if((d|0)<=0)return;b=b+8|0;h=c[b>>2]|0;c[b>>2]=h+16;j=f;i=c[j+4>>2]|0;f=h;c[f>>2]=c[j>>2];c[f+4>>2]=i;c[h+8>>2]=c[a+(e<<4)+8>>2];if((d|0)==1)return;else a=1;do{i=c[g>>2]|0;j=c[b>>2]|0;c[b>>2]=j+16;e=i+(a<<4)|0;f=c[e+4>>2]|0;h=j;c[h>>2]=c[e>>2];c[h+4>>2]=f;c[j+8>>2]=c[i+(a<<4)+8>>2];a=a+1|0}while((a|0)!=(d|0));return}function zb(a,b){a=a|0;b=b|0;var d=0;d=(c[a+12>>2]|0)+168|0;a=c[d>>2]|0;c[d>>2]=b;return a|0}function Ab(a){a=a|0;if(!a){a=8;return a|0}a=c[(c[a+12>>2]|0)+176>>2]|0;return a|0}function Bb(a,b){a=a|0;b=b|0;if((b+1000999|0)>>>0>1000999)return b|0;b=((c[a+8>>2]|0)-(c[c[a+16>>2]>>2]|0)>>4)+b|0;return b|0}function Cb(a){a=a|0;return (c[a+8>>2]|0)-((c[c[a+16>>2]>>2]|0)+16)>>4|0}function Db(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0;if((b|0)<=-1){g=a+8|0;c[g>>2]=(c[g>>2]|0)+(b+1<<4);return}d=c[c[a+16>>2]>>2]|0;e=a+8|0;f=c[e>>2]|0;g=d+16+(b<<4)|0;if(f>>>0<g>>>0){a=((d+(b<<4)+8+4+(3-f)|0)>>>4)+1|0;d=f;do{c[d+8>>2]=0;d=d+16|0}while(d>>>0<g>>>0);c[e>>2]=f+(a<<4)}c[e>>2]=g;return}function Eb(a,b){a=a|0;b=b|0;var e=0,f=0,g=0,h=0;e=c[a+16>>2]|0;do if((b|0)<=0){if((b|0)>=-1000999){b=(c[a+8>>2]|0)+(b<<4)|0;break}if((b|0)==-1001e3){b=(c[a+12>>2]|0)+40|0;break}f=-1001e3-b|0;b=c[e>>2]|0;if((c[b+8>>2]|0)==22)b=12928;else{b=c[b>>2]|0;b=(f|0)>(d[b+6>>0]|0|0)?12928:b+16+(f+-1<<4)|0}}else{b=(c[e>>2]|0)+(b<<4)|0;b=b>>>0<(c[a+8>>2]|0)>>>0?b:12928}while(0);f=b+16|0;a=a+8|0;e=c[a>>2]|0;if(f>>>0>=e>>>0){f=e;f=f+-16|0;c[a>>2]=f;return}while(1){h=f;g=c[h+4>>2]|0;e=b;c[e>>2]=c[h>>2];c[e+4>>2]=g;c[b+8>>2]=c[b+24>>2];e=f+16|0;b=c[a>>2]|0;if(e>>>0<b>>>0){b=f;f=e}else break}h=b+-16|0;c[a>>2]=h;return}function Fb(a,b){a=a|0;b=b|0;var e=0,f=0,g=0,h=0,i=0;e=c[a+16>>2]|0;do if((b|0)<=0){if((b|0)>=-1000999){f=(c[a+8>>2]|0)+(b<<4)|0;break}if((b|0)==-1001e3){f=(c[a+12>>2]|0)+40|0;break}f=-1001e3-b|0;b=c[e>>2]|0;if((c[b+8>>2]|0)==22)f=12928;else{e=c[b>>2]|0;f=(f|0)>(d[e+6>>0]|0|0)?12928:e+16+(f+-1<<4)|0}}else{f=(c[e>>2]|0)+(b<<4)|0;f=f>>>0<(c[a+8>>2]|0)>>>0?f:12928}while(0);e=a+8|0;b=c[e>>2]|0;if(b>>>0>f>>>0){do{a=b;b=b+-16|0;i=b;h=c[i+4>>2]|0;g=a;c[g>>2]=c[i>>2];c[g+4>>2]=h;c[a+8>>2]=c[a+-8>>2]}while(b>>>0>f>>>0);b=c[e>>2]|0}g=b;h=c[g+4>>2]|0;i=f;c[i>>2]=c[g>>2];c[i+4>>2]=h;c[f+8>>2]=c[b+8>>2];return}function Gb(b,e){b=b|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0;h=b+8|0;i=c[h>>2]|0;j=i+-16|0;k=b+16|0;f=c[k>>2]|0;do if((e|0)<=0){if((e|0)>=-1000999){f=i+(e<<4)|0;break}if((e|0)==-1001e3){f=(c[b+12>>2]|0)+40|0;break}g=-1001e3-e|0;f=c[f>>2]|0;if((c[f+8>>2]|0)==22)f=12928;else{f=c[f>>2]|0;f=(g|0)>(d[f+6>>0]|0|0)?12928:f+16+(g+-1<<4)|0}}else{f=(c[f>>2]|0)+(e<<4)|0;f=f>>>0<i>>>0?f:12928}while(0);o=j;n=c[o+4>>2]|0;g=f;c[g>>2]=c[o>>2];c[g+4>>2]=n;i=i+-8|0;c[f+8>>2]=c[i>>2];if((((e|0)<-1001e3?c[i>>2]&64|0:0)?(l=c[j>>2]|0,a[l+5>>0]&3):0)?(m=c[c[c[k>>2]>>2]>>2]|0,a[m+5>>0]&4):0)xe(b,m,l);c[h>>2]=(c[h>>2]|0)+-16;return}function Hb(b,e,f){b=b|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0;j=b+16|0;i=c[j>>2]|0;do if((e|0)<=0){if((e|0)>=-1000999){h=(c[b+8>>2]|0)+(e<<4)|0;break}if((e|0)==-1001e3){h=(c[b+12>>2]|0)+40|0;break}e=-1001e3-e|0;g=c[i>>2]|0;if((c[g+8>>2]|0)==22)h=12928;else{h=c[g>>2]|0;h=(e|0)>(d[h+6>>0]|0|0)?12928:h+16+(e+-1<<4)|0}}else{h=(c[i>>2]|0)+(e<<4)|0;h=h>>>0<(c[b+8>>2]|0)>>>0?h:12928}while(0);do if((f|0)<=0){if((f|0)>=-1000999){e=(c[b+8>>2]|0)+(f<<4)|0;break}if((f|0)==-1001e3){e=(c[b+12>>2]|0)+40|0;break}g=-1001e3-f|0;e=c[i>>2]|0;if((c[e+8>>2]|0)==22)e=12928;else{e=c[e>>2]|0;e=(g|0)>(d[e+6>>0]|0|0)?12928:e+16+(g+-1<<4)|0}}else{e=(c[i>>2]|0)+(f<<4)|0;e=e>>>0<(c[b+8>>2]|0)>>>0?e:12928}while(0);k=h;i=c[k+4>>2]|0;g=e;c[g>>2]=c[k>>2];c[g+4>>2]=i;g=h+8|0;c[e+8>>2]=c[g>>2];if((f|0)>=-1001e3)return;if(!(c[g>>2]&64))return;g=c[h>>2]|0;if(!(a[g+5>>0]&3))return;e=c[c[c[j>>2]>>2]>>2]|0;if(!(a[e+5>>0]&4))return;xe(b,e,g);return}function Ib(a,b){a=a|0;b=b|0;var e=0,f=0,g=0,h=0;e=c[a+16>>2]|0;do if((b|0)<=0){if((b|0)>=-1000999){b=(c[a+8>>2]|0)+(b<<4)|0;break}if((b|0)==-1001e3){b=(c[a+12>>2]|0)+40|0;break}f=-1001e3-b|0;b=c[e>>2]|0;if((c[b+8>>2]|0)==22)b=12928;else{b=c[b>>2]|0;b=(f|0)>(d[b+6>>0]|0|0)?12928:b+16+(f+-1<<4)|0}}else{b=(c[e>>2]|0)+(b<<4)|0;b=b>>>0<(c[a+8>>2]|0)>>>0?b:12928}while(0);a=a+8|0;f=c[a>>2]|0;h=b;g=c[h+4>>2]|0;e=f;c[e>>2]=c[h>>2];c[e+4>>2]=g;c[f+8>>2]=c[b+8>>2];c[a>>2]=(c[a>>2]|0)+16;return}function Jb(a,b){a=a|0;b=b|0;var e=0;e=c[a+16>>2]|0;do if((b|0)>0){b=(c[e>>2]|0)+(b<<4)|0;if(b>>>0>=(c[a+8>>2]|0)>>>0){a=-1;return a|0}}else{if((b|0)>=-1000999){b=(c[a+8>>2]|0)+(b<<4)|0;break}if((b|0)==-1001e3){b=(c[a+12>>2]|0)+40|0;break}a=-1001e3-b|0;b=c[e>>2]|0;if((c[b+8>>2]|0)==22){a=-1;return a|0}b=c[b>>2]|0;if((a|0)>(d[b+6>>0]|0|0)){a=-1;return a|0}else b=b+16+(a+-1<<4)|0}while(0);if((b|0)==12928){a=-1;return a|0}a=c[b+8>>2]&15;return a|0}function Kb(a,b){a=a|0;b=b|0;return c[148+(b+1<<2)>>2]|0}function Lb(a,b){a=a|0;b=b|0;var e=0;e=c[a+16>>2]|0;do if((b|0)<=0){if((b|0)>=-1000999){a=(c[a+8>>2]|0)+(b<<4)|0;break}if((b|0)==-1001e3){a=(c[a+12>>2]|0)+40|0;break}b=-1001e3-b|0;a=c[e>>2]|0;if((c[a+8>>2]|0)==22)a=12928;else{a=c[a>>2]|0;a=(b|0)>(d[a+6>>0]|0|0)?12928:a+16+(b+-1<<4)|0}}else{e=(c[e>>2]|0)+(b<<4)|0;a=e>>>0<(c[a+8>>2]|0)>>>0?e:12928}while(0);e=c[a+8>>2]|0;return ((e|0)==22|(e|0)==102)&1|0}function Mb(a,b){a=a|0;b=b|0;var e=0,f=0,g=0;g=i;i=i+16|0;f=g;e=c[a+16>>2]|0;do if((b|0)<=0){if((b|0)>=-1000999){a=(c[a+8>>2]|0)+(b<<4)|0;break}if((b|0)==-1001e3){a=(c[a+12>>2]|0)+40|0;break}b=-1001e3-b|0;a=c[e>>2]|0;if((c[a+8>>2]|0)==22)a=12928;else{a=c[a>>2]|0;a=(b|0)>(d[a+6>>0]|0|0)?12928:a+16+(b+-1<<4)|0}}else{e=(c[e>>2]|0)+(b<<4)|0;a=e>>>0<(c[a+8>>2]|0)>>>0?e:12928}while(0);if((c[a+8>>2]|0)==3){f=1;f=f&1;i=g;return f|0}f=(ug(a,f)|0)!=0;f=f&1;i=g;return f|0}function Nb(a,b){a=a|0;b=b|0;var e=0;e=c[a+16>>2]|0;do if((b|0)>0){b=(c[e>>2]|0)+(b<<4)|0;if(b>>>0>=(c[a+8>>2]|0)>>>0){a=0;a=a&1;return a|0}}else{if((b|0)>=-1000999){b=(c[a+8>>2]|0)+(b<<4)|0;break}if((b|0)==-1001e3){b=(c[a+12>>2]|0)+40|0;break}a=-1001e3-b|0;b=c[e>>2]|0;if((c[b+8>>2]|0)==22){a=0;a=a&1;return a|0}b=c[b>>2]|0;if((a|0)>(d[b+6>>0]|0|0)){a=0;a=a&1;return a|0}else b=b+16+(a+-1<<4)|0}while(0);if((b|0)==12928){a=0;a=a&1;return a|0}a=((c[b+8>>2]&15)+-3|0)>>>0<2;a=a&1;return a|0}function Ob(a,b){a=a|0;b=b|0;var e=0;e=c[a+16>>2]|0;do if((b|0)<=0){if((b|0)>=-1000999){a=(c[a+8>>2]|0)+(b<<4)|0;break}if((b|0)==-1001e3){a=(c[a+12>>2]|0)+40|0;break}b=-1001e3-b|0;a=c[e>>2]|0;if((c[a+8>>2]|0)==22)a=12928;else{a=c[a>>2]|0;a=(b|0)>(d[a+6>>0]|0|0)?12928:a+16+(b+-1<<4)|0}}else{e=(c[e>>2]|0)+(b<<4)|0;a=e>>>0<(c[a+8>>2]|0)>>>0?e:12928}while(0);e=c[a+8>>2]|0;return ((e|0)==71|(e|0)==2)&1|0}function Pb(a,b,e){a=a|0;b=b|0;e=e|0;var f=0,g=0,h=0;h=c[a+16>>2]|0;do if((b|0)<=0){if((b|0)>=-1000999){g=(c[a+8>>2]|0)+(b<<4)|0;break}if((b|0)==-1001e3){g=(c[a+12>>2]|0)+40|0;break}b=-1001e3-b|0;f=c[h>>2]|0;if((c[f+8>>2]|0)==22)g=12928;else{g=c[f>>2]|0;g=(b|0)>(d[g+6>>0]|0|0)?12928:g+16+(b+-1<<4)|0}}else{g=(c[h>>2]|0)+(b<<4)|0;g=g>>>0<(c[a+8>>2]|0)>>>0?g:12928}while(0);do if((e|0)<=0){if((e|0)>=-1000999){b=(c[a+8>>2]|0)+(e<<4)|0;break}if((e|0)==-1001e3){b=(c[a+12>>2]|0)+40|0;break}f=-1001e3-e|0;b=c[h>>2]|0;if((c[b+8>>2]|0)==22){h=0;return h|0}else{b=c[b>>2]|0;b=(f|0)>(d[b+6>>0]|0|0)?12928:b+16+(f+-1<<4)|0;break}}else{b=(c[h>>2]|0)+(e<<4)|0;b=b>>>0<(c[a+8>>2]|0)>>>0?b:12928}while(0);if(!((g|0)!=12928&(b|0)!=12928)){h=0;return h|0}if((c[g+8>>2]|0)==(c[b+8>>2]|0))b=(Ag(0,g,b)|0)!=0;else b=0;h=b&1;return h|0}function Qb(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,i=0;i=a+8|0;d=c[i>>2]|0;if((b|0)==6){e=d+-16|0;f=c[e+4>>2]|0;g=d;c[g>>2]=c[e>>2];c[g+4>>2]=f;c[d+8>>2]=c[d+-8>>2];d=(c[i>>2]|0)+16|0;c[i>>2]=d}e=d+-32|0;f=d+-16|0;g=d+-24|0;if((c[g>>2]|0)==3?(c[d+-8>>2]|0)==3:0){h[e>>3]=+lf(b,+h[e>>3],+h[f>>3]);c[g>>2]=3;b=c[i>>2]|0;b=b+-16|0;c[i>>2]=b;return}Dg(a,e,e,f,b+6|0);b=c[i>>2]|0;b=b+-16|0;c[i>>2]=b;return}function Rb(a,b,e,f){a=a|0;b=b|0;e=e|0;f=f|0;var g=0,h=0,i=0;i=c[a+16>>2]|0;do if((b|0)<=0){if((b|0)>=-1000999){h=(c[a+8>>2]|0)+(b<<4)|0;break}if((b|0)==-1001e3){h=(c[a+12>>2]|0)+40|0;break}b=-1001e3-b|0;g=c[i>>2]|0;if((c[g+8>>2]|0)==22)h=12928;else{h=c[g>>2]|0;h=(b|0)>(d[h+6>>0]|0|0)?12928:h+16+(b+-1<<4)|0}}else{h=(c[i>>2]|0)+(b<<4)|0;h=h>>>0<(c[a+8>>2]|0)>>>0?h:12928}while(0);do if((e|0)<=0){if((e|0)>=-1000999){b=(c[a+8>>2]|0)+(e<<4)|0;break}if((e|0)==-1001e3){b=(c[a+12>>2]|0)+40|0;break}g=-1001e3-e|0;b=c[i>>2]|0;if((c[b+8>>2]|0)==22){f=0;return f|0}else{b=c[b>>2]|0;b=(g|0)>(d[b+6>>0]|0|0)?12928:b+16+(g+-1<<4)|0;break}}else{b=(c[i>>2]|0)+(e<<4)|0;b=b>>>0<(c[a+8>>2]|0)>>>0?b:12928}while(0);if(!((h|0)!=12928&(b|0)!=12928)){f=0;return f|0}switch(f|0){case 0:{if((c[h+8>>2]|0)==(c[b+8>>2]|0))b=(Ag(a,h,b)|0)!=0;else b=0;f=b&1;return f|0}case 1:{f=yg(a,h,b)|0;return f|0}case 2:{f=zg(a,h,b)|0;return f|0}default:{f=0;return f|0}}return 0}function Sb(a,b,e){a=a|0;b=b|0;e=e|0;var f=0,g=0,j=0,k=0.0;j=i;i=i+16|0;g=j;f=c[a+16>>2]|0;do if((b|0)<=0){if((b|0)>=-1000999){a=(c[a+8>>2]|0)+(b<<4)|0;break}if((b|0)==-1001e3){a=(c[a+12>>2]|0)+40|0;break}b=-1001e3-b|0;a=c[f>>2]|0;if((c[a+8>>2]|0)==22)a=12928;else{a=c[a>>2]|0;a=(b|0)>(d[a+6>>0]|0|0)?12928:a+16+(b+-1<<4)|0}}else{f=(c[f>>2]|0)+(b<<4)|0;a=f>>>0<(c[a+8>>2]|0)>>>0?f:12928}while(0);if((c[a+8>>2]|0)!=3){a=ug(a,g)|0;if(!a){if(!e){k=0.0;i=j;return +k}c[e>>2]=0;k=0.0;i=j;return +k}}if(e|0)c[e>>2]=1;k=+h[a>>3];i=j;return +k}function Tb(a,b,e){a=a|0;b=b|0;e=e|0;var f=0,g=0,j=0;j=i;i=i+16|0;g=j;f=c[a+16>>2]|0;do if((b|0)<=0){if((b|0)>=-1000999){a=(c[a+8>>2]|0)+(b<<4)|0;break}if((b|0)==-1001e3){a=(c[a+12>>2]|0)+40|0;break}b=-1001e3-b|0;a=c[f>>2]|0;if((c[a+8>>2]|0)==22)a=12928;else{a=c[a>>2]|0;a=(b|0)>(d[a+6>>0]|0|0)?12928:a+16+(b+-1<<4)|0}}else{f=(c[f>>2]|0)+(b<<4)|0;a=f>>>0<(c[a+8>>2]|0)>>>0?f:12928}while(0);if((c[a+8>>2]|0)!=3){a=ug(a,g)|0;if(!a){if(!e){e=0;i=j;return e|0}c[e>>2]=0;e=0;i=j;return e|0}}a=~~+h[a>>3];if(!e){e=a;i=j;return e|0}c[e>>2]=1;e=a;i=j;return e|0}function Ub(a,b,e){a=a|0;b=b|0;e=e|0;var f=0,g=0,j=0,k=0;k=i;i=i+32|0;g=k+8|0;j=k;f=c[a+16>>2]|0;do if((b|0)<=0){if((b|0)>=-1000999){a=(c[a+8>>2]|0)+(b<<4)|0;break}if((b|0)==-1001e3){a=(c[a+12>>2]|0)+40|0;break}b=-1001e3-b|0;a=c[f>>2]|0;if((c[a+8>>2]|0)==22)a=12928;else{a=c[a>>2]|0;a=(b|0)>(d[a+6>>0]|0|0)?12928:a+16+(b+-1<<4)|0}}else{f=(c[f>>2]|0)+(b<<4)|0;a=f>>>0<(c[a+8>>2]|0)>>>0?f:12928}while(0);if((c[a+8>>2]|0)!=3){a=ug(a,g)|0;if(!a){if(!e){e=0;i=k;return e|0}c[e>>2]=0;e=0;i=k;return e|0}}h[j>>3]=+h[a>>3]+6755399441055744.0;a=c[j>>2]|0;if(!e){e=a;i=k;return e|0}c[e>>2]=1;e=a;i=k;return e|0}function Vb(a,b){a=a|0;b=b|0;var e=0;e=c[a+16>>2]|0;do if((b|0)<=0){if((b|0)>=-1000999){a=(c[a+8>>2]|0)+(b<<4)|0;break}if((b|0)==-1001e3){a=(c[a+12>>2]|0)+40|0;break}b=-1001e3-b|0;a=c[e>>2]|0;if((c[a+8>>2]|0)==22)a=12928;else{a=c[a>>2]|0;a=(b|0)>(d[a+6>>0]|0|0)?12928:a+16+(b+-1<<4)|0}}else{e=(c[e>>2]|0)+(b<<4)|0;a=e>>>0<(c[a+8>>2]|0)>>>0?e:12928}while(0);b=c[a+8>>2]|0;if(!b){e=0;e=e&1;return e|0}if((b|0)!=1){e=1;e=e&1;return e|0}e=(c[a>>2]|0)!=0;e=e&1;return e|0}function Wb(a,b,e){a=a|0;b=b|0;e=e|0;var f=0,g=0,h=0,i=0;h=a+16|0;f=c[h>>2]|0;i=(b|0)>0;do if(!i){if((b|0)>=-1000999){f=(c[a+8>>2]|0)+(b<<4)|0;break}if((b|0)==-1001e3){f=(c[a+12>>2]|0)+40|0;break}g=-1001e3-b|0;f=c[f>>2]|0;if((c[f+8>>2]|0)==22)f=12928;else{f=c[f>>2]|0;f=(g|0)>(d[f+6>>0]|0|0)?12928:f+16+(g+-1<<4)|0}}else{f=(c[f>>2]|0)+(b<<4)|0;f=f>>>0<(c[a+8>>2]|0)>>>0?f:12928}while(0);do if((c[f+8>>2]&15|0)!=4){if(!(vg(a,f)|0)){if(!e){e=0;return e|0}c[e>>2]=0;e=0;return e|0}f=a+12|0;if((c[(c[f>>2]|0)+12>>2]|0)>0)Se(a);h=c[h>>2]|0;if(i){f=(c[h>>2]|0)+(b<<4)|0;f=f>>>0<(c[a+8>>2]|0)>>>0?f:12928;break}if((b|0)>=-1000999){f=(c[a+8>>2]|0)+(b<<4)|0;break}if((b|0)==-1001e3){f=(c[f>>2]|0)+40|0;break}g=-1001e3-b|0;f=c[h>>2]|0;if((c[f+8>>2]|0)==22)f=12928;else{f=c[f>>2]|0;f=(g|0)>(d[f+6>>0]|0|0)?12928:f+16+(g+-1<<4)|0}}while(0);if(!e)f=c[f>>2]|0;else{f=c[f>>2]|0;c[e>>2]=c[f+12>>2]}e=f+16|0;return e|0}function Xb(a,b){a=a|0;b=b|0;var e=0;e=c[a+16>>2]|0;do if((b|0)<=0){if((b|0)>=-1000999){a=(c[a+8>>2]|0)+(b<<4)|0;break}if((b|0)==-1001e3){a=(c[a+12>>2]|0)+40|0;break}b=-1001e3-b|0;a=c[e>>2]|0;if((c[a+8>>2]|0)==22)a=12928;else{a=c[a>>2]|0;a=(b|0)>(d[a+6>>0]|0|0)?12928:a+16+(b+-1<<4)|0}}else{e=(c[e>>2]|0)+(b<<4)|0;a=e>>>0<(c[a+8>>2]|0)>>>0?e:12928}while(0);switch(c[a+8>>2]&15|0){case 4:{e=c[(c[a>>2]|0)+12>>2]|0;return e|0}case 7:{e=c[(c[a>>2]|0)+16>>2]|0;return e|0}case 5:{e=mg(c[a>>2]|0)|0;return e|0}default:{e=0;return e|0}}return 0}function Yb(a,b){a=a|0;b=b|0;var e=0;e=c[a+16>>2]|0;do if((b|0)<=0){if((b|0)>=-1000999){a=(c[a+8>>2]|0)+(b<<4)|0;break}if((b|0)==-1001e3){a=(c[a+12>>2]|0)+40|0;break}b=-1001e3-b|0;a=c[e>>2]|0;if((c[a+8>>2]|0)==22)a=12928;else{a=c[a>>2]|0;a=(b|0)>(d[a+6>>0]|0|0)?12928:a+16+(b+-1<<4)|0}}else{e=(c[e>>2]|0)+(b<<4)|0;a=e>>>0<(c[a+8>>2]|0)>>>0?e:12928}while(0);switch(c[a+8>>2]|0){case 22:{e=c[a>>2]|0;return e|0}case 102:{e=c[(c[a>>2]|0)+12>>2]|0;return e|0}default:{e=0;return e|0}}return 0}function Zb(a,b){a=a|0;b=b|0;var e=0;e=c[a+16>>2]|0;do if((b|0)<=0){if((b|0)>=-1000999){a=(c[a+8>>2]|0)+(b<<4)|0;break}if((b|0)==-1001e3){a=(c[a+12>>2]|0)+40|0;break}b=-1001e3-b|0;a=c[e>>2]|0;if((c[a+8>>2]|0)==22)a=12928;else{a=c[a>>2]|0;a=(b|0)>(d[a+6>>0]|0|0)?12928:a+16+(b+-1<<4)|0}}else{e=(c[e>>2]|0)+(b<<4)|0;a=e>>>0<(c[a+8>>2]|0)>>>0?e:12928}while(0);switch(c[a+8>>2]&15|0){case 7:{e=(c[a>>2]|0)+24|0;return e|0}case 2:{e=c[a>>2]|0;return e|0}default:{e=0;return e|0}}return 0}function _b(a,b){a=a|0;b=b|0;var e=0;e=c[a+16>>2]|0;do if((b|0)<=0){if((b|0)>=-1000999){a=(c[a+8>>2]|0)+(b<<4)|0;break}if((b|0)==-1001e3){a=(c[a+12>>2]|0)+40|0;break}b=-1001e3-b|0;a=c[e>>2]|0;if((c[a+8>>2]|0)==22)a=12928;else{a=c[a>>2]|0;a=(b|0)>(d[a+6>>0]|0|0)?12928:a+16+(b+-1<<4)|0}}else{e=(c[e>>2]|0)+(b<<4)|0;a=e>>>0<(c[a+8>>2]|0)>>>0?e:12928}while(0);if((c[a+8>>2]|0)!=72){e=0;return e|0}e=c[a>>2]|0;return e|0}function $b(a,b){a=a|0;b=b|0;var e=0,f=0,g=0,h=0;h=c[a+16>>2]|0;g=(b|0)>0;do if(!g){if((b|0)>=-1000999){e=(c[a+8>>2]|0)+(b<<4)|0;break}if((b|0)==-1001e3){e=(c[a+12>>2]|0)+40|0;break}e=-1001e3-b|0;f=c[h>>2]|0;if((c[f+8>>2]|0)==22)e=12928;else{f=c[f>>2]|0;e=(e|0)>(d[f+6>>0]|0|0)?12928:f+16+(e+-1<<4)|0}}else{e=(c[h>>2]|0)+(b<<4)|0;e=e>>>0<(c[a+8>>2]|0)>>>0?e:12928}while(0);switch(c[e+8>>2]&63|0){case 5:{h=c[e>>2]|0;return h|0}case 6:{h=c[e>>2]|0;return h|0}case 38:{h=c[e>>2]|0;return h|0}case 22:{h=c[e>>2]|0;return h|0}case 8:{h=c[e>>2]|0;return h|0}case 2:case 7:{do if(!g){if((b|0)>=-1000999){e=(c[a+8>>2]|0)+(b<<4)|0;break}if((b|0)==-1001e3){e=(c[a+12>>2]|0)+40|0;break}f=-1001e3-b|0;e=c[h>>2]|0;if((c[e+8>>2]|0)==22)e=12928;else{e=c[e>>2]|0;e=(f|0)>(d[e+6>>0]|0|0)?12928:e+16+(f+-1<<4)|0}}else{e=(c[h>>2]|0)+(b<<4)|0;e=e>>>0<(c[a+8>>2]|0)>>>0?e:12928}while(0);switch(c[e+8>>2]&15|0){case 7:{h=(c[e>>2]|0)+24|0;return h|0}case 2:{h=c[e>>2]|0;return h|0}default:{h=0;return h|0}}}default:{h=0;return h|0}}return 0}function ac(a){a=a|0;var b=0;a=a+8|0;b=c[a>>2]|0;c[b+8>>2]=0;c[a>>2]=b+16;return}function bc(a,b){a=a|0;b=+b;var d=0;a=a+8|0;d=c[a>>2]|0;h[d>>3]=b;c[d+8>>2]=3;c[a>>2]=d+16;return}function cc(a,b){a=a|0;b=b|0;var d=0;a=a+8|0;d=c[a>>2]|0;h[d>>3]=+(b|0);c[d+8>>2]=3;c[a>>2]=d+16;return}function dc(a,b){a=a|0;b=b|0;var d=0;a=a+8|0;d=c[a>>2]|0;h[d>>3]=(b|0)>-1?+(b|0):+(b>>>0);c[d+8>>2]=3;c[a>>2]=d+16;return}function ec(a,b,e){a=a|0;b=b|0;e=e|0;if((c[(c[a+12>>2]|0)+12>>2]|0)>0)Se(a);b=Zf(a,b,e)|0;e=a+8|0;a=c[e>>2]|0;c[a>>2]=b;c[a+8>>2]=d[b+4>>0]|0|64;c[e>>2]=(c[e>>2]|0)+16;return b+16|0}function fc(a,b){a=a|0;b=b|0;var e=0;if(!b){b=a+8|0;a=c[b>>2]|0;c[a+8>>2]=0;c[b>>2]=a+16;b=0;return b|0}if((c[(c[a+12>>2]|0)+12>>2]|0)>0)Se(a);b=_f(a,b)|0;a=a+8|0;e=c[a>>2]|0;c[e>>2]=b;c[e+8>>2]=d[b+4>>0]|0|64;c[a>>2]=(c[a>>2]|0)+16;b=b+16|0;return b|0}function gc(a,b,d){a=a|0;b=b|0;d=d|0;if((c[(c[a+12>>2]|0)+12>>2]|0)>0)Se(a);return of(a,b,d)|0}function hc(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;f=i;i=i+16|0;e=f;if((c[(c[a+12>>2]|0)+12>>2]|0)>0)Se(a);c[e>>2]=d;d=of(a,b,e)|0;i=f;return d|0}function ic(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0;if(!d){f=a+8|0;e=c[f>>2]|0;c[e>>2]=b;c[e+8>>2]=22;e=c[f>>2]|0;e=e+16|0;c[f>>2]=e;return}if((c[(c[a+12>>2]|0)+12>>2]|0)>0)Se(a);f=oe(a,d)|0;c[f+12>>2]=b;e=a+8|0;a=(c[e>>2]|0)+(0-d<<4)|0;c[e>>2]=a;b=d;do{b=b+-1|0;h=a+(b<<4)|0;g=c[h+4>>2]|0;d=f+16+(b<<4)|0;c[d>>2]=c[h>>2];c[d+4>>2]=g;c[f+16+(b<<4)+8>>2]=c[a+(b<<4)+8>>2];a=c[e>>2]|0}while((b|0)!=0);c[a>>2]=f;c[a+8>>2]=102;h=e;g=c[h>>2]|0;g=g+16|0;c[h>>2]=g;return}function jc(a,b){a=a|0;b=b|0;var d=0;a=a+8|0;d=c[a>>2]|0;c[d>>2]=(b|0)!=0&1;c[d+8>>2]=1;c[a>>2]=d+16;return}function kc(a,b){a=a|0;b=b|0;var d=0;a=a+8|0;d=c[a>>2]|0;c[d>>2]=b;c[d+8>>2]=2;c[a>>2]=(c[a>>2]|0)+16;return}function lc(a){a=a|0;var b=0,d=0;b=a+8|0;d=c[b>>2]|0;c[d>>2]=a;c[d+8>>2]=72;c[b>>2]=(c[b>>2]|0)+16;return (c[(c[a+12>>2]|0)+172>>2]|0)==(a|0)|0}function mc(a,b){a=a|0;b=b|0;var e=0,f=0,g=0;e=kg(c[(c[a+12>>2]|0)+40>>2]|0,2)|0;f=a+8|0;g=c[f>>2]|0;c[f>>2]=g+16;b=_f(a,b)|0;c[g>>2]=b;c[g+8>>2]=d[b+4>>0]|0|64;b=(c[f>>2]|0)+-16|0;wg(a,e,b,b);return}function nc(a,b){a=a|0;b=b|0;var e=0,f=0;e=c[a+16>>2]|0;do if((b|0)<=0){if((b|0)>=-1000999){b=(c[a+8>>2]|0)+(b<<4)|0;break}if((b|0)==-1001e3){b=(c[a+12>>2]|0)+40|0;break}f=-1001e3-b|0;b=c[e>>2]|0;if((c[b+8>>2]|0)==22)b=12928;else{b=c[b>>2]|0;b=(f|0)>(d[b+6>>0]|0|0)?12928:b+16+(f+-1<<4)|0}}else{b=(c[e>>2]|0)+(b<<4)|0;b=b>>>0<(c[a+8>>2]|0)>>>0?b:12928}while(0);f=(c[a+8>>2]|0)+-16|0;wg(a,b,f,f);return}function oc(a,b,e){a=a|0;b=b|0;e=e|0;var f=0,g=0;f=c[a+16>>2]|0;do if((b|0)<=0){if((b|0)>=-1000999){b=(c[a+8>>2]|0)+(b<<4)|0;break}if((b|0)==-1001e3){b=(c[a+12>>2]|0)+40|0;break}g=-1001e3-b|0;b=c[f>>2]|0;if((c[b+8>>2]|0)==22)b=12928;else{b=c[b>>2]|0;b=(g|0)>(d[b+6>>0]|0|0)?12928:b+16+(g+-1<<4)|0}}else{b=(c[f>>2]|0)+(b<<4)|0;b=b>>>0<(c[a+8>>2]|0)>>>0?b:12928}while(0);g=a+8|0;f=c[g>>2]|0;e=_f(a,e)|0;c[f>>2]=e;c[f+8>>2]=d[e+4>>0]|0|64;e=c[g>>2]|0;c[g>>2]=e+16;wg(a,b,e,e);return}function pc(a,b){a=a|0;b=b|0;var e=0,f=0,g=0;e=c[a+16>>2]|0;do if((b|0)<=0){if((b|0)>=-1000999){b=(c[a+8>>2]|0)+(b<<4)|0;break}if((b|0)==-1001e3){b=(c[a+12>>2]|0)+40|0;break}f=-1001e3-b|0;b=c[e>>2]|0;if((c[b+8>>2]|0)==22)b=12928;else{b=c[b>>2]|0;b=(f|0)>(d[b+6>>0]|0|0)?12928:b+16+(f+-1<<4)|0}}else{b=(c[e>>2]|0)+(b<<4)|0;b=b>>>0<(c[a+8>>2]|0)>>>0?b:12928}while(0);a=a+8|0;f=eg(c[b>>2]|0,(c[a>>2]|0)+-16|0)|0;a=c[a>>2]|0;g=f;b=c[g+4>>2]|0;e=a+-16|0;c[e>>2]=c[g>>2];c[e+4>>2]=b;c[a+-8>>2]=c[f+8>>2];return}function qc(a,b,e){a=a|0;b=b|0;e=e|0;var f=0,g=0,h=0;f=c[a+16>>2]|0;do if((b|0)<=0){if((b|0)>=-1000999){b=(c[a+8>>2]|0)+(b<<4)|0;break}if((b|0)==-1001e3){b=(c[a+12>>2]|0)+40|0;break}g=-1001e3-b|0;b=c[f>>2]|0;if((c[b+8>>2]|0)==22)b=12928;else{b=c[b>>2]|0;b=(g|0)>(d[b+6>>0]|0|0)?12928:b+16+(g+-1<<4)|0}}else{b=(c[f>>2]|0)+(b<<4)|0;b=b>>>0<(c[a+8>>2]|0)>>>0?b:12928}while(0);g=kg(c[b>>2]|0,e)|0;e=a+8|0;a=c[e>>2]|0;h=g;b=c[h+4>>2]|0;f=a;c[f>>2]=c[h>>2];c[f+4>>2]=b;c[a+8>>2]=c[g+8>>2];c[e>>2]=(c[e>>2]|0)+16;return}function rc(a,b,e){a=a|0;b=b|0;e=e|0;var f=0,g=0,h=0,j=0;j=i;i=i+16|0;h=j;f=c[a+16>>2]|0;do if((b|0)<=0){if((b|0)>=-1000999){b=(c[a+8>>2]|0)+(b<<4)|0;break}if((b|0)==-1001e3){b=(c[a+12>>2]|0)+40|0;break}g=-1001e3-b|0;b=c[f>>2]|0;if((c[b+8>>2]|0)==22)b=12928;else{b=c[b>>2]|0;b=(g|0)>(d[b+6>>0]|0|0)?12928:b+16+(g+-1<<4)|0}}else{b=(c[f>>2]|0)+(b<<4)|0;b=b>>>0<(c[a+8>>2]|0)>>>0?b:12928}while(0);c[h>>2]=e;c[h+8>>2]=2;g=eg(c[b>>2]|0,h)|0;e=a+8|0;h=c[e>>2]|0;b=g;f=c[b+4>>2]|0;a=h;c[a>>2]=c[b>>2];c[a+4>>2]=f;c[h+8>>2]=c[g+8>>2];c[e>>2]=(c[e>>2]|0)+16;i=j;return}function sc(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0;if((c[(c[a+12>>2]|0)+12>>2]|0)>0)Se(a);e=ig(a)|0;f=a+8|0;g=c[f>>2]|0;c[g>>2]=e;c[g+8>>2]=69;c[f>>2]=(c[f>>2]|0)+16;if(!((b|0)>0|(d|0)>0))return;cg(a,e,b,d);return}function tc(a,b){a=a|0;b=b|0;var e=0,f=0;e=c[a+16>>2]|0;do if((b|0)<=0){if((b|0)>=-1000999){b=(c[a+8>>2]|0)+(b<<4)|0;break}if((b|0)==-1001e3){b=(c[a+12>>2]|0)+40|0;break}f=-1001e3-b|0;b=c[e>>2]|0;if((c[b+8>>2]|0)==22)b=12928;else{b=c[b>>2]|0;b=(f|0)>(d[b+6>>0]|0|0)?12928:b+16+(f+-1<<4)|0}}else{b=(c[e>>2]|0)+(b<<4)|0;b=b>>>0<(c[a+8>>2]|0)>>>0?b:12928}while(0);e=c[b+8>>2]&15;switch(e|0){case 5:{b=(c[b>>2]|0)+24|0;break}case 7:{b=(c[b>>2]|0)+8|0;break}default:b=(c[a+12>>2]|0)+252+(e<<2)|0}b=c[b>>2]|0;if(!b){a=0;return a|0}a=a+8|0;f=c[a>>2]|0;c[f>>2]=b;c[f+8>>2]=69;c[a>>2]=(c[a>>2]|0)+16;a=1;return a|0}function uc(a,b){a=a|0;b=b|0;var e=0,f=0;e=c[a+16>>2]|0;do if((b|0)<=0){if((b|0)>=-1000999){b=(c[a+8>>2]|0)+(b<<4)|0;break}if((b|0)==-1001e3){b=(c[a+12>>2]|0)+40|0;break}f=-1001e3-b|0;b=c[e>>2]|0;if((c[b+8>>2]|0)==22)b=12928;else{b=c[b>>2]|0;b=(f|0)>(d[b+6>>0]|0|0)?12928:b+16+(f+-1<<4)|0}}else{b=(c[e>>2]|0)+(b<<4)|0;b=b>>>0<(c[a+8>>2]|0)>>>0?b:12928}while(0);f=c[(c[b>>2]|0)+12>>2]|0;b=a+8|0;e=c[b>>2]|0;if(!f){f=0;a=e+8|0;c[a>>2]=f;a=c[b>>2]|0;a=a+16|0;c[b>>2]=a;return}c[e>>2]=f;f=69;a=e+8|0;c[a>>2]=f;a=c[b>>2]|0;a=a+16|0;c[b>>2]=a;return}function vc(a,b){a=a|0;b=b|0;var e=0,f=0,g=0;f=kg(c[(c[a+12>>2]|0)+40>>2]|0,2)|0;e=a+8|0;g=c[e>>2]|0;c[e>>2]=g+16;b=_f(a,b)|0;c[g>>2]=b;c[g+8>>2]=d[b+4>>0]|0|64;b=c[e>>2]|0;xg(a,f,b+-16|0,b+-32|0);c[e>>2]=(c[e>>2]|0)+-32;return}function wc(a,b){a=a|0;b=b|0;var e=0,f=0;e=c[a+16>>2]|0;do if((b|0)<=0){if((b|0)>=-1000999){b=(c[a+8>>2]|0)+(b<<4)|0;break}if((b|0)==-1001e3){b=(c[a+12>>2]|0)+40|0;break}f=-1001e3-b|0;b=c[e>>2]|0;if((c[b+8>>2]|0)==22)b=12928;else{b=c[b>>2]|0;b=(f|0)>(d[b+6>>0]|0|0)?12928:b+16+(f+-1<<4)|0}}else{b=(c[e>>2]|0)+(b<<4)|0;b=b>>>0<(c[a+8>>2]|0)>>>0?b:12928}while(0);f=a+8|0;e=c[f>>2]|0;xg(a,b,e+-32|0,e+-16|0);c[f>>2]=(c[f>>2]|0)+-32;return}function xc(a,b,e){a=a|0;b=b|0;e=e|0;var f=0,g=0;f=c[a+16>>2]|0;do if((b|0)<=0){if((b|0)>=-1000999){b=(c[a+8>>2]|0)+(b<<4)|0;break}if((b|0)==-1001e3){b=(c[a+12>>2]|0)+40|0;break}g=-1001e3-b|0;b=c[f>>2]|0;if((c[b+8>>2]|0)==22)b=12928;else{b=c[b>>2]|0;b=(g|0)>(d[b+6>>0]|0|0)?12928:b+16+(g+-1<<4)|0}}else{b=(c[f>>2]|0)+(b<<4)|0;b=b>>>0<(c[a+8>>2]|0)>>>0?b:12928}while(0);g=a+8|0;f=c[g>>2]|0;c[g>>2]=f+16;e=_f(a,e)|0;c[f>>2]=e;c[f+8>>2]=d[e+4>>0]|0|64;e=c[g>>2]|0;xg(a,b,e+-16|0,e+-32|0);c[g>>2]=(c[g>>2]|0)+-32;return}function yc(b,e){b=b|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,k=0;f=c[b+16>>2]|0;do if((e|0)<=0){if((e|0)>=-1000999){e=(c[b+8>>2]|0)+(e<<4)|0;break}if((e|0)==-1001e3){e=(c[b+12>>2]|0)+40|0;break}g=-1001e3-e|0;e=c[f>>2]|0;if((c[e+8>>2]|0)==22)e=12928;else{e=c[e>>2]|0;e=(g|0)>(d[e+6>>0]|0|0)?12928:e+16+(g+-1<<4)|0}}else{e=(c[f>>2]|0)+(e<<4)|0;e=e>>>0<(c[b+8>>2]|0)>>>0?e:12928}while(0);g=b+8|0;h=c[g>>2]|0;f=gg(b,c[e>>2]|0,h+-32|0)|0;k=h+-16|0;j=c[k+4>>2]|0;i=f;c[i>>2]=c[k>>2];c[i+4>>2]=j;c[f+8>>2]=c[h+-8>>2];e=c[e>>2]|0;a[e+6>>0]=0;f=c[g>>2]|0;if(!(c[f+-8>>2]&64)){k=f;k=k+-32|0;c[g>>2]=k;return}if(!(a[(c[f+-16>>2]|0)+5>>0]&3)){k=f;k=k+-32|0;c[g>>2]=k;return}if(!(a[e+5>>0]&4)){k=f;k=k+-32|0;c[g>>2]=k;return}ze(b,e);k=c[g>>2]|0;k=k+-32|0;c[g>>2]=k;return}function zc(b,e,f){b=b|0;e=e|0;f=f|0;var g=0,h=0;g=c[b+16>>2]|0;do if((e|0)<=0){if((e|0)>=-1000999){e=(c[b+8>>2]|0)+(e<<4)|0;break}if((e|0)==-1001e3){e=(c[b+12>>2]|0)+40|0;break}h=-1001e3-e|0;e=c[g>>2]|0;if((c[e+8>>2]|0)==22)e=12928;else{e=c[e>>2]|0;e=(h|0)>(d[e+6>>0]|0|0)?12928:e+16+(h+-1<<4)|0}}else{e=(c[g>>2]|0)+(e<<4)|0;e=e>>>0<(c[b+8>>2]|0)>>>0?e:12928}while(0);h=b+8|0;fg(b,c[e>>2]|0,f,(c[h>>2]|0)+-16|0);g=c[h>>2]|0;if(!(c[g+-8>>2]&64)){b=g;b=b+-16|0;c[h>>2]=b;return}if(!(a[(c[g+-16>>2]|0)+5>>0]&3)){b=g;b=b+-16|0;c[h>>2]=b;return}e=c[e>>2]|0;if(!(a[e+5>>0]&4)){b=g;b=b+-16|0;c[h>>2]=b;return}ze(b,e);b=c[h>>2]|0;b=b+-16|0;c[h>>2]=b;return}function Ac(b,e,f){b=b|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0;k=i;i=i+16|0;j=k;g=c[b+16>>2]|0;do if((e|0)<=0){if((e|0)>=-1000999){e=(c[b+8>>2]|0)+(e<<4)|0;break}if((e|0)==-1001e3){e=(c[b+12>>2]|0)+40|0;break}h=-1001e3-e|0;e=c[g>>2]|0;if((c[e+8>>2]|0)==22)e=12928;else{e=c[e>>2]|0;e=(h|0)>(d[e+6>>0]|0|0)?12928:e+16+(h+-1<<4)|0}}else{e=(c[g>>2]|0)+(e<<4)|0;e=e>>>0<(c[b+8>>2]|0)>>>0?e:12928}while(0);c[j>>2]=f;c[j+8>>2]=2;h=b+8|0;f=c[h>>2]|0;g=gg(b,c[e>>2]|0,j)|0;m=f+-16|0;l=c[m+4>>2]|0;j=g;c[j>>2]=c[m>>2];c[j+4>>2]=l;c[g+8>>2]=c[f+-8>>2];g=c[h>>2]|0;if(!(c[g+-8>>2]&64)){m=g;m=m+-16|0;c[h>>2]=m;i=k;return}if(!(a[(c[g+-16>>2]|0)+5>>0]&3)){m=g;m=m+-16|0;c[h>>2]=m;i=k;return}e=c[e>>2]|0;if(!(a[e+5>>0]&4)){m=g;m=m+-16|0;c[h>>2]=m;i=k;return}ze(b,e);m=c[h>>2]|0;m=m+-16|0;c[h>>2]=m;i=k;return}function Bc(b,e){b=b|0;e=e|0;var f=0,g=0,h=0,i=0,j=0;f=c[b+16>>2]|0;do if((e|0)<=0){if((e|0)>=-1000999){g=(c[b+8>>2]|0)+(e<<4)|0;break}if((e|0)==-1001e3){g=(c[b+12>>2]|0)+40|0;break}g=-1001e3-e|0;e=c[f>>2]|0;if((c[e+8>>2]|0)==22)g=12928;else{h=c[e>>2]|0;g=(g|0)>(d[h+6>>0]|0|0)?12928:h+16+(g+-1<<4)|0}}else{g=(c[f>>2]|0)+(e<<4)|0;g=g>>>0<(c[b+8>>2]|0)>>>0?g:12928}while(0);h=b+8|0;e=c[h>>2]|0;if(!(c[e+-8>>2]|0))f=0;else f=c[e+-16>>2]|0;e=c[g+8>>2]&15;switch(e|0){case 5:{c[(c[g>>2]|0)+24>>2]=f;if(!f){b=c[h>>2]|0;b=b+-16|0;c[h>>2]=b;return 1}if(a[f+5>>0]&3?(i=c[g>>2]|0,a[i+5>>0]&4):0)ze(b,i);De(b,c[g>>2]|0,f);b=c[h>>2]|0;b=b+-16|0;c[h>>2]=b;return 1}case 7:{c[(c[g>>2]|0)+8>>2]=f;if(!f){b=c[h>>2]|0;b=b+-16|0;c[h>>2]=b;return 1}if(a[f+5>>0]&3?(j=c[g>>2]|0,a[j+5>>0]&4):0)xe(b,j,f);De(b,c[g>>2]|0,f);b=c[h>>2]|0;b=b+-16|0;c[h>>2]=b;return 1}default:{c[(c[b+12>>2]|0)+252+(e<<2)>>2]=f;b=c[h>>2]|0;b=b+-16|0;c[h>>2]=b;return 1}}return 0}function Cc(b,e){b=b|0;e=e|0;var f=0,g=0,h=0;f=c[b+16>>2]|0;do if((e|0)<=0){if((e|0)>=-1000999){e=(c[b+8>>2]|0)+(e<<4)|0;break}if((e|0)==-1001e3){e=(c[b+12>>2]|0)+40|0;break}g=-1001e3-e|0;e=c[f>>2]|0;if((c[e+8>>2]|0)==22)e=12928;else{e=c[e>>2]|0;e=(g|0)>(d[e+6>>0]|0|0)?12928:e+16+(g+-1<<4)|0}}else{e=(c[f>>2]|0)+(e<<4)|0;e=e>>>0<(c[b+8>>2]|0)>>>0?e:12928}while(0);f=b+8|0;g=c[f>>2]|0;if(!(c[g+-8>>2]|0)){c[(c[e>>2]|0)+12>>2]=0;b=g;b=b+-16|0;c[f>>2]=b;return}h=g+-16|0;c[(c[e>>2]|0)+12>>2]=c[h>>2];h=c[h>>2]|0;if(!(a[h+5>>0]&3)){b=g;b=b+-16|0;c[f>>2]=b;return}e=c[e>>2]|0;if(!(a[e+5>>0]&4)){b=g;b=b+-16|0;c[f>>2]=b;return}xe(b,e,h);b=c[f>>2]|0;b=b+-16|0;c[f>>2]=b;return}function Dc(b,e){b=b|0;e=e|0;b=c[b+16>>2]|0;if(!(a[b+18>>0]&8)){e=0;return e|0}if(e|0)c[e>>2]=c[b+24>>2];e=d[b+37>>0]|0;return e|0}function Ec(a,d,e,f,g){a=a|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,i=0;h=a+8|0;d=(c[h>>2]|0)+(~d<<4)|0;if((g|0)!=0?(b[a+36>>1]|0)==0:0){i=c[a+16>>2]|0;c[i+28>>2]=g;c[i+24>>2]=f;ie(a,d,e,1)}else ie(a,d,e,0);if((e|0)!=-1)return;a=(c[a+16>>2]|0)+4|0;d=c[h>>2]|0;if((c[a>>2]|0)>>>0>=d>>>0)return;c[a>>2]=d;return}function Fc(e,f,g,h,j,k){e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;var l=0,m=0,n=0,o=0,p=0;p=i;i=i+16|0;o=p;if(!h)m=0;else{m=c[e+16>>2]|0;do if((h|0)<=0){if((h|0)>=-1000999){h=(c[e+8>>2]|0)+(h<<4)|0;break}if((h|0)==-1001e3){h=(c[e+12>>2]|0)+40|0;break}l=-1001e3-h|0;h=c[m>>2]|0;if((c[h+8>>2]|0)==22)h=12928;else{h=c[h>>2]|0;h=(l|0)>(d[h+6>>0]|0)?12928:h+16+(l+-1<<4)|0}}else{h=(c[m>>2]|0)+(h<<4)|0;h=h>>>0<(c[e+8>>2]|0)>>>0?h:12928}while(0);m=h-(c[e+28>>2]|0)|0}n=e+8|0;h=(c[n>>2]|0)+(~f<<4)|0;c[o>>2]=h;l=h;if((k|0)!=0?(b[e+36>>1]|0)==0:0){o=c[e+16>>2]|0;c[o+28>>2]=k;c[o+24>>2]=j;c[o+20>>2]=l-(c[e+28>>2]|0);a[o+36>>0]=a[e+41>>0]|0;k=e+68|0;j=o+32|0;c[j>>2]=c[k>>2];c[k>>2]=m;m=o+18|0;a[m>>0]=d[m>>0]|16;ie(e,h,g,1);a[m>>0]=d[m>>0]&239;c[k>>2]=c[j>>2];m=0}else{c[o+4>>2]=g;m=je(e,19,o,l-(c[e+28>>2]|0)|0,m)|0}if((g|0)!=-1){i=p;return m|0}l=(c[e+16>>2]|0)+4|0;h=c[n>>2]|0;if((c[l>>2]|0)>>>0>=h>>>0){i=p;return m|0}c[l>>2]=h;i=p;return m|0}function Gc(a,b){a=a|0;b=b|0;ie(a,c[b>>2]|0,c[b+4>>2]|0,0);return}function Hc(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0;h=i;i=i+32|0;j=h;Hg(b,j,d,e);g=ke(b,j,(f|0)==0?9458:f,g)|0;if(g|0){i=h;return g|0}f=c[(c[b+8>>2]|0)+-16>>2]|0;if((a[f+6>>0]|0)!=1){i=h;return g|0}e=kg(c[(c[b+12>>2]|0)+40>>2]|0,2)|0;f=f+16|0;d=c[(c[f>>2]|0)+8>>2]|0;l=e;k=c[l+4>>2]|0;j=d;c[j>>2]=c[l>>2];c[j+4>>2]=k;j=e+8|0;c[d+8>>2]=c[j>>2];if(!(c[j>>2]&64)){i=h;return g|0}e=c[e>>2]|0;if(!(a[e+5>>0]&3)){i=h;return g|0}f=c[f>>2]|0;if(!(a[f+5>>0]&4)){i=h;return g|0}xe(b,f,e);i=h;return g|0}function Ic(a,b,d){a=a|0;b=b|0;d=d|0;var e=0;e=c[a+8>>2]|0;if((c[e+-8>>2]|0)!=70){b=1;return b|0}b=me(a,c[(c[e+-16>>2]|0)+12>>2]|0,b,d,0)|0;return b|0}function Jc(a){a=a|0;return d[a+6>>0]|0|0}function Kc(e,f,g){e=e|0;f=f|0;g=g|0;var h=0,i=0;i=c[e+12>>2]|0;a:do switch(f|0){case 0:{a[i+63>>0]=0;f=0;break}case 1:{Rf(i,0);a[i+63>>0]=1;f=0;break}case 2:{Re(e,0);f=0;break}case 3:{f=((c[i+12>>2]|0)+(c[i+8>>2]|0)|0)>>>10;break}case 4:{f=(c[i+12>>2]|0)+(c[i+8>>2]|0)&1023;break}case 5:{h=b[i+62>>1]|0;if((h&255)<<24>>24==2){f=(c[i+20>>2]|0)==0&1;Qe(e);break a}f=(g<<10)+-1600|0;if((h&65535)>=256)f=(c[i+12>>2]|0)+f|0;Rf(i,f);Qe(e);f=(a[i+61>>0]|0)==5&1;break}case 6:{e=i+156|0;f=c[e>>2]|0;c[e>>2]=g;break}case 8:{e=i+160|0;f=c[e>>2]|0;c[e>>2]=g;break}case 7:{e=i+164|0;f=c[e>>2]|0;c[e>>2]=g;break}case 9:{f=d[i+63>>0]|0;break}case 10:{Fe(e,2);f=0;break}case 11:{Fe(e,0);f=0;break}default:f=-1}while(0);return f|0}function Lc(a){a=a|0;Td(a);return 0}function Mc(a,b){a=a|0;b=b|0;var e=0,f=0;e=c[a+16>>2]|0;do if((b|0)<=0){if((b|0)>=-1000999){b=(c[a+8>>2]|0)+(b<<4)|0;break}if((b|0)==-1001e3){b=(c[a+12>>2]|0)+40|0;break}f=-1001e3-b|0;b=c[e>>2]|0;if((c[b+8>>2]|0)==22)b=12928;else{b=c[b>>2]|0;b=(f|0)>(d[b+6>>0]|0|0)?12928:b+16+(f+-1<<4)|0}}else{b=(c[e>>2]|0)+(b<<4)|0;b=b>>>0<(c[a+8>>2]|0)>>>0?b:12928}while(0);f=a+8|0;a=ag(a,c[b>>2]|0,(c[f>>2]|0)+-16|0)|0;e=c[f>>2]|0;c[f>>2]=(a|0)==0?e+-16|0:e+16|0;return a|0}function Nc(a,b){a=a|0;b=b|0;var e=0;if((b|0)>1){if((c[(c[a+12>>2]|0)+12>>2]|0)>0)Se(a);Bg(a,b);return}else{if(b|0)return;b=a+8|0;e=c[b>>2]|0;a=Zf(a,15608,0)|0;c[e>>2]=a;c[e+8>>2]=d[a+4>>0]|0|64;c[b>>2]=(c[b>>2]|0)+16;return}}function Oc(a,b){a=a|0;b=b|0;var e=0,f=0;e=c[a+16>>2]|0;do if((b|0)<=0){if((b|0)>=-1000999){b=(c[a+8>>2]|0)+(b<<4)|0;break}if((b|0)==-1001e3){b=(c[a+12>>2]|0)+40|0;break}f=-1001e3-b|0;b=c[e>>2]|0;if((c[b+8>>2]|0)==22)b=12928;else{b=c[b>>2]|0;b=(f|0)>(d[b+6>>0]|0|0)?12928:b+16+(f+-1<<4)|0}}else{b=(c[e>>2]|0)+(b<<4)|0;b=b>>>0<(c[a+8>>2]|0)>>>0?b:12928}while(0);f=a+8|0;Cg(a,c[f>>2]|0,b);c[f>>2]=(c[f>>2]|0)+16;return}function Pc(a,b){a=a|0;b=b|0;a=a+12|0;if(b|0)c[b>>2]=c[(c[a>>2]|0)+4>>2];return c[c[a>>2]>>2]|0}function Qc(a,b,d){a=a|0;b=b|0;d=d|0;a=c[a+12>>2]|0;c[a+4>>2]=d;c[a>>2]=b;return}function Rc(a,b){a=a|0;b=b|0;var d=0;if((c[(c[a+12>>2]|0)+12>>2]|0)>0)Se(a);b=$f(a,b,0)|0;a=a+8|0;d=c[a>>2]|0;c[d>>2]=b;c[d+8>>2]=71;c[a>>2]=(c[a>>2]|0)+16;return b+24|0}function Sc(a,b,e){a=a|0;b=b|0;e=e|0;var f=0,g=0,h=0,i=0;f=c[a+16>>2]|0;do if((b|0)<=0){if((b|0)>=-1000999){b=(c[a+8>>2]|0)+(b<<4)|0;break}if((b|0)==-1001e3){b=(c[a+12>>2]|0)+40|0;break}g=-1001e3-b|0;b=c[f>>2]|0;if((c[b+8>>2]|0)==22)b=12928;else{b=c[b>>2]|0;b=(g|0)>(d[b+6>>0]|0|0)?12928:b+16+(g+-1<<4)|0}}else{b=(c[f>>2]|0)+(b<<4)|0;b=b>>>0<(c[a+8>>2]|0)>>>0?b:12928}while(0);a:do switch(c[b+8>>2]&63|0){case 38:{b=c[b>>2]|0;if((e|0)<=0){a=0;return a|0}if((d[b+6>>0]|0|0)<(e|0)){a=0;return a|0}else{f=15608;b=b+16+(e+-1<<4)|0;break a}}case 6:{b=c[b>>2]|0;f=c[b+12>>2]|0;if((e|0)<=0){a=0;return a|0}if((c[f+40>>2]|0)<(e|0)){a=0;return a|0}e=e+-1|0;g=c[(c[b+16+(e<<2)>>2]|0)+8>>2]|0;b=c[(c[f+28>>2]|0)+(e<<3)>>2]|0;if(!b){f=15608;b=g}else{f=b+16|0;b=g}break}default:{a=0;return a|0}}while(0);a=a+8|0;e=c[a>>2]|0;i=b;h=c[i+4>>2]|0;g=e;c[g>>2]=c[i>>2];c[g+4>>2]=h;c[e+8>>2]=c[b+8>>2];c[a>>2]=(c[a>>2]|0)+16;a=f;return a|0}function Tc(b,e,f){b=b|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,l=0;g=c[b+16>>2]|0;do if((e|0)<=0){if((e|0)>=-1000999){e=(c[b+8>>2]|0)+(e<<4)|0;break}if((e|0)==-1001e3){e=(c[b+12>>2]|0)+40|0;break}h=-1001e3-e|0;e=c[g>>2]|0;if((c[e+8>>2]|0)==22)e=12928;else{e=c[e>>2]|0;e=(h|0)>(d[e+6>>0]|0|0)?12928:e+16+(h+-1<<4)|0}}else{e=(c[g>>2]|0)+(e<<4)|0;e=e>>>0<(c[b+8>>2]|0)>>>0?e:12928}while(0);a:do switch(c[e+8>>2]&63|0){case 38:{e=c[e>>2]|0;if((f|0)<=0){b=0;return b|0}if((d[e+6>>0]|0|0)<(f|0)){b=0;return b|0}else{i=15608;h=e;e=e+16+(f+-1<<4)|0;break a}}case 6:{e=c[e>>2]|0;h=c[e+12>>2]|0;if((f|0)<=0){b=0;return b|0}if((c[h+40>>2]|0)<(f|0)){b=0;return b|0}i=f+-1|0;g=c[e+16+(i<<2)>>2]|0;f=c[g+8>>2]|0;e=c[(c[h+28>>2]|0)+(i<<3)>>2]|0;if(!e){i=15608;h=g;e=f}else{i=e+16|0;h=g;e=f}break}default:{b=0;return b|0}}while(0);f=b+8|0;g=c[f>>2]|0;l=g+-16|0;c[f>>2]=l;k=c[l+4>>2]|0;j=e;c[j>>2]=c[l>>2];c[j+4>>2]=k;c[e+8>>2]=c[g+-8>>2];e=c[f>>2]|0;if(!(c[e+8>>2]&64)){l=i;return l|0}g=c[e>>2]|0;if(!(a[g+5>>0]&3)){l=i;return l|0}e=h;if(!(a[e+5>>0]&4)){l=i;return l|0}xe(b,e,g);l=i;return l|0}function Uc(a,b,e){a=a|0;b=b|0;e=e|0;var f=0,g=0,h=0,i=0;i=c[a+16>>2]|0;h=(b|0)>0;do if(!h){if((b|0)>=-1000999){f=(c[a+8>>2]|0)+(b<<4)|0;break}if((b|0)==-1001e3){f=(c[a+12>>2]|0)+40|0;break}f=-1001e3-b|0;g=c[i>>2]|0;if((c[g+8>>2]|0)==22)f=12928;else{g=c[g>>2]|0;f=(f|0)>(d[g+6>>0]|0|0)?12928:g+16+(f+-1<<4)|0}}else{f=(c[i>>2]|0)+(b<<4)|0;f=f>>>0<(c[a+8>>2]|0)>>>0?f:12928}while(0);switch(c[f+8>>2]&63|0){case 6:{do if(!h){if((b|0)>=-1000999){f=(c[a+8>>2]|0)+(b<<4)|0;break}if((b|0)==-1001e3){f=(c[a+12>>2]|0)+40|0;break}g=-1001e3-b|0;f=c[i>>2]|0;if((c[f+8>>2]|0)==22)f=12928;else{f=c[f>>2]|0;f=(g|0)>(d[f+6>>0]|0|0)?12928:f+16+(g+-1<<4)|0}}else{f=(c[i>>2]|0)+(b<<4)|0;f=f>>>0<(c[a+8>>2]|0)>>>0?f:12928}while(0);e=c[(c[f>>2]|0)+16+(e+-1<<2)>>2]|0;return e|0}case 38:{e=(c[f>>2]|0)+16+(e+-1<<4)|0;return e|0}default:{e=0;return e|0}}return 0}function Vc(b,e,f,g,h){b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;var i=0,j=0,k=0;k=c[b+16>>2]|0;do if((e|0)<=0){if((e|0)>=-1000999){e=(c[b+8>>2]|0)+(e<<4)|0;break}if((e|0)==-1001e3){e=(c[b+12>>2]|0)+40|0;break}e=-1001e3-e|0;i=c[k>>2]|0;if((c[i+8>>2]|0)==22)e=12928;else{j=c[i>>2]|0;e=(e|0)>(d[j+6>>0]|0|0)?12928:j+16+(e+-1<<4)|0}}else{e=(c[k>>2]|0)+(e<<4)|0;e=e>>>0<(c[b+8>>2]|0)>>>0?e:12928}while(0);j=c[e>>2]|0;f=j+16+(f+-1<<2)|0;do if((g|0)<=0){if((g|0)>=-1000999){e=(c[b+8>>2]|0)+(g<<4)|0;break}if((g|0)==-1001e3){e=(c[b+12>>2]|0)+40|0;break}i=-1001e3-g|0;e=c[k>>2]|0;if((c[e+8>>2]|0)==22)e=12928;else{e=c[e>>2]|0;e=(i|0)>(d[e+6>>0]|0|0)?12928:e+16+(i+-1<<4)|0}}else{e=(c[k>>2]|0)+(g<<4)|0;e=e>>>0<(c[b+8>>2]|0)>>>0?e:12928}while(0);e=(c[e>>2]|0)+16+(h+-1<<2)|0;c[f>>2]=c[e>>2];e=c[e>>2]|0;if(!(a[e+5>>0]&3))return;if(!(a[j+5>>0]&4))return;xe(b,j,e);return}function Wc(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0;g=d+b|0;h=g+511|0;e=c[a+20>>2]|0;do if((e|0)>(c[a+24>>2]|0)?(i=(c[(c[a>>2]|0)+12>>2]|0)+(e+-1<<2)|0,j=c[i>>2]|0,(j&63|0)==4):0){e=j>>>6&255;f=e+(j>>>23)|0;if((e|0)>(b|0)|(f+1|0)<(b|0)?(e|0)<(b|0)|(e|0)>(g|0):0)break;d=(e|0)<(b|0)?e:b;c[i>>2]=((f|0)<(g|0)?h:f)-d<<23|d<<6&16320|j&8372287;return}while(0);Xc(a,b<<6|(d<<23)+-8388608|4)|0;return}function Xc(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;q=c[b>>2]|0;o=b+28|0;e=c[o>>2]|0;r=b+20|0;m=c[r>>2]|0;do if((e|0)!=-1){n=c[q+12>>2]|0;while(1){j=n+(e<<2)|0;i=c[j>>2]|0;h=(i>>>14)+-131071|0;g=e;e=(h|0)==-1?-1:e+1+h|0;if((g|0)>0?(k=j+-4|0,l=c[k>>2]|0,(a[4148+(l&63)>>0]|0)<0):0){f=k;h=l}else{f=j;h=i}if((h&63|0)==28){c[f>>2]=h&8372224|h>>>23<<6|27;f=m+~g|0;if((((f|0)>-1?f:0-f|0)|0)>131071){e=8;break}f=c[j>>2]&16383|(f<<14)+2147467264}else{f=m+~g|0;if((((f|0)>-1?f:0-f|0)|0)>131071){e=11;break}f=(f<<14)+2147467264|i&16383}c[j>>2]=f;if((e|0)==-1){e=14;break}}if((e|0)==8)Ve(c[b+12>>2]|0,2472);else if((e|0)==11)Ve(c[b+12>>2]|0,2472);else if((e|0)==14){p=c[r>>2]|0;break}}else p=m;while(0);c[o>>2]=-1;e=q+48|0;if((p|0)<(c[e>>2]|0)){f=c[q+12>>2]|0;e=p}else{p=q+12|0;f=ef(c[(c[b+12>>2]|0)+52>>2]|0,c[p>>2]|0,e,4,2147483645,2499)|0;c[p>>2]=f;e=c[r>>2]|0}c[f+(e<<2)>>2]=d;f=c[r>>2]|0;g=q+52|0;e=b+12|0;if((f|0)<(c[g>>2]|0)){d=q+20|0;q=f;b=c[e>>2]|0;b=b+8|0;b=c[b>>2]|0;d=c[d>>2]|0;q=d+(q<<2)|0;c[q>>2]=b;q=c[r>>2]|0;b=q+1|0;c[r>>2]=b;return q|0}else{d=q+20|0;c[d>>2]=ef(c[(c[e>>2]|0)+52>>2]|0,c[d>>2]|0,g,4,2147483645,2499)|0;q=c[r>>2]|0;b=c[e>>2]|0;b=b+8|0;b=c[b>>2]|0;d=c[d>>2]|0;q=d+(q<<2)|0;c[q>>2]=b;q=c[r>>2]|0;b=q+1|0;c[r>>2]=b;return q|0}return 0}function Yc(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return Xc(a,c<<6|b|d<<23|e<<14)|0}function Zc(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,i=0;i=a+28|0;h=c[i>>2]|0;c[i>>2]=-1;i=Xc(a,2147450903)|0;if((h|0)==-1){a=i;return a|0}if((i|0)==-1){a=h;return a|0}f=c[(c[a>>2]|0)+12>>2]|0;b=i;while(1){e=f+(b<<2)|0;g=c[e>>2]|0;d=(g>>>14)+-131071|0;d=(d|0)==-1?-1:b+1+d|0;if((d|0)==-1){d=g;break}else b=d}b=h+~b|0;if((((b|0)>-1?b:0-b|0)|0)>131071)Ve(c[a+12>>2]|0,2472);c[e>>2]=(b<<14)+2147467264|d&16383;a=i;return a|0}function _c(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return Xc(a,c<<6|b|d<<14)|0}function $c(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0;if((d|0)==-1)return;e=c[b>>2]|0;if((e|0)==-1){c[b>>2]=d;return}h=c[(c[a>>2]|0)+12>>2]|0;while(1){g=h+(e<<2)|0;f=c[g>>2]|0;b=(f>>>14)+-131071|0;b=(b|0)==-1?-1:e+1+b|0;if((b|0)==-1)break;else e=b}b=~e+d|0;if((((b|0)>-1?b:0-b|0)|0)>131071)Ve(c[a+12>>2]|0,2472);c[g>>2]=f&16383|(b<<14)+2147467264;return}function ad(a,b,c){a=a|0;b=b|0;c=c|0;Xc(a,b<<6|(c<<23)+8388608|31)|0;return}function bd(a){a=a|0;var b=0;b=c[a+20>>2]|0;c[a+24>>2]=b;return b|0}function cd(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0;if((c[b+20>>2]|0)==(e|0)){c[b+24>>2]=e;f=b+28|0;if((d|0)==-1)return;g=c[f>>2]|0;if((g|0)==-1){c[f>>2]=d;return}j=c[(c[b>>2]|0)+12>>2]|0;while(1){i=j+(g<<2)|0;h=c[i>>2]|0;f=(h>>>14)+-131071|0;f=(f|0)==-1?-1:g+1+f|0;if((f|0)==-1)break;else g=f}f=~g+d|0;if((((f|0)>-1?f:0-f|0)|0)>131071)Ve(c[b+12>>2]|0,2472);c[i>>2]=(f<<14)+2147467264|h&16383;return}if((d|0)==-1)return;m=c[(c[b>>2]|0)+12>>2]|0;j=d;while(1){d=m+(j<<2)|0;i=c[d>>2]|0;h=(i>>>14)+-131071|0;g=j;j=(h|0)==-1?-1:j+1+h|0;if((g|0)>0?(k=d+-4|0,l=c[k>>2]|0,(a[4148+(l&63)>>0]|0)<0):0){f=k;h=l}else{f=d;h=i}if((h&63|0)==28){c[f>>2]=h&8372224|h>>>23<<6|27;f=~g+e|0;if((((f|0)>-1?f:0-f|0)|0)>131071){f=17;break}f=c[d>>2]&16383|(f<<14)+2147467264}else{f=~g+e|0;if((((f|0)>-1?f:0-f|0)|0)>131071){f=20;break}f=i&16383|(f<<14)+2147467264}c[d>>2]=f;if((j|0)==-1){f=23;break}}if((f|0)==17)Ve(c[b+12>>2]|0,2472);else if((f|0)==20)Ve(c[b+12>>2]|0,2472);else if((f|0)==23)return}function dd(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0;c[a+24>>2]=c[a+20>>2];d=a+28|0;if((b|0)==-1)return;e=c[d>>2]|0;if((e|0)==-1){c[d>>2]=b;return}h=c[(c[a>>2]|0)+12>>2]|0;while(1){g=h+(e<<2)|0;f=c[g>>2]|0;d=(f>>>14)+-131071|0;d=(d|0)==-1?-1:e+1+d|0;if((d|0)==-1)break;else e=d}d=~e+b|0;if((((d|0)>-1?d:0-d|0)|0)>131071)Ve(c[a+12>>2]|0,2472);c[g>>2]=(d<<14)+2147467264|f&16383;return}function ed(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0;if((b|0)==-1)return;e=c[(c[a>>2]|0)+12>>2]|0;a=(d<<6)+64&16320;do{f=e+(b<<2)|0;g=c[f>>2]|0;d=(g>>>14)+-131071|0;c[f>>2]=g&-16321|a;b=(d|0)==-1?-1:b+1+d|0}while((b|0)!=-1);return}function fd(a,b,c){a=a|0;b=b|0;c=c|0;b=b<<6;if((c|0)<262144){c=Xc(a,b|c<<14|1)|0;return c|0}else{b=Xc(a,b|2)|0;Xc(a,c<<6|39)|0;c=b;return c|0}return 0}function gd(b,e){b=b|0;e=e|0;var f=0;e=(d[b+48>>0]|0)+e|0;f=(c[b>>2]|0)+78|0;if((e|0)<=(d[f>>0]|0|0))return;if((e|0)>249)Ve(c[b+12>>2]|0,2507);a[f>>0]=e;return}function hd(b,e){b=b|0;e=e|0;var f=0,g=0;g=b+48|0;e=(d[g>>0]|0)+e|0;f=(c[b>>2]|0)+78|0;if((e|0)<=(d[f>>0]|0|0)){b=e&255;a[g>>0]=b;return}if((e|0)>249)Ve(c[b+12>>2]|0,2507);b=e&255;a[f>>0]=b;a[g>>0]=b;return}function id(a,b){a=a|0;b=b|0;var e=0,f=0;e=i;i=i+16|0;f=e;c[f>>2]=b;c[f+8>>2]=d[b+4>>0]|0|64;b=jd(a,f,f)|0;i=e;return b|0}function jd(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;p=i;i=i+16|0;j=p;o=c[(c[b+12>>2]|0)+52>>2]|0;k=gg(o,c[b+4>>2]|0,d)|0;n=c[b>>2]|0;l=k+8|0;if(((c[l>>2]|0)==3?(h[j>>3]=+h[k>>3]+6755399441055744.0,f=c[j>>2]|0,g=c[n+8>>2]|0,(c[g+(f<<4)+8>>2]|0)==(c[e+8>>2]|0)):0)?Ag(0,g+(f<<4)|0,e)|0:0){o=f;i=p;return o|0}j=n+44|0;d=c[j>>2]|0;b=b+32|0;m=c[b>>2]|0;h[k>>3]=+(m|0);c[l>>2]=3;if((m|0)<(d|0))f=d;else{f=n+8|0;c[f>>2]=ef(o,c[f>>2]|0,j,16,67108863,2542)|0;f=c[j>>2]|0}g=c[n+8>>2]|0;if((d|0)<(f|0)){f=c[j>>2]|0;do{c[g+(d<<4)+8>>2]=0;d=d+1|0}while((d|0)<(f|0))}j=e;k=c[j+4>>2]|0;l=g+(m<<4)|0;c[l>>2]=c[j>>2];c[l+4>>2]=k;l=e+8|0;c[g+(m<<4)+8>>2]=c[l>>2];c[b>>2]=(c[b>>2]|0)+1;if(!(c[l>>2]&64)){o=m;i=p;return o|0}d=c[e>>2]|0;if(!(a[d+5>>0]&3)){o=m;i=p;return o|0}if(!(a[n+5>>0]&4)){o=m;i=p;return o|0}xe(o,n,d);o=m;i=p;return o|0}function kd(a,b){a=a|0;b=+b;var e=0,f=0,g=0,j=0,k=0,l=0;j=i;i=i+32|0;e=j;g=j+8|0;h[e>>3]=b;f=c[(c[a+12>>2]|0)+52>>2]|0;h[g>>3]=b;c[g+8>>2]=3;if(b!=b|0.0!=0.0|b==0.0){k=f+8|0;l=c[k>>2]|0;c[k>>2]=l+16;f=Zf(f,e,8)|0;c[l>>2]=f;c[l+8>>2]=d[f+4>>0]|0|64;g=jd(a,(c[k>>2]|0)+-16|0,g)|0;c[k>>2]=(c[k>>2]|0)+-16;i=j;return g|0}else{l=jd(a,g,g)|0;i=j;return l|0}return 0}function ld(b,e,f){b=b|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0;switch(c[e>>2]|0){case 12:{b=(c[(c[b>>2]|0)+12>>2]|0)+(c[e+8>>2]<<2)|0;c[b>>2]=c[b>>2]&-8372225|(f<<14)+16384&8372224;return}case 13:{i=e+8|0;g=c[b>>2]|0;e=c[g+12>>2]|0;j=e+(c[i>>2]<<2)|0;c[j>>2]=c[j>>2]&8388607|(f<<23)+8388608;i=e+(c[i>>2]<<2)|0;e=b+48|0;f=d[e>>0]|0;c[i>>2]=f<<6|c[i>>2]&-16321;f=f+1|0;g=g+78|0;do if(f>>>0>(d[g>>0]|0)>>>0)if(f>>>0>249)Ve(c[b+12>>2]|0,2507);else{h=f&255;a[g>>0]=h;break}else h=f&255;while(0);a[e>>0]=h;return}default:return}}function md(a,b){a=a|0;b=b|0;switch(c[b>>2]|0){case 12:{c[b>>2]=6;b=b+8|0;c[b>>2]=(c[(c[(c[a>>2]|0)+12>>2]|0)+(c[b>>2]<<2)>>2]|0)>>>6&255;return}case 13:{a=(c[(c[a>>2]|0)+12>>2]|0)+(c[b+8>>2]<<2)|0;c[a>>2]=c[a>>2]&8388607|16777216;c[b>>2]=11;return}default:return}}function nd(b,e){b=b|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,k=0;switch(c[e>>2]|0){case 7:{c[e>>2]=6;return}case 8:{j=e+8|0;c[j>>2]=Xc(b,c[j>>2]<<23|5)|0;c[e>>2]=11;return}case 9:{i=e+8|0;g=c[i>>2]|0;j=g<<16;k=j>>16;h=g>>>16;f=h&255;if((k&256|0)==0?(d[b+46>>0]|0|0)<=(k|0):0){k=b+48|0;a[k>>0]=(a[k>>0]|0)+-1<<24>>24}if((g&-16777216|0)==117440512)if((d[b+46>>0]|0)>(f&255))f=7;else{f=b+48|0;a[f>>0]=(a[f>>0]|0)+-1<<24>>24;f=7}else f=6;c[i>>2]=Xc(b,h<<23&2139095040|f|j>>2)|0;c[e>>2]=11;return}case 12:{c[e>>2]=6;k=e+8|0;c[k>>2]=(c[(c[(c[b>>2]|0)+12>>2]|0)+(c[k>>2]<<2)>>2]|0)>>>6&255;return}case 13:{k=(c[(c[b>>2]|0)+12>>2]|0)+(c[e+8>>2]<<2)|0;c[k>>2]=c[k>>2]&8388607|16777216;c[e>>2]=11;return}default:return}}function od(b,e){b=b|0;e=e|0;var f=0,g=0,h=0;nd(b,e);if(((c[e>>2]|0)==6?(f=c[e+8>>2]|0,(f&256|0)==0):0)?(d[b+46>>0]|0|0)<=(f|0):0){h=b+48|0;a[h>>0]=(a[h>>0]|0)+-1<<24>>24}f=b+48|0;g=(d[f>>0]|0)+1|0;h=(c[b>>2]|0)+78|0;if(g>>>0<=(d[h>>0]|0)>>>0){h=g&255;a[f>>0]=h;h=h&255;h=h+-1|0;pd(b,e,h);return}if(g>>>0>249)Ve(c[b+12>>2]|0,2507);g=g&255;a[h>>0]=g;h=g;a[f>>0]=h;h=h&255;h=h+-1|0;pd(b,e,h);return}function pd(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0;qd(b,d,e);n=(c[d>>2]|0)==10;z=d+16|0;do if(n?(k=c[d+8>>2]|0,(k|0)!=-1):0){f=c[z>>2]|0;if((f|0)==-1){c[z>>2]=k;break}j=c[(c[b>>2]|0)+12>>2]|0;while(1){h=j+(f<<2)|0;i=c[h>>2]|0;g=(i>>>14)+-131071|0;g=(g|0)==-1?-1:f+1+g|0;if((g|0)==-1){g=i;break}else f=g}f=k+~f|0;if((((f|0)>-1?f:0-f|0)|0)>131071)Ve(c[b+12>>2]|0,2472);else{c[h>>2]=(f<<14)+2147467264|g&16383;break}}while(0);f=c[z>>2]|0;v=d+20|0;j=c[v>>2]|0;if((f|0)==(j|0)){c[z>>2]=-1;c[v>>2]=-1;C=d+8|0;c[C>>2]=e;c[d>>2]=6;return}a:do if((f|0)==-1)k=18;else{i=c[(c[b>>2]|0)+12>>2]|0;while(1){g=i+(f<<2)|0;if((f|0)>0?(l=c[g+-4>>2]|0,(a[4148+(l&63)>>0]|0)<0):0)h=l;else h=c[g>>2]|0;if((h&63|0)!=28){k=25;break a}k=((c[g>>2]|0)>>>14)+-131071|0;f=(k|0)==-1?-1:f+1+k|0;if((f|0)==-1){k=18;break}}}while(0);b:do if((k|0)==18)if((j|0)==-1){u=-1;C=-1}else{i=c[(c[b>>2]|0)+12>>2]|0;f=j;while(1){g=i+(f<<2)|0;if((f|0)>0?(m=c[g+-4>>2]|0,(a[4148+(m&63)>>0]|0)<0):0)h=m;else h=c[g>>2]|0;if((h&63|0)!=28){k=25;break b}l=((c[g>>2]|0)>>>14)+-131071|0;f=(l|0)==-1?-1:f+1+l|0;if((f|0)==-1){u=-1;C=-1;break}}}while(0);do if((k|0)==25){m=b+28|0;do if(!n){k=c[m>>2]|0;c[m>>2]=-1;l=Xc(b,2147450903)|0;if((k|0)!=-1)if((l|0)!=-1){i=c[(c[b>>2]|0)+12>>2]|0;f=l;while(1){h=i+(f<<2)|0;j=c[h>>2]|0;g=(j>>>14)+-131071|0;g=(g|0)==-1?-1:f+1+g|0;if((g|0)==-1){g=j;break}else f=g}f=k+~f|0;if((((f|0)>-1?f:0-f|0)|0)>131071)Ve(c[b+12>>2]|0,2472);else{c[h>>2]=(f<<14)+2147467264|g&16383;o=l;break}}else o=k;else o=l}else o=-1;while(0);j=b+20|0;n=b+24|0;c[n>>2]=c[j>>2];l=e<<6;k=Xc(b,l|16387)|0;c[n>>2]=c[j>>2];l=Xc(b,l|8388611)|0;c[n>>2]=c[j>>2];if((o|0)!=-1){f=c[m>>2]|0;if((f|0)==-1){c[m>>2]=o;u=k;C=l;break}j=c[(c[b>>2]|0)+12>>2]|0;while(1){h=j+(f<<2)|0;i=c[h>>2]|0;g=(i>>>14)+-131071|0;g=(g|0)==-1?-1:f+1+g|0;if((g|0)==-1){g=i;break}else f=g}f=o+~f|0;if((((f|0)>-1?f:0-f|0)|0)>131071)Ve(c[b+12>>2]|0,2472);else{c[h>>2]=(f<<14)+2147467264|g&16383;u=k;C=l;break}}else{u=k;C=l}}while(0);o=c[b+20>>2]|0;c[b+24>>2]=o;f=c[v>>2]|0;c:do if((f|0)!=-1){l=e<<6;m=l&16320;n=c[(c[b>>2]|0)+12>>2]|0;if((e|0)==255){while(1){k=n+(f<<2)|0;j=c[k>>2]|0;i=(j>>>14)+-131071|0;h=f;f=(i|0)==-1?-1:f+1+i|0;if((h|0)>0?(p=k+-4|0,q=c[p>>2]|0,(a[4148+(q&63)>>0]|0)<0):0){g=p;i=q}else{g=k;i=j}if((i&63|0)==28){c[g>>2]=i&8372224|i>>>23<<6|27;g=o+~h|0;if((((g|0)>-1?g:0-g|0)|0)>131071){k=60;break}g=c[k>>2]&16383|(g<<14)+2147467264}else{g=u+~h|0;if((((g|0)>-1?g:0-g|0)|0)>131071){k=63;break}g=j&16383|(g<<14)+2147467264}c[k>>2]=g;if((f|0)==-1)break c}if((k|0)==60){q=b+12|0;q=c[q>>2]|0;Ve(q,2472)}else if((k|0)==63){q=b+12|0;q=c[q>>2]|0;Ve(q,2472)}}else r=f;while(1){j=n+(r<<2)|0;i=c[j>>2]|0;q=(i>>>14)+-131071|0;h=r;r=(q|0)==-1?-1:r+1+q|0;if((h|0)>0?(s=j+-4|0,t=c[s>>2]|0,(a[4148+(t&63)>>0]|0)<0):0){g=s;f=t}else{g=j;f=i}if((f&63|0)==28){if((f>>>23|0)==(e|0))f=f&8372224|l|27;else f=f&-16321|m;c[g>>2]=f;f=o+~h|0;if((((f|0)>-1?f:0-f|0)|0)>131071){k=60;break}f=c[j>>2]&16383|(f<<14)+2147467264}else{f=u+~h|0;if((((f|0)>-1?f:0-f|0)|0)>131071){k=63;break}f=i&16383|(f<<14)+2147467264}c[j>>2]=f;if((r|0)==-1)break c}if((k|0)==60){u=b+12|0;u=c[u>>2]|0;Ve(u,2472)}else if((k|0)==63){u=b+12|0;u=c[u>>2]|0;Ve(u,2472)}}while(0);f=c[z>>2]|0;if((f|0)==-1){c[z>>2]=-1;c[v>>2]=-1;C=d+8|0;c[C>>2]=e;c[d>>2]=6;return}l=e<<6;m=l&16320;n=c[(c[b>>2]|0)+12>>2]|0;if((e|0)==255){while(1){k=n+(f<<2)|0;j=c[k>>2]|0;u=(j>>>14)+-131071|0;h=f;f=(u|0)==-1?-1:f+1+u|0;if((h|0)>0?(w=k+-4|0,x=c[w>>2]|0,(a[4148+(x&63)>>0]|0)<0):0){g=w;i=x}else{g=k;i=j}if((i&63|0)==28){c[g>>2]=i&8372224|i>>>23<<6|27;g=o+~h|0;if((((g|0)>-1?g:0-g|0)|0)>131071){k=85;break}g=c[k>>2]&16383|(g<<14)+2147467264}else{g=C+~h|0;if((((g|0)>-1?g:0-g|0)|0)>131071){k=88;break}g=j&16383|(g<<14)+2147467264}c[k>>2]=g;if((f|0)==-1){k=91;break}}if((k|0)==85){x=b+12|0;x=c[x>>2]|0;Ve(x,2472)}else if((k|0)==88){x=b+12|0;x=c[x>>2]|0;Ve(x,2472)}else if((k|0)==91){c[z>>2]=-1;c[v>>2]=-1;C=d+8|0;c[C>>2]=e;c[d>>2]=6;return}}else y=f;while(1){j=n+(y<<2)|0;i=c[j>>2]|0;x=(i>>>14)+-131071|0;h=y;y=(x|0)==-1?-1:y+1+x|0;if((h|0)>0?(A=j+-4|0,B=c[A>>2]|0,(a[4148+(B&63)>>0]|0)<0):0){g=A;f=B}else{g=j;f=i}if((f&63|0)==28){if((f>>>23|0)==(e|0))f=f&8372224|l|27;else f=f&-16321|m;c[g>>2]=f;f=o+~h|0;if((((f|0)>-1?f:0-f|0)|0)>131071){k=85;break}f=c[j>>2]&16383|(f<<14)+2147467264}else{f=C+~h|0;if((((f|0)>-1?f:0-f|0)|0)>131071){k=88;break}f=i&16383|(f<<14)+2147467264}c[j>>2]=f;if((y|0)==-1){k=91;break}}if((k|0)==85){e=b+12|0;e=c[e>>2]|0;Ve(e,2472)}else if((k|0)==88){e=b+12|0;e=c[e>>2]|0;Ve(e,2472)}else if((k|0)==91){c[z>>2]=-1;c[v>>2]=-1;C=d+8|0;c[C>>2]=e;c[d>>2]=6;return}}function qd(a,b,e){a=a|0;b=b|0;e=e|0;var f=0,g=0,j=0,k=0,l=0,m=0,n=0.0;m=i;i=i+32|0;g=m+16|0;j=m;nd(a,b);f=c[b>>2]|0;a:do switch(f|0){case 1:{j=e+1|0;f=c[a+20>>2]|0;do if((f|0)>(c[a+24>>2]|0)?(k=(c[(c[a>>2]|0)+12>>2]|0)+(f+-1<<2)|0,l=c[k>>2]|0,(l&63|0)==4):0){f=l>>>6&255;g=f+(l>>>23)|0;if((f|0)>(e|0)|(g+1|0)<(e|0)?(f|0)<(e|0)|(f|0)>(j|0):0)break;a=(f|0)<(e|0)?f:e;c[k>>2]=a<<6&16320|l&8372287|((g|0)<=(e|0)?e:g)-a<<23;break a}while(0);Xc(a,e<<6|4)|0;break}case 2:case 3:{Xc(a,e<<6|((f|0)==2&1)<<23|3)|0;break}case 4:{f=c[b+8>>2]|0;g=e<<6;if((f|0)<262144){Xc(a,g|f<<14|1)|0;break a}else{Xc(a,g|2)|0;Xc(a,f<<6|39)|0;break a}}case 5:{n=+h[b+8>>3];h[g>>3]=n;f=c[(c[a+12>>2]|0)+52>>2]|0;h[j>>3]=n;c[j+8>>2]=3;if(n!=n|0.0!=0.0|n==0.0){l=f+8|0;k=c[l>>2]|0;c[l>>2]=k+16;g=Zf(f,g,8)|0;c[k>>2]=g;c[k+8>>2]=d[g+4>>0]|0|64;g=jd(a,(c[l>>2]|0)+-16|0,j)|0;c[l>>2]=(c[l>>2]|0)+-16}else g=jd(a,j,j)|0;f=e<<6;if((g|0)<262144){Xc(a,f|g<<14|1)|0;break a}else{Xc(a,f|2)|0;Xc(a,g<<6|39)|0;break a}}case 11:{a=(c[(c[a>>2]|0)+12>>2]|0)+(c[b+8>>2]<<2)|0;c[a>>2]=c[a>>2]&-16321|e<<6&16320;break}case 6:{f=c[b+8>>2]|0;if((f|0)!=(e|0))Xc(a,f<<23|e<<6)|0;break}default:{i=m;return}}while(0);c[b+8>>2]=e;c[b>>2]=6;i=m;return}function rd(b,e){b=b|0;e=e|0;var f=0,g=0,h=0,i=0;nd(b,e);if((c[e>>2]|0)==6){g=e+8|0;h=c[g>>2]|0;if((c[e+16>>2]|0)==(c[e+20>>2]|0)){b=h;return b|0}if((h|0)>=(d[b+46>>0]|0|0)){pd(b,e,h);b=c[g>>2]|0;return b|0}}nd(b,e);if(((c[e>>2]|0)==6?(f=c[e+8>>2]|0,(f&256|0)==0):0)?(d[b+46>>0]|0|0)<=(f|0):0){h=b+48|0;a[h>>0]=(a[h>>0]|0)+-1<<24>>24}f=b+48|0;g=(d[f>>0]|0)+1|0;h=(c[b>>2]|0)+78|0;do if(g>>>0>(d[h>>0]|0)>>>0)if(g>>>0>249)Ve(c[b+12>>2]|0,2507);else{i=g&255;a[h>>0]=i;break}else i=g&255;while(0);a[f>>0]=i;pd(b,e,(i&255)+-1|0);b=c[e+8>>2]|0;return b|0}function sd(a,b){a=a|0;b=b|0;if((c[b>>2]|0)==8?(c[b+16>>2]|0)==(c[b+20>>2]|0):0)return;rd(a,b)|0;return}function td(a,b){a=a|0;b=b|0;if((c[b+16>>2]|0)==(c[b+20>>2]|0)){nd(a,b);return}else{rd(a,b)|0;return}}function ud(a,b){a=a|0;b=b|0;var e=0,f=0,g=0,j=0,k=0,l=0,m=0.0,n=0;l=i;i=i+32|0;j=l+16|0;k=l;if((c[b+16>>2]|0)==(c[b+20>>2]|0))nd(a,b);else rd(a,b)|0;f=c[b>>2]|0;switch(f|0){case 1:case 3:case 2:{if((c[a+32>>2]|0)<256){if((f|0)==1){c[k+8>>2]=0;c[j>>2]=c[a+4>>2];c[j+8>>2]=69;e=jd(a,j,k)|0}else{c[j>>2]=(f|0)==2&1;c[j+8>>2]=1;e=jd(a,j,j)|0}c[b+8>>2]=e;c[b>>2]=4;b=e|256;i=l;return b|0}break}case 5:{f=b+8|0;m=+h[f>>3];h[j>>3]=m;e=c[(c[a+12>>2]|0)+52>>2]|0;h[k>>3]=m;c[k+8>>2]=3;if(m!=m|0.0!=0.0|m==0.0){g=e+8|0;n=c[g>>2]|0;c[g>>2]=n+16;e=Zf(e,j,8)|0;c[n>>2]=e;c[n+8>>2]=d[e+4>>0]|0|64;e=jd(a,(c[g>>2]|0)+-16|0,k)|0;c[g>>2]=(c[g>>2]|0)+-16}else e=jd(a,k,k)|0;c[f>>2]=e;c[b>>2]=4;g=15;break}case 4:{e=c[b+8>>2]|0;g=15;break}default:{}}if((g|0)==15?(e|0)<256:0){n=e|256;i=l;return n|0}n=rd(a,b)|0;i=l;return n|0}function vd(b,f,g){b=b|0;f=f|0;g=g|0;var h=0;switch(c[f>>2]|0){case 7:{if(((c[g>>2]|0)==6?(h=c[g+8>>2]|0,(h&256|0)==0):0)?(d[b+46>>0]|0)<=(h|0):0){h=b+48|0;a[h>>0]=(a[h>>0]|0)+-1<<24>>24}pd(b,g,c[f+8>>2]|0);return}case 8:{Xc(b,(rd(b,g)|0)<<6|c[f+8>>2]<<23|9)|0;break}case 9:{f=f+8|0;h=(a[f+3>>0]|0)==7?10:8;Xc(b,(ud(b,g)|0)<<14|h|d[f+2>>0]<<6|e[f>>1]<<23)|0;break}default:{}}if((c[g>>2]|0)!=6)return;h=c[g+8>>2]|0;if(h&256|0)return;if((d[b+46>>0]|0)>(h|0))return;b=b+48|0;a[b>>0]=(a[b>>0]|0)+-1<<24>>24;return}function wd(b,e,f){b=b|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0;rd(b,e)|0;g=e+8|0;i=c[g>>2]|0;if((c[e>>2]|0)==6&(i&256|0)==0?(d[b+46>>0]|0|0)<=(i|0):0){k=b+48|0;a[k>>0]=(a[k>>0]|0)+-1<<24>>24}k=b+48|0;j=d[k>>0]|0;c[g>>2]=j;c[e>>2]=6;g=j+2|0;e=(c[b>>2]|0)+78|0;do if(g>>>0>(d[e>>0]|0)>>>0)if(g>>>0>249)Ve(c[b+12>>2]|0,2507);else{h=g&255;a[e>>0]=h;break}else h=g&255;while(0);a[k>>0]=h;Xc(b,i<<23|j<<6|(ud(b,f)|0)<<14|12)|0;if((c[f>>2]|0)!=6)return;g=c[f+8>>2]|0;if(g&256|0)return;if((d[b+46>>0]|0|0)>(g|0))return;a[k>>0]=(a[k>>0]|0)+-1<<24>>24;return}function xd(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0;nd(b,d);switch(c[d>>2]|0){case 10:{h=d+8|0;k=c[h>>2]|0;g=(c[(c[b>>2]|0)+12>>2]|0)+(k<<2)|0;if((k|0)>0?(i=g+-4|0,e=c[i>>2]|0,(a[4148+(e&63)>>0]|0)<0):0)f=i;else{f=g;e=c[g>>2]|0}c[f>>2]=((e&16320|0)==0&1)<<6|e&-16321;k=c[h>>2]|0;f=7;break}case 2:case 5:case 4:break;default:{k=yd(b,d,0)|0;f=7}}do if((f|0)==7?(j=d+20|0,(k|0)!=-1):0){e=c[j>>2]|0;if((e|0)==-1){c[j>>2]=k;break}i=c[(c[b>>2]|0)+12>>2]|0;while(1){g=i+(e<<2)|0;h=c[g>>2]|0;f=(h>>>14)+-131071|0;f=(f|0)==-1?-1:e+1+f|0;if((f|0)==-1){f=h;break}else e=f}e=k+~e|0;if((((e|0)>-1?e:0-e|0)|0)>131071)Ve(c[b+12>>2]|0,2472);else{c[g>>2]=(e<<14)+2147467264|f&16383;break}}while(0);k=d+16|0;j=c[k>>2]|0;c[b+24>>2]=c[b+20>>2];e=b+28|0;if((j|0)==-1){c[k>>2]=-1;return}f=c[e>>2]|0;if((f|0)==-1){c[e>>2]=j;c[k>>2]=-1;return}i=c[(c[b>>2]|0)+12>>2]|0;while(1){h=i+(f<<2)|0;g=c[h>>2]|0;e=(g>>>14)+-131071|0;e=(e|0)==-1?-1:f+1+e|0;if((e|0)==-1)break;else f=e}e=j+~f|0;if((((e|0)>-1?e:0-e|0)|0)>131071)Ve(c[b+12>>2]|0,2472);c[h>>2]=(e<<14)+2147467264|g&16383;c[k>>2]=-1;return}function yd(b,e,f){b=b|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0;switch(c[e>>2]|0){case 11:{g=c[(c[(c[b>>2]|0)+12>>2]|0)+(c[e+8>>2]<<2)>>2]|0;if((g&63|0)==20){k=b+20|0;c[k>>2]=(c[k>>2]|0)+-1;Xc(b,((f|0)==0&1)<<14|g>>>23<<6|27)|0;f=b+28|0;k=c[f>>2]|0;c[f>>2]=-1;f=Xc(b,2147450903)|0;if((k|0)==-1){b=f;return b|0}if((f|0)==-1){b=k;return b|0}j=c[(c[b>>2]|0)+12>>2]|0;g=f;while(1){i=j+(g<<2)|0;e=c[i>>2]|0;h=(e>>>14)+-131071|0;h=(h|0)==-1?-1:g+1+h|0;if((h|0)==-1){h=e;break}else g=h}g=k+~g|0;if((((g|0)>-1?g:0-g|0)|0)>131071)Ve(c[b+12>>2]|0,2472);c[i>>2]=(g<<14)+2147467264|h&16383;b=f;return b|0}else k=10;break}case 6:{k=17;break}default:k=10}if((k|0)==10){g=b+48|0;h=(d[g>>0]|0)+1|0;i=(c[b>>2]|0)+78|0;do if(h>>>0>(d[i>>0]|0)>>>0)if(h>>>0>249)Ve(c[b+12>>2]|0,2507);else{j=h&255;a[i>>0]=j;break}else j=h&255;while(0);a[g>>0]=j;qd(b,e,(j&255)+-1|0);if((c[e>>2]|0)==6)k=17;else g=c[e+8>>2]|0}if((k|0)==17){g=c[e+8>>2]|0;if((g&256|0)==0?(d[b+46>>0]|0|0)<=(g|0):0){k=b+48|0;a[k>>0]=(a[k>>0]|0)+-1<<24>>24}}Xc(b,f<<14|g<<23|16348)|0;f=b+28|0;k=c[f>>2]|0;c[f>>2]=-1;f=Xc(b,2147450903)|0;if((k|0)==-1){b=f;return b|0}if((f|0)==-1){b=k;return b|0}j=c[(c[b>>2]|0)+12>>2]|0;g=f;while(1){i=j+(g<<2)|0;e=c[i>>2]|0;h=(e>>>14)+-131071|0;h=(h|0)==-1?-1:g+1+h|0;if((h|0)==-1){h=e;break}else g=h}g=k+~g|0;if((((g|0)>-1?g:0-g|0)|0)>131071)Ve(c[b+12>>2]|0,2472);c[i>>2]=(g<<14)+2147467264|h&16383;b=f;return b|0}function zd(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0;nd(a,b);switch(c[b>>2]|0){case 10:{i=c[b+8>>2]|0;d=4;break}case 3:case 1:break;default:{i=yd(a,b,1)|0;d=4}}do if((d|0)==4?(e=b+16|0,(i|0)!=-1):0){d=c[e>>2]|0;if((d|0)==-1){c[e>>2]=i;break}h=c[(c[a>>2]|0)+12>>2]|0;while(1){f=h+(d<<2)|0;g=c[f>>2]|0;e=(g>>>14)+-131071|0;e=(e|0)==-1?-1:d+1+e|0;if((e|0)==-1){e=g;break}else d=e}d=i+~d|0;if((((d|0)>-1?d:0-d|0)|0)>131071)Ve(c[a+12>>2]|0,2472);else{c[f>>2]=(d<<14)+2147467264|e&16383;break}}while(0);b=b+20|0;i=c[b>>2]|0;c[a+24>>2]=c[a+20>>2];d=a+28|0;if((i|0)==-1){c[b>>2]=-1;return}e=c[d>>2]|0;if((e|0)==-1){c[d>>2]=i;c[b>>2]=-1;return}h=c[(c[a>>2]|0)+12>>2]|0;while(1){g=h+(e<<2)|0;f=c[g>>2]|0;d=(f>>>14)+-131071|0;d=(d|0)==-1?-1:e+1+d|0;if((d|0)==-1)break;else e=d}d=i+~e|0;if((((d|0)>-1?d:0-d|0)|0)>131071)Ve(c[a+12>>2]|0,2472);c[g>>2]=(d<<14)+2147467264|f&16383;c[b>>2]=-1;return}function Ad(d,e,f){d=d|0;e=e|0;f=f|0;var g=0;g=e+8|0;a[g+2>>0]=c[g>>2];b[g>>1]=ud(d,f)|0;a[g+3>>0]=(c[e>>2]|0)==8?8:7;c[e>>2]=9;return}function Bd(b,e,f,g){b=b|0;e=e|0;f=f|0;g=g|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;s=i;i=i+32|0;l=s;c[l+20>>2]=-1;c[l+16>>2]=-1;c[l>>2]=5;h[l+8>>3]=0.0;switch(e|0){case 0:{if(((c[f>>2]|0)==5?(c[f+16>>2]|0)==-1:0)?(c[f+20>>2]|0)==-1:0){r=f+8|0;h[r>>3]=-+h[r>>3];i=s;return}rd(b,f)|0;Cd(b,19,f,l,g);i=s;return}case 1:{nd(b,f);switch(c[f>>2]|0){case 3:case 1:{c[f>>2]=2;break}case 2:case 5:case 4:{c[f>>2]=3;break}case 10:{m=c[f+8>>2]|0;l=(c[(c[b>>2]|0)+12>>2]|0)+(m<<2)|0;if(!((m|0)>0?(k=l+-4|0,j=c[k>>2]|0,(a[4148+(j&63)>>0]|0)<0):0)){k=l;j=c[l>>2]|0}c[k>>2]=((j&16320|0)==0&1)<<6|j&-16321;break}case 6:{n=21;break}case 11:{j=b+48|0;k=(d[j>>0]|0)+1|0;l=(c[b>>2]|0)+78|0;do if(k>>>0>(d[l>>0]|0)>>>0)if(k>>>0>249)Ve(c[b+12>>2]|0,2507);else{m=k&255;a[l>>0]=m;break}else m=k&255;while(0);a[j>>0]=m;qd(b,f,(m&255)+-1|0);if((c[f>>2]|0)==6)n=21;else{k=f+8|0;j=k;k=c[k>>2]|0;n=24}break}default:{}}if((n|0)==21){j=f+8|0;k=c[j>>2]|0;if((k&256|0)==0?(d[b+46>>0]|0)<=(k|0):0){n=b+48|0;a[n>>0]=(a[n>>0]|0)+-1<<24>>24;n=24}else n=24}if((n|0)==24){c[j>>2]=Xc(b,k<<23|20)|0;c[f>>2]=11}n=f+20|0;j=c[n>>2]|0;m=f+16|0;k=c[m>>2]|0;c[n>>2]=k;c[m>>2]=j;if((k|0)!=-1){e=c[(c[b>>2]|0)+12>>2]|0;do{l=e+(k<<2)|0;if((k|0)>0?(o=l+-4|0,p=c[o>>2]|0,(a[4148+(p&63)>>0]|0)<0):0){j=o;g=p}else{j=l;g=c[l>>2]|0}if((g&63|0)==28)c[j>>2]=g&8372224|g>>>23<<6|27;f=((c[l>>2]|0)>>>14)+-131071|0;k=(f|0)==-1?-1:k+1+f|0}while((k|0)!=-1);j=c[m>>2]|0}if((j|0)==-1){i=s;return}e=c[(c[b>>2]|0)+12>>2]|0;do{g=e+(j<<2)|0;if((j|0)>0?(q=g+-4|0,r=c[q>>2]|0,(a[4148+(r&63)>>0]|0)<0):0){k=q;l=r}else{k=g;l=c[g>>2]|0}if((l&63|0)==28)c[k>>2]=l&8372224|l>>>23<<6|27;b=((c[g>>2]|0)>>>14)+-131071|0;j=(b|0)==-1?-1:j+1+b|0}while((j|0)!=-1);i=s;return}case 2:{rd(b,f)|0;Cd(b,21,f,l,g);i=s;return}default:{i=s;return}}}function Cd(b,e,f,g,i){b=b|0;e=e|0;f=f|0;g=g|0;i=i|0;var j=0.0,k=0,l=0,m=0,n=0,o=0,p=0;if(((((((c[f>>2]|0)==5?(c[f+16>>2]|0)==-1:0)?(c[f+20>>2]|0)==-1:0)?(c[g>>2]|0)==5:0)?(c[g+16>>2]|0)==-1:0)?(c[g+20>>2]|0)==-1:0)?(j=+h[g+8>>3],!((e|1|0)==17&j==0.0)):0){i=f+8|0;h[i>>3]=+lf(e+-13|0,+h[i>>3],j);return}switch(e|0){case 19:case 21:{l=0;break}default:l=ud(b,g)|0}k=ud(b,f)|0;if((k|0)>(l|0)){if(((c[f>>2]|0)==6?(m=c[f+8>>2]|0,(m&256|0)==0):0)?(d[b+46>>0]|0|0)<=(m|0):0){p=b+48|0;a[p>>0]=(a[p>>0]|0)+-1<<24>>24}if(((c[g>>2]|0)==6?(n=c[g+8>>2]|0,(n&256|0)==0):0)?(d[b+46>>0]|0|0)<=(n|0):0){g=b+48|0;a[g>>0]=(a[g>>0]|0)+-1<<24>>24}}else{if(((c[g>>2]|0)==6?(o=c[g+8>>2]|0,(o&256|0)==0):0)?(d[b+46>>0]|0|0)<=(o|0):0){g=b+48|0;a[g>>0]=(a[g>>0]|0)+-1<<24>>24}if(((c[f>>2]|0)==6?(p=c[f+8>>2]|0,(p&256|0)==0):0)?(d[b+46>>0]|0|0)<=(p|0):0){g=b+48|0;a[g>>0]=(a[g>>0]|0)+-1<<24>>24}}c[f+8>>2]=Xc(b,l<<14|e|k<<23)|0;c[f>>2]=11;c[(c[(c[b>>2]|0)+20>>2]|0)+((c[b+20>>2]|0)+-1<<2)>>2]=i;return}function Dd(b,e,f){b=b|0;e=e|0;f=f|0;var g=0,h=0,i=0;switch(e|0){case 13:{xd(b,f);return}case 14:{zd(b,f);return}case 6:{nd(b,f);if(((c[f>>2]|0)==6?(g=c[f+8>>2]|0,(g&256|0)==0):0)?(d[b+46>>0]|0|0)<=(g|0):0){h=b+48|0;a[h>>0]=(a[h>>0]|0)+-1<<24>>24}g=b+48|0;e=(d[g>>0]|0)+1|0;h=(c[b>>2]|0)+78|0;do if(e>>>0>(d[h>>0]|0)>>>0)if(e>>>0>249)Ve(c[b+12>>2]|0,2507);else{i=e&255;a[h>>0]=i;break}else i=e&255;while(0);a[g>>0]=i;pd(b,f,(i&255)+-1|0);return}case 5:case 4:case 3:case 2:case 1:case 0:{if(((c[f>>2]|0)==5?(c[f+16>>2]|0)==-1:0)?(c[f+20>>2]|0)==-1:0)return;ud(b,f)|0;return}default:{ud(b,f)|0;return}}}function Ed(b,e,f,g,h){b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;var i=0,j=0,k=0,l=0,m=0;switch(e|0){case 13:{nd(b,g);i=g+20|0;m=c[f+20>>2]|0;do if((m|0)!=-1){e=c[i>>2]|0;if((e|0)==-1){c[i>>2]=m;break}l=c[(c[b>>2]|0)+12>>2]|0;while(1){k=l+(e<<2)|0;j=c[k>>2]|0;i=(j>>>14)+-131071|0;i=(i|0)==-1?-1:e+1+i|0;if((i|0)==-1)break;else e=i}i=m+~e|0;if((((i|0)>-1?i:0-i|0)|0)>131071)Ve(c[b+12>>2]|0,2472);else{c[k>>2]=(i<<14)+2147467264|j&16383;break}}while(0);c[f>>2]=c[g>>2];c[f+4>>2]=c[g+4>>2];c[f+8>>2]=c[g+8>>2];c[f+12>>2]=c[g+12>>2];c[f+16>>2]=c[g+16>>2];c[f+20>>2]=c[g+20>>2];return}case 14:{nd(b,g);i=g+16|0;m=c[f+16>>2]|0;do if((m|0)!=-1){e=c[i>>2]|0;if((e|0)==-1){c[i>>2]=m;break}l=c[(c[b>>2]|0)+12>>2]|0;while(1){k=l+(e<<2)|0;j=c[k>>2]|0;i=(j>>>14)+-131071|0;i=(i|0)==-1?-1:e+1+i|0;if((i|0)==-1)break;else e=i}i=m+~e|0;if((((i|0)>-1?i:0-i|0)|0)>131071)Ve(c[b+12>>2]|0,2472);else{c[k>>2]=(i<<14)+2147467264|j&16383;break}}while(0);c[f>>2]=c[g>>2];c[f+4>>2]=c[g+4>>2];c[f+8>>2]=c[g+8>>2];c[f+12>>2]=c[g+12>>2];c[f+16>>2]=c[g+16>>2];c[f+20>>2]=c[g+20>>2];return}case 6:{if((c[g+16>>2]|0)==(c[g+20>>2]|0))nd(b,g);else rd(b,g)|0;if((c[g>>2]|0)==11?(j=g+8|0,k=(c[(c[b>>2]|0)+12>>2]|0)+(c[j>>2]<<2)|0,l=c[k>>2]|0,(l&63|0)==22):0){i=f+8|0;e=c[i>>2]|0;if((c[f>>2]|0)==6&(e&256|0)==0?(d[b+46>>0]|0|0)<=(e|0):0){b=b+48|0;a[b>>0]=(a[b>>0]|0)+-1<<24>>24}c[k>>2]=e<<23|l&8388607;c[f>>2]=11;c[i>>2]=c[j>>2];return}nd(b,g);if(((c[g>>2]|0)==6?(i=c[g+8>>2]|0,(i&256|0)==0):0)?(d[b+46>>0]|0|0)<=(i|0):0){l=b+48|0;a[l>>0]=(a[l>>0]|0)+-1<<24>>24}i=b+48|0;e=(d[i>>0]|0)+1|0;j=(c[b>>2]|0)+78|0;do if(e>>>0>(d[j>>0]|0)>>>0)if(e>>>0>249)Ve(c[b+12>>2]|0,2507);else{m=e&255;a[j>>0]=m;break}else m=e&255;while(0);a[i>>0]=m;pd(b,g,(m&255)+-1|0);Cd(b,22,f,g,h);return}case 5:case 4:case 3:case 2:case 1:case 0:{Cd(b,e+13|0,f,g,h);return}case 9:case 8:case 7:{Fd(b,e+17|0,1,f,g);return}case 12:case 11:case 10:{Fd(b,e+14|0,0,f,g);return}default:return}}function Fd(b,e,f,g,h){b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;var i=0,j=0,k=0,l=0;i=ud(b,g)|0;j=ud(b,h)|0;if(((c[h>>2]|0)==6?(l=c[h+8>>2]|0,(l&256|0)==0):0)?(d[b+46>>0]|0|0)<=(l|0):0){h=b+48|0;a[h>>0]=(a[h>>0]|0)+-1<<24>>24}if(((c[g>>2]|0)==6?(k=c[g+8>>2]|0,(k&256|0)==0):0)?(d[b+46>>0]|0|0)<=(k|0):0){h=b+48|0;a[h>>0]=(a[h>>0]|0)+-1<<24>>24}h=(e|0)!=24&(f|0)==0;Xc(b,(h?64:f<<6)|e|(h?j:i)<<23|(h?i:j)<<14)|0;e=b+28|0;h=c[e>>2]|0;c[e>>2]=-1;e=Xc(b,2147450903)|0;if((h|0)==-1){b=g+8|0;c[b>>2]=e;c[g>>2]=10;return}if((e|0)==-1){e=h;b=g+8|0;c[b>>2]=e;c[g>>2]=10;return}l=c[(c[b>>2]|0)+12>>2]|0;i=e;while(1){k=l+(i<<2)|0;f=c[k>>2]|0;j=(f>>>14)+-131071|0;j=(j|0)==-1?-1:i+1+j|0;if((j|0)==-1){j=f;break}else i=j}i=h+~i|0;if((((i|0)>-1?i:0-i|0)|0)>131071)Ve(c[b+12>>2]|0,2472);c[k>>2]=(i<<14)+2147467264|j&16383;b=g+8|0;c[b>>2]=e;c[g>>2]=10;return}function Gd(a,b){a=a|0;b=b|0;c[(c[(c[a>>2]|0)+20>>2]|0)+((c[a+20>>2]|0)+-1<<2)>>2]=b;return}function Hd(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0;g=((e+-1|0)/50|0)+1|0;e=(f|0)==-1?0:f;if((g|0)<512){Xc(b,d<<6|e<<23|g<<14|36)|0;d=d+1|0;d=d&255;b=b+48|0;a[b>>0]=d;return}if((g|0)>=67108864)Ve(c[b+12>>2]|0,2552);Xc(b,d<<6|e<<23|36)|0;Xc(b,g<<6|39)|0;d=d+1|0;d=d&255;b=b+48|0;a[b>>0]=d;return}function Id(a){a=a|0;return c[a+52>>2]|0}function Jd(a){a=a|0;return c[a+44>>2]|0}function Kd(a){a=a|0;return d[a+40>>0]|0|0}function Ld(b,e,f){b=b|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0;O=i;i=i+16|0;N=O;M=b+6|0;if((a[M>>0]|0)==1){G=c[b+16>>2]|0;I=c[G>>2]|0;J=c[b+28>>2]|0;K=G+20|0;c[G>>2]=J+(c[K>>2]|0);c[K>>2]=I-J}if((a[e>>0]|0)==62){G=b+8|0;K=(c[G>>2]|0)+-16|0;c[G>>2]=K;e=e+1|0;G=0}else{K=c[f+96>>2]|0;G=K;K=c[K>>2]|0}I=K+8|0;if((c[I>>2]&31|0)==6)J=c[K>>2]|0;else J=0;g=a[e>>0]|0;a:do if(!(g<<24>>24))j=1;else{o=(J|0)==0;p=f+16|0;q=f+24|0;r=f+28|0;s=f+12|0;t=f+36|0;u=J+4|0;v=J+12|0;w=(G|0)==0;x=f+20|0;y=G+18|0;z=G+28|0;A=f+32|0;B=f+34|0;C=f+33|0;D=J+6|0;E=f+35|0;F=f+8|0;l=f+4|0;m=G+8|0;n=b+12|0;k=e;j=1;while(1){b:do switch(g<<24>>24|0){case 83:{if(!o?(a[u>>0]|0)!=38:0){h=c[v>>2]|0;f=c[h+36>>2]|0;f=(f|0)==0?2835:f+16|0;c[p>>2]=f;g=c[h+64>>2]|0;c[q>>2]=g;c[r>>2]=c[h+68>>2];g=(g|0)==0?2838:2843}else{c[p>>2]=2830;c[q>>2]=-1;c[r>>2]=-1;f=2830;g=2847}c[s>>2]=g;qf(t,f,60);break}case 108:{if(!w?(a[y>>0]&1)!=0:0){f=c[(c[c[G>>2]>>2]|0)+12>>2]|0;g=c[f+20>>2]|0;if(!g)f=0;else f=c[g+(((c[z>>2]|0)-(c[f+12>>2]|0)>>2)+-1<<2)>>2]|0}else f=-1;c[x>>2]=f;break}case 117:{if(!o){a[A>>0]=a[D>>0]|0;if((a[u>>0]|0)!=38){h=c[v>>2]|0;a[B>>0]=a[h+77>>0]|0;a[C>>0]=a[h+76>>0]|0;break b}}else a[A>>0]=0;a[B>>0]=1;a[C>>0]=0;break}case 116:{if(w)f=0;else f=d[y>>0]&64;a[E>>0]=f;break}case 110:{c:do if((!w?(a[y>>0]&64)==0:0)?(H=c[m>>2]|0,(a[H+18>>0]&1)!=0):0){f=c[(c[c[H>>2]>>2]|0)+12>>2]|0;h=c[f+12>>2]|0;g=((c[H+28>>2]|0)-h>>2)+-1|0;h=c[h+(g<<2)>>2]|0;do switch(h&63|0){case 30:case 29:{h=Md(f,g,h>>>6&255,l)|0;c[F>>2]=h;if(!h)break c;else break b}case 34:{c[l>>2]=2849;f=2849;break}case 7:case 6:case 12:{f=0;L=47;break}case 10:case 8:{f=1;L=47;break}case 24:{f=5;L=47;break}case 13:{f=6;L=47;break}case 14:{f=7;L=47;break}case 15:{f=8;L=47;break}case 16:{f=9;L=47;break}case 17:{f=10;L=47;break}case 18:{f=11;L=47;break}case 19:{f=12;L=47;break}case 21:{f=4;L=47;break}case 25:{f=13;L=47;break}case 26:{f=14;L=47;break}case 22:{f=15;L=47;break}default:{L=48;break c}}while(0);if((L|0)==47){L=0;c[l>>2]=(c[(c[n>>2]|0)+184+(f<<2)>>2]|0)+16;f=2862}c[F>>2]=f;break b}else L=48;while(0);if((L|0)==48){L=0;c[F>>2]=0}c[F>>2]=15608;c[l>>2]=0;break}case 102:case 76:break;default:j=0}while(0);k=k+1|0;g=a[k>>0]|0;if(!(g<<24>>24))break a}}while(0);if(Bm(e,102)|0){L=b+8|0;H=c[L>>2]|0;F=K;G=c[F+4>>2]|0;K=H;c[K>>2]=c[F>>2];c[K+4>>2]=G;c[H+8>>2]=c[I>>2];c[L>>2]=(c[L>>2]|0)+16}if((a[M>>0]|0)==1){I=c[b+16>>2]|0;K=c[I>>2]|0;L=c[b+28>>2]|0;M=I+20|0;c[I>>2]=L+(c[M>>2]|0);c[M>>2]=K-L}if(!(Bm(e,76)|0)){i=O;return j|0}if(J|0?(a[J+4>>0]|0)!=38:0){e=J+12|0;f=c[(c[e>>2]|0)+20>>2]|0;g=ig(b)|0;M=b+8|0;L=c[M>>2]|0;c[L>>2]=g;c[L+8>>2]=69;c[M>>2]=(c[M>>2]|0)+16;c[N>>2]=1;c[N+8>>2]=1;if((c[(c[e>>2]|0)+52>>2]|0)>0){h=0;do{fg(b,g,c[f+(h<<2)>>2]|0,N);h=h+1|0}while((h|0)<(c[(c[e>>2]|0)+52>>2]|0))}i=O;return j|0}N=b+8|0;b=c[N>>2]|0;c[b+8>>2]=0;c[N>>2]=b+16;i=O;return j|0}function Md(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0;n=b+12|0;m=e;a:while(1){l=we(b,m+1|0,d)|0;c[f>>2]=l;if(l|0){d=3375;i=44;break}if((d|0)<=0){d=0;i=44;break}e=c[n>>2]|0;k=0;l=0;h=-1;while(1){i=c[e+(l<<2)>>2]|0;j=i&63;g=i>>>6&255;switch(j|0){case 4:{if((g|0)<=(m|0)?(g+(i>>>23)|0)>=(m|0):0){g=k;h=(l|0)<(k|0)?-1:l}else g=k;break}case 34:{if((g+2|0)>(m|0))g=k;else{g=k;h=(l|0)<(k|0)?-1:l}break}case 30:case 29:{if((g|0)>(m|0))g=k;else{g=k;h=(l|0)<(k|0)?-1:l}break}case 23:{g=l+-131070+(i>>>14)|0;g=(g|0)>(k|0)&((g|0)<=(d|0)&(l|0)<(g|0))?g:k;break}case 27:{if((g|0)==(m|0)){g=k;h=(l|0)<(k|0)?-1:l}else g=k;break}default:if((g|0)==(m|0)&(a[4148+j>>0]&64)!=0){g=k;h=(l|0)<(k|0)?-1:l}else g=k}l=l+1|0;if((l|0)==(d|0))break;else k=g}if((h|0)==-1){d=0;i=44;break}d=c[e+(h<<2)>>2]|0;g=d&63;switch(g|0){case 7:case 6:{i=22;break a}case 5:{i=33;break a}case 12:{e=h;i=38;break a}case 1:{i=34;break a}case 2:{d=h;i=35;break a}case 0:break;default:{d=0;i=44;break a}}e=d>>>23;if(e>>>0<(d>>>6&255)>>>0){d=h;m=e}else{d=0;i=44;break}}if((i|0)==22){e=d>>>14;d=d>>>23;if((g|0)==7)g=we(b,d+1|0,h)|0;else{g=c[(c[b+28>>2]|0)+(d<<3)>>2]|0;g=(g|0)==0?9458:g+16|0}if(!(e&256)){b=Md(b,h,e&511,f)|0;if(!((b|0)!=0?(a[b>>0]|0)==99:0))i=30}else{e=e&255;d=c[b+8>>2]|0;if((c[d+(e<<4)+8>>2]&15|0)==4)c[f>>2]=(c[d+(e<<4)>>2]|0)+16;else i=30}if((i|0)==30)c[f>>2]=9458;if(!g){f=2880;return f|0}f=(Kl(g,3526)|0)==0;f=f?2873:2880;return f|0}else if((i|0)==33){b=c[(c[b+28>>2]|0)+(d>>>23<<3)>>2]|0;c[f>>2]=(b|0)==0?9458:b+16|0;f=2886;return f|0}else if((i|0)==34)e=d>>>14;else if((i|0)==35)e=(c[e+(d+1<<2)>>2]|0)>>>6;else if((i|0)==38){d=d>>>14;if(!(d&256)){b=Md(b,e,d&511,f)|0;if(b|0?(a[b>>0]|0)==99:0){f=5382;return f|0}}else{e=d&255;d=c[b+8>>2]|0;if((c[d+(e<<4)+8>>2]&15|0)==4){c[f>>2]=(c[d+(e<<4)>>2]|0)+16;f=5382;return f|0}}c[f>>2]=9458;f=5382;return f|0}else if((i|0)==44)return d|0;d=c[b+8>>2]|0;if((c[d+(e<<4)+8>>2]&15|0)!=4){f=0;return f|0}c[f>>2]=(c[d+(e<<4)>>2]|0)+16;f=2894;return f|0}function Nd(b,e,f){b=b|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,l=0;k=b+6|0;if((a[k>>0]|0)==1){l=c[b+16>>2]|0;g=c[l>>2]|0;h=c[b+28>>2]|0;i=l+20|0;c[l>>2]=h+(c[i>>2]|0);c[i>>2]=g-h}a:do if(!e){e=c[b+8>>2]|0;if((c[e+-8>>2]|0)==70)e=we(c[(c[e+-16>>2]|0)+12>>2]|0,f,0)|0;else e=0}else{i=c[e+96>>2]|0;do if(!(a[i+18>>0]&1)){g=(c[i>>2]|0)+16|0;j=12}else{if((f|0)>=0){g=c[i+24>>2]|0;e=c[(c[c[i>>2]>>2]|0)+12>>2]|0;e=we(e,f,((c[i+28>>2]|0)-(c[e+12>>2]|0)>>2)+-1|0)|0;if(!e){j=12;break}else{j=16;break}}g=0-f|0;h=c[i>>2]|0;f=d[(c[(c[h>>2]|0)+12>>2]|0)+76>>0]|0;if((((c[i+24>>2]|0)-h>>4)-f|0)<=(g|0)){e=0;break a}e=2916;g=h+(f<<4)+(g<<4)|0}while(0);if((j|0)==12){if((c[b+16>>2]|0)==(i|0))e=b+8|0;else e=c[i+12>>2]|0;if((f|0)>0?((c[e>>2]|0)-g>>4|0)>=(f|0):0){e=2903;j=16}else{e=0;break}}if((j|0)==16)g=g+(f+-1<<4)|0;l=b+8|0;j=c[l>>2]|0;f=g;h=c[f+4>>2]|0;i=j;c[i>>2]=c[f>>2];c[i+4>>2]=h;c[j+8>>2]=c[g+8>>2];c[l>>2]=(c[l>>2]|0)+16}while(0);if((a[k>>0]|0)!=1)return e|0;j=c[b+16>>2]|0;k=c[j>>2]|0;b=c[b+28>>2]|0;l=j+20|0;c[j>>2]=b+(c[l>>2]|0);c[l>>2]=k-b;return e|0}function Od(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0;if((b|0)<0){d=0;return d|0}f=c[a+16>>2]|0;g=a+72|0;if((b|0)>0&(f|0)!=(g|0)){e=b;a=f;while(1){b=e+-1|0;a=c[a+8>>2]|0;if((e|0)>1&(a|0)!=(g|0))e=b;else break}}else a=f;if((b|0)!=0|(a|0)==(g|0)){d=0;return d|0}c[d+96>>2]=a;d=1;return d|0}function Pd(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;h=(d|0)==0|(e|0)==0;g=c[b+16>>2]|0;if(a[g+18>>0]&1)c[b+20>>2]=c[g+28>>2];c[b+52>>2]=h?0:d;c[b+44>>2]=f;c[b+48>>2]=f;a[b+40>>0]=h?0:e&255;return 1}function Qd(b,e,f){b=b|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,l=0;k=b+6|0;if((a[k>>0]|0)==1){l=c[b+16>>2]|0;g=c[l>>2]|0;h=c[b+28>>2]|0;i=l+20|0;c[l>>2]=h+(c[i>>2]|0);c[i>>2]=g-h}i=c[e+96>>2]|0;do if(a[i+18>>0]&1){if((f|0)>=0){g=c[i+24>>2]|0;e=c[(c[c[i>>2]>>2]|0)+12>>2]|0;e=we(e,f,((c[i+28>>2]|0)-(c[e+12>>2]|0)>>2)+-1|0)|0;if(!e){j=9;break}else{j=13;break}}g=0-f|0;h=c[i>>2]|0;f=d[(c[(c[h>>2]|0)+12>>2]|0)+76>>0]|0;if((((c[i+24>>2]|0)-h>>4)-f|0)>(g|0)){e=2916;g=h+(f<<4)+(g<<4)|0;j=14}else e=0}else{g=(c[i>>2]|0)+16|0;j=9}while(0);if((j|0)==9){if((c[b+16>>2]|0)==(i|0))e=b+8|0;else e=c[i+12>>2]|0;if((f|0)>0?((c[e>>2]|0)-g>>4|0)>=(f|0):0){e=2903;j=13}else e=0}if((j|0)==13){g=g+(f+-1<<4)|0;j=14}if((j|0)==14){l=c[b+8>>2]|0;h=l+-16|0;i=c[h+4>>2]|0;j=g;c[j>>2]=c[h>>2];c[j+4>>2]=i;c[g+8>>2]=c[l+-8>>2]}l=b+8|0;c[l>>2]=(c[l>>2]|0)+-16;if((a[k>>0]|0)!=1)return e|0;j=c[b+16>>2]|0;k=c[j>>2]|0;b=c[b+28>>2]|0;l=j+20|0;c[j>>2]=b+(c[l>>2]|0);c[l>>2]=k-b;return e|0}function Rd(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0;m=i;i=i+32|0;o=m+16|0;n=m;m=m+24|0;j=c[b+16>>2]|0;c[m>>2]=0;l=c[148+((c[d+8>>2]&15)+1<<2)>>2]|0;a:do if(a[j+18>>0]&1){k=c[c[j>>2]>>2]|0;f=a[k+6>>0]|0;b:do if(f<<24>>24){g=f&255;f=0;while(1){if((c[(c[k+16+(f<<2)>>2]|0)+8>>2]|0)==(d|0))break;f=f+1|0;if((f|0)>=(g|0))break b}g=c[(c[(c[k+12>>2]|0)+28>>2]|0)+(f<<3)>>2]|0;g=(g|0)==0?9458:g+16|0;c[m>>2]=g;f=2886;c[n>>2]=e;h=n+4|0;c[h>>2]=f;h=n+8|0;c[h>>2]=g;h=n+12|0;c[h>>2]=l;Sd(b,2926,n)}while(0);f=c[j+24>>2]|0;g=c[j+4>>2]|0;h=f;if(f>>>0<g>>>0){while(1){if((f|0)==(d|0))break;f=f+16|0;if(f>>>0>=g>>>0)break a}f=c[k+12>>2]|0;f=Md(f,((c[j+28>>2]|0)-(c[f+12>>2]|0)>>2)+-1|0,d-h>>4,m)|0;if(f|0){d=c[m>>2]|0;k=f;c[n>>2]=e;m=n+4|0;c[m>>2]=k;m=n+8|0;c[m>>2]=d;m=n+12|0;c[m>>2]=l;Sd(b,2926,n)}}}while(0);c[o>>2]=e;c[o+4>>2]=l;Sd(b,2961,o)}function Sd(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0;g=i;i=i+96|0;j=g;h=g+32|0;g=g+16|0;c[g>>2]=e;g=of(b,d,g)|0;e=c[b+16>>2]|0;if(!(a[e+18>>0]&1))Td(b);f=c[(c[c[e>>2]>>2]|0)+12>>2]|0;d=c[f+20>>2]|0;if(!d)e=0;else e=c[d+(((c[e+28>>2]|0)-(c[f+12>>2]|0)>>2)+-1<<2)>>2]|0;d=c[f+36>>2]|0;if(!d){a[h>>0]=63;a[h+1>>0]=0}else qf(h,d+16|0,60);c[j>>2]=h;c[j+4>>2]=e;c[j+8>>2]=g;pf(b,3480,j)|0;Td(b)}function Td(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,i=0;b=c[a+68>>2]|0;if(!b)_d(a,2);b=(c[a+28>>2]|0)+b|0;d=b+8|0;if((c[d>>2]&15|0)!=6)_d(a,6);e=a+8|0;f=c[e>>2]|0;i=f+-16|0;g=c[i+4>>2]|0;h=f;c[h>>2]=c[i>>2];c[h+4>>2]=g;c[f+8>>2]=c[f+-8>>2];f=c[e>>2]|0;h=b;g=c[h+4>>2]|0;b=f+-16|0;c[b>>2]=c[h>>2];c[b+4>>2]=g;c[f+-8>>2]=c[d>>2];d=c[e>>2]|0;c[e>>2]=d+16;ie(a,d+-16|0,1,0);_d(a,2)}function Ud(a,b,d){a=a|0;b=b|0;d=d|0;var e=0;e=c[b+8>>2]|0;Rd(a,(e|0)==3|(e&15|0)==4?d:b,2986)}function Vd(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=i;i=i+16|0;d=(ug(b,d)|0)==0;Rd(a,d?b:c,2998)}function Wd(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0;f=i;i=i+16|0;g=f+8|0;e=c[148+((c[b+8>>2]&15)+1<<2)>>2]|0;b=c[148+((c[d+8>>2]&15)+1<<2)>>2]|0;if((e|0)==(b|0)){c[f>>2]=e;Sd(a,3020,f)}else{c[g>>2]=e;c[g+4>>2]=b;Sd(a,3053,g)}}function Xd(f,g,h){f=f|0;g=g|0;h=h|0;var i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0;u=f+36|0;v=b[u>>1]|0;if(!g)g=1;else g=(e[g+38>>1]|0)+1&65535;s=f+38|0;b[s>>1]=g;b[u>>1]=0;r=f+8|0;g=de(f,20,(c[r>>2]|0)+(0-h<<4)|0)|0;if((g|0)==-1){t=2;b[u>>1]=v;v=b[s>>1]|0;v=v+-1<<16>>16;b[s>>1]=v;return t|0}if(g>>>0<=1){t=g;b[u>>1]=v;v=b[s>>1]|0;v=v+-1<<16>>16;b[s>>1]=v;return t|0}p=f+16|0;l=f+28|0;m=f+41|0;n=f+68|0;o=f+32|0;q=f+12|0;a:while(1){h=c[p>>2]|0;if(!h)break;while(1){i=h+18|0;if(a[i>>0]&16)break;h=c[h+8>>2]|0;if(!h)break a}j=(c[l>>2]|0)+(c[h+20>>2]|0)|0;te(f,j);switch(g|0){case 4:{k=c[(c[q>>2]|0)+180>>2]|0;c[j>>2]=k;c[j+8>>2]=d[k+4>>0]|0|64;break}case 6:{k=Zf(f,3138,23)|0;c[j>>2]=k;c[j+8>>2]=d[k+4>>0]|0|64;break}default:{k=c[r>>2]|0;y=k+-16|0;x=c[y+4>>2]|0;w=j;c[w>>2]=c[y>>2];c[w+4>>2]=x;c[j+8>>2]=c[k+-8>>2]}}j=j+16|0;c[r>>2]=j;c[p>>2]=h;a[m>>0]=a[h+36>>0]|0;b[u>>1]=0;k=h;do{y=c[k+4>>2]|0;j=j>>>0<y>>>0?y:j;k=c[k+8>>2]|0}while((k|0)!=0);y=j-(c[l>>2]|0)|0;j=y>>4;j=j+11+((j+1|0)/8|0)|0;j=(j|0)>1e6?1e6:j;if((y|0)<=15999984?(j|0)<(c[o>>2]|0):0)ae(f,j);c[n>>2]=c[h+32>>2];a[i>>0]=d[i>>0]|0|32;a[h+37>>0]=g;g=de(f,21,0)|0;if(g>>>0<=1){t=24;break}}if((t|0)==24){b[u>>1]=v;y=b[s>>1]|0;y=y+-1<<16>>16;b[s>>1]=y;return g|0}a[f+6>>0]=g;h=c[r>>2]|0;switch(g|0){case 4:{y=c[(c[q>>2]|0)+180>>2]|0;c[h>>2]=y;c[h+8>>2]=d[y+4>>0]|0|64;break}case 6:{y=Zf(f,3138,23)|0;c[h>>2]=y;c[h+8>>2]=d[y+4>>0]|0|64;break}default:{w=h+-16|0;x=c[w+4>>2]|0;y=h;c[y>>2]=c[w>>2];c[y+4>>2]=x;c[h+8>>2]=c[h+-8>>2]}}y=h+16|0;c[r>>2]=y;c[(c[p>>2]|0)+4>>2]=y;y=g;b[u>>1]=v;x=b[s>>1]|0;x=x+-1<<16>>16;b[s>>1]=x;return y|0}function Yd(f,g){f=f|0;g=g|0;var h=0,i=0,j=0,k=0,l=0,m=0,n=0;m=f+16|0;k=c[m>>2]|0;if((e[f+38>>1]|0)>199)Zd(f,3083,g);h=f+6|0;switch(a[h>>0]|0){case 0:{if((k|0)!=(f+72|0))Zd(f,3100,g);if($d(f,g+-16|0,-1)|0)return;Fg(f);return}case 1:{a[h>>0]=0;l=f+28|0;c[k>>2]=(c[l>>2]|0)+(c[k+20>>2]|0);h=k+18|0;i=a[h>>0]|0;if(!(i&1)){j=c[k+28>>2]|0;if(j){a[k+37>>0]=1;a[h>>0]=i&255|8;g=kb[j&255](f)|0;k=c[m>>2]|0;g=(c[f+8>>2]|0)+(0-g<<4)|0}h=d[f+40>>0]|0;if(!(h&6)){i=g;h=c[k+8>>2]|0}else{if(h&2){g=g-(c[l>>2]|0)|0;be(f,1,-1);g=(c[l>>2]|0)+g|0}h=c[k+8>>2]|0;c[f+20>>2]=c[h+28>>2];i=g}g=c[k>>2]|0;k=b[k+16>>1]|0;c[m>>2]=h;l=f+8|0;a:do if(k<<16>>16){j=i;h=k<<16>>16;while(1){if(j>>>0>=(c[l>>2]|0)>>>0)break;i=g+16|0;n=j;k=c[n+4>>2]|0;m=g;c[m>>2]=c[n>>2];c[m+4>>2]=k;c[g+8>>2]=c[j+8>>2];h=h+-1|0;if(!h){g=i;break a}else{j=j+16|0;g=i}}if((h|0)>0){i=h;while(1){h=g+16|0;c[g+8>>2]=0;if((i|0)>1){i=i+-1|0;g=h}else{g=h;break}}}}while(0);c[l>>2]=g}else Fg(f);ce(f,0);return}default:Zd(f,6728,g)}}function Zd(a,b,e){a=a|0;b=b|0;e=e|0;var f=0;f=a+8|0;c[f>>2]=e;b=_f(a,b)|0;c[e>>2]=b;c[e+8>>2]=d[b+4>>0]|0|64;c[f>>2]=(c[f>>2]|0)+16;_d(a,-1)}function _d(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0;e=b+64|0;f=c[e>>2]|0;if(f|0){c[f+160>>2]=d;Ba((c[e>>2]|0)+4|0,1)}a[b+6>>0]=d;f=b+12|0;g=c[f>>2]|0;e=c[g+172>>2]|0;if(c[e+64>>2]|0){h=c[b+8>>2]|0;k=e+8|0;e=c[k>>2]|0;c[k>>2]=e+16;k=h+-16|0;j=c[k+4>>2]|0;i=e;c[i>>2]=c[k>>2];c[i+4>>2]=j;c[e+8>>2]=c[h+-8>>2];_d(c[(c[f>>2]|0)+172>>2]|0,d)}e=c[g+168>>2]|0;if(!e)ua();kb[e&255](b)|0;ua()}function $d(e,f,g){e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0;B=i;i=i+32|0;n=B+24|0;w=B+16|0;t=B+8|0;r=B;z=e+28|0;A=e+8|0;x=e+24|0;y=e+32|0;a:while(1){h=c[z>>2]|0;k=f;switch(c[f+8>>2]&63|0){case 22:{j=k;l=3;break a}case 38:{j=k;l=4;break a}case 6:{l=29;break a}default:{}}m=pg(e,f,16)|0;k=k-(c[z>>2]|0)|0;l=m+8|0;if((c[l>>2]&15|0)!=6){l=61;break}h=c[A>>2]|0;if(h>>>0>f>>>0){do{v=h;h=h+-16|0;C=h;s=c[C+4>>2]|0;u=v;c[u>>2]=c[C>>2];c[u+4>>2]=s;c[v+8>>2]=c[v+-8>>2]}while(h>>>0>f>>>0);f=c[A>>2]|0}else f=h;f=f+16|0;c[A>>2]=f;if(((c[x>>2]|0)-f|0)<16){h=c[y>>2]|0;if((h|0)>1e6){l=67;break}C=(f-(c[z>>2]|0)>>4)+5|0;f=h<<1;f=(f|0)>1e6?1e6:f;f=(f|0)<(C|0)?C:f;if((f|0)>1e6){l=69;break}ae(e,f)}f=(c[z>>2]|0)+k|0;u=m;v=c[u+4>>2]|0;C=f;c[C>>2]=c[u>>2];c[C+4>>2]=v;c[f+8>>2]=c[l>>2]}if((l|0)==3){q=h;p=j;o=f}else if((l|0)==4){q=h;p=j;o=(c[f>>2]|0)+12|0}else if((l|0)==29){s=k-h|0;v=c[(c[f>>2]|0)+12>>2]|0;l=c[A>>2]|0;m=l-k>>4;n=m+-1|0;u=v+78|0;f=d[u>>0]|0;do if(((c[x>>2]|0)-l>>4|0)<=(f|0)){k=c[y>>2]|0;if((k|0)>1e6)_d(e,6);C=(l-h>>4)+5+f|0;f=k<<1;f=(f|0)>1e6?1e6:f;f=(f|0)<(C|0)?C:f;if((f|0)>1e6){ae(e,1000200);Sd(e,6940,t)}else{ae(e,f);break}}while(0);o=c[v+76>>2]|0;q=o&255;r=o&255;p=o>>>16;if((m|0)>(r|0))l=n;else{k=c[A>>2]|0;f=n;while(1){h=k+16|0;c[k+8>>2]=0;f=f+1|0;if((f|0)<(r|0))k=h;else break}c[A>>2]=h;l=f}if(!(o&65280)){j=(c[z>>2]|0)+s|0;k=j;j=j+16|0}else{k=c[A>>2]|0;h=p&255;do if(((c[x>>2]|0)-k>>4|0)<=(h|0)){f=c[y>>2]|0;if((f|0)>1e6)_d(e,6);C=h+5+(k-(c[z>>2]|0)>>4)|0;f=f<<1;f=(f|0)>1e6?1e6:f;f=(f|0)<(C|0)?C:f;if((f|0)>1e6){ae(e,1000200);Sd(e,6940,w)}else{ae(e,f);j=c[A>>2]|0;break}}else j=k;while(0);f=0-l|0;h=j+(f<<4)|0;if(q<<24>>24?(c[A>>2]=j+16,x=h,y=c[x+4>>2]|0,C=j,c[C>>2]=c[x>>2],c[C+4>>2]=y,C=j+(f<<4)+8|0,c[j+8>>2]=c[C>>2],c[C>>2]=0,q<<24>>24!=1):0){f=1;do{y=c[A>>2]|0;C=h+(f<<4)|0;c[A>>2]=y+16;t=C;w=c[t+4>>2]|0;x=y;c[x>>2]=c[t>>2];c[x+4>>2]=w;C=C+8|0;c[y+8>>2]=c[C>>2];c[C>>2]=0;f=f+1|0}while((f|0)!=(r|0))}k=(c[z>>2]|0)+s|0}h=e+16|0;f=c[(c[h>>2]|0)+12>>2]|0;if(!f)l=Sf(e)|0;else l=f;c[h>>2]=l;b[l+16>>1]=g;c[l>>2]=k;c[l+24>>2]=j;C=j+((d[u>>0]|0)<<4)|0;c[l+4>>2]=C;h=l+28|0;c[h>>2]=c[v+12>>2];f=l+18|0;a[f>>0]=1;c[A>>2]=C;if((c[(c[e+12>>2]|0)+12>>2]|0)>0)Se(e);if(!(a[e+40>>0]&1)){C=0;i=B;return C|0}c[h>>2]=(c[h>>2]|0)+4;C=c[l+8>>2]|0;if((a[C+18>>0]&1)!=0?(c[(c[C+28>>2]|0)+-4>>2]&63|0)==30:0){a[f>>0]=d[f>>0]|0|64;f=4}else f=0;be(e,f,-1);c[h>>2]=(c[h>>2]|0)+-4;C=0;i=B;return C|0}else if((l|0)==61)Rd(e,f,6898);else if((l|0)==67)_d(e,6);else if((l|0)==69){ae(e,1000200);Sd(e,6940,n)}j=p-q|0;k=c[o>>2]|0;h=c[A>>2]|0;do if(((c[x>>2]|0)-h|0)<336){f=c[y>>2]|0;if((f|0)>1e6)_d(e,6);C=(h-q>>4)+25|0;f=f<<1;f=(f|0)>1e6?1e6:f;f=(f|0)<(C|0)?C:f;if((f|0)>1e6){ae(e,1000200);Sd(e,6940,r)}else{ae(e,f);break}}while(0);l=e+16|0;f=c[(c[l>>2]|0)+12>>2]|0;if(!f)f=Sf(e)|0;c[l>>2]=f;b[f+16>>1]=g;c[f>>2]=(c[z>>2]|0)+j;c[f+4>>2]=(c[A>>2]|0)+320;a[f+18>>0]=0;if((c[(c[e+12>>2]|0)+12>>2]|0)>0)Se(e);h=e+40|0;if(a[h>>0]&1)be(e,0,-1);f=kb[k&255](e)|0;f=(c[A>>2]|0)+(0-f<<4)|0;j=c[l>>2]|0;h=d[h>>0]|0;if(!(h&6)){h=f;k=c[j+8>>2]|0}else{if(h&2){f=f-(c[z>>2]|0)|0;be(e,1,-1);f=(c[z>>2]|0)+f|0}k=c[j+8>>2]|0;c[e+20>>2]=c[k+28>>2];h=f}f=c[j>>2]|0;j=b[j+16>>1]|0;c[l>>2]=k;b:do if(j<<16>>16){k=h;h=j<<16>>16;while(1){if(k>>>0>=(c[A>>2]|0)>>>0)break;j=f+16|0;g=k;e=c[g+4>>2]|0;C=f;c[C>>2]=c[g>>2];c[C+4>>2]=e;c[f+8>>2]=c[k+8>>2];h=h+-1|0;if(!h){f=j;break b}else{k=k+16|0;f=j}}if((h|0)>0){j=f;while(1){f=j+16|0;c[j+8>>2]=0;if((h|0)>1){h=h+-1|0;j=f}else break}}}while(0);c[A>>2]=f;C=1;i=B;return C|0}function ae(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0;i=b+28|0;g=c[i>>2]|0;h=b+32|0;e=c[h>>2]|0;if((d+1|0)>>>0>268435455)ff(b);f=gf(b,g,e<<4,d<<4)|0;c[i>>2]=f;if((e|0)<(d|0)){do{c[f+(e<<4)+8>>2]=0;e=e+1|0}while((e|0)!=(d|0));f=c[i>>2]|0}c[h>>2]=d;c[b+24>>2]=f+(d<<4)+-80;e=b+8|0;c[e>>2]=f+((c[e>>2]|0)-g>>4<<4);e=c[b+56>>2]|0;if(e|0)do{d=e+8|0;c[d>>2]=f+((c[d>>2]|0)-g>>4<<4);e=c[e>>2]|0}while((e|0)!=0);e=c[b+16>>2]|0;if(!e)return;f=c[i>>2]|0;do{b=e+4|0;c[b>>2]=f+((c[b>>2]|0)-g>>4<<4);c[e>>2]=f+((c[e>>2]|0)-g>>4<<4);if(a[e+18>>0]&1){b=e+24|0;c[b>>2]=(c[i>>2]|0)+((c[b>>2]|0)-g>>4<<4)}e=c[e+8>>2]|0}while((e|0)!=0);return}function be(b,e,f){b=b|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0;s=i;i=i+112|0;r=s;q=s+4|0;g=c[b+52>>2]|0;if(!g){i=s;return}m=b+41|0;if(!(a[m>>0]|0)){i=s;return}o=c[b+16>>2]|0;p=b+8|0;t=c[p>>2]|0;h=b+28|0;l=c[h>>2]|0;j=t-l|0;k=o+4|0;l=(c[k>>2]|0)-l|0;c[q>>2]=e;c[q+20>>2]=f;c[q+96>>2]=o;e=t;do if(((c[b+24>>2]|0)-t|0)<336){e=c[b+32>>2]|0;if((e|0)>1e6)_d(b,6);t=(j>>4)+25|0;e=e<<1;e=(e|0)>1e6?1e6:e;e=(e|0)<(t|0)?t:e;if((e|0)>1e6){ae(b,1000200);Sd(b,6940,r)}else{ae(b,e);n=c[p>>2]|0;break}}else n=e;while(0);c[k>>2]=n+320;a[m>>0]=0;t=o+18|0;a[t>>0]=d[t>>0]|2;jb[g&31](b,q);a[m>>0]=1;r=c[h>>2]|0;c[k>>2]=r+l;c[p>>2]=r+j;a[t>>0]=d[t>>0]&253;i=s;return}function ce(e,f){e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;j=e+16|0;f=c[j>>2]|0;k=e+72|0;if((f|0)==(k|0))return;l=e+8|0;m=e+40|0;n=e+20|0;o=e+28|0;p=e+68|0;do{h=f+18|0;g=a[h>>0]|0;if(!(g&1)){g=g&255;if(g&16|0){a[h>>0]=g&239;c[p>>2]=c[f+32>>2]}i=c[f+16>>2]|0;g=i>>>16;if((i&65535)<<16>>16==-1?(q=f+4|0,r=c[l>>2]|0,(c[q>>2]|0)>>>0<r>>>0):0)c[q>>2]=r;if(!(g&32))a[f+37>>0]=1;a[h>>0]=g&199|8;f=kb[c[f+28>>2]&255](e)|0;f=(c[l>>2]|0)+(0-f<<4)|0;h=c[j>>2]|0;g=d[m>>0]|0;if(!(g&6)){g=f;i=c[h+8>>2]|0}else{if(g&2){f=f-(c[o>>2]|0)|0;be(e,1,-1);f=(c[o>>2]|0)+f|0}i=c[h+8>>2]|0;c[n>>2]=c[i+28>>2];g=f}f=c[h>>2]|0;h=b[h+16>>1]|0;c[j>>2]=i;a:do if(h<<16>>16){i=g;g=h<<16>>16;while(1){if(i>>>0>=(c[l>>2]|0)>>>0)break;h=f+16|0;u=i;t=c[u+4>>2]|0;s=f;c[s>>2]=c[u>>2];c[s+4>>2]=t;c[f+8>>2]=c[i+8>>2];g=g+-1|0;if(!g){f=h;break a}else{i=i+16|0;f=h}}if((g|0)>0){h=g;while(1){g=f+16|0;c[f+8>>2]=0;if((h|0)>1){h=h+-1|0;f=g}else{f=g;break}}}}while(0);c[l>>2]=f}else{Eg(e);Fg(e)}f=c[j>>2]|0}while((f|0)!=(k|0));return}function de(a,d,e){a=a|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,p=0,q=0,r=0,s=0;s=i;i=i+176|0;p=4;q=mn(40)|0;c[q>>2]=0;m=s;h=a+38|0;j=b[h>>1]|0;k=m+160|0;c[k>>2]=0;l=a+64|0;c[m>>2]=c[l>>2];c[l>>2]=m;p=wn(m+4|0,1,q|0,p|0)|0;q=C;n=0;f=n;n=0;if((f|0)!=0&(o|0)!=0){g=yn(c[f>>2]|0,p|0,q|0)|0;if(!g)Ba(f|0,o|0);C=o}else g=-1;if((g|0)==1)f=C;else f=0;while(1){if(f|0){r=6;break}n=0;ha(d|0,a|0,e|0);f=n;n=0;if((f|0)!=0&(o|0)!=0){g=yn(c[f>>2]|0,p|0,q|0)|0;if(!g)Ba(f|0,o|0);C=o}else g=-1;if((g|0)==1)f=C;else break}if((r|0)==6){r=c[m>>2]|0;c[l>>2]=r;b[h>>1]=j;r=c[k>>2]|0;nn(p|0);i=s;return r|0}r=c[m>>2]|0;c[l>>2]=r;b[h>>1]=j;r=c[k>>2]|0;nn(p|0);i=s;return r|0}function ee(d,e,f,g){d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0;l=i;i=i+16|0;k=l+8|0;j=l;h=c[d+16>>2]|0;if(b[d+36>>1]|0)if((c[(c[d+12>>2]|0)+172>>2]|0)==(d|0))Sd(d,3204,k);else Sd(d,3162,j);a[d+6>>0]=1;c[h+20>>2]=(c[h>>2]|0)-(c[d+28>>2]|0);if(a[h+18>>0]&1){i=l;return 0}c[h+28>>2]=g;if(!g){k=d+8|0;k=c[k>>2]|0;l=0-e|0;l=k+(l<<4)|0;l=l+-16|0;c[h>>2]=l;_d(d,1)}c[h+24>>2]=f;k=d+8|0;k=c[k>>2]|0;l=0-e|0;l=k+(l<<4)|0;l=l+-16|0;c[h>>2]=l;_d(d,1);return 0}function fe(a,b){a=a|0;b=b|0;var d=0,e=0;e=i;i=i+16|0;d=c[a+32>>2]|0;if((d|0)>1e6)_d(a,6);b=b+5+((c[a+8>>2]|0)-(c[a+28>>2]|0)>>4)|0;d=d<<1;d=(d|0)>1e6?1e6:d;d=(d|0)<(b|0)?b:d;if((d|0)>1e6){ae(a,1000200);Sd(a,6940,e)}else{ae(a,d);i=e;return}}function ge(a){a=a|0;var b=0,d=0,e=0;b=c[a+8>>2]|0;d=c[a+16>>2]|0;if(d)do{e=c[d+4>>2]|0;b=b>>>0<e>>>0?e:b;d=c[d+8>>2]|0}while((d|0)!=0);e=b-(c[a+28>>2]|0)|0;b=e>>4;b=b+11+((b+1|0)/8|0)|0;b=(b|0)>1e6?1e6:b;if((e|0)>15999984)return;if((b|0)>=(c[a+32>>2]|0))return;ae(a,b);return}function he(a,e){a=a|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0;i=a+16|0;h=c[i>>2]|0;f=d[a+40>>0]|0;if(!(f&6))g=c[h+8>>2]|0;else{if(f&2){j=a+28|0;e=e-(c[j>>2]|0)|0;be(a,1,-1);e=(c[j>>2]|0)+e|0}g=c[h+8>>2]|0;c[a+20>>2]=c[g+28>>2]}f=c[h>>2]|0;h=b[h+16>>1]|0;j=h<<16>>16;c[i>>2]=g;i=a+8|0;if(!(h<<16>>16)){k=f;c[i>>2]=k;k=j+1|0;return k|0}else{g=e;h=j}while(1){if(g>>>0>=(c[i>>2]|0)>>>0){e=h;break}e=f+16|0;m=g;l=c[m+4>>2]|0;a=f;c[a>>2]=c[m>>2];c[a+4>>2]=l;c[f+8>>2]=c[g+8>>2];h=h+-1|0;if(!h){k=11;break}else{g=g+16|0;f=e}}if((k|0)==11){c[i>>2]=e;m=j+1|0;return m|0}if((e|0)>0)g=e;else{m=f;c[i>>2]=m;m=j+1|0;return m|0}while(1){e=f+16|0;c[f+8>>2]=0;if((g|0)>1){g=g+-1|0;f=e}else break}c[i>>2]=e;m=j+1|0;return m|0}function ie(a,d,e,f){a=a|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0;k=i;i=i+16|0;h=k;j=a+38|0;g=(b[j>>1]|0)+1<<16>>16;b[j>>1]=g;if((g&65535)>199){if(g<<16>>16==200)Sd(a,3083,h);if((g&65535)>224)_d(a,6)}g=(f|0)!=0;if(!g){h=a+36|0;b[h>>1]=(b[h>>1]|0)+1<<16>>16}if(!($d(a,d,e)|0))Fg(a);if(g){e=b[j>>1]|0;e=e+-1<<16>>16;b[j>>1]=e;i=k;return}else{d=a+36|0;e=c[d>>2]|0;b[d>>1]=(e&65535)+-1<<16>>16;e=e>>>16&65535;e=e+-1<<16>>16;b[j>>1]=e;i=k;return}}function je(e,f,g,h,i){e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0;k=e+16|0;j=c[k>>2]|0;l=e+41|0;m=a[l>>0]|0;n=e+36|0;o=b[n>>1]|0;p=e+68|0;q=c[p>>2]|0;c[p>>2]=i;g=de(e,f,g)|0;if(!g){c[p>>2]=q;return g|0}f=e+28|0;i=(c[f>>2]|0)+h|0;te(e,i);switch(g|0){case 4:{h=c[(c[e+12>>2]|0)+180>>2]|0;c[i>>2]=h;c[i+8>>2]=d[h+4>>0]|0|64;break}case 6:{h=Zf(e,3138,23)|0;c[i>>2]=h;c[i+8>>2]=d[h+4>>0]|0|64;break}default:{h=c[e+8>>2]|0;t=h+-16|0;s=c[t+4>>2]|0;r=i;c[r>>2]=c[t>>2];c[r+4>>2]=s;c[i+8>>2]=c[h+-8>>2]}}i=i+16|0;c[e+8>>2]=i;c[k>>2]=j;a[l>>0]=m;b[n>>1]=o;if(j)do{t=c[j+4>>2]|0;i=i>>>0<t>>>0?t:i;j=c[j+8>>2]|0}while((j|0)!=0);t=i-(c[f>>2]|0)|0;i=t>>4;i=i+11+((i+1|0)/8|0)|0;i=(i|0)>1e6?1e6:i;if((t|0)>15999984){c[p>>2]=q;return g|0}if((i|0)>=(c[e+32>>2]|0)){c[p>>2]=q;return g|0}ae(e,i);c[p>>2]=q;return g|0}function ke(a,d,e,f){a=a|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;g=i;i=i+64|0;p=g;h=a+36|0;b[h>>1]=(b[h>>1]|0)+1<<16>>16;c[p>>2]=d;c[p+56>>2]=e;c[p+52>>2]=f;m=p+16|0;c[m>>2]=0;l=p+24|0;c[l>>2]=0;k=p+28|0;c[k>>2]=0;j=p+36|0;c[j>>2]=0;f=p+40|0;c[f>>2]=0;e=p+48|0;c[e>>2]=0;o=p+4|0;c[o>>2]=0;n=p+12|0;c[n>>2]=0;d=je(a,22,p,(c[a+8>>2]|0)-(c[a+28>>2]|0)|0,c[a+68>>2]|0)|0;c[o>>2]=gf(a,c[o>>2]|0,c[n>>2]|0,0)|0;c[n>>2]=0;gf(a,c[m>>2]|0,c[l>>2]<<1,0)|0;gf(a,c[k>>2]|0,c[j>>2]<<4,0)|0;gf(a,c[f>>2]|0,c[e>>2]<<4,0)|0;b[h>>1]=(b[h>>1]|0)+-1<<16>>16;i=g;return d|0}function le(b,e){b=b|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0;l=i;i=i+16|0;k=l+8|0;j=l;f=c[e>>2]|0;h=c[f>>2]|0;c[f>>2]=h+-1;if(!h)f=Gg(f)|0;else{h=f+4|0;f=c[h>>2]|0;c[h>>2]=f+1;f=d[f>>0]|0}g=c[e+52>>2]|0;h=(g|0)==0;if((f|0)==27){if(!h?(Bm(g,98)|0)==0:0){c[j>>2]=3288;c[j+4>>2]=g;pf(b,3246,j)|0;_d(b,3)}j=qg(b,c[e>>2]|0,e+4|0,c[e+56>>2]|0)|0}else{if(!h?(Bm(g,116)|0)==0:0){c[k>>2]=3295;c[k+4>>2]=g;pf(b,3246,k)|0;_d(b,3)}j=rf(b,c[e>>2]|0,e+4|0,e+16|0,c[e+56>>2]|0,f)|0}f=j+6|0;if(!(a[f>>0]|0)){i=l;return}g=j+16|0;h=j+5|0;k=0;do{e=qe(b)|0;c[g+(k<<2)>>2]=e;if(a[e+5>>0]&3?a[h>>0]&4:0)xe(b,j,e);k=k+1|0}while((k|0)<(d[f>>0]|0));i=l;return}function me(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0;g=i;i=i+48|0;j=g+20|0;h=g;c[h>>2]=a;c[h+4>>2]=d;c[h+8>>2]=e;c[h+12>>2]=f;f=h+16|0;tg(j);c[f>>2]=lb[d&31](a,j,18,e)|0;ne(b,h);i=g;return c[f>>2]|0}function ne(d,e){d=d|0;e=e|0;var f=0,g=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0;t=i;i=i+16|0;r=t;c[r>>2]=c[d+64>>2];s=e+16|0;f=c[s>>2]|0;if(!f){f=lb[c[e+4>>2]&31](c[e>>2]|0,r,4,c[e+8>>2]|0)|0;c[s>>2]=f}c[r>>2]=c[d+68>>2];if(!f){f=lb[c[e+4>>2]&31](c[e>>2]|0,r,4,c[e+8>>2]|0)|0;c[s>>2]=f}g=b[d+76>>1]|0;a[r>>0]=g;if(!f){f=lb[c[e+4>>2]&31](c[e>>2]|0,r,1,c[e+8>>2]|0)|0;c[s>>2]=f;a[r>>0]=a[d+77>>0]|0;if(!f){f=lb[c[e+4>>2]&31](c[e>>2]|0,r,1,c[e+8>>2]|0)|0;c[s>>2]=f}}else a[r>>0]=(g&65535)>>>8;a[r>>0]=a[d+78>>0]|0;if(!f){f=lb[c[e+4>>2]&31](c[e>>2]|0,r,1,c[e+8>>2]|0)|0;c[s>>2]=f}k=c[d+12>>2]|0;l=c[d+48>>2]|0;c[r>>2]=l;if(!f){g=e+4|0;j=e+8|0;f=lb[c[g>>2]&31](c[e>>2]|0,r,4,c[j>>2]|0)|0;c[s>>2]=f;if(!f){f=lb[c[g>>2]&31](c[e>>2]|0,k,l<<2,c[j>>2]|0)|0;c[s>>2]=f;g=c[d+44>>2]|0;c[r>>2]=g;if(!f){f=lb[c[e+4>>2]&31](c[e>>2]|0,r,4,c[e+8>>2]|0)|0;c[s>>2]=f}}else m=14}else m=14;if((m|0)==14){g=c[d+44>>2]|0;c[r>>2]=g}a:do if((g|0)>0){n=d+8|0;o=e+4|0;p=e+8|0;m=0;while(1){k=c[n>>2]|0;l=k+(m<<4)|0;k=k+(m<<4)+8|0;j=c[k>>2]|0;a[r>>0]=j&15;if(!f){f=lb[c[o>>2]&31](c[e>>2]|0,r,1,c[p>>2]|0)|0;c[s>>2]=f;j=c[k>>2]|0}b:do switch(j&15|0){case 4:{j=c[l>>2]|0;if(!j){c[r>>2]=0;if(!f){f=lb[c[o>>2]&31](c[e>>2]|0,r,4,c[p>>2]|0)|0;c[s>>2]=f}break b}c[r>>2]=(c[j+12>>2]|0)+1;if(!f){f=lb[c[o>>2]&31](c[e>>2]|0,r,4,c[p>>2]|0)|0;c[s>>2]=f;if(!f){f=lb[c[o>>2]&31](c[e>>2]|0,j+16|0,c[r>>2]|0,c[p>>2]|0)|0;c[s>>2]=f}}break}case 1:{a[r>>0]=c[l>>2];if(!f){f=lb[c[o>>2]&31](c[e>>2]|0,r,1,c[p>>2]|0)|0;c[s>>2]=f}break}case 3:{h[r>>3]=+h[l>>3];if(!f){f=lb[c[o>>2]&31](c[e>>2]|0,r,8,c[p>>2]|0)|0;c[s>>2]=f}break}default:{}}while(0);m=m+1|0;if((m|0)==(g|0))break a}}while(0);j=c[d+56>>2]|0;c[r>>2]=j;if(!f){f=lb[c[e+4>>2]&31](c[e>>2]|0,r,4,c[e+8>>2]|0)|0;c[s>>2]=f}if((j|0)>0){f=d+16|0;g=0;do{ne(c[(c[f>>2]|0)+(g<<2)>>2]|0,e);g=g+1|0}while((g|0)!=(j|0));f=c[s>>2]|0}p=d+40|0;n=c[p>>2]|0;c[r>>2]=n;if(!f){f=lb[c[e+4>>2]&31](c[e>>2]|0,r,4,c[e+8>>2]|0)|0;c[s>>2]=f}if((n|0)>0){k=d+28|0;l=e+4|0;m=e+8|0;j=0;do{g=c[k>>2]|0;a[r>>0]=a[g+(j<<3)+4>>0]|0;if(!f){f=lb[c[l>>2]&31](c[e>>2]|0,r,1,c[m>>2]|0)|0;c[s>>2]=f;g=c[k>>2]|0}a[r>>0]=a[g+(j<<3)+5>>0]|0;if(!f){f=lb[c[l>>2]&31](c[e>>2]|0,r,1,c[m>>2]|0)|0;c[s>>2]=f}j=j+1|0}while((j|0)!=(n|0))}o=e+12|0;if((c[o>>2]|0)==0?(q=c[d+36>>2]|0,(q|0)!=0):0){c[r>>2]=(c[q+12>>2]|0)+1;if(!f){g=e+4|0;j=e+8|0;f=lb[c[g>>2]&31](c[e>>2]|0,r,4,c[j>>2]|0)|0;c[s>>2]=f;if(!f){f=lb[c[g>>2]&31](c[e>>2]|0,q+16|0,c[r>>2]|0,c[j>>2]|0)|0;c[s>>2]=f}}}else{c[r>>2]=0;if(!f){f=lb[c[e+4>>2]&31](c[e>>2]|0,r,4,c[e+8>>2]|0)|0;c[s>>2]=f}}if(!(c[o>>2]|0))l=c[d+52>>2]|0;else l=0;k=c[d+20>>2]|0;c[r>>2]=l;if(!f){g=e+4|0;j=e+8|0;f=lb[c[g>>2]&31](c[e>>2]|0,r,4,c[j>>2]|0)|0;c[s>>2]=f;if(!f){f=lb[c[g>>2]&31](c[e>>2]|0,k,l<<2,c[j>>2]|0)|0;c[s>>2]=f}}if(!(c[o>>2]|0))n=c[d+60>>2]|0;else n=0;c[r>>2]=n;if(!f){f=lb[c[e+4>>2]&31](c[e>>2]|0,r,4,c[e+8>>2]|0)|0;c[s>>2]=f}if((n|0)>0){k=d+24|0;l=e+4|0;m=e+8|0;j=0;do{g=c[(c[k>>2]|0)+(j*12|0)>>2]|0;if(!g){c[r>>2]=0;if(!f){f=lb[c[l>>2]&31](c[e>>2]|0,r,4,c[m>>2]|0)|0;c[s>>2]=f}}else{c[r>>2]=(c[g+12>>2]|0)+1;do if(!f){f=lb[c[l>>2]&31](c[e>>2]|0,r,4,c[m>>2]|0)|0;c[s>>2]=f;if(f|0)break;f=lb[c[l>>2]&31](c[e>>2]|0,g+16|0,c[r>>2]|0,c[m>>2]|0)|0;c[s>>2]=f}while(0)}g=c[k>>2]|0;c[r>>2]=c[g+(j*12|0)+4>>2];if(!f){f=lb[c[l>>2]&31](c[e>>2]|0,r,4,c[m>>2]|0)|0;c[s>>2]=f;g=c[k>>2]|0}c[r>>2]=c[g+(j*12|0)+8>>2];if(!f){f=lb[c[l>>2]&31](c[e>>2]|0,r,4,c[m>>2]|0)|0;c[s>>2]=f}j=j+1|0}while((j|0)!=(n|0))}if(!(c[o>>2]|0))n=c[p>>2]|0;else n=0;c[r>>2]=n;if(!f){f=lb[c[e+4>>2]&31](c[e>>2]|0,r,4,c[e+8>>2]|0)|0;c[s>>2]=f}if((n|0)<=0){i=t;return}k=d+28|0;l=e+4|0;m=e+8|0;j=0;do{g=c[(c[k>>2]|0)+(j<<3)>>2]|0;if(!g){c[r>>2]=0;if(!f){f=lb[c[l>>2]&31](c[e>>2]|0,r,4,c[m>>2]|0)|0;c[s>>2]=f}}else{c[r>>2]=(c[g+12>>2]|0)+1;do if(!f){f=lb[c[l>>2]&31](c[e>>2]|0,r,4,c[m>>2]|0)|0;c[s>>2]=f;if(f|0)break;f=lb[c[l>>2]&31](c[e>>2]|0,g+16|0,c[r>>2]|0,c[m>>2]|0)|0;c[s>>2]=f}while(0)}j=j+1|0}while((j|0)!=(n|0));i=t;return}function oe(b,c){b=b|0;c=c|0;b=Ce(b,38,(c<<4)+16|0,0,0)|0;a[b+6>>0]=c;return b|0}function pe(b,d){b=b|0;d=d|0;var e=0;e=d<<2;b=Ce(b,6,e+16|0,0,0)|0;c[b+12>>2]=0;a[b+6>>0]=d;if(!d)return b|0;tn(b+16|0,0,e|0)|0;return b|0}function qe(a){a=a|0;a=Ce(a,10,32,0,0)|0;c[a+8>>2]=a+16;c[a+24>>2]=0;return a|0}function re(b,e){b=b|0;e=e|0;var f=0,g=0,h=0,i=0;i=c[b+12>>2]|0;g=b+56|0;f=c[g>>2]|0;a:do if(!f)f=g;else{while(1){h=c[f+8>>2]|0;if(h>>>0<e>>>0){f=g;break a}if((h|0)==(e|0))break;g=c[f>>2]|0;if(!g)break a;else{h=f;f=g;g=h}}g=f+5|0;h=(d[g>>0]|0)^3;if(((d[i+60>>0]|0)^3)&h|0){i=f;return i|0}a[g>>0]=h;i=f;return i|0}while(0);b=Ce(b,10,32,f,0)|0;c[b+8>>2]=e;h=b+16|0;c[h>>2]=i+112;i=i+128+4|0;e=c[i>>2]|0;c[h+4>>2]=e;c[e+16>>2]=b;c[i>>2]=b;i=b;return i|0}function se(a,b){a=a|0;b=b|0;var d=0,e=0;if((c[b+8>>2]|0)==(b+16|0)){gf(a,b,32,0)|0;return}d=b+16|0;e=c[d+4>>2]|0;c[e+16>>2]=c[d>>2];c[(c[d>>2]|0)+16+4>>2]=e;gf(a,b,32,0)|0;return}function te(a,b){a=a|0;b=b|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0;h=c[a+12>>2]|0;i=a+56|0;e=c[i>>2]|0;if(!e)return;j=h+60|0;k=h+68|0;while(1){f=e+8|0;g=c[f>>2]|0;if(g>>>0<b>>>0){e=10;break}c[i>>2]=c[e>>2];if(!(((d[j>>0]|0)^3)&((d[e+5>>0]|0)^3))){if((g|0)!=(e+16|0)){g=e+16|0;f=c[g+4>>2]|0;c[f+16>>2]=c[g>>2];c[(c[g>>2]|0)+16+4>>2]=f}gf(a,e,32,0)|0}else{l=e+16|0;o=c[l+4>>2]|0;c[o+16>>2]=c[l>>2];c[(c[l>>2]|0)+16+4>>2]=o;l=e+16|0;o=g;n=c[o+4>>2]|0;m=l;c[m>>2]=c[o>>2];c[m+4>>2]=n;c[e+24>>2]=c[g+8>>2];c[f>>2]=l;c[e>>2]=c[k>>2];c[k>>2]=e;Be(h,e)}e=c[i>>2]|0;if(!e){e=10;break}}if((e|0)==10)return}function ue(b){b=b|0;b=Ce(b,9,80,0,0)|0;c[b+8>>2]=0;c[b+44>>2]=0;c[b+16>>2]=0;c[b+56>>2]=0;c[b+12>>2]=0;c[b+32>>2]=0;c[b+48>>2]=0;c[b+20>>2]=0;c[b+52>>2]=0;c[b+28>>2]=0;c[b+40>>2]=0;a[b+76>>0]=0;a[b+77>>0]=0;a[b+78>>0]=0;c[b+24>>2]=0;c[b+60>>2]=0;c[b+64>>2]=0;c[b+68>>2]=0;c[b+36>>2]=0;return b|0}function ve(a,b){a=a|0;b=b|0;gf(a,c[b+12>>2]|0,c[b+48>>2]<<2,0)|0;gf(a,c[b+16>>2]|0,c[b+56>>2]<<2,0)|0;gf(a,c[b+8>>2]|0,c[b+44>>2]<<4,0)|0;gf(a,c[b+20>>2]|0,c[b+52>>2]<<2,0)|0;gf(a,c[b+24>>2]|0,(c[b+60>>2]|0)*12|0,0)|0;gf(a,c[b+28>>2]|0,c[b+40>>2]<<3,0)|0;gf(a,b,80,0)|0;return}function we(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=c[a+60>>2]|0;if((e|0)<=0){f=0;return f|0}f=c[a+24>>2]|0;a=0;while(1){if((c[f+(a*12|0)+4>>2]|0)>(d|0)){a=0;b=8;break}if((c[f+(a*12|0)+8>>2]|0)>(d|0)){b=b+-1|0;if(!b){b=6;break}}a=a+1|0;if((a|0)>=(e|0)){a=0;b=8;break}}if((b|0)==6){f=(c[f+(a*12|0)>>2]|0)+16|0;return f|0}else if((b|0)==8)return a|0;return 0}function xe(b,e,f){b=b|0;e=e|0;f=f|0;b=c[b+12>>2]|0;if((d[b+61>>0]|0)<2){ye(b,f);return}else{f=e+5|0;a[f>>0]=(d[b+60>>0]|0)&3|(d[f>>0]|0)&184;return}}function ye(b,e){b=b|0;e=e|0;var f=0,g=0,h=0,i=0;i=e+5|0;a[i>>0]=(d[i>>0]|0)&252;switch(d[e+4>>0]|0|0){case 20:case 4:{f=(c[e+12>>2]|0)+17|0;break}case 7:{f=c[e+8>>2]|0;if(f|0?a[f+5>>0]&3:0)ye(b,f);f=c[e+12>>2]|0;if(f|0?a[f+5>>0]&3:0)ye(b,f);f=(c[e+16>>2]|0)+24|0;break}case 10:{g=e+8|0;f=c[g>>2]|0;if((c[f+8>>2]&64|0)!=0?(h=c[f>>2]|0,(a[h+5>>0]&3)!=0):0){ye(b,h);f=c[g>>2]|0}if((f|0)==(e+16|0))f=32;else return;break}case 6:{b=b+84|0;c[e+8>>2]=c[b>>2];c[b>>2]=e;return}case 38:{b=b+84|0;c[e+8>>2]=c[b>>2];c[b>>2]=e;return}case 5:{b=b+84|0;c[e+28>>2]=c[b>>2];c[b>>2]=e;return}case 8:{b=b+84|0;c[e+60>>2]=c[b>>2];c[b>>2]=e;return}case 9:{b=b+84|0;c[e+72>>2]=c[b>>2];c[b>>2]=e;return}default:return}a[i>>0]=d[i>>0]|0|4;b=b+16|0;c[b>>2]=(c[b>>2]|0)+f;return}function ze(b,e){b=b|0;e=e|0;var f=0;b=c[b+12>>2]|0;f=e+5|0;a[f>>0]=(d[f>>0]|0)&251;b=b+88|0;c[e+28>>2]=c[b>>2];c[b>>2]=e;return}function Ae(b,e,f){b=b|0;e=e|0;f=f|0;var g=0,h=0;if(c[e+32>>2]|0){f=c[b+12>>2]|0;b=e+5|0;a[b>>0]=(d[b>>0]|0)&251;f=f+88|0;c[e+72>>2]=c[f>>2];c[f>>2]=e;return}if(!(a[f+5>>0]&3))return;g=e+5|0;h=a[g>>0]|0;if(!(h&4))return;e=c[b+12>>2]|0;if((d[e+61>>0]|0)<2){ye(e,f);return}else{a[g>>0]=(d[e+60>>0]|0)&3|h&184;return}}function Be(b,e){b=b|0;e=e|0;var f=0,g=0;f=e+5|0;g=d[f>>0]|0;if(g&7|0)return;if((a[b+62>>0]|0)!=2?(d[b+61>>0]|0)>=2:0){a[f>>0]=d[b+60>>0]&3|g&184;return}a[f>>0]=g&187|4;f=c[e+8>>2]|0;if(!(c[f+8>>2]&64))return;f=c[f>>2]|0;if(!(a[f+5>>0]&3))return;ye(b,f);return}function Ce(b,e,f,g,h){b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;var i=0;i=c[b+12>>2]|0;f=(gf(b,0,e&15,f)|0)+h|0;h=(g|0)==0?i+68|0:g;a[f+5>>0]=(d[i+60>>0]|0)&3;a[f+4>>0]=e;c[f>>2]=c[h>>2];c[h>>2]=f;return f|0}function De(b,e,f){b=b|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0;i=c[b+12>>2]|0;j=e+5|0;if((f|0)==0|(a[j>>0]&24)!=0)return;if(a[f+6>>0]&4)return;if(!(og(f,2,c[i+192>>2]|0)|0))return;h=i+76|0;g=c[h>>2]|0;if((g|0)==(e|0)){do f=Ee(b,g,1)|0;while((f|0)==(g|0));c[h>>2]=f}f=i+68|0;while(1){g=c[f>>2]|0;if((g|0)==(e|0))break;else f=g}c[f>>2]=c[e>>2];f=i+72|0;c[e>>2]=c[f>>2];c[f>>2]=e;f=d[j>>0]|0|16;a[j>>0]=f;if((d[i+61>>0]|0)<2)f=f&191;else f=(d[i+60>>0]|0)&3|f&184;a[j>>0]=f;return}function Ee(b,e,f){b=b|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0;m=b+12|0;k=c[(c[m>>2]|0)+60>>2]|0;n=k&255^3;l=(k&16711680|0)==131072;j=l?255:184;k=l?64:k&3;l=l?64:0;g=c[e>>2]|0;a:do if(!g)g=0;else{i=f;b:while(1){if(!i)break a;i=i+-1|0;f=g+5|0;h=d[f>>0]|0;c:do if(!((h^3)&n)){c[e>>2]=c[g>>2];h=c[g+4>>2]|0;f=h>>>16;switch(h&255|0){case 9:{ve(b,g);break c}case 6:{gf(b,g,(f<<2&1020)+16|0,0)|0;break c}case 38:{gf(b,g,(f<<4&4080)+16|0,0)|0;break c}case 10:{se(b,g);break c}case 5:{jg(b,g);break c}case 8:{Uf(b,g);break c}case 7:{gf(b,g,(c[g+16>>2]|0)+24|0,0)|0;break c}case 4:{h=(c[m>>2]|0)+28|0;c[h>>2]=(c[h>>2]|0)+-1;break}case 20:break;default:break c}gf(b,g,(c[g+12>>2]|0)+17|0,0)|0}else{if(h&l|0){g=0;break b}if(((a[g+4>>0]|0)==8?c[g+28>>2]|0:0)?(Ee(b,g+56|0,-3)|0,Tf(g),(a[(c[m>>2]|0)+62>>0]|0)!=1):0)ge(g);a[f>>0]=h&j|k;e=g}while(0);g=c[e>>2]|0;if(!g){g=0;break a}}return g|0}while(0);b=(g|0)==0?0:e;return b|0}function Fe(b,e){b=b|0;e=e|0;var f=0,g=0,h=0;g=b+12|0;h=c[g>>2]|0;f=h+62|0;if((d[f>>0]|0)==(e|0))return;if((e|0)==2){e=h+61|0;if(a[e>>0]|0)do Ge(b)|0;while((a[e>>0]|0)!=0);c[h+20>>2]=(c[h+12>>2]|0)+(c[h+8>>2]|0);a[f>>0]=2;return}a[f>>0]=0;a[h+61>>0]=2;c[h+64>>2]=0;f=h+72|0;do e=Ee(b,f,1)|0;while((e|0)==(f|0));c[h+80>>2]=e;f=h+68|0;do e=Ee(b,f,1)|0;while((e|0)==(f|0));c[h+76>>2]=e;e=(c[g>>2]|0)+61|0;if(1<<d[e>>0]&-29|0)return;do Ge(b)|0;while(!(1<<d[e>>0]&-29|0));return}function Ge(b){b=b|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0;v=i;i=i+16|0;g=v;t=b+12|0;u=c[t>>2]|0;n=u+61|0;switch(d[n>>0]|0){case 5:{g=u+16|0;c[g>>2]=c[u+32>>2]<<2;e=u+84|0;c[e>>2]=0;c[e+4>>2]=0;c[e+8>>2]=0;c[e+12>>2]=0;c[e+16>>2]=0;e=c[u+172>>2]|0;if(e|0?a[e+5>>0]&3:0)ye(u,e);if(c[u+48>>2]&64|0?(f=c[u+40>>2]|0,a[f+5>>0]&3):0)ye(u,f);He(u);e=c[u+104>>2]|0;if(e|0){f=u+60|0;do{b=e+5|0;a[b>>0]=d[f>>0]&3|d[b>>0]&184;ye(u,e);e=c[e>>2]|0}while((e|0)!=0)}a[n>>0]=0;b=c[g>>2]|0;i=v;return b|0}case 0:{m=u+84|0;if(c[m>>2]|0){t=u+16|0;b=c[t>>2]|0;Ie(u);b=(c[t>>2]|0)-b|0;i=v;return b|0}a[n>>0]=1;r=u+16|0;g=c[r>>2]|0;s=u+20|0;c[s>>2]=g;if(a[b+5>>0]&3)ye(u,b);if(c[u+48>>2]&64|0?(e=c[u+40>>2]|0,a[e+5>>0]&3):0)ye(u,e);He(u);f=u+112|0;e=c[u+128+4>>2]|0;if((e|0)!=(f|0))do{if(((a[e+5>>0]&7)==0?(h=c[e+8>>2]|0,c[h+8>>2]&64|0):0)?(j=c[h>>2]|0,a[j+5>>0]&3):0)ye(u,j);e=c[e+16+4>>2]|0}while((e|0)!=(f|0));if(c[m>>2]|0)do Ie(u);while((c[m>>2]|0)!=0);k=(c[r>>2]|0)-g|0;q=u+92|0;e=c[q>>2]|0;o=u+88|0;p=c[o>>2]|0;l=u+96|0;f=c[l>>2]|0;c[l>>2]=0;c[o>>2]=0;c[q>>2]=0;c[m>>2]=p;if(p|0)do Ie(u);while((c[m>>2]|0)!=0);c[m>>2]=e;if(e|0)do Ie(u);while((c[m>>2]|0)!=0);c[m>>2]=f;if(f|0)do Ie(u);while((c[m>>2]|0)!=0);j=c[r>>2]|0;while(1){f=c[l>>2]|0;c[l>>2]=0;e=0;a:while(1){g=f;while(1){if(!g)break a;f=c[g+28>>2]|0;if(!(Je(u,g)|0))g=f;else break}if(!(c[m>>2]|0)){e=1;continue}while(1){Ie(u);if(!(c[m>>2]|0)){e=1;continue a}}}if(!e)break}Ke(u,c[q>>2]|0,0);n=u+100|0;Ke(u,c[n>>2]|0,0);o=c[q>>2]|0;p=c[n>>2]|0;g=c[r>>2]|0;h=c[t>>2]|0;f=h+104|0;while(1){e=c[f>>2]|0;if(!e)break;else f=e}k=k-j+g|0;g=h+72|0;e=c[g>>2]|0;b:do if(e|0)do{while(1){h=e+5|0;j=d[h>>0]|0;if(!(j&3)){g=e;break}a[h>>0]=j|8;c[g>>2]=c[e>>2];c[e>>2]=c[f>>2];c[f>>2]=e;f=c[g>>2]|0;if(!f)break b;else{j=e;e=f;f=j}}e=c[g>>2]|0}while((e|0)!=0);while(0);e=c[u+104>>2]|0;if(e|0){f=u+60|0;do{j=e+5|0;a[j>>0]=d[f>>0]&3|d[j>>0]&184;ye(u,e);e=c[e>>2]|0}while((e|0)!=0)}if(c[m>>2]|0)do Ie(u);while((c[m>>2]|0)!=0);h=c[r>>2]|0;while(1){f=c[l>>2]|0;c[l>>2]=0;e=0;c:while(1){g=f;while(1){if(!g)break c;f=c[g+28>>2]|0;if(!(Je(u,g)|0))g=f;else break}if(!(c[m>>2]|0)){e=1;continue}while(1){Ie(u);if(!(c[m>>2]|0)){e=1;continue c}}}if(!e)break}m=k-h|0;e=c[l>>2]|0;if(e|0)do{k=a[e+7>>0]|0;f=c[e+16>>2]|0;l=f+(1<<(k&255)<<5)|0;if(k<<24>>24!=31)do{g=f+8|0;do if(c[g>>2]|0){h=f+24|0;j=c[h>>2]|0;if(!(j&64))break;k=c[f+16>>2]|0;if((j&15|0)!=4){if(!(a[k+5>>0]&3))break;c[g>>2]=0;c[h>>2]=11;break}if(!k)break;if(!(a[k+5>>0]&3))break;ye(u,k)}while(0);f=f+32|0}while(f>>>0<l>>>0);e=c[e+28>>2]|0}while((e|0)!=0);e=c[n>>2]|0;if(e|0)do{k=a[e+7>>0]|0;f=c[e+16>>2]|0;l=f+(1<<(k&255)<<5)|0;if(k<<24>>24!=31)do{g=f+8|0;do if(c[g>>2]|0){h=f+24|0;j=c[h>>2]|0;if(!(j&64))break;k=c[f+16>>2]|0;if((j&15|0)!=4){if(!(a[k+5>>0]&3))break;c[g>>2]=0;c[h>>2]=11;break}if(!k)break;if(!(a[k+5>>0]&3))break;ye(u,k)}while(0);f=f+32|0}while(f>>>0<l>>>0);e=c[e+28>>2]|0}while((e|0)!=0);Ke(u,c[q>>2]|0,o);Ke(u,c[n>>2]|0,p);k=u+60|0;a[k>>0]=d[k>>0]^3;k=m+(c[r>>2]|0)|0;c[s>>2]=(c[s>>2]|0)+k;j=c[t>>2]|0;a[j+61>>0]=2;c[j+64>>2]=0;g=j+72|0;e=0;while(1){f=e+1|0;e=Ee(b,g,1)|0;if((e|0)==(g|0))e=f;else{h=f;break}}c[j+80>>2]=e;g=j+68|0;f=0;do{f=f+1|0;e=Ee(b,g,1)|0}while((e|0)==(g|0));c[j+76>>2]=e;b=((f+h|0)*5|0)+k|0;i=v;return b|0}case 2:{l=u+64|0;k=u+32|0;j=u+24|0;e=0;while(1){g=c[l>>2]|0;h=g+e|0;f=c[k>>2]|0;if((h|0)>=(f|0))break;Ee(b,(c[j>>2]|0)+(h<<2)|0,-3)|0;e=e+1|0;if((e|0)>=80){m=93;break}}if((m|0)==93){g=c[l>>2]|0;f=c[k>>2]|0}b=g+e|0;c[l>>2]=b;if((b|0)>=(f|0))a[n>>0]=3;b=e*5|0;i=v;return b|0}case 3:{e=u+80|0;f=c[e>>2]|0;if(!f){a[n>>0]=4;b=0;i=v;return b|0}else{c[e>>2]=Ee(b,f,80)|0;b=400;i=v;return b|0}}case 4:{e=u+76|0;f=c[e>>2]|0;if(f|0){c[e>>2]=Ee(b,f,80)|0;b=400;i=v;return b|0}c[g>>2]=c[u+172>>2];Ee(b,g,1)|0;e=c[t>>2]|0;if((a[e+62>>0]|0)!=1){f=(c[e+32>>2]|0)/2|0;if((c[e+28>>2]|0)>>>0<f>>>0)Yf(b,f);t=e+144|0;u=e+152|0;c[t>>2]=gf(b,c[t>>2]|0,c[u>>2]|0,0)|0;c[u>>2]=0}a[n>>0]=5;b=5;i=v;return b|0}default:{b=0;i=v;return b|0}}return 0}function He(b){b=b|0;var d=0;d=c[b+252>>2]|0;if(d|0?a[d+5>>0]&3:0)ye(b,d);d=c[b+256>>2]|0;if(d|0?a[d+5>>0]&3:0)ye(b,d);d=c[b+260>>2]|0;if(d|0?a[d+5>>0]&3:0)ye(b,d);d=c[b+264>>2]|0;if(d|0?a[d+5>>0]&3:0)ye(b,d);d=c[b+268>>2]|0;if(d|0?a[d+5>>0]&3:0)ye(b,d);d=c[b+272>>2]|0;if(d|0?a[d+5>>0]&3:0)ye(b,d);d=c[b+276>>2]|0;if(d|0?a[d+5>>0]&3:0)ye(b,d);d=c[b+280>>2]|0;if(d|0?a[d+5>>0]&3:0)ye(b,d);d=c[b+284>>2]|0;if(!d)return;if(!(a[d+5>>0]&3))return;ye(b,d);return}function Ie(b){b=b|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0;f=b+84|0;t=c[f>>2]|0;h=t+5|0;a[h>>0]=d[h>>0]|4;e=c[t+4>>2]|0;g=e>>>16;i=g&255;switch(e&255|0){case 5:{k=t+28|0;c[f>>2]=c[k>>2];g=t+24|0;f=c[g>>2]|0;do if(f){if(!(a[f+6>>0]&8)){e=og(f,3,c[b+196>>2]|0)|0;f=c[g>>2]|0;if(f)q=5}else{e=0;q=5}if((q|0)==5)if(a[f+5>>0]&3)ye(b,f);if(((e|0)!=0?(c[e+8>>2]&15|0)==4:0)?(m=(c[e>>2]|0)+16|0,l=Bm(m,107)|0,l=(l|0)!=0,m=(Bm(m,118)|0)!=0,l|m):0){a[h>>0]=d[h>>0]&251;if(l)if(m){s=b+100|0;c[k>>2]=c[s>>2];c[s>>2]=t;break}else{Je(b,t)|0;break}s=a[t+7>>0]|0;f=c[t+16>>2]|0;j=f+(1<<(s&255)<<5)|0;e=(c[t+8>>2]|0)>0&1;if(s<<24>>24!=31)do{g=f+8|0;h=f+24|0;i=(c[h>>2]&64|0)==0;if(!(c[g>>2]|0)){if(!i?(a[(c[f+16>>2]|0)+5>>0]&3)!=0:0)c[h>>2]=11}else{if(!i?(p=c[f+16>>2]|0,a[p+5>>0]&3):0)ye(b,p);if(!e){e=c[g>>2]|0;do if(e&64){g=c[f>>2]|0;if((e&15|0)!=4){e=d[g+5>>0]&3;break}if((g|0)!=0?(a[g+5>>0]&3)!=0:0){ye(b,g);e=0}else e=0}else e=0;while(0);e=(e|0)!=0&1}}f=f+32|0}while(f>>>0<j>>>0);if(!e){s=b+88|0;c[k>>2]=c[s>>2];c[s>>2]=t;break}else{s=b+92|0;c[k>>2]=c[s>>2];c[s>>2]=t;break}}else q=34}else q=34;while(0);if((q|0)==34){i=t+16|0;e=c[i>>2]|0;k=e+(1<<d[t+7>>0]<<5)|0;j=t+8|0;f=c[j>>2]|0;if((f|0)>0){h=t+12|0;g=0;do{e=c[h>>2]|0;if((c[e+(g<<4)+8>>2]&64|0)!=0?(o=c[e+(g<<4)>>2]|0,(a[o+5>>0]&3)!=0):0){ye(b,o);f=c[j>>2]|0}g=g+1|0}while((g|0)<(f|0));e=c[i>>2]|0}if(e>>>0<k>>>0)do{g=e+8|0;f=c[g>>2]|0;h=e+24|0;i=(c[h>>2]&64|0)==0;if(!f){if(!i?a[(c[e+16>>2]|0)+5>>0]&3:0)c[h>>2]=11}else{if(!i?(r=c[e+16>>2]|0,(a[r+5>>0]&3)!=0):0){ye(b,r);f=c[g>>2]|0}if(f&64|0?(s=c[e>>2]|0,a[s+5>>0]&3):0)ye(b,s)}e=e+32|0}while(e>>>0<k>>>0)}e=(c[t+8>>2]<<4)+32+(32<<d[t+7>>0])|0;break}case 6:{c[f>>2]=c[t+8>>2];e=c[t+12>>2]|0;if((e|0)!=0?(a[e+5>>0]&3)!=0:0){ye(b,e);e=a[t+6>>0]|0}else e=i;h=t+6|0;if(!(e<<24>>24))e=e&255;else{g=0;while(1){f=c[t+16+(g<<2)>>2]|0;if((f|0)!=0?(a[f+5>>0]&3)!=0:0){ye(b,f);f=a[h>>0]|0}else f=e;g=g+1|0;e=f&255;if((g|0)>=(e|0))break;else e=f}}e=(e<<2)+16|0;break}case 38:{c[f>>2]=c[t+8>>2];h=t+6|0;if(!(i<<24>>24))e=g&255;else{e=i;g=0;while(1){if((c[t+16+(g<<4)+8>>2]&64|0)!=0?(j=c[t+16+(g<<4)>>2]|0,(a[j+5>>0]&3)!=0):0){ye(b,j);f=a[h>>0]|0}else f=e;g=g+1|0;e=f&255;if((g|0)>=(e|0))break;else e=f}}e=(e<<4)+16|0;break}case 8:{r=t+60|0;c[f>>2]=c[r>>2];s=b+88|0;c[r>>2]=c[s>>2];c[s>>2]=t;a[h>>0]=e>>>8&251;h=t+28|0;e=c[h>>2]|0;if(!e)e=1;else{g=t+8|0;f=c[g>>2]|0;if(e>>>0<f>>>0)do{if((c[e+8>>2]&64|0)!=0?(k=c[e>>2]|0,(a[k+5>>0]&3)!=0):0){ye(b,k);f=c[g>>2]|0}e=e+16|0}while(e>>>0<f>>>0);if((a[b+61>>0]|0)==1){f=(c[h>>2]|0)+(c[t+32>>2]<<4)|0;if(e>>>0<f>>>0){do{c[e+8>>2]=0;e=e+16|0}while(e>>>0<f>>>0);e=112}else e=112}else{e=t+72|0;g=c[t+16>>2]|0;if((e|0)==(g|0))e=112;else{f=e;e=0;do{e=e+1|0;f=c[f+12>>2]|0}while((f|0)!=(g|0));e=(e*40|0)+112|0}}e=(c[t+32>>2]<<4)+e|0}break}case 9:{c[f>>2]=c[t+72>>2];e=t+32|0;s=c[e>>2]|0;if(s|0?a[s+5>>0]&3:0)c[e>>2]=0;e=c[t+36>>2]|0;if(e|0?a[e+5>>0]&3:0)ye(b,e);l=t+44|0;e=c[l>>2]|0;if((e|0)>0){h=t+8|0;g=0;do{f=c[h>>2]|0;if((c[f+(g<<4)+8>>2]&64|0)!=0?(n=c[f+(g<<4)>>2]|0,(a[n+5>>0]&3)!=0):0){ye(b,n);e=c[l>>2]|0}g=g+1|0}while((g|0)<(e|0))}k=t+40|0;e=c[k>>2]|0;if((e|0)>0){h=t+28|0;g=0;do{f=c[(c[h>>2]|0)+(g<<3)>>2]|0;if((f|0)!=0?(a[f+5>>0]&3)!=0:0){ye(b,f);e=c[k>>2]|0}g=g+1|0}while((g|0)<(e|0))}j=t+56|0;f=c[j>>2]|0;if((f|0)>0){h=t+16|0;g=0;do{e=c[(c[h>>2]|0)+(g<<2)>>2]|0;if((e|0)!=0?(a[e+5>>0]&3)!=0:0){ye(b,e);f=c[j>>2]|0}g=g+1|0}while((g|0)<(f|0))}i=t+60|0;e=c[i>>2]|0;if((e|0)>0){h=t+24|0;g=0;do{f=c[(c[h>>2]|0)+(g*12|0)>>2]|0;if((f|0)!=0?(a[f+5>>0]&3)!=0:0){ye(b,f);e=c[i>>2]|0}g=g+1|0}while((g|0)<(e|0));f=c[j>>2]|0}e=(e*12|0)+80+(c[l>>2]<<4)+(c[k>>2]<<3)+((c[t+48>>2]|0)+f+(c[t+52>>2]|0)<<2)|0;break}default:return}b=b+16|0;c[b>>2]=(c[b>>2]|0)+e;return}function Je(b,e){b=b|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;m=e+16|0;f=c[m>>2]|0;p=f+(1<<d[e+7>>0]<<5)|0;l=e+8|0;g=c[l>>2]|0;if((g|0)>0){j=e+12|0;h=g;i=0;g=0;while(1){f=c[j>>2]|0;if((c[f+(i<<4)+8>>2]&64|0)!=0?(k=c[f+(i<<4)>>2]|0,(a[k+5>>0]&3)!=0):0){ye(b,k);f=c[l>>2]|0;g=1}else f=h;i=i+1|0;if((i|0)>=(f|0))break;else h=f}f=c[m>>2]|0}else g=0;if(f>>>0<p>>>0){h=0;n=f;f=0;do{k=n+8|0;l=c[k>>2]|0;i=n+24|0;m=c[i>>2]|0;j=(m&64|0)==0;a:do if(!l){if(!j?(a[(c[n+16>>2]|0)+5>>0]&3)!=0:0)c[i>>2]=11}else{do if(j){o=l;q=18}else{j=c[n+16>>2]|0;if((m&15|0)==4){if(!j){o=l;q=18;break}if(!(a[j+5>>0]&3)){o=l;q=18;break}ye(b,j);o=c[k>>2]|0;q=18;break}i=(l&64|0)==0;if(!(a[j+5>>0]&3))if(i)break a;else break;if(i){h=1;break a}h=1;f=(a[(c[n>>2]|0)+5>>0]&3)==0?f:1;break a}while(0);if((q|0)==18?(q=0,(o&64|0)==0):0)break;i=c[n>>2]|0;if(a[i+5>>0]&3){ye(b,i);g=1}}while(0);n=n+32|0}while(n>>>0<p>>>0)}else{h=0;f=0}if((f|0)!=0|(a[b+61>>0]|0)!=1){b=b+96|0;c[e+28>>2]=c[b>>2];c[b>>2]=e;return g|0}if(!h){b=b+88|0;c[e+28>>2]=c[b>>2];c[b>>2]=e;return g|0}else{b=b+100|0;c[e+28>>2]=c[b>>2];c[b>>2]=e;return g|0}return 0}function Ke(b,e,f){b=b|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0;if((e|0)==(f|0))return;do{j=e+16|0;g=c[j>>2]|0;l=g+(1<<(d[e+7>>0]|0)<<5)|0;k=e+8|0;if((c[k>>2]|0)>0){g=e+12|0;i=0;do{h=c[g>>2]|0;if(Le(b,h+(i<<4)|0)|0)c[h+(i<<4)+8>>2]=0;i=i+1|0}while((i|0)<(c[k>>2]|0));g=c[j>>2]|0}if(g>>>0<l>>>0)do{h=g+8|0;if(((c[h>>2]|0?Le(b,g)|0:0)?(c[h>>2]=0,m=g+24|0,c[m>>2]&64|0):0)?a[(c[g+16>>2]|0)+5>>0]&3:0)c[m>>2]=11;g=g+32|0}while(g>>>0<l>>>0);e=c[e+28>>2]|0}while((e|0)!=(f|0));return}function Le(b,e){b=b|0;e=e|0;var f=0;f=c[e+8>>2]|0;if(!(f&64)){b=0;return b|0}e=c[e>>2]|0;if((f&15|0)!=4){b=(d[e+5>>0]|0)&3;return b|0}if(!e){b=0;return b|0}if(!(a[e+5>>0]&3)){b=0;return b|0}ye(b,e);b=0;return b|0}function Me(a,b){a=a|0;b=b|0;var e=0;e=(c[a+12>>2]|0)+61|0;if(1<<(d[e>>0]|0)&b|0)return;do Ge(a)|0;while(!(1<<(d[e>>0]|0)&b|0));return}function Ne(b){b=b|0;var e=0,f=0,g=0,h=0,i=0,j=0;h=b+12|0;j=c[h>>2]|0;f=j+104|0;while(1){e=c[f>>2]|0;if(!e)break;else f=e}i=j+72|0;e=c[i>>2]|0;if(!e)e=j;else{g=e;while(1){e=g+5|0;a[e>>0]=d[e>>0]|0|8;c[i>>2]=c[g>>2];c[g>>2]=c[f>>2];c[f>>2]=g;e=c[i>>2]|0;if(!e)break;else{f=g;g=e}}e=c[h>>2]|0}f=e+104|0;e=c[f>>2]|0;if(e|0)do{h=e+5|0;a[h>>0]=(d[h>>0]|0)&191;Oe(b,0);e=c[f>>2]|0}while((e|0)!=0);a[j+60>>0]=3;a[j+62>>0]=0;Ee(b,i,-3)|0;Ee(b,j+68|0,-3)|0;g=j+32|0;if((c[g>>2]|0)<=0)return;e=j+24|0;f=0;do{Ee(b,(c[e>>2]|0)+(f<<2)|0,-3)|0;f=f+1|0}while((f|0)<(c[g>>2]|0));return}function Oe(b,e){b=b|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0;m=i;i=i+32|0;n=m+16|0;l=m;k=c[b+12>>2]|0;f=k+104|0;h=c[f>>2]|0;c[f>>2]=c[h>>2];f=k+68|0;c[h>>2]=c[f>>2];c[f>>2]=h;f=h+5|0;g=d[f>>0]|0;a[f>>0]=g&239;if((d[k+61>>0]|0)>=2)a[f>>0]=(d[k+60>>0]|0)&3|g&168;c[l>>2]=h;j=l+8|0;c[j>>2]=d[h+4>>0]|0|64;f=pg(b,l,2)|0;if(!f){i=m;return}g=f+8|0;if((c[g>>2]&15|0)!=6){i=m;return}p=b+41|0;q=a[p>>0]|0;k=k+63|0;o=a[k>>0]|0;a[p>>0]=0;a[k>>0]=0;h=b+8|0;r=c[h>>2]|0;t=f;s=c[t+4>>2]|0;f=r;c[f>>2]=c[t>>2];c[f+4>>2]=s;c[r+8>>2]=c[g>>2];f=c[h>>2]|0;r=l;g=c[r+4>>2]|0;l=f+16|0;c[l>>2]=c[r>>2];c[l+4>>2]=g;c[f+24>>2]=c[j>>2];f=c[h>>2]|0;c[h>>2]=f+32;f=je(b,23,0,f-(c[b+28>>2]|0)|0,0)|0;a[p>>0]=q;a[k>>0]=o;if(!((e|0)!=0&(f|0)!=0)){i=m;return}if((f|0)!=2){t=f;_d(b,t)}f=c[h>>2]|0;if((c[f+-8>>2]&15|0)==4)f=(c[f+-16>>2]|0)+16|0;else f=3300;c[n>>2]=f;pf(b,3311,n)|0;t=5;_d(b,t)}function Pe(a,b){a=a|0;b=b|0;ie(a,(c[a+8>>2]|0)+-32|0,0,0);return}function Qe(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0;j=c[b+12>>2]|0;do if((a[j+62>>0]|0)==2){h=j+20|0;d=c[h>>2]|0;if(!d){Re(b,0);d=c[j+8>>2]|0;i=c[j+12>>2]|0;f=j+61|0;e=i;g=d;d=i+d|0}else{f=j+61|0;if((a[f>>0]|0)!=5)do Ge(b)|0;while((a[f>>0]|0)!=5);a[f>>0]=0;g=c[j+8>>2]|0;e=c[j+12>>2]|0;i=(e+g|0)>>>0>(_(c[j+160>>2]|0,(d>>>0)/100|0)|0)>>>0;d=i?0:d}c[h>>2]=d;i=g+e|0;g=(i|0)/100|0;e=c[j+156>>2]|0;h=_(e,0-g|0)|0;Rf(j,((e|0)<(2147483644/(g|0)|0|0)?h:-2147483644)+i|0)}else{e=j+12|0;d=c[j+164>>2]|0;d=(d|0)<40?40:d;g=((c[e>>2]|0)/200|0)+1|0;h=_(d,g)|0;f=j+61|0;h=(g|0)<(2147483644/(d|0)|0|0)?h:2147483644;do{h=h-(Ge(b)|0)|0;g=(a[f>>0]|0)==5;if((h|0)<=-1600){i=11;break}}while(!g);if((i|0)==11?!g:0){Rf(j,((h|0)/(d|0)|0)*200|0);break}h=(c[j+20>>2]|0)/100|0;g=c[j+156>>2]|0;i=_(g,0-h|0)|0;Rf(j,(c[e>>2]|0)+(c[j+8>>2]|0)+((g|0)<(2147483644/(h|0)|0|0)?i:-2147483644)|0)}while(0);d=j+104|0;if(!(c[d>>2]|0))return;else e=0;while(1){if((e|0)>=4?(a[f>>0]|0)!=5:0){i=18;break}Oe(b,1);if(!(c[d>>2]|0)){i=18;break}else e=e+1|0}if((i|0)==18)return}function Re(b,e){b=b|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0;i=b+12|0;j=c[i>>2]|0;k=j+62|0;l=a[k>>0]|0;h=(e|0)!=0;if(!h){a[k>>0]=0;f=j+104|0;e=c[f>>2]|0;if(e){do{g=e+5|0;a[g>>0]=d[g>>0]&191;Oe(b,1);e=c[f>>2]|0}while((e|0)!=0);if((a[k>>0]|0)==2)e=7;else e=6}else e=6}else{a[k>>0]=1;e=6}if((e|0)==6?(d[j+61>>0]|0)<2:0)e=7;if((e|0)==7){g=c[i>>2]|0;a[g+61>>0]=2;c[g+64>>2]=0;f=g+72|0;do e=Ee(b,f,1)|0;while((e|0)==(f|0));c[g+80>>2]=e;f=g+68|0;do e=Ee(b,f,1)|0;while((e|0)==(f|0));c[g+76>>2]=e}e=c[i>>2]|0;f=e+61|0;if((a[f>>0]|0)==5)g=5;else{do Ge(b)|0;while((a[f>>0]|0)!=5);g=c[i>>2]|0;e=g;g=a[g+61>>0]|0}f=e+61|0;if(!(1<<(g&255)&-33)){do Ge(b)|0;while(!(1<<d[f>>0]&-33|0));f=c[i>>2]|0;e=f;f=a[f+61>>0]|0}else f=g;e=e+61|0;if(f<<24>>24!=5)do Ge(b)|0;while((a[e>>0]|0)!=5);if(l<<24>>24==2?(m=(c[i>>2]|0)+61|0,a[m>>0]|0):0)do Ge(b)|0;while((a[m>>0]|0)!=0);a[k>>0]=l;m=(c[j+12>>2]|0)+(c[j+8>>2]|0)|0;k=(m|0)/100|0;g=c[j+156>>2]|0;l=_(k,0-g|0)|0;Rf(j,((g|0)<(2147483644/(k|0)|0|0)?l:-2147483644)+m|0);if(h)return;f=(c[i>>2]|0)+104|0;e=c[f>>2]|0;if(!e)return;do{m=e+5|0;a[m>>0]=d[m>>0]&191;Oe(b,1);e=c[f>>2]|0}while((e|0)!=0);return}function Se(b){b=b|0;var d=0;d=c[b+12>>2]|0;if(!(a[d+63>>0]|0)){Rf(d,-1600);return}else{Qe(b);return}}function Te(b){b=b|0;var e=0,f=0,g=0;e=0;do{f=_f(b,c[16+(e<<2)>>2]|0)|0;g=f+5|0;a[g>>0]=d[g>>0]|0|32;e=e+1|0;a[f+6>>0]=e}while((e|0)!=22);return}function Ue(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0;j=i;i=i+32|0;h=j+16|0;g=j+8|0;f=j;if((d|0)>=257){e=c[16+(d+-257<<2)>>2]|0;if((d|0)>=286){d=e;i=j;return d|0}d=c[b+52>>2]|0;c[h>>2]=e;d=pf(d,3475,h)|0;i=j;return d|0}e=c[b+52>>2]|0;if(!(a[2573+(d+1)>>0]&4)){c[g>>2]=d;d=pf(e,3466,g)|0;i=j;return d|0}else{c[f>>2]=d;d=pf(e,3461,f)|0;i=j;return d|0}return 0}function Ve(a,b){a=a|0;b=b|0;We(a,b,c[a+16>>2]|0)}function We(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;r=i;i=i+128|0;q=r+48|0;h=r+40|0;g=r+32|0;f=r+24|0;m=r+16|0;n=r;r=r+56|0;qf(r,(c[b+68>>2]|0)+16|0,60);p=b+52|0;o=c[p>>2]|0;j=c[b+4>>2]|0;c[n>>2]=r;c[n+4>>2]=j;c[n+8>>2]=d;n=pf(o,3480,n)|0;if(!e){r=c[p>>2]|0;_d(r,3)}o=c[p>>2]|0;do if((e+-287|0)>>>0>=3){if((e|0)>=257){d=c[16+(e+-257<<2)>>2]|0;if((e|0)>=286)break;c[h>>2]=d;d=pf(o,3475,h)|0;break}if(!(a[2573+(e+1)>>0]&4)){c[g>>2]=e;d=pf(o,3466,g)|0;break}else{c[f>>2]=e;d=pf(o,3461,f)|0;break}}else{f=b+60|0;g=c[f>>2]|0;e=g+4|0;d=c[e>>2]|0;h=g+8|0;j=c[h>>2]|0;do if((d+1|0)>>>0>j>>>0){if(j>>>0>2147483645)We(b,3490,0);d=j<<1;if((d|0)==-2)ff(o);else{l=gf(o,c[g>>2]|0,j,d)|0;c[g>>2]=l;c[h>>2]=d;k=c[e>>2]|0;break}}else{k=d;l=c[g>>2]|0}while(0);c[e>>2]=k+1;a[l+k>>0]=0;d=c[p>>2]|0;c[m>>2]=c[c[f>>2]>>2];d=pf(d,3475,m)|0}while(0);c[q>>2]=n;c[q+4>>2]=d;pf(o,3515,q)|0;r=c[p>>2]|0;_d(r,3)}function Xe(a,b,e){a=a|0;b=b|0;e=e|0;var f=0,g=0;g=c[a+52>>2]|0;e=Zf(g,b,e)|0;f=g+8|0;b=c[f>>2]|0;c[f>>2]=b+16;c[b>>2]=e;c[b+8>>2]=d[e+4>>0]|0|64;b=gg(g,c[(c[a+48>>2]|0)+4>>2]|0,(c[f>>2]|0)+-16|0)|0;a=b+8|0;if(!(c[a>>2]|0)){c[b>>2]=1;c[a>>2]=1;if((c[(c[g+12>>2]|0)+12>>2]|0)>0)Se(g)}else e=c[b+16>>2]|0;c[f>>2]=(c[f>>2]|0)+-16;return e|0}function Ye(b,e,f,g,h){b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;var i=0;a[e+76>>0]=46;i=e+52|0;c[i>>2]=b;c[e>>2]=h;c[e+32>>2]=286;c[e+56>>2]=f;c[e+48>>2]=0;c[e+4>>2]=1;c[e+8>>2]=1;c[e+68>>2]=g;f=_f(b,3526)|0;c[e+72>>2]=f;f=f+5|0;a[f>>0]=d[f>>0]|0|32;f=e+60|0;g=c[f>>2]|0;g=gf(c[i>>2]|0,c[g>>2]|0,c[g+8>>2]|0,32)|0;f=c[f>>2]|0;c[f>>2]=g;c[f+8>>2]=32;return}function Ze(a){a=a|0;var b=0;c[a+8>>2]=c[a+4>>2];b=a+32|0;if((c[b>>2]|0)==286){c[a+16>>2]=_e(a,a+24|0)|0;return}else{a=a+16|0;c[a>>2]=c[b>>2];c[a+4>>2]=c[b+4>>2];c[a+8>>2]=c[b+8>>2];c[a+12>>2]=c[b+12>>2];c[b>>2]=286;return}}
function Wm(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0;if((c[d+76>>2]|0)>=0?(gm(d)|0)!=0:0){if((a[d+75>>0]|0)!=(b|0)?(f=d+20|0,g=c[f>>2]|0,g>>>0<(c[d+16>>2]|0)>>>0):0){c[f>>2]=g+1;a[g>>0]=b;e=b&255}else e=Xm(d,b)|0;ll(d)}else i=3;do if((i|0)==3){if((a[d+75>>0]|0)!=(b|0)?(h=d+20|0,e=c[h>>2]|0,e>>>0<(c[d+16>>2]|0)>>>0):0){c[h>>2]=e+1;a[e>>0]=b;e=b&255;break}e=Xm(d,b)|0}while(0);return e|0}function Xm(b,e){b=b|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0;m=i;i=i+16|0;l=m;k=e&255;a[l>>0]=k;g=b+16|0;h=c[g>>2]|0;if(!h)if(!(am(b)|0)){h=c[g>>2]|0;j=4}else f=-1;else j=4;do if((j|0)==4){g=b+20|0;j=c[g>>2]|0;if(j>>>0<h>>>0?(f=e&255,(f|0)!=(a[b+75>>0]|0)):0){c[g>>2]=j+1;a[j>>0]=k;break}if((hb[c[b+36>>2]&31](b,l,1)|0)==1)f=d[l>>0]|0;else f=-1}while(0);i=m;return f|0}function Ym(a){a=a|0;var b=0;if((c[a+76>>2]|0)>-1){b=(gm(a)|0)==0;a=Zm(a)|0}else a=Zm(a)|0;return a|0}function Zm(a){a=a|0;var b=0;if(!(c[a>>2]&128))b=1;else b=(c[a+20>>2]|0)>>>0>(c[a+28>>2]|0)>>>0?2:1;b=hb[c[a+40>>2]&31](a,0,b)|0;if((b|0)>=0)b=b-(c[a+8>>2]|0)+(c[a+4>>2]|0)+(c[a+20>>2]|0)-(c[a+28>>2]|0)|0;return b|0}function _m(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0;j=i;i=i+32|0;f=j+16|0;e=j;g=Am(b)|0;if((c[d+76>>2]|0)>-1)h=gm(d)|0;else h=0;Em(d)|0;do if(!a){a=d+60|0;if(g&524288|0){c[e>>2]=c[a>>2];c[e+4>>2]=2;c[e+8>>2]=1;qa(221,e|0)|0}c[f>>2]=c[a>>2];c[f+4>>2]=4;c[f+8>>2]=g&-524481;if((hl(qa(221,f|0)|0)|0)<0)a=15;else a=12}else{a=zm(a,b)|0;if(!a)a=15;else{b=a+60|0;e=c[b>>2]|0;f=c[d+60>>2]|0;if((e|0)!=(f|0)){if(($m(e,f,g&524288)|0)<0){Dm(a)|0;a=15;break}}else c[b>>2]=-1;c[d>>2]=c[d>>2]&1|c[a>>2];c[d+32>>2]=c[a+32>>2];c[d+36>>2]=c[a+36>>2];c[d+40>>2]=c[a+40>>2];c[d+12>>2]=c[a+12>>2];Dm(a)|0;a=12}}while(0);if((a|0)==12){if(h)ll(d)}else if((a|0)==15){Dm(d)|0;d=0}i=j;return d|0}function $m(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0;k=i;i=i+48|0;j=k+24|0;g=k+16|0;f=k;a:do if((a|0)==(b|0))e=hl(-22)|0;else{h=(d&524288|0)!=0;b:do if(h){c:while(1){c[f>>2]=a;c[f+4>>2]=b;c[f+8>>2]=d;e=Ha(330,f|0)|0;switch(e|0){case -38:break b;case -16:break;default:break c}}e=hl(e)|0;break a}while(0);do{c[g>>2]=a;c[g+4>>2]=b;e=ta(63,g|0)|0}while((e|0)==-16);if(h){c[j>>2]=b;c[j+4>>2]=2;c[j+8>>2]=1;qa(221,j|0)|0}e=hl(e)|0}while(0);i=k;return e|0}function an(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;d=b+75|0;a[d>>0]=-1;switch(e|0){case 2:{c[b+48>>2]=0;break}case 1:{a[d>>0]=10;break}default:{}}c[b>>2]=c[b>>2]|64;return 0}function bn(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0;do if((b|0)!=-1){if((c[d+76>>2]|0)>-1)g=gm(d)|0;else g=0;if(!((c[d+8>>2]|0)==0?(pm(d)|0)!=0:0))h=6;if((h|0)==6?(e=d+4|0,f=c[e>>2]|0,f>>>0>((c[d+44>>2]|0)+-8|0)>>>0):0){h=f+-1|0;c[e>>2]=h;a[h>>0]=b;c[d>>2]=c[d>>2]&-17;if(!g)break;ll(d);break}if(g){ll(d);b=-1}else b=-1}else b=-1;while(0);return b|0}function cn(a){a=a|0;var b=0;if((c[a+76>>2]|0)>-1){b=(gm(a)|0)==0;c[a>>2]=c[a>>2]&-49;if(!b)ll(a)}else c[a>>2]=c[a>>2]&-49;return}function dn(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0;f=_(d,b)|0;if((c[e+76>>2]|0)>-1){g=(gm(e)|0)==0;a=$l(a,f,e)|0;if(!g)ll(e)}else a=$l(a,f,e)|0;if((a|0)!=(f|0))d=(a>>>0)/(b>>>0)|0;return d|0}function en(a){a=a|0;return Ym(a)|0}function fn(){var a=0,b=0,d=0,e=0,f=0,g=0,h=0,j=0;j=i;i=i+48|0;g=j+16|0;f=j;d=j+20|0;e=0;while(1){a=gn(d)|0;if(!a){a=0;break}c[f>>2]=a;c[f+4>>2]=32962;c[f+8>>2]=384;b=hl($a(5,f|0)|0)|0;e=e+1|0;if((b|0)>-1){h=5;break}if((e|0)>=100){a=0;break}}if((h|0)==5){h=Cm(b,12918)|0;c[g>>2]=a;Wa(10,g|0)|0;a=h}i=j;return a|0}function gn(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0;l=i;i=i+64|0;g=l+32|0;j=l+24|0;h=l+8|0;b=l;k=l+40|0;f=l+48|0;c[k>>2]=a;if(!a)c[k>>2]=15609;c[b>>2]=12901;c[b+4>>2]=7;if(!(Ra(33,b|0)|0)){b=f+4|0;d=k;e=0;while(1){c[h>>2]=0;c[h+4>>2]=f;c[h+8>>2]=0;sa(265,h|0)|0;a=c[k>>2]|0;m=c[b>>2]^d^a;n=c[3259]|0;c[3259]=n+1;c[j>>2]=n;c[j+4>>2]=m;Wl(a,20,12906,j)|0;c[g>>2]=c[k>>2];c[g+4>>2]=0;if(Ra(33,g|0)|0){a=e;break}a=e+1|0;if((e|0)<100)e=a;else break}a=(a|0)>99?0:c[k>>2]|0}else a=0;i=l;return a|0}function hn(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,l=0;j=_(e,d)|0;if((c[f+76>>2]|0)>-1)k=gm(f)|0;else k=0;g=f+74|0;i=a[g>>0]|0;a[g>>0]=i+255|i;g=f+4|0;i=c[g>>2]|0;h=(c[f+8>>2]|0)-i|0;if((h|0)>0){h=h>>>0<j>>>0?h:j;zn(b|0,i|0,h|0)|0;c[g>>2]=i+h;b=b+h|0;g=j-h|0}else g=j;a:do if(!g)l=13;else{i=f+32|0;h=g;while(1){if(pm(f)|0){e=h;break}g=hb[c[i>>2]&31](f,b,h)|0;if((g+1|0)>>>0<2){e=h;break}if((h|0)==(g|0)){l=13;break a}else{b=b+g|0;h=h-g|0}}if(k|0)ll(f);e=((j-e|0)>>>0)/(d>>>0)|0}while(0);if((l|0)==13)if(k)ll(f);return e|0}function jn(a,b){a=a|0;b=b|0;var d=0,e=0;d=i;i=i+16|0;e=d;c[e>>2]=a;c[e+4>>2]=b;a=hl(Va(38,e|0)|0)|0;i=d;return a|0}function kn(a){a=a|0;var b=0,e=0,f=0;if((c[a+76>>2]|0)>=0?(gm(a)|0)!=0:0){b=a+4|0;e=c[b>>2]|0;if(e>>>0<(c[a+8>>2]|0)>>>0){c[b>>2]=e+1;b=d[e>>0]|0}else b=om(a)|0}else f=3;do if((f|0)==3){b=a+4|0;e=c[b>>2]|0;if(e>>>0<(c[a+8>>2]|0)>>>0){c[b>>2]=e+1;b=d[e>>0]|0;break}else{b=om(a)|0;break}}while(0);return b|0}function ln(a){a=a|0;var b=0,d=0,e=0;e=i;i=i+16|0;d=e+8|0;b=e;c[b>>2]=a;b=hl(Wa(10,b|0)|0)|0;if(b){if((c[(il()|0)>>2]|0)==21){c[d>>2]=a;b=hl(va(40,d|0)|0)|0}}else b=0;i=e;return b|0}function mn(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0;do if(a>>>0<245){o=a>>>0<11?16:a+11&-8;a=o>>>3;j=c[3260]|0;b=j>>>a;if(b&3|0){b=(b&1^1)+a|0;d=13080+(b<<1<<2)|0;e=d+8|0;f=c[e>>2]|0;g=f+8|0;h=c[g>>2]|0;do if((d|0)!=(h|0)){if(h>>>0<(c[3264]|0)>>>0)ua();a=h+12|0;if((c[a>>2]|0)==(f|0)){c[a>>2]=d;c[e>>2]=h;break}else ua()}else c[3260]=j&~(1<<b);while(0);L=b<<3;c[f+4>>2]=L|3;L=f+L+4|0;c[L>>2]=c[L>>2]|1;L=g;return L|0}h=c[3262]|0;if(o>>>0>h>>>0){if(b|0){d=2<<a;d=b<<a&(d|0-d);d=(d&0-d)+-1|0;i=d>>>12&16;d=d>>>i;f=d>>>5&8;d=d>>>f;g=d>>>2&4;d=d>>>g;e=d>>>1&2;d=d>>>e;b=d>>>1&1;b=(f|i|g|e|b)+(d>>>b)|0;d=13080+(b<<1<<2)|0;e=d+8|0;g=c[e>>2]|0;i=g+8|0;f=c[i>>2]|0;do if((d|0)!=(f|0)){if(f>>>0<(c[3264]|0)>>>0)ua();a=f+12|0;if((c[a>>2]|0)==(g|0)){c[a>>2]=d;c[e>>2]=f;k=c[3262]|0;break}else ua()}else{c[3260]=j&~(1<<b);k=h}while(0);h=(b<<3)-o|0;c[g+4>>2]=o|3;e=g+o|0;c[e+4>>2]=h|1;c[e+h>>2]=h;if(k|0){f=c[3265]|0;b=k>>>3;d=13080+(b<<1<<2)|0;a=c[3260]|0;b=1<<b;if(a&b){a=d+8|0;b=c[a>>2]|0;if(b>>>0<(c[3264]|0)>>>0)ua();else{l=a;m=b}}else{c[3260]=a|b;l=d+8|0;m=d}c[l>>2]=f;c[m+12>>2]=f;c[f+8>>2]=m;c[f+12>>2]=d}c[3262]=h;c[3265]=e;L=i;return L|0}a=c[3261]|0;if(a){d=(a&0-a)+-1|0;K=d>>>12&16;d=d>>>K;J=d>>>5&8;d=d>>>J;L=d>>>2&4;d=d>>>L;b=d>>>1&2;d=d>>>b;e=d>>>1&1;e=c[13344+((J|K|L|b|e)+(d>>>e)<<2)>>2]|0;d=(c[e+4>>2]&-8)-o|0;b=e;while(1){a=c[b+16>>2]|0;if(!a){a=c[b+20>>2]|0;if(!a){j=e;break}}b=(c[a+4>>2]&-8)-o|0;L=b>>>0<d>>>0;d=L?b:d;b=a;e=L?a:e}g=c[3264]|0;if(j>>>0<g>>>0)ua();i=j+o|0;if(j>>>0>=i>>>0)ua();h=c[j+24>>2]|0;e=c[j+12>>2]|0;do if((e|0)==(j|0)){b=j+20|0;a=c[b>>2]|0;if(!a){b=j+16|0;a=c[b>>2]|0;if(!a){n=0;break}}while(1){e=a+20|0;f=c[e>>2]|0;if(f|0){a=f;b=e;continue}e=a+16|0;f=c[e>>2]|0;if(!f)break;else{a=f;b=e}}if(b>>>0<g>>>0)ua();else{c[b>>2]=0;n=a;break}}else{f=c[j+8>>2]|0;if(f>>>0<g>>>0)ua();a=f+12|0;if((c[a>>2]|0)!=(j|0))ua();b=e+8|0;if((c[b>>2]|0)==(j|0)){c[a>>2]=e;c[b>>2]=f;n=e;break}else ua()}while(0);do if(h|0){a=c[j+28>>2]|0;b=13344+(a<<2)|0;if((j|0)==(c[b>>2]|0)){c[b>>2]=n;if(!n){c[3261]=c[3261]&~(1<<a);break}}else{if(h>>>0<(c[3264]|0)>>>0)ua();a=h+16|0;if((c[a>>2]|0)==(j|0))c[a>>2]=n;else c[h+20>>2]=n;if(!n)break}b=c[3264]|0;if(n>>>0<b>>>0)ua();c[n+24>>2]=h;a=c[j+16>>2]|0;do if(a|0)if(a>>>0<b>>>0)ua();else{c[n+16>>2]=a;c[a+24>>2]=n;break}while(0);a=c[j+20>>2]|0;if(a|0)if(a>>>0<(c[3264]|0)>>>0)ua();else{c[n+20>>2]=a;c[a+24>>2]=n;break}}while(0);if(d>>>0<16){L=d+o|0;c[j+4>>2]=L|3;L=j+L+4|0;c[L>>2]=c[L>>2]|1}else{c[j+4>>2]=o|3;c[i+4>>2]=d|1;c[i+d>>2]=d;a=c[3262]|0;if(a|0){f=c[3265]|0;b=a>>>3;e=13080+(b<<1<<2)|0;a=c[3260]|0;b=1<<b;if(a&b){a=e+8|0;b=c[a>>2]|0;if(b>>>0<(c[3264]|0)>>>0)ua();else{p=a;q=b}}else{c[3260]=a|b;p=e+8|0;q=e}c[p>>2]=f;c[q+12>>2]=f;c[f+8>>2]=q;c[f+12>>2]=e}c[3262]=d;c[3265]=i}L=j+8|0;return L|0}}}else if(a>>>0<=4294967231){a=a+11|0;o=a&-8;j=c[3261]|0;if(j){d=0-o|0;a=a>>>8;if(a)if(o>>>0>16777215)i=31;else{q=(a+1048320|0)>>>16&8;E=a<<q;p=(E+520192|0)>>>16&4;E=E<<p;i=(E+245760|0)>>>16&2;i=14-(p|q|i)+(E<<i>>>15)|0;i=o>>>(i+7|0)&1|i<<1}else i=0;b=c[13344+(i<<2)>>2]|0;a:do if(!b){a=0;b=0;E=86}else{f=d;a=0;g=o<<((i|0)==31?0:25-(i>>>1)|0);h=b;b=0;while(1){e=c[h+4>>2]&-8;d=e-o|0;if(d>>>0<f>>>0)if((e|0)==(o|0)){a=h;b=h;E=90;break a}else b=h;else d=f;e=c[h+20>>2]|0;h=c[h+16+(g>>>31<<2)>>2]|0;a=(e|0)==0|(e|0)==(h|0)?a:e;e=(h|0)==0;if(e){E=86;break}else{f=d;g=g<<(e&1^1)}}}while(0);if((E|0)==86){if((a|0)==0&(b|0)==0){a=2<<i;a=j&(a|0-a);if(!a)break;q=(a&0-a)+-1|0;m=q>>>12&16;q=q>>>m;l=q>>>5&8;q=q>>>l;n=q>>>2&4;q=q>>>n;p=q>>>1&2;q=q>>>p;a=q>>>1&1;a=c[13344+((l|m|n|p|a)+(q>>>a)<<2)>>2]|0}if(!a){i=d;j=b}else E=90}if((E|0)==90)while(1){E=0;q=(c[a+4>>2]&-8)-o|0;e=q>>>0<d>>>0;d=e?q:d;b=e?a:b;e=c[a+16>>2]|0;if(e|0){a=e;E=90;continue}a=c[a+20>>2]|0;if(!a){i=d;j=b;break}else E=90}if((j|0)!=0?i>>>0<((c[3262]|0)-o|0)>>>0:0){f=c[3264]|0;if(j>>>0<f>>>0)ua();h=j+o|0;if(j>>>0>=h>>>0)ua();g=c[j+24>>2]|0;d=c[j+12>>2]|0;do if((d|0)==(j|0)){b=j+20|0;a=c[b>>2]|0;if(!a){b=j+16|0;a=c[b>>2]|0;if(!a){s=0;break}}while(1){d=a+20|0;e=c[d>>2]|0;if(e|0){a=e;b=d;continue}d=a+16|0;e=c[d>>2]|0;if(!e)break;else{a=e;b=d}}if(b>>>0<f>>>0)ua();else{c[b>>2]=0;s=a;break}}else{e=c[j+8>>2]|0;if(e>>>0<f>>>0)ua();a=e+12|0;if((c[a>>2]|0)!=(j|0))ua();b=d+8|0;if((c[b>>2]|0)==(j|0)){c[a>>2]=d;c[b>>2]=e;s=d;break}else ua()}while(0);do if(g|0){a=c[j+28>>2]|0;b=13344+(a<<2)|0;if((j|0)==(c[b>>2]|0)){c[b>>2]=s;if(!s){c[3261]=c[3261]&~(1<<a);break}}else{if(g>>>0<(c[3264]|0)>>>0)ua();a=g+16|0;if((c[a>>2]|0)==(j|0))c[a>>2]=s;else c[g+20>>2]=s;if(!s)break}b=c[3264]|0;if(s>>>0<b>>>0)ua();c[s+24>>2]=g;a=c[j+16>>2]|0;do if(a|0)if(a>>>0<b>>>0)ua();else{c[s+16>>2]=a;c[a+24>>2]=s;break}while(0);a=c[j+20>>2]|0;if(a|0)if(a>>>0<(c[3264]|0)>>>0)ua();else{c[s+20>>2]=a;c[a+24>>2]=s;break}}while(0);do if(i>>>0>=16){c[j+4>>2]=o|3;c[h+4>>2]=i|1;c[h+i>>2]=i;a=i>>>3;if(i>>>0<256){d=13080+(a<<1<<2)|0;b=c[3260]|0;a=1<<a;if(b&a){a=d+8|0;b=c[a>>2]|0;if(b>>>0<(c[3264]|0)>>>0)ua();else{u=a;v=b}}else{c[3260]=b|a;u=d+8|0;v=d}c[u>>2]=h;c[v+12>>2]=h;c[h+8>>2]=v;c[h+12>>2]=d;break}a=i>>>8;if(a)if(i>>>0>16777215)d=31;else{K=(a+1048320|0)>>>16&8;L=a<<K;J=(L+520192|0)>>>16&4;L=L<<J;d=(L+245760|0)>>>16&2;d=14-(J|K|d)+(L<<d>>>15)|0;d=i>>>(d+7|0)&1|d<<1}else d=0;e=13344+(d<<2)|0;c[h+28>>2]=d;a=h+16|0;c[a+4>>2]=0;c[a>>2]=0;a=c[3261]|0;b=1<<d;if(!(a&b)){c[3261]=a|b;c[e>>2]=h;c[h+24>>2]=e;c[h+12>>2]=h;c[h+8>>2]=h;break}f=i<<((d|0)==31?0:25-(d>>>1)|0);a=c[e>>2]|0;while(1){if((c[a+4>>2]&-8|0)==(i|0)){d=a;E=148;break}b=a+16+(f>>>31<<2)|0;d=c[b>>2]|0;if(!d){E=145;break}else{f=f<<1;a=d}}if((E|0)==145)if(b>>>0<(c[3264]|0)>>>0)ua();else{c[b>>2]=h;c[h+24>>2]=a;c[h+12>>2]=h;c[h+8>>2]=h;break}else if((E|0)==148){a=d+8|0;b=c[a>>2]|0;L=c[3264]|0;if(b>>>0>=L>>>0&d>>>0>=L>>>0){c[b+12>>2]=h;c[a>>2]=h;c[h+8>>2]=b;c[h+12>>2]=d;c[h+24>>2]=0;break}else ua()}}else{L=i+o|0;c[j+4>>2]=L|3;L=j+L+4|0;c[L>>2]=c[L>>2]|1}while(0);L=j+8|0;return L|0}}}else o=-1;while(0);d=c[3262]|0;if(d>>>0>=o>>>0){a=d-o|0;b=c[3265]|0;if(a>>>0>15){L=b+o|0;c[3265]=L;c[3262]=a;c[L+4>>2]=a|1;c[L+a>>2]=a;c[b+4>>2]=o|3}else{c[3262]=0;c[3265]=0;c[b+4>>2]=d|3;L=b+d+4|0;c[L>>2]=c[L>>2]|1}L=b+8|0;return L|0}a=c[3263]|0;if(a>>>0>o>>>0){J=a-o|0;c[3263]=J;L=c[3266]|0;K=L+o|0;c[3266]=K;c[K+4>>2]=J|1;c[L+4>>2]=o|3;L=L+8|0;return L|0}do if(!(c[3378]|0)){a=Ja(30)|0;if(!(a+-1&a)){c[3380]=a;c[3379]=a;c[3381]=-1;c[3382]=-1;c[3383]=0;c[3371]=0;c[3378]=(ab(0)|0)&-16^1431655768;break}else ua()}while(0);h=o+48|0;g=c[3380]|0;i=o+47|0;f=g+i|0;g=0-g|0;j=f&g;if(j>>>0<=o>>>0){L=0;return L|0}a=c[3370]|0;if(a|0?(u=c[3368]|0,v=u+j|0,v>>>0<=u>>>0|v>>>0>a>>>0):0){L=0;return L|0}b:do if(!(c[3371]&4)){a=c[3266]|0;c:do if(a){d=13488;while(1){b=c[d>>2]|0;if(b>>>0<=a>>>0?(r=d+4|0,(b+(c[r>>2]|0)|0)>>>0>a>>>0):0){e=d;d=r;break}d=c[d+8>>2]|0;if(!d){E=173;break c}}a=f-(c[3263]|0)&g;if(a>>>0<2147483647){b=Ga(a|0)|0;if((b|0)==((c[e>>2]|0)+(c[d>>2]|0)|0)){if((b|0)!=(-1|0)){h=b;f=a;E=193;break b}}else E=183}}else E=173;while(0);do if((E|0)==173?(t=Ga(0)|0,(t|0)!=(-1|0)):0){a=t;b=c[3379]|0;d=b+-1|0;if(!(d&a))a=j;else a=j-a+(d+a&0-b)|0;b=c[3368]|0;d=b+a|0;if(a>>>0>o>>>0&a>>>0<2147483647){v=c[3370]|0;if(v|0?d>>>0<=b>>>0|d>>>0>v>>>0:0)break;b=Ga(a|0)|0;if((b|0)==(t|0)){h=t;f=a;E=193;break b}else E=183}}while(0);d:do if((E|0)==183){d=0-a|0;do if(h>>>0>a>>>0&(a>>>0<2147483647&(b|0)!=(-1|0))?(w=c[3380]|0,w=i-a+w&0-w,w>>>0<2147483647):0)if((Ga(w|0)|0)==(-1|0)){Ga(d|0)|0;break d}else{a=w+a|0;break}while(0);if((b|0)!=(-1|0)){h=b;f=a;E=193;break b}}while(0);c[3371]=c[3371]|4;E=190}else E=190;while(0);if((((E|0)==190?j>>>0<2147483647:0)?(x=Ga(j|0)|0,y=Ga(0)|0,x>>>0<y>>>0&((x|0)!=(-1|0)&(y|0)!=(-1|0))):0)?(z=y-x|0,z>>>0>(o+40|0)>>>0):0){h=x;f=z;E=193}if((E|0)==193){a=(c[3368]|0)+f|0;c[3368]=a;if(a>>>0>(c[3369]|0)>>>0)c[3369]=a;i=c[3266]|0;do if(i){e=13488;do{a=c[e>>2]|0;b=e+4|0;d=c[b>>2]|0;if((h|0)==(a+d|0)){A=a;B=b;C=d;D=e;E=203;break}e=c[e+8>>2]|0}while((e|0)!=0);if(((E|0)==203?(c[D+12>>2]&8|0)==0:0)?i>>>0<h>>>0&i>>>0>=A>>>0:0){c[B>>2]=C+f;L=i+8|0;L=(L&7|0)==0?0:0-L&7;K=i+L|0;L=f-L+(c[3263]|0)|0;c[3266]=K;c[3263]=L;c[K+4>>2]=L|1;c[K+L+4>>2]=40;c[3267]=c[3382];break}a=c[3264]|0;if(h>>>0<a>>>0){c[3264]=h;j=h}else j=a;d=h+f|0;a=13488;while(1){if((c[a>>2]|0)==(d|0)){b=a;E=211;break}a=c[a+8>>2]|0;if(!a){b=13488;break}}if((E|0)==211)if(!(c[a+12>>2]&8)){c[b>>2]=h;l=a+4|0;c[l>>2]=(c[l>>2]|0)+f;l=h+8|0;l=h+((l&7|0)==0?0:0-l&7)|0;a=d+8|0;a=d+((a&7|0)==0?0:0-a&7)|0;k=l+o|0;g=a-l-o|0;c[l+4>>2]=o|3;do if((a|0)!=(i|0)){if((a|0)==(c[3265]|0)){L=(c[3262]|0)+g|0;c[3262]=L;c[3265]=k;c[k+4>>2]=L|1;c[k+L>>2]=L;break}b=c[a+4>>2]|0;if((b&3|0)==1){i=b&-8;f=b>>>3;e:do if(b>>>0>=256){h=c[a+24>>2]|0;e=c[a+12>>2]|0;do if((e|0)==(a|0)){d=a+16|0;e=d+4|0;b=c[e>>2]|0;if(!b){b=c[d>>2]|0;if(!b){J=0;break}}else d=e;while(1){e=b+20|0;f=c[e>>2]|0;if(f|0){b=f;d=e;continue}e=b+16|0;f=c[e>>2]|0;if(!f)break;else{b=f;d=e}}if(d>>>0<j>>>0)ua();else{c[d>>2]=0;J=b;break}}else{f=c[a+8>>2]|0;if(f>>>0<j>>>0)ua();b=f+12|0;if((c[b>>2]|0)!=(a|0))ua();d=e+8|0;if((c[d>>2]|0)==(a|0)){c[b>>2]=e;c[d>>2]=f;J=e;break}else ua()}while(0);if(!h)break;b=c[a+28>>2]|0;d=13344+(b<<2)|0;do if((a|0)!=(c[d>>2]|0)){if(h>>>0<(c[3264]|0)>>>0)ua();b=h+16|0;if((c[b>>2]|0)==(a|0))c[b>>2]=J;else c[h+20>>2]=J;if(!J)break e}else{c[d>>2]=J;if(J|0)break;c[3261]=c[3261]&~(1<<b);break e}while(0);e=c[3264]|0;if(J>>>0<e>>>0)ua();c[J+24>>2]=h;b=a+16|0;d=c[b>>2]|0;do if(d|0)if(d>>>0<e>>>0)ua();else{c[J+16>>2]=d;c[d+24>>2]=J;break}while(0);b=c[b+4>>2]|0;if(!b)break;if(b>>>0<(c[3264]|0)>>>0)ua();else{c[J+20>>2]=b;c[b+24>>2]=J;break}}else{d=c[a+8>>2]|0;e=c[a+12>>2]|0;b=13080+(f<<1<<2)|0;do if((d|0)!=(b|0)){if(d>>>0<j>>>0)ua();if((c[d+12>>2]|0)==(a|0))break;ua()}while(0);if((e|0)==(d|0)){c[3260]=c[3260]&~(1<<f);break}do if((e|0)==(b|0))G=e+8|0;else{if(e>>>0<j>>>0)ua();b=e+8|0;if((c[b>>2]|0)==(a|0)){G=b;break}ua()}while(0);c[d+12>>2]=e;c[G>>2]=d}while(0);a=a+i|0;g=i+g|0}a=a+4|0;c[a>>2]=c[a>>2]&-2;c[k+4>>2]=g|1;c[k+g>>2]=g;a=g>>>3;if(g>>>0<256){d=13080+(a<<1<<2)|0;b=c[3260]|0;a=1<<a;do if(!(b&a)){c[3260]=b|a;K=d+8|0;L=d}else{a=d+8|0;b=c[a>>2]|0;if(b>>>0>=(c[3264]|0)>>>0){K=a;L=b;break}ua()}while(0);c[K>>2]=k;c[L+12>>2]=k;c[k+8>>2]=L;c[k+12>>2]=d;break}a=g>>>8;do if(!a)d=0;else{if(g>>>0>16777215){d=31;break}K=(a+1048320|0)>>>16&8;L=a<<K;J=(L+520192|0)>>>16&4;L=L<<J;d=(L+245760|0)>>>16&2;d=14-(J|K|d)+(L<<d>>>15)|0;d=g>>>(d+7|0)&1|d<<1}while(0);e=13344+(d<<2)|0;c[k+28>>2]=d;a=k+16|0;c[a+4>>2]=0;c[a>>2]=0;a=c[3261]|0;b=1<<d;if(!(a&b)){c[3261]=a|b;c[e>>2]=k;c[k+24>>2]=e;c[k+12>>2]=k;c[k+8>>2]=k;break}f=g<<((d|0)==31?0:25-(d>>>1)|0);a=c[e>>2]|0;while(1){if((c[a+4>>2]&-8|0)==(g|0)){d=a;E=281;break}b=a+16+(f>>>31<<2)|0;d=c[b>>2]|0;if(!d){E=278;break}else{f=f<<1;a=d}}if((E|0)==278)if(b>>>0<(c[3264]|0)>>>0)ua();else{c[b>>2]=k;c[k+24>>2]=a;c[k+12>>2]=k;c[k+8>>2]=k;break}else if((E|0)==281){a=d+8|0;b=c[a>>2]|0;L=c[3264]|0;if(b>>>0>=L>>>0&d>>>0>=L>>>0){c[b+12>>2]=k;c[a>>2]=k;c[k+8>>2]=b;c[k+12>>2]=d;c[k+24>>2]=0;break}else ua()}}else{L=(c[3263]|0)+g|0;c[3263]=L;c[3266]=k;c[k+4>>2]=L|1}while(0);L=l+8|0;return L|0}else b=13488;while(1){a=c[b>>2]|0;if(a>>>0<=i>>>0?(F=a+(c[b+4>>2]|0)|0,F>>>0>i>>>0):0){b=F;break}b=c[b+8>>2]|0}g=b+-47|0;d=g+8|0;d=g+((d&7|0)==0?0:0-d&7)|0;g=i+16|0;d=d>>>0<g>>>0?i:d;a=d+8|0;e=h+8|0;e=(e&7|0)==0?0:0-e&7;L=h+e|0;e=f+-40-e|0;c[3266]=L;c[3263]=e;c[L+4>>2]=e|1;c[L+e+4>>2]=40;c[3267]=c[3382];e=d+4|0;c[e>>2]=27;c[a>>2]=c[3372];c[a+4>>2]=c[3373];c[a+8>>2]=c[3374];c[a+12>>2]=c[3375];c[3372]=h;c[3373]=f;c[3375]=0;c[3374]=a;a=d+24|0;do{a=a+4|0;c[a>>2]=7}while((a+4|0)>>>0<b>>>0);if((d|0)!=(i|0)){h=d-i|0;c[e>>2]=c[e>>2]&-2;c[i+4>>2]=h|1;c[d>>2]=h;a=h>>>3;if(h>>>0<256){d=13080+(a<<1<<2)|0;b=c[3260]|0;a=1<<a;if(b&a){a=d+8|0;b=c[a>>2]|0;if(b>>>0<(c[3264]|0)>>>0)ua();else{H=a;I=b}}else{c[3260]=b|a;H=d+8|0;I=d}c[H>>2]=i;c[I+12>>2]=i;c[i+8>>2]=I;c[i+12>>2]=d;break}a=h>>>8;if(a)if(h>>>0>16777215)d=31;else{K=(a+1048320|0)>>>16&8;L=a<<K;J=(L+520192|0)>>>16&4;L=L<<J;d=(L+245760|0)>>>16&2;d=14-(J|K|d)+(L<<d>>>15)|0;d=h>>>(d+7|0)&1|d<<1}else d=0;f=13344+(d<<2)|0;c[i+28>>2]=d;c[i+20>>2]=0;c[g>>2]=0;a=c[3261]|0;b=1<<d;if(!(a&b)){c[3261]=a|b;c[f>>2]=i;c[i+24>>2]=f;c[i+12>>2]=i;c[i+8>>2]=i;break}e=h<<((d|0)==31?0:25-(d>>>1)|0);a=c[f>>2]|0;while(1){if((c[a+4>>2]&-8|0)==(h|0)){d=a;E=307;break}b=a+16+(e>>>31<<2)|0;d=c[b>>2]|0;if(!d){E=304;break}else{e=e<<1;a=d}}if((E|0)==304)if(b>>>0<(c[3264]|0)>>>0)ua();else{c[b>>2]=i;c[i+24>>2]=a;c[i+12>>2]=i;c[i+8>>2]=i;break}else if((E|0)==307){a=d+8|0;b=c[a>>2]|0;L=c[3264]|0;if(b>>>0>=L>>>0&d>>>0>=L>>>0){c[b+12>>2]=i;c[a>>2]=i;c[i+8>>2]=b;c[i+12>>2]=d;c[i+24>>2]=0;break}else ua()}}}else{L=c[3264]|0;if((L|0)==0|h>>>0<L>>>0)c[3264]=h;c[3372]=h;c[3373]=f;c[3375]=0;c[3269]=c[3378];c[3268]=-1;a=0;do{L=13080+(a<<1<<2)|0;c[L+12>>2]=L;c[L+8>>2]=L;a=a+1|0}while((a|0)!=32);L=h+8|0;L=(L&7|0)==0?0:0-L&7;K=h+L|0;L=f+-40-L|0;c[3266]=K;c[3263]=L;c[K+4>>2]=L|1;c[K+L+4>>2]=40;c[3267]=c[3382]}while(0);a=c[3263]|0;if(a>>>0>o>>>0){J=a-o|0;c[3263]=J;L=c[3266]|0;K=L+o|0;c[3266]=K;c[K+4>>2]=J|1;c[L+4>>2]=o|3;L=L+8|0;return L|0}}c[(il()|0)>>2]=12;L=0;return L|0}function nn(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;if(!a)return;d=a+-8|0;h=c[3264]|0;if(d>>>0<h>>>0)ua();a=c[a+-4>>2]|0;b=a&3;if((b|0)==1)ua();e=a&-8;m=d+e|0;do if(!(a&1)){a=c[d>>2]|0;if(!b)return;k=d+(0-a)|0;j=a+e|0;if(k>>>0<h>>>0)ua();if((k|0)==(c[3265]|0)){a=m+4|0;b=c[a>>2]|0;if((b&3|0)!=3){q=k;g=j;break}c[3262]=j;c[a>>2]=b&-2;c[k+4>>2]=j|1;c[k+j>>2]=j;return}e=a>>>3;if(a>>>0<256){b=c[k+8>>2]|0;d=c[k+12>>2]|0;a=13080+(e<<1<<2)|0;if((b|0)!=(a|0)){if(b>>>0<h>>>0)ua();if((c[b+12>>2]|0)!=(k|0))ua()}if((d|0)==(b|0)){c[3260]=c[3260]&~(1<<e);q=k;g=j;break}if((d|0)!=(a|0)){if(d>>>0<h>>>0)ua();a=d+8|0;if((c[a>>2]|0)==(k|0))f=a;else ua()}else f=d+8|0;c[b+12>>2]=d;c[f>>2]=b;q=k;g=j;break}f=c[k+24>>2]|0;d=c[k+12>>2]|0;do if((d|0)==(k|0)){b=k+16|0;d=b+4|0;a=c[d>>2]|0;if(!a){a=c[b>>2]|0;if(!a){i=0;break}}else b=d;while(1){d=a+20|0;e=c[d>>2]|0;if(e|0){a=e;b=d;continue}d=a+16|0;e=c[d>>2]|0;if(!e)break;else{a=e;b=d}}if(b>>>0<h>>>0)ua();else{c[b>>2]=0;i=a;break}}else{e=c[k+8>>2]|0;if(e>>>0<h>>>0)ua();a=e+12|0;if((c[a>>2]|0)!=(k|0))ua();b=d+8|0;if((c[b>>2]|0)==(k|0)){c[a>>2]=d;c[b>>2]=e;i=d;break}else ua()}while(0);if(f){a=c[k+28>>2]|0;b=13344+(a<<2)|0;if((k|0)==(c[b>>2]|0)){c[b>>2]=i;if(!i){c[3261]=c[3261]&~(1<<a);q=k;g=j;break}}else{if(f>>>0<(c[3264]|0)>>>0)ua();a=f+16|0;if((c[a>>2]|0)==(k|0))c[a>>2]=i;else c[f+20>>2]=i;if(!i){q=k;g=j;break}}d=c[3264]|0;if(i>>>0<d>>>0)ua();c[i+24>>2]=f;a=k+16|0;b=c[a>>2]|0;do if(b|0)if(b>>>0<d>>>0)ua();else{c[i+16>>2]=b;c[b+24>>2]=i;break}while(0);a=c[a+4>>2]|0;if(a)if(a>>>0<(c[3264]|0)>>>0)ua();else{c[i+20>>2]=a;c[a+24>>2]=i;q=k;g=j;break}else{q=k;g=j}}else{q=k;g=j}}else{q=d;g=e}while(0);if(q>>>0>=m>>>0)ua();a=m+4|0;b=c[a>>2]|0;if(!(b&1))ua();if(!(b&2)){if((m|0)==(c[3266]|0)){p=(c[3263]|0)+g|0;c[3263]=p;c[3266]=q;c[q+4>>2]=p|1;if((q|0)!=(c[3265]|0))return;c[3265]=0;c[3262]=0;return}if((m|0)==(c[3265]|0)){p=(c[3262]|0)+g|0;c[3262]=p;c[3265]=q;c[q+4>>2]=p|1;c[q+p>>2]=p;return}g=(b&-8)+g|0;e=b>>>3;do if(b>>>0>=256){f=c[m+24>>2]|0;a=c[m+12>>2]|0;do if((a|0)==(m|0)){b=m+16|0;d=b+4|0;a=c[d>>2]|0;if(!a){a=c[b>>2]|0;if(!a){n=0;break}}else b=d;while(1){d=a+20|0;e=c[d>>2]|0;if(e|0){a=e;b=d;continue}d=a+16|0;e=c[d>>2]|0;if(!e)break;else{a=e;b=d}}if(b>>>0<(c[3264]|0)>>>0)ua();else{c[b>>2]=0;n=a;break}}else{b=c[m+8>>2]|0;if(b>>>0<(c[3264]|0)>>>0)ua();d=b+12|0;if((c[d>>2]|0)!=(m|0))ua();e=a+8|0;if((c[e>>2]|0)==(m|0)){c[d>>2]=a;c[e>>2]=b;n=a;break}else ua()}while(0);if(f|0){a=c[m+28>>2]|0;b=13344+(a<<2)|0;if((m|0)==(c[b>>2]|0)){c[b>>2]=n;if(!n){c[3261]=c[3261]&~(1<<a);break}}else{if(f>>>0<(c[3264]|0)>>>0)ua();a=f+16|0;if((c[a>>2]|0)==(m|0))c[a>>2]=n;else c[f+20>>2]=n;if(!n)break}d=c[3264]|0;if(n>>>0<d>>>0)ua();c[n+24>>2]=f;a=m+16|0;b=c[a>>2]|0;do if(b|0)if(b>>>0<d>>>0)ua();else{c[n+16>>2]=b;c[b+24>>2]=n;break}while(0);a=c[a+4>>2]|0;if(a|0)if(a>>>0<(c[3264]|0)>>>0)ua();else{c[n+20>>2]=a;c[a+24>>2]=n;break}}}else{b=c[m+8>>2]|0;d=c[m+12>>2]|0;a=13080+(e<<1<<2)|0;if((b|0)!=(a|0)){if(b>>>0<(c[3264]|0)>>>0)ua();if((c[b+12>>2]|0)!=(m|0))ua()}if((d|0)==(b|0)){c[3260]=c[3260]&~(1<<e);break}if((d|0)!=(a|0)){if(d>>>0<(c[3264]|0)>>>0)ua();a=d+8|0;if((c[a>>2]|0)==(m|0))l=a;else ua()}else l=d+8|0;c[b+12>>2]=d;c[l>>2]=b}while(0);c[q+4>>2]=g|1;c[q+g>>2]=g;if((q|0)==(c[3265]|0)){c[3262]=g;return}}else{c[a>>2]=b&-2;c[q+4>>2]=g|1;c[q+g>>2]=g}a=g>>>3;if(g>>>0<256){d=13080+(a<<1<<2)|0;b=c[3260]|0;a=1<<a;if(b&a){a=d+8|0;b=c[a>>2]|0;if(b>>>0<(c[3264]|0)>>>0)ua();else{o=a;p=b}}else{c[3260]=b|a;o=d+8|0;p=d}c[o>>2]=q;c[p+12>>2]=q;c[q+8>>2]=p;c[q+12>>2]=d;return}a=g>>>8;if(a)if(g>>>0>16777215)d=31;else{o=(a+1048320|0)>>>16&8;p=a<<o;n=(p+520192|0)>>>16&4;p=p<<n;d=(p+245760|0)>>>16&2;d=14-(n|o|d)+(p<<d>>>15)|0;d=g>>>(d+7|0)&1|d<<1}else d=0;e=13344+(d<<2)|0;c[q+28>>2]=d;c[q+20>>2]=0;c[q+16>>2]=0;a=c[3261]|0;b=1<<d;do if(a&b){f=g<<((d|0)==31?0:25-(d>>>1)|0);a=c[e>>2]|0;while(1){if((c[a+4>>2]&-8|0)==(g|0)){d=a;e=130;break}b=a+16+(f>>>31<<2)|0;d=c[b>>2]|0;if(!d){e=127;break}else{f=f<<1;a=d}}if((e|0)==127)if(b>>>0<(c[3264]|0)>>>0)ua();else{c[b>>2]=q;c[q+24>>2]=a;c[q+12>>2]=q;c[q+8>>2]=q;break}else if((e|0)==130){a=d+8|0;b=c[a>>2]|0;p=c[3264]|0;if(b>>>0>=p>>>0&d>>>0>=p>>>0){c[b+12>>2]=q;c[a>>2]=q;c[q+8>>2]=b;c[q+12>>2]=d;c[q+24>>2]=0;break}else ua()}}else{c[3261]=a|b;c[e>>2]=q;c[q+24>>2]=e;c[q+12>>2]=q;c[q+8>>2]=q}while(0);q=(c[3268]|0)+-1|0;c[3268]=q;if(!q)a=13496;else return;while(1){a=c[a>>2]|0;if(!a)break;else a=a+8|0}c[3268]=-1;return}function on(a,b){a=a|0;b=b|0;var d=0,e=0;if(!a){a=mn(b)|0;return a|0}if(b>>>0>4294967231){c[(il()|0)>>2]=12;a=0;return a|0}d=pn(a+-8|0,b>>>0<11?16:b+11&-8)|0;if(d|0){a=d+8|0;return a|0}d=mn(b)|0;if(!d){a=0;return a|0}e=c[a+-4>>2]|0;e=(e&-8)-((e&3|0)==0?8:4)|0;zn(d|0,a|0,(e>>>0<b>>>0?e:b)|0)|0;nn(a);a=d;return a|0}function pn(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0;n=a+4|0;o=c[n>>2]|0;d=o&-8;k=a+d|0;i=c[3264]|0;e=o&3;if(!((e|0)!=1&a>>>0>=i>>>0&a>>>0<k>>>0))ua();f=c[k+4>>2]|0;if(!(f&1))ua();if(!e){if(b>>>0<256){a=0;return a|0}if(d>>>0>=(b+4|0)>>>0?(d-b|0)>>>0<=c[3380]<<1>>>0:0)return a|0;a=0;return a|0}if(d>>>0>=b>>>0){d=d-b|0;if(d>>>0<=15)return a|0;m=a+b|0;c[n>>2]=o&1|b|2;c[m+4>>2]=d|3;b=m+d+4|0;c[b>>2]=c[b>>2]|1;qn(m,d);return a|0}if((k|0)==(c[3266]|0)){d=(c[3263]|0)+d|0;if(d>>>0<=b>>>0){a=0;return a|0}m=d-b|0;l=a+b|0;c[n>>2]=o&1|b|2;c[l+4>>2]=m|1;c[3266]=l;c[3263]=m;return a|0}if((k|0)==(c[3265]|0)){e=(c[3262]|0)+d|0;if(e>>>0<b>>>0){a=0;return a|0}d=e-b|0;if(d>>>0>15){e=a+b|0;m=e+d|0;c[n>>2]=o&1|b|2;c[e+4>>2]=d|1;c[m>>2]=d;b=m+4|0;c[b>>2]=c[b>>2]&-2}else{c[n>>2]=o&1|e|2;e=a+e+4|0;c[e>>2]=c[e>>2]|1;e=0;d=0}c[3262]=d;c[3265]=e;return a|0}if(f&2|0){a=0;return a|0}l=(f&-8)+d|0;if(l>>>0<b>>>0){a=0;return a|0}m=l-b|0;g=f>>>3;do if(f>>>0>=256){h=c[k+24>>2]|0;f=c[k+12>>2]|0;do if((f|0)==(k|0)){e=k+16|0;f=e+4|0;d=c[f>>2]|0;if(!d){d=c[e>>2]|0;if(!d){j=0;break}}else e=f;while(1){f=d+20|0;g=c[f>>2]|0;if(g|0){d=g;e=f;continue}f=d+16|0;g=c[f>>2]|0;if(!g)break;else{d=g;e=f}}if(e>>>0<i>>>0)ua();else{c[e>>2]=0;j=d;break}}else{g=c[k+8>>2]|0;if(g>>>0<i>>>0)ua();d=g+12|0;if((c[d>>2]|0)!=(k|0))ua();e=f+8|0;if((c[e>>2]|0)==(k|0)){c[d>>2]=f;c[e>>2]=g;j=f;break}else ua()}while(0);if(h|0){d=c[k+28>>2]|0;e=13344+(d<<2)|0;if((k|0)==(c[e>>2]|0)){c[e>>2]=j;if(!j){c[3261]=c[3261]&~(1<<d);break}}else{if(h>>>0<(c[3264]|0)>>>0)ua();d=h+16|0;if((c[d>>2]|0)==(k|0))c[d>>2]=j;else c[h+20>>2]=j;if(!j)break}f=c[3264]|0;if(j>>>0<f>>>0)ua();c[j+24>>2]=h;d=k+16|0;e=c[d>>2]|0;do if(e|0)if(e>>>0<f>>>0)ua();else{c[j+16>>2]=e;c[e+24>>2]=j;break}while(0);d=c[d+4>>2]|0;if(d|0)if(d>>>0<(c[3264]|0)>>>0)ua();else{c[j+20>>2]=d;c[d+24>>2]=j;break}}}else{e=c[k+8>>2]|0;f=c[k+12>>2]|0;d=13080+(g<<1<<2)|0;if((e|0)!=(d|0)){if(e>>>0<i>>>0)ua();if((c[e+12>>2]|0)!=(k|0))ua()}if((f|0)==(e|0)){c[3260]=c[3260]&~(1<<g);break}if((f|0)!=(d|0)){if(f>>>0<i>>>0)ua();d=f+8|0;if((c[d>>2]|0)==(k|0))h=d;else ua()}else h=f+8|0;c[e+12>>2]=f;c[h>>2]=e}while(0);if(m>>>0<16){c[n>>2]=l|o&1|2;b=a+l+4|0;c[b>>2]=c[b>>2]|1;return a|0}else{l=a+b|0;c[n>>2]=o&1|b|2;c[l+4>>2]=m|3;b=l+m+4|0;c[b>>2]=c[b>>2]|1;qn(l,m);return a|0}return 0}function qn(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;o=a+b|0;d=c[a+4>>2]|0;do if(!(d&1)){f=c[a>>2]|0;if(!(d&3))return;l=a+(0-f)|0;k=f+b|0;i=c[3264]|0;if(l>>>0<i>>>0)ua();if((l|0)==(c[3265]|0)){a=o+4|0;d=c[a>>2]|0;if((d&3|0)!=3){r=l;g=k;break}c[3262]=k;c[a>>2]=d&-2;c[l+4>>2]=k|1;c[l+k>>2]=k;return}e=f>>>3;if(f>>>0<256){a=c[l+8>>2]|0;b=c[l+12>>2]|0;d=13080+(e<<1<<2)|0;if((a|0)!=(d|0)){if(a>>>0<i>>>0)ua();if((c[a+12>>2]|0)!=(l|0))ua()}if((b|0)==(a|0)){c[3260]=c[3260]&~(1<<e);r=l;g=k;break}if((b|0)!=(d|0)){if(b>>>0<i>>>0)ua();d=b+8|0;if((c[d>>2]|0)==(l|0))h=d;else ua()}else h=b+8|0;c[a+12>>2]=b;c[h>>2]=a;r=l;g=k;break}f=c[l+24>>2]|0;b=c[l+12>>2]|0;do if((b|0)==(l|0)){a=l+16|0;b=a+4|0;d=c[b>>2]|0;if(!d){d=c[a>>2]|0;if(!d){j=0;break}}else a=b;while(1){b=d+20|0;e=c[b>>2]|0;if(e|0){d=e;a=b;continue}b=d+16|0;e=c[b>>2]|0;if(!e)break;else{d=e;a=b}}if(a>>>0<i>>>0)ua();else{c[a>>2]=0;j=d;break}}else{e=c[l+8>>2]|0;if(e>>>0<i>>>0)ua();d=e+12|0;if((c[d>>2]|0)!=(l|0))ua();a=b+8|0;if((c[a>>2]|0)==(l|0)){c[d>>2]=b;c[a>>2]=e;j=b;break}else ua()}while(0);if(f){d=c[l+28>>2]|0;a=13344+(d<<2)|0;if((l|0)==(c[a>>2]|0)){c[a>>2]=j;if(!j){c[3261]=c[3261]&~(1<<d);r=l;g=k;break}}else{if(f>>>0<(c[3264]|0)>>>0)ua();d=f+16|0;if((c[d>>2]|0)==(l|0))c[d>>2]=j;else c[f+20>>2]=j;if(!j){r=l;g=k;break}}b=c[3264]|0;if(j>>>0<b>>>0)ua();c[j+24>>2]=f;d=l+16|0;a=c[d>>2]|0;do if(a|0)if(a>>>0<b>>>0)ua();else{c[j+16>>2]=a;c[a+24>>2]=j;break}while(0);d=c[d+4>>2]|0;if(d)if(d>>>0<(c[3264]|0)>>>0)ua();else{c[j+20>>2]=d;c[d+24>>2]=j;r=l;g=k;break}else{r=l;g=k}}else{r=l;g=k}}else{r=a;g=b}while(0);h=c[3264]|0;if(o>>>0<h>>>0)ua();d=o+4|0;a=c[d>>2]|0;if(!(a&2)){if((o|0)==(c[3266]|0)){q=(c[3263]|0)+g|0;c[3263]=q;c[3266]=r;c[r+4>>2]=q|1;if((r|0)!=(c[3265]|0))return;c[3265]=0;c[3262]=0;return}if((o|0)==(c[3265]|0)){q=(c[3262]|0)+g|0;c[3262]=q;c[3265]=r;c[r+4>>2]=q|1;c[r+q>>2]=q;return}g=(a&-8)+g|0;e=a>>>3;do if(a>>>0>=256){f=c[o+24>>2]|0;b=c[o+12>>2]|0;do if((b|0)==(o|0)){a=o+16|0;b=a+4|0;d=c[b>>2]|0;if(!d){d=c[a>>2]|0;if(!d){n=0;break}}else a=b;while(1){b=d+20|0;e=c[b>>2]|0;if(e|0){d=e;a=b;continue}b=d+16|0;e=c[b>>2]|0;if(!e)break;else{d=e;a=b}}if(a>>>0<h>>>0)ua();else{c[a>>2]=0;n=d;break}}else{e=c[o+8>>2]|0;if(e>>>0<h>>>0)ua();d=e+12|0;if((c[d>>2]|0)!=(o|0))ua();a=b+8|0;if((c[a>>2]|0)==(o|0)){c[d>>2]=b;c[a>>2]=e;n=b;break}else ua()}while(0);if(f|0){d=c[o+28>>2]|0;a=13344+(d<<2)|0;if((o|0)==(c[a>>2]|0)){c[a>>2]=n;if(!n){c[3261]=c[3261]&~(1<<d);break}}else{if(f>>>0<(c[3264]|0)>>>0)ua();d=f+16|0;if((c[d>>2]|0)==(o|0))c[d>>2]=n;else c[f+20>>2]=n;if(!n)break}b=c[3264]|0;if(n>>>0<b>>>0)ua();c[n+24>>2]=f;d=o+16|0;a=c[d>>2]|0;do if(a|0)if(a>>>0<b>>>0)ua();else{c[n+16>>2]=a;c[a+24>>2]=n;break}while(0);d=c[d+4>>2]|0;if(d|0)if(d>>>0<(c[3264]|0)>>>0)ua();else{c[n+20>>2]=d;c[d+24>>2]=n;break}}}else{a=c[o+8>>2]|0;b=c[o+12>>2]|0;d=13080+(e<<1<<2)|0;if((a|0)!=(d|0)){if(a>>>0<h>>>0)ua();if((c[a+12>>2]|0)!=(o|0))ua()}if((b|0)==(a|0)){c[3260]=c[3260]&~(1<<e);break}if((b|0)!=(d|0)){if(b>>>0<h>>>0)ua();d=b+8|0;if((c[d>>2]|0)==(o|0))m=d;else ua()}else m=b+8|0;c[a+12>>2]=b;c[m>>2]=a}while(0);c[r+4>>2]=g|1;c[r+g>>2]=g;if((r|0)==(c[3265]|0)){c[3262]=g;return}}else{c[d>>2]=a&-2;c[r+4>>2]=g|1;c[r+g>>2]=g}d=g>>>3;if(g>>>0<256){b=13080+(d<<1<<2)|0;a=c[3260]|0;d=1<<d;if(a&d){d=b+8|0;a=c[d>>2]|0;if(a>>>0<(c[3264]|0)>>>0)ua();else{p=d;q=a}}else{c[3260]=a|d;p=b+8|0;q=b}c[p>>2]=r;c[q+12>>2]=r;c[r+8>>2]=q;c[r+12>>2]=b;return}d=g>>>8;if(d)if(g>>>0>16777215)b=31;else{p=(d+1048320|0)>>>16&8;q=d<<p;o=(q+520192|0)>>>16&4;q=q<<o;b=(q+245760|0)>>>16&2;b=14-(o|p|b)+(q<<b>>>15)|0;b=g>>>(b+7|0)&1|b<<1}else b=0;e=13344+(b<<2)|0;c[r+28>>2]=b;c[r+20>>2]=0;c[r+16>>2]=0;d=c[3261]|0;a=1<<b;if(!(d&a)){c[3261]=d|a;c[e>>2]=r;c[r+24>>2]=e;c[r+12>>2]=r;c[r+8>>2]=r;return}f=g<<((b|0)==31?0:25-(b>>>1)|0);d=c[e>>2]|0;while(1){if((c[d+4>>2]&-8|0)==(g|0)){b=d;e=127;break}a=d+16+(f>>>31<<2)|0;b=c[a>>2]|0;if(!b){e=124;break}else{f=f<<1;d=b}}if((e|0)==124){if(a>>>0<(c[3264]|0)>>>0)ua();c[a>>2]=r;c[r+24>>2]=d;c[r+12>>2]=r;c[r+8>>2]=r;return}else if((e|0)==127){d=b+8|0;a=c[d>>2]|0;q=c[3264]|0;if(!(a>>>0>=q>>>0&b>>>0>=q>>>0))ua();c[a+12>>2]=r;c[d>>2]=r;c[r+8>>2]=a;c[r+12>>2]=b;c[r+24>>2]=0;return}}function rn(){}function sn(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;d=b-d-(c>>>0>a>>>0|0)>>>0;return (C=d,a-c>>>0|0)|0}function tn(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0;f=b+e|0;if((e|0)>=20){d=d&255;h=b&3;i=d|d<<8|d<<16|d<<24;g=f&~3;if(h){h=b+4-h|0;while((b|0)<(h|0)){a[b>>0]=d;b=b+1|0}}while((b|0)<(g|0)){c[b>>2]=i;b=b+4|0}}while((b|0)<(f|0)){a[b>>0]=d;b=b+1|0}return b-e|0}function un(a,b,c){a=a|0;b=b|0;c=c|0;if((c|0)<32){C=b<<c|(a&(1<<c)-1<<32-c)>>>32-c;return a<<c}C=a<<c-32;return 0}function vn(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;c=a+c>>>0;return (C=b+d+(c>>>0<a>>>0|0)>>>0,c|0)|0}function wn(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;p=p+1|0;c[a>>2]=p;while((f|0)<(e|0)){if(!(c[d+(f<<3)>>2]|0)){c[d+(f<<3)>>2]=p;c[d+((f<<3)+4)>>2]=b;c[d+((f<<3)+8)>>2]=0;C=e;return d|0}f=f+1|0}e=e*2|0;d=on(d|0,8*(e+1|0)|0)|0;d=wn(a|0,b|0,d|0,e|0)|0;C=e;return d|0}function xn(a,b,c){a=a|0;b=b|0;c=c|0;if((c|0)<32){C=b>>>c;return a>>>c|(b&(1<<c)-1)<<32-c}C=0;return b>>>c-32|0}function yn(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;while((f|0)<(d|0)){e=c[b+(f<<3)>>2]|0;if(!e)break;if((e|0)==(a|0))return c[b+((f<<3)+4)>>2]|0;f=f+1|0}return 0}function zn(b,d,e){b=b|0;d=d|0;e=e|0;var f=0;if((e|0)>=4096)return Ia(b|0,d|0,e|0)|0;f=b|0;if((b&3)==(d&3)){while(b&3){if(!e)return f|0;a[b>>0]=a[d>>0]|0;b=b+1|0;d=d+1|0;e=e-1|0}while((e|0)>=4){c[b>>2]=c[d>>2];b=b+4|0;d=d+4|0;e=e-4|0}}while((e|0)>0){a[b>>0]=a[d>>0]|0;b=b+1|0;d=d+1|0;e=e-1|0}return f|0}function An(a,b,c){a=a|0;b=b|0;c=c|0;if((c|0)<32){C=b>>c;return a>>>c|(b&(1<<c)-1)<<32-c}C=(b|0)<0?-1:0;return b>>c-32|0}function Bn(b){b=b|0;var c=0;c=a[m+(b&255)>>0]|0;if((c|0)<8)return c|0;c=a[m+(b>>8&255)>>0]|0;if((c|0)<8)return c+8|0;c=a[m+(b>>16&255)>>0]|0;if((c|0)<8)return c+16|0;return (a[m+(b>>>24)>>0]|0)+24|0}function Cn(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0;f=a&65535;e=b&65535;c=_(e,f)|0;d=a>>>16;a=(c>>>16)+(_(e,d)|0)|0;e=b>>>16;b=_(e,f)|0;return (C=(a>>>16)+(_(e,d)|0)+(((a&65535)+b|0)>>>16)|0,a+b<<16|c&65535|0)|0}function Dn(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0;j=b>>31|((b|0)<0?-1:0)<<1;i=((b|0)<0?-1:0)>>31|((b|0)<0?-1:0)<<1;f=d>>31|((d|0)<0?-1:0)<<1;e=((d|0)<0?-1:0)>>31|((d|0)<0?-1:0)<<1;h=sn(j^a|0,i^b|0,j|0,i|0)|0;g=C;a=f^j;b=e^i;return sn((In(h,g,sn(f^c|0,e^d|0,f|0,e|0)|0,C,0)|0)^a|0,C^b|0,a|0,b|0)|0}function En(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0;f=i;i=i+16|0;j=f|0;h=b>>31|((b|0)<0?-1:0)<<1;g=((b|0)<0?-1:0)>>31|((b|0)<0?-1:0)<<1;l=e>>31|((e|0)<0?-1:0)<<1;k=((e|0)<0?-1:0)>>31|((e|0)<0?-1:0)<<1;a=sn(h^a|0,g^b|0,h|0,g|0)|0;b=C;In(a,b,sn(l^d|0,k^e|0,l|0,k|0)|0,C,j)|0;e=sn(c[j>>2]^h|0,c[j+4>>2]^g|0,h|0,g|0)|0;d=C;i=f;return (C=d,e)|0}function Fn(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0;e=a;f=c;c=Cn(e,f)|0;a=C;return (C=(_(b,f)|0)+(_(d,e)|0)+a|a&0,c|0|0)|0}function Gn(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return In(a,b,c,d,0)|0}function Hn(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0;g=i;i=i+16|0;f=g|0;In(a,b,d,e,f)|0;i=g;return (C=c[f+4>>2]|0,c[f>>2]|0)|0}function In(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;l=a;j=b;k=j;h=d;n=e;i=n;if(!k){g=(f|0)!=0;if(!i){if(g){c[f>>2]=(l>>>0)%(h>>>0);c[f+4>>2]=0}n=0;f=(l>>>0)/(h>>>0)>>>0;return (C=n,f)|0}else{if(!g){n=0;f=0;return (C=n,f)|0}c[f>>2]=a|0;c[f+4>>2]=b&0;n=0;f=0;return (C=n,f)|0}}g=(i|0)==0;do if(h){if(!g){g=(aa(i|0)|0)-(aa(k|0)|0)|0;if(g>>>0<=31){m=g+1|0;i=31-g|0;b=g-31>>31;h=m;a=l>>>(m>>>0)&b|k<<i;b=k>>>(m>>>0)&b;g=0;i=l<<i;break}if(!f){n=0;f=0;return (C=n,f)|0}c[f>>2]=a|0;c[f+4>>2]=j|b&0;n=0;f=0;return (C=n,f)|0}g=h-1|0;if(g&h|0){i=(aa(h|0)|0)+33-(aa(k|0)|0)|0;p=64-i|0;m=32-i|0;j=m>>31;o=i-32|0;b=o>>31;h=i;a=m-1>>31&k>>>(o>>>0)|(k<<m|l>>>(i>>>0))&b;b=b&k>>>(i>>>0);g=l<<p&j;i=(k<<p|l>>>(o>>>0))&j|l<<m&i-33>>31;break}if(f|0){c[f>>2]=g&l;c[f+4>>2]=0}if((h|0)==1){o=j|b&0;p=a|0|0;return (C=o,p)|0}else{p=Bn(h|0)|0;o=k>>>(p>>>0)|0;p=k<<32-p|l>>>(p>>>0)|0;return (C=o,p)|0}}else{if(g){if(f|0){c[f>>2]=(k>>>0)%(h>>>0);c[f+4>>2]=0}o=0;p=(k>>>0)/(h>>>0)>>>0;return (C=o,p)|0}if(!l){if(f|0){c[f>>2]=0;c[f+4>>2]=(k>>>0)%(i>>>0)}o=0;p=(k>>>0)/(i>>>0)>>>0;return (C=o,p)|0}g=i-1|0;if(!(g&i)){if(f|0){c[f>>2]=a|0;c[f+4>>2]=g&k|b&0}o=0;p=k>>>((Bn(i|0)|0)>>>0);return (C=o,p)|0}g=(aa(i|0)|0)-(aa(k|0)|0)|0;if(g>>>0<=30){b=g+1|0;i=31-g|0;h=b;a=k<<i|l>>>(b>>>0);b=k>>>(b>>>0);g=0;i=l<<i;break}if(!f){o=0;p=0;return (C=o,p)|0}c[f>>2]=a|0;c[f+4>>2]=j|b&0;o=0;p=0;return (C=o,p)|0}while(0);if(!h){k=i;j=0;i=0}else{m=d|0|0;l=n|e&0;k=vn(m|0,l|0,-1,-1)|0;d=C;j=i;i=0;do{e=j;j=g>>>31|j<<1;g=i|g<<1;e=a<<1|e>>>31|0;n=a>>>31|b<<1|0;sn(k|0,d|0,e|0,n|0)|0;p=C;o=p>>31|((p|0)<0?-1:0)<<1;i=o&1;a=sn(e|0,n|0,o&m|0,(((p|0)<0?-1:0)>>31|((p|0)<0?-1:0)<<1)&l|0)|0;b=C;h=h-1|0}while((h|0)!=0);k=j;j=0}h=0;if(f|0){c[f>>2]=a;c[f+4>>2]=b}o=(g|0)>>>31|(k|h)<<1|(h<<1|g>>>31)&0|j;p=(g<<1|0>>>31)&-2|i;return (C=o,p)|0}function Jn(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return hb[a&31](b|0,c|0,d|0)|0}function Kn(a,b,c){a=a|0;b=b|0;c=c|0;return ea(0,a|0,b|0,c|0)|0}function Ln(a,b,c){a=a|0;b=b|0;c=c|0;return ea(1,a|0,b|0,c|0)|0}function Mn(a,b,c){a=a|0;b=b|0;c=c|0;return ea(2,a|0,b|0,c|0)|0}function Nn(a,b,c){a=a|0;b=b|0;c=c|0;return ea(3,a|0,b|0,c|0)|0}function On(a,b,c){a=a|0;b=b|0;c=c|0;return ea(4,a|0,b|0,c|0)|0}function Pn(a,b,c){a=a|0;b=b|0;c=c|0;return ea(5,a|0,b|0,c|0)|0}function Qn(a,b,c){a=a|0;b=b|0;c=c|0;return ea(6,a|0,b|0,c|0)|0}function Rn(a,b,c){a=a|0;b=b|0;c=c|0;return ea(7,a|0,b|0,c|0)|0}function Sn(a,b){a=a|0;b=b|0;ib[a&31](b|0)}function Tn(a){a=a|0;ga(0,a|0)}function Un(a){a=a|0;ga(1,a|0)}function Vn(a){a=a|0;ga(2,a|0)}function Wn(a){a=a|0;ga(3,a|0)}function Xn(a){a=a|0;ga(4,a|0)}function Yn(a){a=a|0;ga(5,a|0)}function Zn(a){a=a|0;ga(6,a|0)}function _n(a){a=a|0;ga(7,a|0)}function $n(a,b,c){a=a|0;b=b|0;c=c|0;jb[a&31](b|0,c|0)}function ao(a,b){a=a|0;b=b|0;ia(0,a|0,b|0)}function bo(a,b){a=a|0;b=b|0;ia(1,a|0,b|0)}function co(a,b){a=a|0;b=b|0;ia(2,a|0,b|0)}function eo(a,b){a=a|0;b=b|0;ia(3,a|0,b|0)}function fo(a,b){a=a|0;b=b|0;ia(4,a|0,b|0)}function go(a,b){a=a|0;b=b|0;ia(5,a|0,b|0)}function ho(a,b){a=a|0;b=b|0;ia(6,a|0,b|0)}function io(a,b){a=a|0;b=b|0;ia(7,a|0,b|0)}function jo(a,b){a=a|0;b=b|0;return kb[a&255](b|0)|0}function ko(a){a=a|0;return ka(0,a|0)|0}function lo(a){a=a|0;return ka(1,a|0)|0}function mo(a){a=a|0;return ka(2,a|0)|0}function no(a){a=a|0;return ka(3,a|0)|0}function oo(a){a=a|0;return ka(4,a|0)|0}function po(a){a=a|0;return ka(5,a|0)|0}function qo(a){a=a|0;return ka(6,a|0)|0}function ro(a){a=a|0;return ka(7,a|0)|0}function so(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return lb[a&31](b|0,c|0,d|0,e|0)|0}function to(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return ma(0,a|0,b|0,c|0,d|0)|0}function uo(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return ma(1,a|0,b|0,c|0,d|0)|0}function vo(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return ma(2,a|0,b|0,c|0,d|0)|0}function wo(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return ma(3,a|0,b|0,c|0,d|0)|0}function xo(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return ma(4,a|0,b|0,c|0,d|0)|0}function yo(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return ma(5,a|0,b|0,c|0,d|0)|0}function zo(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return ma(6,a|0,b|0,c|0,d|0)|0}function Ao(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return ma(7,a|0,b|0,c|0,d|0)|0}function Bo(a,b,c){a=a|0;b=b|0;c=c|0;return mb[a&31](b|0,c|0)|0}function Co(a,b){a=a|0;b=b|0;return oa(0,a|0,b|0)|0}function Do(a,b){a=a|0;b=b|0;return oa(1,a|0,b|0)|0}function Eo(a,b){a=a|0;b=b|0;return oa(2,a|0,b|0)|0}function Fo(a,b){a=a|0;b=b|0;return oa(3,a|0,b|0)|0}function Go(a,b){a=a|0;b=b|0;return oa(4,a|0,b|0)|0}function Ho(a,b){a=a|0;b=b|0;return oa(5,a|0,b|0)|0}function Io(a,b){a=a|0;b=b|0;return oa(6,a|0,b|0)|0}function Jo(a,b){a=a|0;b=b|0;return oa(7,a|0,b|0)|0}function Ko(a,b,c){a=a|0;b=b|0;c=c|0;ba(0);return 0}function Lo(a){a=a|0;ba(1)}function Mo(a,b){a=a|0;b=b|0;ba(2)}function No(a){a=a|0;ba(3);return 0}function Oo(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;ba(4);return 0}function Po(a,b){a=a|0;b=b|0;ba(5);return 0}

// EMSCRIPTEN_END_FUNCS
var hb=[Ko,Ko,Kn,Ko,Ln,Ko,Mn,Ko,Nn,Ko,On,Ko,Pn,Ko,Qn,Ko,Rn,Ko,jl,ml,nl,ol,Yl,kh,nh,Xh,Ko,Ko,Ko,Ko,Ko,Ko];var ib=[Lo,Lo,Tn,Lo,Un,Lo,Vn,Lo,Wn,Lo,Xn,Lo,Yn,Lo,Zn,Lo,_n,Lo,kl,pl,Lo,Lo,Lo,Lo,Lo,Lo,Lo,Lo,Lo,Lo,Lo,Lo];var jb=[Mo,Mo,ao,Mo,bo,Mo,co,Mo,eo,Mo,fo,Mo,go,Mo,ho,Mo,io,Mo,xb,Gc,Yd,ce,le,Pe,Pf,Li,Mo,Mo,Mo,Mo,Mo,Mo];var kb=[No,No,ko,No,lo,No,mo,No,no,No,oo,No,po,No,qo,No,ro,No,Mh,Nh,Oh,Qh,Rh,Sh,Vh,Wh,Yh,Zh,_h,ai,bi,ci,di,ei,fi,gi,hi,ii,ji,ki,mi,ni,oi,pi,qi,ri,si,ti,ui,vi,wi,xi,zi,Ai,Ci,Di,Ei,Gi,Ii,Ji,Ki,Mi,Ni,Oi,Pi,Qi,Ri,Si,Ti,Ui,Vi,Wi,Xi,Yi,_i,$i,aj,dj,ij,jj,kj,mj,nj,oj,pj,rj,sj,tj,uj,vj,wj,xj,yj,Bj,Cj,Dj,Ej,Fj,Gj,Hj,Ij,Jj,Kj,Lj,Mj,Nj,Oj,Pj,Qj,Rj,Sj,Tj,Uj,Vj,Wj,Xj,Yj,Zj,_j,$j,ak,ck,dk,ek,fk,gk,hk,ik,jk,kk,lk,mk,ok,pk,qk,sk,xk,yk,Ak,Bk,Ck,Dk,Ek,Fk,Gk,Hk,Jk,Kk,Lk,Mk,Nk,Ok,Pk,Uk,Wk,Yk,dl,el,gl,sh,Ph,Th,$h,Fi,zj,cj,fj,lj,zk,Tk,Zk,_k,$k,bl,Lh,Sk,yi,Ik,Zi,bk,nk,li,Aj,Hi,No,No,No,No,No,No,No,No,No,No,No,No,No,No,No,No,No,No,No,No,No,No,No,No,No,No,No,No,No,No,No,No,No,No,No,No,No,No,No,No,No,No,No,No,No,No,No,No,No,No,No,No,No,No,No,No,No,No,No,No,No,No,No,No,No,No,No,No,No,No,No,No];var lb=[Oo,Oo,to,Oo,uo,Oo,vo,Oo,wo,Oo,xo,Oo,yo,Oo,zo,Oo,Ao,Oo,rh,rk,Oo,Oo,Oo,Oo,Oo,Oo,Oo,Oo,Oo,Oo,Oo,Oo];var mb=[Po,Po,Co,Po,Do,Po,Eo,Po,Fo,Po,Go,Po,Ho,Po,Io,Po,Jo,Po,Of,Po,Po,Po,Po,Po,Po,Po,Po,Po,Po,Po,Po,Po];return{_luaL_checkstack:_g,_lua_setglobal:vc,_lua_pushlightuserdata:kc,_bitshift64Lshr:xn,_lua_copy:Hb,_lua_createtable:sc,_luaL_optinteger:xh,_lua_arith:Qb,_lua_pushnil:ac,_lua_setmetatable:Bc,_lua_concat:Nc,_luaL_optlstring:Zg,_luaopen_io:Zi,_memcpy:zn,_luaL_pushmodule:uh,_luaL_pushresultsize:Ch,_lua_pushthread:lc,_lua_close:Mf,_luaopen_math:Aj,_lua_gettable:nc,_lua_replace:Gb,_lua_xmove:yb,_lua_load:Hc,_lua_pcallk:Fc,_lua_touserdata:Zb,_lua_getglobal:mc,_luaL_prepbuffsize:Ah,_lua_rawget:pc,_free:nn,_lua_pushcclosure:ic,_lua_pushstring:fc,_lua_upvaluejoin:Vc,_luaopen_string:nk,_lua_isuserdata:Ob,_luaL_loadbufferx:jh,_luaL_buffinit:Rg,_lua_resume:Xd,_lua_iscfunction:Lb,_luaL_execresult:dh,_lua_remove:Eb,_luaL_checkoption:Yg,_lua_rawlen:Xb,_lua_len:Oc,_luaL_openlib:th,_lua_pushvfstring:gc,_lua_isnumber:Mb,_lua_newuserdata:Rc,_lua_isstring:Nb,_lua_pushlstring:ec,_lua_status:Jc,_lua_setuservalue:Cc,_luaL_len:ih,_lua_callk:Ec,_luaL_checkany:Ug,_luaL_addstring:Mg,_lua_pushfstring:hc,_lua_newthread:Qf,_i64Add:vn,_lua_tolstring:Wb,_lua_rawset:yc,_luaL_traceback:Ih,_luaL_requiref:Eh,_lua_checkstack:wb,_lua_pushnumber:bc,_luaL_pushresult:Bh,_lua_topointer:$b,_lua_error:Lc,_luaL_setfuncs:wh,_luaopen_debug:Hi,_lua_compare:Rb,_luaL_checkinteger:Vg,_lua_getstack:Od,_lua_gettop:Cb,_lua_getlocal:Nd,_lua_gc:Kc,_luaL_checklstring:Wg,_luaL_checkunsigned:bh,_lua_settable:wc,_luaL_addlstring:Kg,_luaL_fileresult:eh,_lua_toboolean:Vb,_lua_setallocf:Qc,_memset:tn,_lua_gethook:Id,_lua_tointegerx:Tb,_lua_gethookcount:Jd,_luaL_testudata:Gh,_lua_tounsignedx:Ub,_luaL_openlibs:fl,_lua_setlocal:Qd,_luaL_optunsigned:zh,_lua_tothread:_b,_i64Subtract:sn,_lua_rawseti:zc,_lua_rawgetp:rc,_lua_version:Ab,_lua_newstate:Of,_lua_pushvalue:Ib,_lua_getctx:Dc,_lua_tocfunction:Yb,_lua_insert:Fb,_lua_typename:Kb,_luaL_argerror:Og,_lua_absindex:Bb,_lua_upvalueid:Uc,_lua_rawgeti:qc,_testSetjmp:yn,_lua_sethook:Pd,_luaL_callmeta:Tg,_lua_getallocf:Pc,_luaL_loadfilex:lh,_malloc:mn,_lua_rawequal:Pb,_lua_yieldk:ee,_lua_type:Jb,_lua_getfield:oc,_luaopen_os:bk,_luaL_checkversion_:ch,_luaL_buffinitsize:Sg,_luaL_checknumber:Xg,_lua_setupvalue:Tc,_luaL_newmetatable:ph,_lua_getmetatable:tc,_lua_pushunsigned:dc,_lua_getupvalue:Sc,_luaopen_base:Lh,_luaL_gsub:hh,_luaL_addvalue:Ng,_bitshift64Shl:un,_luaL_tolstring:Hh,_lua_atpanic:zb,_luaL_getmetafield:fh,_lua_getinfo:Ld,_luaL_setmetatable:Fh,_lua_settop:Db,_lua_pushboolean:jc,_lua_setfield:xc,_luaL_checktype:$g,_luaL_ref:Dh,_lua_next:Mc,_luaL_checkudata:ah,_realloc:on,_luaopen_table:Ik,_luaopen_coroutine:yi,_luaopen_bit32:li,_luaL_getsubtable:gh,_lua_getuservalue:uc,_luaopen_package:Sk,___errno_location:il,_lua_dump:Ic,_saveSetjmp:wn,_luaL_optnumber:yh,_lua_pushinteger:cc,_lua_gethookmask:Kd,_luaL_newstate:qh,_lua_tonumberx:Sb,_luaL_where:Kh,_lua_rawsetp:Ac,_luaL_error:Lg,_luaL_loadstring:oh,_luaL_unref:Jh,runPostSets:rn,stackAlloc:nb,stackSave:ob,stackRestore:pb,establishStackSpace:qb,setThrew:rb,setTempRet0:ub,getTempRet0:vb,dynCall_iiii:Jn,dynCall_vi:Sn,dynCall_vii:$n,dynCall_ii:jo,dynCall_iiiii:so,dynCall_iii:Bo}})


// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg,Module.asmLibraryArg,buffer);var _luaL_checkstack=Module["_luaL_checkstack"]=asm["_luaL_checkstack"];var _lua_setglobal=Module["_lua_setglobal"]=asm["_lua_setglobal"];var _lua_pushlightuserdata=Module["_lua_pushlightuserdata"]=asm["_lua_pushlightuserdata"];var _bitshift64Lshr=Module["_bitshift64Lshr"]=asm["_bitshift64Lshr"];var _lua_copy=Module["_lua_copy"]=asm["_lua_copy"];var _lua_createtable=Module["_lua_createtable"]=asm["_lua_createtable"];var _luaL_optinteger=Module["_luaL_optinteger"]=asm["_luaL_optinteger"];var _lua_arith=Module["_lua_arith"]=asm["_lua_arith"];var _lua_pushnil=Module["_lua_pushnil"]=asm["_lua_pushnil"];var _lua_setmetatable=Module["_lua_setmetatable"]=asm["_lua_setmetatable"];var _lua_pushthread=Module["_lua_pushthread"]=asm["_lua_pushthread"];var _luaL_optlstring=Module["_luaL_optlstring"]=asm["_luaL_optlstring"];var _luaopen_io=Module["_luaopen_io"]=asm["_luaopen_io"];var _memcpy=Module["_memcpy"]=asm["_memcpy"];var _luaL_pushmodule=Module["_luaL_pushmodule"]=asm["_luaL_pushmodule"];var _luaL_pushresultsize=Module["_luaL_pushresultsize"]=asm["_luaL_pushresultsize"];var _lua_upvalueid=Module["_lua_upvalueid"]=asm["_lua_upvalueid"];var _lua_close=Module["_lua_close"]=asm["_lua_close"];var _luaopen_math=Module["_luaopen_math"]=asm["_luaopen_math"];var _luaL_setfuncs=Module["_luaL_setfuncs"]=asm["_luaL_setfuncs"];var _luaL_ref=Module["_luaL_ref"]=asm["_luaL_ref"];var _lua_gethookmask=Module["_lua_gethookmask"]=asm["_lua_gethookmask"];var runPostSets=Module["runPostSets"]=asm["runPostSets"];var _lua_xmove=Module["_lua_xmove"]=asm["_lua_xmove"];var _lua_load=Module["_lua_load"]=asm["_lua_load"];var _lua_pcallk=Module["_lua_pcallk"]=asm["_lua_pcallk"];var _lua_touserdata=Module["_lua_touserdata"]=asm["_lua_touserdata"];var _lua_getglobal=Module["_lua_getglobal"]=asm["_lua_getglobal"];var _luaL_prepbuffsize=Module["_luaL_prepbuffsize"]=asm["_luaL_prepbuffsize"];var _lua_rawget=Module["_lua_rawget"]=asm["_lua_rawget"];var _free=Module["_free"]=asm["_free"];var _lua_pushcclosure=Module["_lua_pushcclosure"]=asm["_lua_pushcclosure"];var _lua_pushstring=Module["_lua_pushstring"]=asm["_lua_pushstring"];var _lua_upvaluejoin=Module["_lua_upvaluejoin"]=asm["_lua_upvaluejoin"];var _luaopen_string=Module["_luaopen_string"]=asm["_luaopen_string"];var _lua_isuserdata=Module["_lua_isuserdata"]=asm["_lua_isuserdata"];var _luaL_loadbufferx=Module["_luaL_loadbufferx"]=asm["_luaL_loadbufferx"];var _lua_resume=Module["_lua_resume"]=asm["_lua_resume"];var _lua_iscfunction=Module["_lua_iscfunction"]=asm["_lua_iscfunction"];var _luaL_newstate=Module["_luaL_newstate"]=asm["_luaL_newstate"];var _luaL_execresult=Module["_luaL_execresult"]=asm["_luaL_execresult"];var _lua_remove=Module["_lua_remove"]=asm["_lua_remove"];var _luaL_checkoption=Module["_luaL_checkoption"]=asm["_luaL_checkoption"];var _lua_rawlen=Module["_lua_rawlen"]=asm["_lua_rawlen"];var _lua_len=Module["_lua_len"]=asm["_lua_len"];var _luaL_openlib=Module["_luaL_openlib"]=asm["_luaL_openlib"];var _lua_pushvfstring=Module["_lua_pushvfstring"]=asm["_lua_pushvfstring"];var _lua_isnumber=Module["_lua_isnumber"]=asm["_lua_isnumber"];var _luaL_checklstring=Module["_luaL_checklstring"]=asm["_luaL_checklstring"];var _lua_isstring=Module["_lua_isstring"]=asm["_lua_isstring"];var _lua_pushlstring=Module["_lua_pushlstring"]=asm["_lua_pushlstring"];var _lua_settable=Module["_lua_settable"]=asm["_lua_settable"];var _luaL_len=Module["_luaL_len"]=asm["_luaL_len"];var _lua_callk=Module["_lua_callk"]=asm["_lua_callk"];var _luaL_checkany=Module["_luaL_checkany"]=asm["_luaL_checkany"];var _luaL_addstring=Module["_luaL_addstring"]=asm["_luaL_addstring"];var _lua_pushfstring=Module["_lua_pushfstring"]=asm["_lua_pushfstring"];var _lua_newthread=Module["_lua_newthread"]=asm["_lua_newthread"];var _lua_tolstring=Module["_lua_tolstring"]=asm["_lua_tolstring"];var _lua_rawset=Module["_lua_rawset"]=asm["_lua_rawset"];var _luaL_traceback=Module["_luaL_traceback"]=asm["_luaL_traceback"];var _luaL_requiref=Module["_luaL_requiref"]=asm["_luaL_requiref"];var _lua_checkstack=Module["_lua_checkstack"]=asm["_lua_checkstack"];var _lua_pushnumber=Module["_lua_pushnumber"]=asm["_lua_pushnumber"];var _luaL_pushresult=Module["_luaL_pushresult"]=asm["_luaL_pushresult"];var _lua_topointer=Module["_lua_topointer"]=asm["_lua_topointer"];var _lua_error=Module["_lua_error"]=asm["_lua_error"];var _lua_gettable=Module["_lua_gettable"]=asm["_lua_gettable"];var _luaopen_debug=Module["_luaopen_debug"]=asm["_luaopen_debug"];var _lua_concat=Module["_lua_concat"]=asm["_lua_concat"];var _luaL_checkinteger=Module["_luaL_checkinteger"]=asm["_luaL_checkinteger"];var _lua_getstack=Module["_lua_getstack"]=asm["_lua_getstack"];var _lua_gettop=Module["_lua_gettop"]=asm["_lua_gettop"];var _lua_getlocal=Module["_lua_getlocal"]=asm["_lua_getlocal"];var _lua_gc=Module["_lua_gc"]=asm["_lua_gc"];var _lua_newuserdata=Module["_lua_newuserdata"]=asm["_lua_newuserdata"];var _luaL_checkunsigned=Module["_luaL_checkunsigned"]=asm["_luaL_checkunsigned"];var _lua_setuservalue=Module["_lua_setuservalue"]=asm["_lua_setuservalue"];var _luaL_addlstring=Module["_luaL_addlstring"]=asm["_luaL_addlstring"];var _luaL_fileresult=Module["_luaL_fileresult"]=asm["_luaL_fileresult"];var _lua_toboolean=Module["_lua_toboolean"]=asm["_lua_toboolean"];var _lua_setallocf=Module["_lua_setallocf"]=asm["_lua_setallocf"];var _memset=Module["_memset"]=asm["_memset"];var _lua_gethook=Module["_lua_gethook"]=asm["_lua_gethook"];var _lua_tointegerx=Module["_lua_tointegerx"]=asm["_lua_tointegerx"];var _lua_gethookcount=Module["_lua_gethookcount"]=asm["_lua_gethookcount"];var _luaL_testudata=Module["_luaL_testudata"]=asm["_luaL_testudata"];var _lua_tounsignedx=Module["_lua_tounsignedx"]=asm["_lua_tounsignedx"];var _luaL_openlibs=Module["_luaL_openlibs"]=asm["_luaL_openlibs"];var _lua_setlocal=Module["_lua_setlocal"]=asm["_lua_setlocal"];var _luaL_optunsigned=Module["_luaL_optunsigned"]=asm["_luaL_optunsigned"];var _lua_tothread=Module["_lua_tothread"]=asm["_lua_tothread"];var _i64Subtract=Module["_i64Subtract"]=asm["_i64Subtract"];var _lua_rawgetp=Module["_lua_rawgetp"]=asm["_lua_rawgetp"];var _lua_version=Module["_lua_version"]=asm["_lua_version"];var _lua_newstate=Module["_lua_newstate"]=asm["_lua_newstate"];var _lua_pushvalue=Module["_lua_pushvalue"]=asm["_lua_pushvalue"];var _lua_getctx=Module["_lua_getctx"]=asm["_lua_getctx"];var _lua_tocfunction=Module["_lua_tocfunction"]=asm["_lua_tocfunction"];var _lua_insert=Module["_lua_insert"]=asm["_lua_insert"];var _lua_typename=Module["_lua_typename"]=asm["_lua_typename"];var _luaL_argerror=Module["_luaL_argerror"]=asm["_luaL_argerror"];var _lua_absindex=Module["_lua_absindex"]=asm["_lua_absindex"];var _lua_rawgeti=Module["_lua_rawgeti"]=asm["_lua_rawgeti"];var _testSetjmp=Module["_testSetjmp"]=asm["_testSetjmp"];var _lua_sethook=Module["_lua_sethook"]=asm["_lua_sethook"];var _luaL_callmeta=Module["_luaL_callmeta"]=asm["_luaL_callmeta"];var _luaL_buffinit=Module["_luaL_buffinit"]=asm["_luaL_buffinit"];var _luaL_loadfilex=Module["_luaL_loadfilex"]=asm["_luaL_loadfilex"];var _malloc=Module["_malloc"]=asm["_malloc"];var _lua_rawequal=Module["_lua_rawequal"]=asm["_lua_rawequal"];var _lua_yieldk=Module["_lua_yieldk"]=asm["_lua_yieldk"];var _lua_type=Module["_lua_type"]=asm["_lua_type"];var _lua_compare=Module["_lua_compare"]=asm["_lua_compare"];var _lua_getfield=Module["_lua_getfield"]=asm["_lua_getfield"];var _luaopen_os=Module["_luaopen_os"]=asm["_luaopen_os"];var _luaL_checkversion_=Module["_luaL_checkversion_"]=asm["_luaL_checkversion_"];var _luaL_buffinitsize=Module["_luaL_buffinitsize"]=asm["_luaL_buffinitsize"];var _luaL_checknumber=Module["_luaL_checknumber"]=asm["_luaL_checknumber"];var _lua_setupvalue=Module["_lua_setupvalue"]=asm["_lua_setupvalue"];var _luaL_newmetatable=Module["_luaL_newmetatable"]=asm["_luaL_newmetatable"];var _lua_getmetatable=Module["_lua_getmetatable"]=asm["_lua_getmetatable"];var _lua_pushunsigned=Module["_lua_pushunsigned"]=asm["_lua_pushunsigned"];var _lua_getupvalue=Module["_lua_getupvalue"]=asm["_lua_getupvalue"];var _luaopen_base=Module["_luaopen_base"]=asm["_luaopen_base"];var _luaL_gsub=Module["_luaL_gsub"]=asm["_luaL_gsub"];var _luaL_addvalue=Module["_luaL_addvalue"]=asm["_luaL_addvalue"];var _bitshift64Shl=Module["_bitshift64Shl"]=asm["_bitshift64Shl"];var _luaL_tolstring=Module["_luaL_tolstring"]=asm["_luaL_tolstring"];var _lua_atpanic=Module["_lua_atpanic"]=asm["_lua_atpanic"];var _luaL_getmetafield=Module["_luaL_getmetafield"]=asm["_luaL_getmetafield"];var _lua_getinfo=Module["_lua_getinfo"]=asm["_lua_getinfo"];var _luaL_setmetatable=Module["_luaL_setmetatable"]=asm["_luaL_setmetatable"];var _lua_settop=Module["_lua_settop"]=asm["_lua_settop"];var _lua_pushboolean=Module["_lua_pushboolean"]=asm["_lua_pushboolean"];var _lua_setfield=Module["_lua_setfield"]=asm["_lua_setfield"];var _luaL_checktype=Module["_luaL_checktype"]=asm["_luaL_checktype"];var _lua_replace=Module["_lua_replace"]=asm["_lua_replace"];var _lua_next=Module["_lua_next"]=asm["_lua_next"];var _luaL_checkudata=Module["_luaL_checkudata"]=asm["_luaL_checkudata"];var _realloc=Module["_realloc"]=asm["_realloc"];var _i64Add=Module["_i64Add"]=asm["_i64Add"];var _luaopen_coroutine=Module["_luaopen_coroutine"]=asm["_luaopen_coroutine"];var _luaopen_bit32=Module["_luaopen_bit32"]=asm["_luaopen_bit32"];var _luaopen_table=Module["_luaopen_table"]=asm["_luaopen_table"];var _luaL_getsubtable=Module["_luaL_getsubtable"]=asm["_luaL_getsubtable"];var _lua_getuservalue=Module["_lua_getuservalue"]=asm["_lua_getuservalue"];var _luaopen_package=Module["_luaopen_package"]=asm["_luaopen_package"];var ___errno_location=Module["___errno_location"]=asm["___errno_location"];var _lua_rawseti=Module["_lua_rawseti"]=asm["_lua_rawseti"];var _saveSetjmp=Module["_saveSetjmp"]=asm["_saveSetjmp"];var _luaL_optnumber=Module["_luaL_optnumber"]=asm["_luaL_optnumber"];var _lua_pushinteger=Module["_lua_pushinteger"]=asm["_lua_pushinteger"];var _lua_getallocf=Module["_lua_getallocf"]=asm["_lua_getallocf"];var _lua_dump=Module["_lua_dump"]=asm["_lua_dump"];var _lua_status=Module["_lua_status"]=asm["_lua_status"];var _lua_tonumberx=Module["_lua_tonumberx"]=asm["_lua_tonumberx"];var _luaL_where=Module["_luaL_where"]=asm["_luaL_where"];var _lua_rawsetp=Module["_lua_rawsetp"]=asm["_lua_rawsetp"];var _luaL_error=Module["_luaL_error"]=asm["_luaL_error"];var _luaL_unref=Module["_luaL_unref"]=asm["_luaL_unref"];var _luaL_loadstring=Module["_luaL_loadstring"]=asm["_luaL_loadstring"];var dynCall_iiii=Module["dynCall_iiii"]=asm["dynCall_iiii"];var dynCall_vi=Module["dynCall_vi"]=asm["dynCall_vi"];var dynCall_vii=Module["dynCall_vii"]=asm["dynCall_vii"];var dynCall_ii=Module["dynCall_ii"]=asm["dynCall_ii"];var dynCall_iiiii=Module["dynCall_iiiii"]=asm["dynCall_iiiii"];var dynCall_iii=Module["dynCall_iii"]=asm["dynCall_iii"];Runtime.stackAlloc=asm["stackAlloc"];Runtime.stackSave=asm["stackSave"];Runtime.stackRestore=asm["stackRestore"];Runtime.establishStackSpace=asm["establishStackSpace"];Runtime.setTempRet0=asm["setTempRet0"];Runtime.getTempRet0=asm["getTempRet0"];function ExitStatus(status){this.name="ExitStatus";this.message="Program terminated with exit("+status+")";this.status=status}ExitStatus.prototype=new Error;ExitStatus.prototype.constructor=ExitStatus;var initialStackTop;var preloadStartTime=null;var calledMain=false;dependenciesFulfilled=function runCaller(){if(!Module["calledRun"])run();if(!Module["calledRun"])dependenciesFulfilled=runCaller};Module["callMain"]=Module.callMain=function callMain(args){args=args||[];ensureInitRuntime();var argc=args.length+1;function pad(){for(var i=0;i<4-1;i++){argv.push(0)}}var argv=[allocate(intArrayFromString(Module["thisProgram"]),"i8",ALLOC_NORMAL)];pad();for(var i=0;i<argc-1;i=i+1){argv.push(allocate(intArrayFromString(args[i]),"i8",ALLOC_NORMAL));pad()}argv.push(0);argv=allocate(argv,"i32",ALLOC_NORMAL);try{var ret=Module["_main"](argc,argv,0);exit(ret,true)}catch(e){if(e instanceof ExitStatus){return}else if(e=="SimulateInfiniteLoop"){Module["noExitRuntime"]=true;return}else{if(e&&typeof e==="object"&&e.stack)Module.printErr("exception thrown: "+[e,e.stack]);throw e}}finally{calledMain=true}};function run(args){args=args||Module["arguments"];if(preloadStartTime===null)preloadStartTime=Date.now();if(runDependencies>0){return}preRun();if(runDependencies>0)return;if(Module["calledRun"])return;function doRun(){if(Module["calledRun"])return;Module["calledRun"]=true;if(ABORT)return;ensureInitRuntime();preMain();if(Module["onRuntimeInitialized"])Module["onRuntimeInitialized"]();if(Module["_main"]&&shouldRunNow)Module["callMain"](args);postRun()}if(Module["setStatus"]){Module["setStatus"]("Running...");setTimeout((function(){setTimeout((function(){Module["setStatus"]("")}),1);doRun()}),1)}else{doRun()}}Module["run"]=Module.run=run;function exit(status,implicit){if(implicit&&Module["noExitRuntime"]){return}if(Module["noExitRuntime"]){}else{ABORT=true;EXITSTATUS=status;STACKTOP=initialStackTop;exitRuntime();if(Module["onExit"])Module["onExit"](status)}if(ENVIRONMENT_IS_NODE){process["exit"](status)}else if(ENVIRONMENT_IS_SHELL&&typeof quit==="function"){quit(status)}throw new ExitStatus(status)}Module["exit"]=Module.exit=exit;var abortDecorators=[];function abort(what){if(what!==undefined){Module.print(what);Module.printErr(what);what=JSON.stringify(what)}else{what=""}ABORT=true;EXITSTATUS=1;var extra="\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.";var output="abort("+what+") at "+stackTrace()+extra;if(abortDecorators){abortDecorators.forEach((function(decorator){output=decorator(output,what)}))}throw output}Module["abort"]=Module.abort=abort;if(Module["preInit"]){if(typeof Module["preInit"]=="function")Module["preInit"]=[Module["preInit"]];while(Module["preInit"].length>0){Module["preInit"].pop()()}}var shouldRunNow=false;if(Module["noInitialRun"]){shouldRunNow=false}Module["noExitRuntime"]=true;run();!(function(exports,global,emscripten){var slice=[].slice;var apply=(function(){}).apply;function new_(a,b,c,d,e,f,g,h,i){switch(arguments.length){case 0:return new this;case 1:return new this(a);case 2:return new this(a,b);case 3:return new this(a,b,c);case 4:return new this(a,b,c,d);case 5:return new this(a,b,c,d,e);case 6:return new this(a,b,c,d,e,f);case 7:return new this(a,b,c,d,e,f,g);case 8:return new this(a,b,c,d,e,f,g,h);case 9:return new this(a,b,c,d,e,f,g,h,i);default:var obj=Object.create(this.prototype);var ret=this.apply(obj,arguments);return typeof ret==="object"&&ret!==null?ret:obj}}var Lua=exports.Lua={"defines":{"REGISTRYINDEX":-1e6-1e3,"RIDX_GLOBALS":2,"RIDX_MAINTHREAD":1,"MULTRET":-1,"NOREF":-2,"GC":{"STOP":0,"RESTART":1,"COLLECT":2,"COUNT":3,"COUNTB":4,"STEP":5,"SETPAUSE":6,"SETSTEPMUL":7,"SETMAJORINC":8,"ISRUNNING":9,"GEN":10,"INC":11},"T":{"NONE":-1,"NIL":0,"BOOLEAN":1,"LIGHTUSERDATA":2,"NUMBER":3,"STRING":4,"TABLE":5,"FUNCTION":6,"USERDATA":7,"THREAD":8}},"lib":{"checkstack":emscripten.cwrap("lua_checkstack",null,["number","number"]),"createtable":emscripten.cwrap("lua_createtable",null,["number","number","number"]),"error":emscripten.cwrap("lua_error","number",["number"]),"gc":emscripten.cwrap("lua_gc","number",["number","number","number"]),"getfield":emscripten.cwrap("lua_getfield",null,["number","number","string"]),"getglobal":emscripten.cwrap("lua_getglobal",null,["number","string"]),"gettable":emscripten.cwrap("lua_gettable",null,["number","number"]),"gettop":emscripten.cwrap("lua_gettop","number",["number"]),"newuserdata":emscripten.cwrap("lua_newuserdata","number",["number","number"]),"pcallk":emscripten.cwrap("lua_pcallk","number",["number","number","number","number","number","number"]),"pushboolean":emscripten.cwrap("lua_pushboolean",null,["number","number"]),"pushcclosure":emscripten.cwrap("lua_pushcclosure",null,["number","number","number"]),"pushlightuserdata":emscripten.cwrap("lua_pushlightuserdata",null,["number","number"]),"pushlstring":emscripten.cwrap("lua_pushlstring",null,["number","array","number"]),"pushnil":emscripten.cwrap("lua_pushnil",null,["number"]),"pushnumber":emscripten.cwrap("lua_pushnumber",null,["number","number"]),"pushvalue":emscripten.cwrap("lua_pushvalue",null,["number","number"]),"rawgeti":emscripten.cwrap("lua_rawgeti",null,["number","number","number"]),"remove":emscripten.cwrap("lua_remove",null,["number","number"]),"setfield":emscripten.cwrap("lua_setfield",null,["number","number","string"]),"setglobal":emscripten.cwrap("lua_setglobal",null,["number","string"]),"setmetatable":emscripten.cwrap("lua_setmetatable",null,["number","number"]),"settable":emscripten.cwrap("lua_settable",null,["number","number"]),"settop":emscripten.cwrap("lua_settop",null,["number","number"]),"toboolean":emscripten.cwrap("lua_toboolean","number",["number","number"]),"tolstring":emscripten.cwrap("lua_tolstring","number",["number","number","number"]),"tonumberx":emscripten.cwrap("lua_tonumberx","number",["number","number","number"]),"tothread":emscripten.cwrap("lua_tothread","number",["number","number"]),"touserdata":emscripten.cwrap("lua_touserdata","number",["number","number"]),"type":emscripten.cwrap("lua_type","number",["number","number"]),"typename":emscripten.cwrap("lua_typename","string",["number","number"])},"auxlib":{"checkudata":emscripten.cwrap("luaL_checkudata","number",["number","number","string"]),"loadbufferx":emscripten.cwrap("luaL_loadbufferx","number",["number","array","number","string","string"]),"newmetatable":emscripten.cwrap("luaL_newmetatable","number",["number","string"]),"newstate":emscripten.cwrap("luaL_newstate","number",[]),"openlibs":emscripten.cwrap("luaL_openlibs",null,["number"]),"ref":emscripten.cwrap("luaL_ref","number",["number","number"]),"setmetatable":emscripten.cwrap("luaL_setmetatable",null,["number","string"]),"testudata":emscripten.cwrap("luaL_testudata","number",["number","number","string"]),"tolstring":emscripten.cwrap("luaL_tolstring","number",["number","number","number"]),"traceback":emscripten.cwrap("luaL_traceback",null,["number","number","string","number"]),"unref":emscripten.cwrap("luaL_unref","number",["number","number","number"])},"refs":[],"refs_i":0};Lua.Error=(function(L,error_index){this.message=L.tostring(error_index);L.traceback(L._L,this.message,1);this.lua_stack=L.raw_tostring(-1);L.pop(1)});Lua.Error.prototype=new Error;Lua.Error.prototype.name="Lua.Error";Lua.cfuncs={__gc:emscripten.Runtime.addFunction((function(L){L=new Lua.State(L);var box=L.checkudata(1,"_PROXY_MT");var id=emscripten.getValue(box,"double");delete Lua.refs[id];return 0})),__index:emscripten.Runtime.addFunction((function(L){L=new Lua.State(L);var box=L.checkudata(1,"_PROXY_MT");var id=emscripten.getValue(box,"double");var ob=Lua.refs[id];var k=L.lua_to_js(2);try{var res=ob[k]}catch(e){L.push(e);L.error();throw"Unreachable"}L.push(res);return 1})),__newindex:emscripten.Runtime.addFunction((function(L){L=new Lua.State(L);var box=L.checkudata(1,"_PROXY_MT");var id=emscripten.getValue(box,"double");var ob=Lua.refs[id];var k=L.lua_to_js(2);if(L.isnil(3)){try{delete ob[k]}catch(e){L.push(e);L.error();throw"Unreachable"}}else{var v=L.lua_to_js(3);try{ob[k]=v}catch(e){L.push(e);L.error();throw"Unreachable"}}return 0})),__call:emscripten.Runtime.addFunction((function(L){L=new Lua.State(L);var box=L.checkudata(1,"_PROXY_MT");var id=emscripten.getValue(box,"double");var ob=Lua.refs[id];var top=L.gettop();var thisarg=top>=2?L.lua_to_js(2):null;var args=[];for(var i=3;i<=top;i++){args.push(L.lua_to_js(i))}try{var res=apply.call(ob,thisarg,args)}catch(e){L.push(e);L.error();throw"Unreachable"}L.push(res);return 1})),__len:emscripten.Runtime.addFunction((function(L){L=new Lua.State(L);var box=L.checkudata(1,"_PROXY_MT");var id=emscripten.getValue(box,"double");var ob=Lua.refs[id];L.push(ob.length);return 1})),__tostring:emscripten.Runtime.addFunction((function(L){L=new Lua.State(L);var box=L.checkudata(1,"_PROXY_MT");var id=emscripten.getValue(box,"double");var ob=Lua.refs[id];L.pushstring(ob===null?"null":ob.toString());return 1})),"new":emscripten.Runtime.addFunction((function(L){L=new Lua.State(L);var box=L.checkudata(1,"_PROXY_MT");var id=emscripten.getValue(box,"double");var ob=Lua.refs[id];var top=L.gettop();var args=[];for(var i=2;i<=top;i++){args.push(L.lua_to_js(i))}try{var res=new_.apply(ob,args)}catch(e){L.push(e);L.error();throw"Unreachable"}L.push(res);return 1})),traceback:emscripten.Runtime.addFunction((function(L){L=new Lua.State(L);L.pushjs(new Lua.Error(L,1));return 1}))};Lua.State=(function(_L){if(_L){this._L=_L}else{this._L=Lua.auxlib.newstate();this.gc(Lua.defines.GC.STOP,0);this.openlibs();this.newmetatable("_PROXY_MT");this.pushcclosure(Lua.cfuncs.__gc,0);this.setfield(-2,"__gc");this.pushcclosure(Lua.cfuncs.__index,0);this.setfield(-2,"__index");this.pushcclosure(Lua.cfuncs.__newindex,0);this.setfield(-2,"__newindex");this.pushcclosure(Lua.cfuncs.__call,0);this.setfield(-2,"__call");this.pushcclosure(Lua.cfuncs.__len,0);this.setfield(-2,"__len");this.pushcclosure(Lua.cfuncs.__tostring,0);this.setfield(-2,"__tostring");this.pop(1);this.createtable(0,0);this.createtable(0,1);this.pushstring("kv");this.setfield(-2,"__mode");Lua.lib.setmetatable(this._L,-2);this.setfield(Lua.defines.REGISTRYINDEX,"wrapped");this.createtable(0,3);this.pushcclosure(Lua.cfuncs["new"],0);this.setfield(-2,"new");this.push(null);this.setfield(-2,"null");this.push(global);this.setfield(-2,"global");this.setglobal("js");this.gc(Lua.defines.GC.RESTART,0)}this._G=Lua.Proxy.create(this,Lua.defines.RIDX_GLOBALS)});((function(){function wrap(func){return(function(){var args=slice.call(arguments,0);args.splice(0,0,this._L);return func.apply(null,args)})}for(var i in Lua.lib){Lua.State.prototype[i]=wrap(Lua.lib[i])}for(var j in Lua.auxlib){Lua.State.prototype[j]=wrap(Lua.auxlib[j])}}))();Lua.State.prototype.pop=(function(n){this.settop(-n-1)});Lua.State.prototype.isnil=(function(n){return this.type(n)===0});Lua.State.prototype.isnoneornil=(function(n){return this.type(n)<=0});Lua.State.prototype.getmetatable=(function(n){this.getfield(Lua.defines.REGISTRYINDEX,n)});Lua.State.prototype.pcall=(function(n,r,f){return this.pcallk(n,r,f,0,null)});Lua.State.prototype.tonumber=(function(n){return this.tonumberx(n,null)});Lua.State.prototype.printStack=(function(){for(var j=1;j<=this.gettop();j++){var t=this.type(j);console.log(j,this.typename(t),(function(t){switch(t){case Lua.defines.T.NUMBER:return this.tonumber(j);case Lua.defines.T.STRING:return this.raw_tostring(j);case Lua.defines.T.USERDATA:return this.touserdata(j);default:return}}).call(this,t))}});Lua.State.prototype.pushstring=(function(str){var chars=emscripten.intArrayFromString(str,true);this.pushlstring(chars,chars.length)});Lua.State.prototype.raw_tostring=(function(i){var l=emscripten.allocate(4,"i32",emscripten.ALLOC_STACK);var p=Lua.lib.tolstring(this._L,i||-1,l);if(p===0)return null;return emscripten.Pointer_stringify(p,emscripten.getValue(l,"i32"))});Lua.State.prototype.tostring=(function(i){var l=emscripten.allocate(4,"i32",emscripten.ALLOC_STACK);var p=this.tolstring(i||-1,l);return emscripten.Pointer_stringify(p,emscripten.getValue(l,"i32"))});Lua.State.prototype.lua_to_js=(function(i){switch(this.type(i)){case-1:case 0:return void 0;case 1:return this.toboolean(i)!==0;case 2:return this.touserdata(i);case 3:return this.tonumberx(i);case 4:return this.raw_tostring(i);case 7:var box=this.testudata(i,"_PROXY_MT");if(box!==0){var id=emscripten.getValue(box,"double");return Lua.refs[id]};default:return new Lua.Proxy(this,i)}});Lua.State.prototype.pushjs=(function(ob){var i=Lua.refs.indexOf(ob);if(i!==-1){this.getfield(Lua.defines.REGISTRYINDEX,"wrapped");this.pushnumber(i);this.gettable(-2);if(!this.isnil(-1)){this.remove(this.gettop()-2+1);return}else{this.pop(2)}}i=Lua.refs_i++;Lua.refs[i]=ob;var box=this.newuserdata(8);emscripten.setValue(box,i,"double");this.setmetatable("_PROXY_MT");this.getfield(Lua.defines.REGISTRYINDEX,"wrapped");this.pushnumber(i);this.pushvalue(-3);this.settable(-3);this.pop(1)});var getmain=(function(L){L.rawgeti(Lua.defines.REGISTRYINDEX,Lua.defines.RIDX_MAINTHREAD);var _L=L.tothread(-1);L.pop(1);return _L});Lua.State.prototype.push=(function(ob){switch(typeof ob){case"boolean":return this.pushboolean(ob?1:0);case"number":return this.pushnumber(ob);case"string":return this.pushstring(ob);case"undefined":return this.pushnil();default:if(typeof ob==="function"&&ob.L instanceof Lua.State&&ob.L._L===getmain(this)){return ob.push()}if(typeof ob==="object"&&(ob instanceof Boolean||ob instanceof Number||ob instanceof String)){return this.push(ob.valueOf())}return this.pushjs(ob)}});Lua.State.prototype.load=(function(code,name,mode){var chars=emscripten.intArrayFromString(code,true);if(this.loadbufferx(chars,chars.length,name,mode)!==0){throw new Lua.Error(this,-1)}var r=new Lua.Proxy(this,-1);this.pop(1);return r});Lua.State.prototype.execute=(function(code){var proxy=this.load(code);var args=slice.call(arguments,1);try{return proxy.invoke(args)}finally{proxy.free()}});Lua.Proxy=(function(L,i){L.pushvalue(i);var ref=L.ref(Lua.defines.REGISTRYINDEX);var _L=getmain(L);if(L._L!=_L){L=new Lua.State(_L)}return Lua.Proxy.create(L,ref)});Lua.Proxy.create=(function(L,ref){function self(){"use strict";var args=slice.call(arguments,0);args.splice(0,0,this);return self.invoke(args,1)[0]}self.L=L;self.ref=ref;self.invoke=Lua.Proxy.invoke;self.push=Lua.Proxy.push;self.free=Lua.Proxy.free;self.toString=Lua.Proxy.toString;self.get=Lua.Proxy.get;self.set=Lua.Proxy.set;return self});Lua.Proxy.push=(function(){this.L.rawgeti(Lua.defines.REGISTRYINDEX,this.ref)});Lua.Proxy.free=(function(){this.L.unref(Lua.defines.REGISTRYINDEX,this.ref);this.ref=Lua.defines.NOREF});Lua.Proxy.invoke=(function(args,n_results){if(this.L.checkstack(1+1+args.length)===0)throw"Out of stack space";if(n_results===void 0||n_results===null){n_results=Lua.defines.MULTRET}var pre=this.L.gettop();this.L.pushcclosure(Lua.cfuncs.traceback,0);this.push();for(var i=0;i<args.length;i++){this.L.push(args[i])}if(this.L.pcall(args.length,n_results,pre+1)!==0){var err=this.L.lua_to_js(-1);this.L.settop(pre);throw err}var top=this.L.gettop();var results=[];for(var j=pre+2;j<=top;j++){results.push(this.L.lua_to_js(j))}this.L.settop(pre);return results});Lua.Proxy.toString=(function(){this.push();var s=this.L.tostring(-1);this.L.pop(2);return s});Lua.Proxy.get=(function(key){this.push();this.L.push(key);this.L.gettable(-2);var res=this.L.lua_to_js(-1);this.L.pop(2);return res});Lua.Proxy.set=(function(key,value){this.push();this.L.push(key);this.L.push(value);this.L.settable(-3);this.L.pop(1);return});Lua.init=(function(){var L=exports.L=new Lua.State;L.execute("dofile'js.lua'");if(ENVIRONMENT_IS_WEB){var onload=window.onload;window.onload=(function(){if(onload)onload();Lua.executeScripts(L)})}});Lua.executeScripts=(function(L){Array.prototype.forEach.call(document.querySelectorAll('script[type="text/lua"]'),(function(tag){L.execute(tag.innerHTML)}))});if(!emscripten.noInitialRun)Lua.init();return Lua})(exports,ENVIRONMENT_IS_NODE?global:this,Module)




;exports['emscripten'] = Module;})(typeof module !== 'undefined'?module.exports:this);

}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/lua.vm.js/dist")
},{"_process":153,"buffer":65,"crypto":73,"fs":63,"path":146}],136:[function(require,module,exports){
'use strict'
var inherits = require('inherits')
var HashBase = require('hash-base')
var Buffer = require('safe-buffer').Buffer

var ARRAY16 = new Array(16)

function MD5 () {
  HashBase.call(this, 64)

  // state
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
}

inherits(MD5, HashBase)

MD5.prototype._update = function () {
  var M = ARRAY16
  for (var i = 0; i < 16; ++i) M[i] = this._block.readInt32LE(i * 4)

  var a = this._a
  var b = this._b
  var c = this._c
  var d = this._d

  a = fnF(a, b, c, d, M[0], 0xd76aa478, 7)
  d = fnF(d, a, b, c, M[1], 0xe8c7b756, 12)
  c = fnF(c, d, a, b, M[2], 0x242070db, 17)
  b = fnF(b, c, d, a, M[3], 0xc1bdceee, 22)
  a = fnF(a, b, c, d, M[4], 0xf57c0faf, 7)
  d = fnF(d, a, b, c, M[5], 0x4787c62a, 12)
  c = fnF(c, d, a, b, M[6], 0xa8304613, 17)
  b = fnF(b, c, d, a, M[7], 0xfd469501, 22)
  a = fnF(a, b, c, d, M[8], 0x698098d8, 7)
  d = fnF(d, a, b, c, M[9], 0x8b44f7af, 12)
  c = fnF(c, d, a, b, M[10], 0xffff5bb1, 17)
  b = fnF(b, c, d, a, M[11], 0x895cd7be, 22)
  a = fnF(a, b, c, d, M[12], 0x6b901122, 7)
  d = fnF(d, a, b, c, M[13], 0xfd987193, 12)
  c = fnF(c, d, a, b, M[14], 0xa679438e, 17)
  b = fnF(b, c, d, a, M[15], 0x49b40821, 22)

  a = fnG(a, b, c, d, M[1], 0xf61e2562, 5)
  d = fnG(d, a, b, c, M[6], 0xc040b340, 9)
  c = fnG(c, d, a, b, M[11], 0x265e5a51, 14)
  b = fnG(b, c, d, a, M[0], 0xe9b6c7aa, 20)
  a = fnG(a, b, c, d, M[5], 0xd62f105d, 5)
  d = fnG(d, a, b, c, M[10], 0x02441453, 9)
  c = fnG(c, d, a, b, M[15], 0xd8a1e681, 14)
  b = fnG(b, c, d, a, M[4], 0xe7d3fbc8, 20)
  a = fnG(a, b, c, d, M[9], 0x21e1cde6, 5)
  d = fnG(d, a, b, c, M[14], 0xc33707d6, 9)
  c = fnG(c, d, a, b, M[3], 0xf4d50d87, 14)
  b = fnG(b, c, d, a, M[8], 0x455a14ed, 20)
  a = fnG(a, b, c, d, M[13], 0xa9e3e905, 5)
  d = fnG(d, a, b, c, M[2], 0xfcefa3f8, 9)
  c = fnG(c, d, a, b, M[7], 0x676f02d9, 14)
  b = fnG(b, c, d, a, M[12], 0x8d2a4c8a, 20)

  a = fnH(a, b, c, d, M[5], 0xfffa3942, 4)
  d = fnH(d, a, b, c, M[8], 0x8771f681, 11)
  c = fnH(c, d, a, b, M[11], 0x6d9d6122, 16)
  b = fnH(b, c, d, a, M[14], 0xfde5380c, 23)
  a = fnH(a, b, c, d, M[1], 0xa4beea44, 4)
  d = fnH(d, a, b, c, M[4], 0x4bdecfa9, 11)
  c = fnH(c, d, a, b, M[7], 0xf6bb4b60, 16)
  b = fnH(b, c, d, a, M[10], 0xbebfbc70, 23)
  a = fnH(a, b, c, d, M[13], 0x289b7ec6, 4)
  d = fnH(d, a, b, c, M[0], 0xeaa127fa, 11)
  c = fnH(c, d, a, b, M[3], 0xd4ef3085, 16)
  b = fnH(b, c, d, a, M[6], 0x04881d05, 23)
  a = fnH(a, b, c, d, M[9], 0xd9d4d039, 4)
  d = fnH(d, a, b, c, M[12], 0xe6db99e5, 11)
  c = fnH(c, d, a, b, M[15], 0x1fa27cf8, 16)
  b = fnH(b, c, d, a, M[2], 0xc4ac5665, 23)

  a = fnI(a, b, c, d, M[0], 0xf4292244, 6)
  d = fnI(d, a, b, c, M[7], 0x432aff97, 10)
  c = fnI(c, d, a, b, M[14], 0xab9423a7, 15)
  b = fnI(b, c, d, a, M[5], 0xfc93a039, 21)
  a = fnI(a, b, c, d, M[12], 0x655b59c3, 6)
  d = fnI(d, a, b, c, M[3], 0x8f0ccc92, 10)
  c = fnI(c, d, a, b, M[10], 0xffeff47d, 15)
  b = fnI(b, c, d, a, M[1], 0x85845dd1, 21)
  a = fnI(a, b, c, d, M[8], 0x6fa87e4f, 6)
  d = fnI(d, a, b, c, M[15], 0xfe2ce6e0, 10)
  c = fnI(c, d, a, b, M[6], 0xa3014314, 15)
  b = fnI(b, c, d, a, M[13], 0x4e0811a1, 21)
  a = fnI(a, b, c, d, M[4], 0xf7537e82, 6)
  d = fnI(d, a, b, c, M[11], 0xbd3af235, 10)
  c = fnI(c, d, a, b, M[2], 0x2ad7d2bb, 15)
  b = fnI(b, c, d, a, M[9], 0xeb86d391, 21)

  this._a = (this._a + a) | 0
  this._b = (this._b + b) | 0
  this._c = (this._c + c) | 0
  this._d = (this._d + d) | 0
}

MD5.prototype._digest = function () {
  // create padding and handle blocks
  this._block[this._blockOffset++] = 0x80
  if (this._blockOffset > 56) {
    this._block.fill(0, this._blockOffset, 64)
    this._update()
    this._blockOffset = 0
  }

  this._block.fill(0, this._blockOffset, 56)
  this._block.writeUInt32LE(this._length[0], 56)
  this._block.writeUInt32LE(this._length[1], 60)
  this._update()

  // produce result
  var buffer = Buffer.allocUnsafe(16)
  buffer.writeInt32LE(this._a, 0)
  buffer.writeInt32LE(this._b, 4)
  buffer.writeInt32LE(this._c, 8)
  buffer.writeInt32LE(this._d, 12)
  return buffer
}

function rotl (x, n) {
  return (x << n) | (x >>> (32 - n))
}

function fnF (a, b, c, d, m, k, s) {
  return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + b) | 0
}

function fnG (a, b, c, d, m, k, s) {
  return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + b) | 0
}

function fnH (a, b, c, d, m, k, s) {
  return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + b) | 0
}

function fnI (a, b, c, d, m, k, s) {
  return (rotl((a + ((c ^ (b | (~d)))) + m + k) | 0, s) + b) | 0
}

module.exports = MD5

},{"hash-base":104,"inherits":134,"safe-buffer":164}],137:[function(require,module,exports){
var bn = require('bn.js');
var brorand = require('brorand');

function MillerRabin(rand) {
  this.rand = rand || new brorand.Rand();
}
module.exports = MillerRabin;

MillerRabin.create = function create(rand) {
  return new MillerRabin(rand);
};

MillerRabin.prototype._randbelow = function _randbelow(n) {
  var len = n.bitLength();
  var min_bytes = Math.ceil(len / 8);

  // Generage random bytes until a number less than n is found.
  // This ensures that 0..n-1 have an equal probability of being selected.
  do
    var a = new bn(this.rand.generate(min_bytes));
  while (a.cmp(n) >= 0);

  return a;
};

MillerRabin.prototype._randrange = function _randrange(start, stop) {
  // Generate a random number greater than or equal to start and less than stop.
  var size = stop.sub(start);
  return start.add(this._randbelow(size));
};

MillerRabin.prototype.test = function test(n, k, cb) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k)
    k = Math.max(1, (len / 48) | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  var prime = true;
  for (; k > 0; k--) {
    var a = this._randrange(new bn(2), n1);
    if (cb)
      cb(a);

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
      continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0)
        return false;
      if (x.cmp(rn1) === 0)
        break;
    }

    if (i === s)
      return false;
  }

  return prime;
};

MillerRabin.prototype.getDivisor = function getDivisor(n, k) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k)
    k = Math.max(1, (len / 48) | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  for (; k > 0; k--) {
    var a = this._randrange(new bn(2), n1);

    var g = n.gcd(a);
    if (g.cmpn(1) !== 0)
      return g;

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
      continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0)
        return x.fromRed().subn(1).gcd(n);
      if (x.cmp(rn1) === 0)
        break;
    }

    if (i === s) {
      x = x.redSqr();
      return x.fromRed().subn(1).gcd(n);
    }
  }

  return false;
};

},{"bn.js":138,"brorand":19}],138:[function(require,module,exports){
arguments[4][16][0].apply(exports,arguments)
},{"buffer":20,"dup":16}],139:[function(require,module,exports){
module.exports = assert;

function assert(val, msg) {
  if (!val)
    throw new Error(msg || 'Assertion failed');
}

assert.equal = function assertEqual(l, r, msg) {
  if (l != r)
    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
};

},{}],140:[function(require,module,exports){
'use strict';

var utils = exports;

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg !== 'string') {
    for (var i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
    return res;
  }
  if (enc === 'hex') {
    msg = msg.replace(/[^a-z0-9]+/ig, '');
    if (msg.length % 2 !== 0)
      msg = '0' + msg;
    for (var i = 0; i < msg.length; i += 2)
      res.push(parseInt(msg[i] + msg[i + 1], 16));
  } else {
    for (var i = 0; i < msg.length; i++) {
      var c = msg.charCodeAt(i);
      var hi = c >> 8;
      var lo = c & 0xff;
      if (hi)
        res.push(hi, lo);
      else
        res.push(lo);
    }
  }
  return res;
}
utils.toArray = toArray;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
utils.zero2 = zero2;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
utils.toHex = toHex;

utils.encode = function encode(arr, enc) {
  if (enc === 'hex')
    return toHex(arr);
  else
    return arr;
};

},{}],141:[function(require,module,exports){
module.exports={"2.16.840.1.101.3.4.1.1": "aes-128-ecb",
"2.16.840.1.101.3.4.1.2": "aes-128-cbc",
"2.16.840.1.101.3.4.1.3": "aes-128-ofb",
"2.16.840.1.101.3.4.1.4": "aes-128-cfb",
"2.16.840.1.101.3.4.1.21": "aes-192-ecb",
"2.16.840.1.101.3.4.1.22": "aes-192-cbc",
"2.16.840.1.101.3.4.1.23": "aes-192-ofb",
"2.16.840.1.101.3.4.1.24": "aes-192-cfb",
"2.16.840.1.101.3.4.1.41": "aes-256-ecb",
"2.16.840.1.101.3.4.1.42": "aes-256-cbc",
"2.16.840.1.101.3.4.1.43": "aes-256-ofb",
"2.16.840.1.101.3.4.1.44": "aes-256-cfb"
}
},{}],142:[function(require,module,exports){
// from https://github.com/indutny/self-signed/blob/gh-pages/lib/asn1.js
// Fedor, you are amazing.
'use strict'

var asn1 = require('asn1.js')

exports.certificate = require('./certificate')

var RSAPrivateKey = asn1.define('RSAPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('modulus').int(),
    this.key('publicExponent').int(),
    this.key('privateExponent').int(),
    this.key('prime1').int(),
    this.key('prime2').int(),
    this.key('exponent1').int(),
    this.key('exponent2').int(),
    this.key('coefficient').int()
  )
})
exports.RSAPrivateKey = RSAPrivateKey

var RSAPublicKey = asn1.define('RSAPublicKey', function () {
  this.seq().obj(
    this.key('modulus').int(),
    this.key('publicExponent').int()
  )
})
exports.RSAPublicKey = RSAPublicKey

var PublicKey = asn1.define('SubjectPublicKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPublicKey').bitstr()
  )
})
exports.PublicKey = PublicKey

var AlgorithmIdentifier = asn1.define('AlgorithmIdentifier', function () {
  this.seq().obj(
    this.key('algorithm').objid(),
    this.key('none').null_().optional(),
    this.key('curve').objid().optional(),
    this.key('params').seq().obj(
      this.key('p').int(),
      this.key('q').int(),
      this.key('g').int()
    ).optional()
  )
})

var PrivateKeyInfo = asn1.define('PrivateKeyInfo', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPrivateKey').octstr()
  )
})
exports.PrivateKey = PrivateKeyInfo
var EncryptedPrivateKeyInfo = asn1.define('EncryptedPrivateKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').seq().obj(
      this.key('id').objid(),
      this.key('decrypt').seq().obj(
        this.key('kde').seq().obj(
          this.key('id').objid(),
          this.key('kdeparams').seq().obj(
            this.key('salt').octstr(),
            this.key('iters').int()
          )
        ),
        this.key('cipher').seq().obj(
          this.key('algo').objid(),
          this.key('iv').octstr()
        )
      )
    ),
    this.key('subjectPrivateKey').octstr()
  )
})

exports.EncryptedPrivateKey = EncryptedPrivateKeyInfo

var DSAPrivateKey = asn1.define('DSAPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('p').int(),
    this.key('q').int(),
    this.key('g').int(),
    this.key('pub_key').int(),
    this.key('priv_key').int()
  )
})
exports.DSAPrivateKey = DSAPrivateKey

exports.DSAparam = asn1.define('DSAparam', function () {
  this.int()
})

var ECPrivateKey = asn1.define('ECPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('privateKey').octstr(),
    this.key('parameters').optional().explicit(0).use(ECParameters),
    this.key('publicKey').optional().explicit(1).bitstr()
  )
})
exports.ECPrivateKey = ECPrivateKey

var ECParameters = asn1.define('ECParameters', function () {
  this.choice({
    namedCurve: this.objid()
  })
})

exports.signature = asn1.define('signature', function () {
  this.seq().obj(
    this.key('r').int(),
    this.key('s').int()
  )
})

},{"./certificate":143,"asn1.js":2}],143:[function(require,module,exports){
// from https://github.com/Rantanen/node-dtls/blob/25a7dc861bda38cfeac93a723500eea4f0ac2e86/Certificate.js
// thanks to @Rantanen

'use strict'

var asn = require('asn1.js')

var Time = asn.define('Time', function () {
  this.choice({
    utcTime: this.utctime(),
    generalTime: this.gentime()
  })
})

var AttributeTypeValue = asn.define('AttributeTypeValue', function () {
  this.seq().obj(
    this.key('type').objid(),
    this.key('value').any()
  )
})

var AlgorithmIdentifier = asn.define('AlgorithmIdentifier', function () {
  this.seq().obj(
    this.key('algorithm').objid(),
    this.key('parameters').optional(),
    this.key('curve').objid().optional()
  )
})

var SubjectPublicKeyInfo = asn.define('SubjectPublicKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPublicKey').bitstr()
  )
})

var RelativeDistinguishedName = asn.define('RelativeDistinguishedName', function () {
  this.setof(AttributeTypeValue)
})

var RDNSequence = asn.define('RDNSequence', function () {
  this.seqof(RelativeDistinguishedName)
})

var Name = asn.define('Name', function () {
  this.choice({
    rdnSequence: this.use(RDNSequence)
  })
})

var Validity = asn.define('Validity', function () {
  this.seq().obj(
    this.key('notBefore').use(Time),
    this.key('notAfter').use(Time)
  )
})

var Extension = asn.define('Extension', function () {
  this.seq().obj(
    this.key('extnID').objid(),
    this.key('critical').bool().def(false),
    this.key('extnValue').octstr()
  )
})

var TBSCertificate = asn.define('TBSCertificate', function () {
  this.seq().obj(
    this.key('version').explicit(0).int().optional(),
    this.key('serialNumber').int(),
    this.key('signature').use(AlgorithmIdentifier),
    this.key('issuer').use(Name),
    this.key('validity').use(Validity),
    this.key('subject').use(Name),
    this.key('subjectPublicKeyInfo').use(SubjectPublicKeyInfo),
    this.key('issuerUniqueID').implicit(1).bitstr().optional(),
    this.key('subjectUniqueID').implicit(2).bitstr().optional(),
    this.key('extensions').explicit(3).seqof(Extension).optional()
  )
})

var X509Certificate = asn.define('X509Certificate', function () {
  this.seq().obj(
    this.key('tbsCertificate').use(TBSCertificate),
    this.key('signatureAlgorithm').use(AlgorithmIdentifier),
    this.key('signatureValue').bitstr()
  )
})

module.exports = X509Certificate

},{"asn1.js":2}],144:[function(require,module,exports){
// adapted from https://github.com/apatil/pemstrip
var findProc = /Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r+/=]+)[\n\r]+/m
var startRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m
var fullRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\n\r+/=]+)-----END \1-----$/m
var evp = require('evp_bytestokey')
var ciphers = require('browserify-aes')
var Buffer = require('safe-buffer').Buffer
module.exports = function (okey, password) {
  var key = okey.toString()
  var match = key.match(findProc)
  var decrypted
  if (!match) {
    var match2 = key.match(fullRegex)
    decrypted = Buffer.from(match2[2].replace(/[\r\n]/g, ''), 'base64')
  } else {
    var suite = 'aes' + match[1]
    var iv = Buffer.from(match[2], 'hex')
    var cipherText = Buffer.from(match[3].replace(/[\r\n]/g, ''), 'base64')
    var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key
    var out = []
    var cipher = ciphers.createDecipheriv(suite, cipherKey, iv)
    out.push(cipher.update(cipherText))
    out.push(cipher.final())
    decrypted = Buffer.concat(out)
  }
  var tag = key.match(startRegex)[1]
  return {
    tag: tag,
    data: decrypted
  }
}

},{"browserify-aes":23,"evp_bytestokey":103,"safe-buffer":164}],145:[function(require,module,exports){
var asn1 = require('./asn1')
var aesid = require('./aesid.json')
var fixProc = require('./fixProc')
var ciphers = require('browserify-aes')
var compat = require('pbkdf2')
var Buffer = require('safe-buffer').Buffer
module.exports = parseKeys

function parseKeys (buffer) {
  var password
  if (typeof buffer === 'object' && !Buffer.isBuffer(buffer)) {
    password = buffer.passphrase
    buffer = buffer.key
  }
  if (typeof buffer === 'string') {
    buffer = Buffer.from(buffer)
  }

  var stripped = fixProc(buffer, password)

  var type = stripped.tag
  var data = stripped.data
  var subtype, ndata
  switch (type) {
    case 'CERTIFICATE':
      ndata = asn1.certificate.decode(data, 'der').tbsCertificate.subjectPublicKeyInfo
      // falls through
    case 'PUBLIC KEY':
      if (!ndata) {
        ndata = asn1.PublicKey.decode(data, 'der')
      }
      subtype = ndata.algorithm.algorithm.join('.')
      switch (subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der')
        case '1.2.840.10045.2.1':
          ndata.subjectPrivateKey = ndata.subjectPublicKey
          return {
            type: 'ec',
            data: ndata
          }
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, 'der')
          return {
            type: 'dsa',
            data: ndata.algorithm.params
          }
        default: throw new Error('unknown key id ' + subtype)
      }
      // throw new Error('unknown key type ' + type)
    case 'ENCRYPTED PRIVATE KEY':
      data = asn1.EncryptedPrivateKey.decode(data, 'der')
      data = decrypt(data, password)
      // falls through
    case 'PRIVATE KEY':
      ndata = asn1.PrivateKey.decode(data, 'der')
      subtype = ndata.algorithm.algorithm.join('.')
      switch (subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der')
        case '1.2.840.10045.2.1':
          return {
            curve: ndata.algorithm.curve,
            privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey
          }
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, 'der')
          return {
            type: 'dsa',
            params: ndata.algorithm.params
          }
        default: throw new Error('unknown key id ' + subtype)
      }
      // throw new Error('unknown key type ' + type)
    case 'RSA PUBLIC KEY':
      return asn1.RSAPublicKey.decode(data, 'der')
    case 'RSA PRIVATE KEY':
      return asn1.RSAPrivateKey.decode(data, 'der')
    case 'DSA PRIVATE KEY':
      return {
        type: 'dsa',
        params: asn1.DSAPrivateKey.decode(data, 'der')
      }
    case 'EC PRIVATE KEY':
      data = asn1.ECPrivateKey.decode(data, 'der')
      return {
        curve: data.parameters.value,
        privateKey: data.privateKey
      }
    default: throw new Error('unknown key type ' + type)
  }
}
parseKeys.signature = asn1.signature
function decrypt (data, password) {
  var salt = data.algorithm.decrypt.kde.kdeparams.salt
  var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10)
  var algo = aesid[data.algorithm.decrypt.cipher.algo.join('.')]
  var iv = data.algorithm.decrypt.cipher.iv
  var cipherText = data.subjectPrivateKey
  var keylen = parseInt(algo.split('-')[1], 10) / 8
  var key = compat.pbkdf2Sync(password, salt, iters, keylen, 'sha1')
  var cipher = ciphers.createDecipheriv(algo, key, iv)
  var out = []
  out.push(cipher.update(cipherText))
  out.push(cipher.final())
  return Buffer.concat(out)
}

},{"./aesid.json":141,"./asn1":142,"./fixProc":144,"browserify-aes":23,"pbkdf2":147,"safe-buffer":164}],146:[function(require,module,exports){
(function (process){(function (){
// 'path' module extracted from Node.js v8.11.1 (only the posix part)
// transplited with Babel

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

function assertPath(path) {
  if (typeof path !== 'string') {
    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));
  }
}

// Resolves . and .. elements in a path with directory names
function normalizeStringPosix(path, allowAboveRoot) {
  var res = '';
  var lastSegmentLength = 0;
  var lastSlash = -1;
  var dots = 0;
  var code;
  for (var i = 0; i <= path.length; ++i) {
    if (i < path.length)
      code = path.charCodeAt(i);
    else if (code === 47 /*/*/)
      break;
    else
      code = 47 /*/*/;
    if (code === 47 /*/*/) {
      if (lastSlash === i - 1 || dots === 1) {
        // NOOP
      } else if (lastSlash !== i - 1 && dots === 2) {
        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 /*.*/ || res.charCodeAt(res.length - 2) !== 46 /*.*/) {
          if (res.length > 2) {
            var lastSlashIndex = res.lastIndexOf('/');
            if (lastSlashIndex !== res.length - 1) {
              if (lastSlashIndex === -1) {
                res = '';
                lastSegmentLength = 0;
              } else {
                res = res.slice(0, lastSlashIndex);
                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');
              }
              lastSlash = i;
              dots = 0;
              continue;
            }
          } else if (res.length === 2 || res.length === 1) {
            res = '';
            lastSegmentLength = 0;
            lastSlash = i;
            dots = 0;
            continue;
          }
        }
        if (allowAboveRoot) {
          if (res.length > 0)
            res += '/..';
          else
            res = '..';
          lastSegmentLength = 2;
        }
      } else {
        if (res.length > 0)
          res += '/' + path.slice(lastSlash + 1, i);
        else
          res = path.slice(lastSlash + 1, i);
        lastSegmentLength = i - lastSlash - 1;
      }
      lastSlash = i;
      dots = 0;
    } else if (code === 46 /*.*/ && dots !== -1) {
      ++dots;
    } else {
      dots = -1;
    }
  }
  return res;
}

function _format(sep, pathObject) {
  var dir = pathObject.dir || pathObject.root;
  var base = pathObject.base || (pathObject.name || '') + (pathObject.ext || '');
  if (!dir) {
    return base;
  }
  if (dir === pathObject.root) {
    return dir + base;
  }
  return dir + sep + base;
}

var posix = {
  // path.resolve([from ...], to)
  resolve: function resolve() {
    var resolvedPath = '';
    var resolvedAbsolute = false;
    var cwd;

    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
      var path;
      if (i >= 0)
        path = arguments[i];
      else {
        if (cwd === undefined)
          cwd = process.cwd();
        path = cwd;
      }

      assertPath(path);

      // Skip empty entries
      if (path.length === 0) {
        continue;
      }

      resolvedPath = path + '/' + resolvedPath;
      resolvedAbsolute = path.charCodeAt(0) === 47 /*/*/;
    }

    // At this point the path should be resolved to a full absolute path, but
    // handle relative paths to be safe (might happen when process.cwd() fails)

    // Normalize the path
    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);

    if (resolvedAbsolute) {
      if (resolvedPath.length > 0)
        return '/' + resolvedPath;
      else
        return '/';
    } else if (resolvedPath.length > 0) {
      return resolvedPath;
    } else {
      return '.';
    }
  },

  normalize: function normalize(path) {
    assertPath(path);

    if (path.length === 0) return '.';

    var isAbsolute = path.charCodeAt(0) === 47 /*/*/;
    var trailingSeparator = path.charCodeAt(path.length - 1) === 47 /*/*/;

    // Normalize the path
    path = normalizeStringPosix(path, !isAbsolute);

    if (path.length === 0 && !isAbsolute) path = '.';
    if (path.length > 0 && trailingSeparator) path += '/';

    if (isAbsolute) return '/' + path;
    return path;
  },

  isAbsolute: function isAbsolute(path) {
    assertPath(path);
    return path.length > 0 && path.charCodeAt(0) === 47 /*/*/;
  },

  join: function join() {
    if (arguments.length === 0)
      return '.';
    var joined;
    for (var i = 0; i < arguments.length; ++i) {
      var arg = arguments[i];
      assertPath(arg);
      if (arg.length > 0) {
        if (joined === undefined)
          joined = arg;
        else
          joined += '/' + arg;
      }
    }
    if (joined === undefined)
      return '.';
    return posix.normalize(joined);
  },

  relative: function relative(from, to) {
    assertPath(from);
    assertPath(to);

    if (from === to) return '';

    from = posix.resolve(from);
    to = posix.resolve(to);

    if (from === to) return '';

    // Trim any leading backslashes
    var fromStart = 1;
    for (; fromStart < from.length; ++fromStart) {
      if (from.charCodeAt(fromStart) !== 47 /*/*/)
        break;
    }
    var fromEnd = from.length;
    var fromLen = fromEnd - fromStart;

    // Trim any leading backslashes
    var toStart = 1;
    for (; toStart < to.length; ++toStart) {
      if (to.charCodeAt(toStart) !== 47 /*/*/)
        break;
    }
    var toEnd = to.length;
    var toLen = toEnd - toStart;

    // Compare paths to find the longest common path from root
    var length = fromLen < toLen ? fromLen : toLen;
    var lastCommonSep = -1;
    var i = 0;
    for (; i <= length; ++i) {
      if (i === length) {
        if (toLen > length) {
          if (to.charCodeAt(toStart + i) === 47 /*/*/) {
            // We get here if `from` is the exact base path for `to`.
            // For example: from='/foo/bar'; to='/foo/bar/baz'
            return to.slice(toStart + i + 1);
          } else if (i === 0) {
            // We get here if `from` is the root
            // For example: from='/'; to='/foo'
            return to.slice(toStart + i);
          }
        } else if (fromLen > length) {
          if (from.charCodeAt(fromStart + i) === 47 /*/*/) {
            // We get here if `to` is the exact base path for `from`.
            // For example: from='/foo/bar/baz'; to='/foo/bar'
            lastCommonSep = i;
          } else if (i === 0) {
            // We get here if `to` is the root.
            // For example: from='/foo'; to='/'
            lastCommonSep = 0;
          }
        }
        break;
      }
      var fromCode = from.charCodeAt(fromStart + i);
      var toCode = to.charCodeAt(toStart + i);
      if (fromCode !== toCode)
        break;
      else if (fromCode === 47 /*/*/)
        lastCommonSep = i;
    }

    var out = '';
    // Generate the relative path based on the path difference between `to`
    // and `from`
    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {
      if (i === fromEnd || from.charCodeAt(i) === 47 /*/*/) {
        if (out.length === 0)
          out += '..';
        else
          out += '/..';
      }
    }

    // Lastly, append the rest of the destination (`to`) path that comes after
    // the common path parts
    if (out.length > 0)
      return out + to.slice(toStart + lastCommonSep);
    else {
      toStart += lastCommonSep;
      if (to.charCodeAt(toStart) === 47 /*/*/)
        ++toStart;
      return to.slice(toStart);
    }
  },

  _makeLong: function _makeLong(path) {
    return path;
  },

  dirname: function dirname(path) {
    assertPath(path);
    if (path.length === 0) return '.';
    var code = path.charCodeAt(0);
    var hasRoot = code === 47 /*/*/;
    var end = -1;
    var matchedSlash = true;
    for (var i = path.length - 1; i >= 1; --i) {
      code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          if (!matchedSlash) {
            end = i;
            break;
          }
        } else {
        // We saw the first non-path separator
        matchedSlash = false;
      }
    }

    if (end === -1) return hasRoot ? '/' : '.';
    if (hasRoot && end === 1) return '//';
    return path.slice(0, end);
  },

  basename: function basename(path, ext) {
    if (ext !== undefined && typeof ext !== 'string') throw new TypeError('"ext" argument must be a string');
    assertPath(path);

    var start = 0;
    var end = -1;
    var matchedSlash = true;
    var i;

    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {
      if (ext.length === path.length && ext === path) return '';
      var extIdx = ext.length - 1;
      var firstNonSlashEnd = -1;
      for (i = path.length - 1; i >= 0; --i) {
        var code = path.charCodeAt(i);
        if (code === 47 /*/*/) {
            // If we reached a path separator that was not part of a set of path
            // separators at the end of the string, stop now
            if (!matchedSlash) {
              start = i + 1;
              break;
            }
          } else {
          if (firstNonSlashEnd === -1) {
            // We saw the first non-path separator, remember this index in case
            // we need it if the extension ends up not matching
            matchedSlash = false;
            firstNonSlashEnd = i + 1;
          }
          if (extIdx >= 0) {
            // Try to match the explicit extension
            if (code === ext.charCodeAt(extIdx)) {
              if (--extIdx === -1) {
                // We matched the extension, so mark this as the end of our path
                // component
                end = i;
              }
            } else {
              // Extension does not match, so our result is the entire path
              // component
              extIdx = -1;
              end = firstNonSlashEnd;
            }
          }
        }
      }

      if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path.length;
      return path.slice(start, end);
    } else {
      for (i = path.length - 1; i >= 0; --i) {
        if (path.charCodeAt(i) === 47 /*/*/) {
            // If we reached a path separator that was not part of a set of path
            // separators at the end of the string, stop now
            if (!matchedSlash) {
              start = i + 1;
              break;
            }
          } else if (end === -1) {
          // We saw the first non-path separator, mark this as the end of our
          // path component
          matchedSlash = false;
          end = i + 1;
        }
      }

      if (end === -1) return '';
      return path.slice(start, end);
    }
  },

  extname: function extname(path) {
    assertPath(path);
    var startDot = -1;
    var startPart = 0;
    var end = -1;
    var matchedSlash = true;
    // Track the state of characters (if any) we see before our first dot and
    // after any path separator we find
    var preDotState = 0;
    for (var i = path.length - 1; i >= 0; --i) {
      var code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          // If we reached a path separator that was not part of a set of path
          // separators at the end of the string, stop now
          if (!matchedSlash) {
            startPart = i + 1;
            break;
          }
          continue;
        }
      if (end === -1) {
        // We saw the first non-path separator, mark this as the end of our
        // extension
        matchedSlash = false;
        end = i + 1;
      }
      if (code === 46 /*.*/) {
          // If this is our first dot, mark it as the start of our extension
          if (startDot === -1)
            startDot = i;
          else if (preDotState !== 1)
            preDotState = 1;
      } else if (startDot !== -1) {
        // We saw a non-dot and non-path separator before our dot, so we should
        // have a good chance at having a non-empty extension
        preDotState = -1;
      }
    }

    if (startDot === -1 || end === -1 ||
        // We saw a non-dot character immediately before the dot
        preDotState === 0 ||
        // The (right-most) trimmed path component is exactly '..'
        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
      return '';
    }
    return path.slice(startDot, end);
  },

  format: function format(pathObject) {
    if (pathObject === null || typeof pathObject !== 'object') {
      throw new TypeError('The "pathObject" argument must be of type Object. Received type ' + typeof pathObject);
    }
    return _format('/', pathObject);
  },

  parse: function parse(path) {
    assertPath(path);

    var ret = { root: '', dir: '', base: '', ext: '', name: '' };
    if (path.length === 0) return ret;
    var code = path.charCodeAt(0);
    var isAbsolute = code === 47 /*/*/;
    var start;
    if (isAbsolute) {
      ret.root = '/';
      start = 1;
    } else {
      start = 0;
    }
    var startDot = -1;
    var startPart = 0;
    var end = -1;
    var matchedSlash = true;
    var i = path.length - 1;

    // Track the state of characters (if any) we see before our first dot and
    // after any path separator we find
    var preDotState = 0;

    // Get non-dir info
    for (; i >= start; --i) {
      code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          // If we reached a path separator that was not part of a set of path
          // separators at the end of the string, stop now
          if (!matchedSlash) {
            startPart = i + 1;
            break;
          }
          continue;
        }
      if (end === -1) {
        // We saw the first non-path separator, mark this as the end of our
        // extension
        matchedSlash = false;
        end = i + 1;
      }
      if (code === 46 /*.*/) {
          // If this is our first dot, mark it as the start of our extension
          if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
        // We saw a non-dot and non-path separator before our dot, so we should
        // have a good chance at having a non-empty extension
        preDotState = -1;
      }
    }

    if (startDot === -1 || end === -1 ||
    // We saw a non-dot character immediately before the dot
    preDotState === 0 ||
    // The (right-most) trimmed path component is exactly '..'
    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
      if (end !== -1) {
        if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);else ret.base = ret.name = path.slice(startPart, end);
      }
    } else {
      if (startPart === 0 && isAbsolute) {
        ret.name = path.slice(1, startDot);
        ret.base = path.slice(1, end);
      } else {
        ret.name = path.slice(startPart, startDot);
        ret.base = path.slice(startPart, end);
      }
      ret.ext = path.slice(startDot, end);
    }

    if (startPart > 0) ret.dir = path.slice(0, startPart - 1);else if (isAbsolute) ret.dir = '/';

    return ret;
  },

  sep: '/',
  delimiter: ':',
  win32: null,
  posix: null
};

posix.posix = posix;

module.exports = posix;

}).call(this)}).call(this,require('_process'))
},{"_process":153}],147:[function(require,module,exports){
exports.pbkdf2 = require('./lib/async')
exports.pbkdf2Sync = require('./lib/sync')

},{"./lib/async":148,"./lib/sync":151}],148:[function(require,module,exports){
(function (global){(function (){
var Buffer = require('safe-buffer').Buffer

var checkParameters = require('./precondition')
var defaultEncoding = require('./default-encoding')
var sync = require('./sync')
var toBuffer = require('./to-buffer')

var ZERO_BUF
var subtle = global.crypto && global.crypto.subtle
var toBrowser = {
  sha: 'SHA-1',
  'sha-1': 'SHA-1',
  sha1: 'SHA-1',
  sha256: 'SHA-256',
  'sha-256': 'SHA-256',
  sha384: 'SHA-384',
  'sha-384': 'SHA-384',
  'sha-512': 'SHA-512',
  sha512: 'SHA-512'
}
var checks = []
function checkNative (algo) {
  if (global.process && !global.process.browser) {
    return Promise.resolve(false)
  }
  if (!subtle || !subtle.importKey || !subtle.deriveBits) {
    return Promise.resolve(false)
  }
  if (checks[algo] !== undefined) {
    return checks[algo]
  }
  ZERO_BUF = ZERO_BUF || Buffer.alloc(8)
  var prom = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, algo)
    .then(function () {
      return true
    }).catch(function () {
      return false
    })
  checks[algo] = prom
  return prom
}
var nextTick
function getNextTick () {
  if (nextTick) {
    return nextTick
  }
  if (global.process && global.process.nextTick) {
    nextTick = global.process.nextTick
  } else if (global.queueMicrotask) {
    nextTick = global.queueMicrotask
  } else if (global.setImmediate) {
    nextTick = global.setImmediate
  } else {
    nextTick = global.setTimeout
  }
  return nextTick
}
function browserPbkdf2 (password, salt, iterations, length, algo) {
  return subtle.importKey(
    'raw', password, { name: 'PBKDF2' }, false, ['deriveBits']
  ).then(function (key) {
    return subtle.deriveBits({
      name: 'PBKDF2',
      salt: salt,
      iterations: iterations,
      hash: {
        name: algo
      }
    }, key, length << 3)
  }).then(function (res) {
    return Buffer.from(res)
  })
}

function resolvePromise (promise, callback) {
  promise.then(function (out) {
    getNextTick()(function () {
      callback(null, out)
    })
  }, function (e) {
    getNextTick()(function () {
      callback(e)
    })
  })
}
module.exports = function (password, salt, iterations, keylen, digest, callback) {
  if (typeof digest === 'function') {
    callback = digest
    digest = undefined
  }

  digest = digest || 'sha1'
  var algo = toBrowser[digest.toLowerCase()]

  if (!algo || typeof global.Promise !== 'function') {
    getNextTick()(function () {
      var out
      try {
        out = sync(password, salt, iterations, keylen, digest)
      } catch (e) {
        return callback(e)
      }
      callback(null, out)
    })
    return
  }

  checkParameters(iterations, keylen)
  password = toBuffer(password, defaultEncoding, 'Password')
  salt = toBuffer(salt, defaultEncoding, 'Salt')
  if (typeof callback !== 'function') throw new Error('No callback provided to pbkdf2')

  resolvePromise(checkNative(algo).then(function (resp) {
    if (resp) return browserPbkdf2(password, salt, iterations, keylen, algo)

    return sync(password, salt, iterations, keylen, digest)
  }), callback)
}

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./default-encoding":149,"./precondition":150,"./sync":151,"./to-buffer":152,"safe-buffer":164}],149:[function(require,module,exports){
(function (process,global){(function (){
var defaultEncoding
/* istanbul ignore next */
if (global.process && global.process.browser) {
  defaultEncoding = 'utf-8'
} else if (global.process && global.process.version) {
  var pVersionMajor = parseInt(process.version.split('.')[0].slice(1), 10)

  defaultEncoding = pVersionMajor >= 6 ? 'utf-8' : 'binary'
} else {
  defaultEncoding = 'utf-8'
}
module.exports = defaultEncoding

}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"_process":153}],150:[function(require,module,exports){
var MAX_ALLOC = Math.pow(2, 30) - 1 // default in iojs

module.exports = function (iterations, keylen) {
  if (typeof iterations !== 'number') {
    throw new TypeError('Iterations not a number')
  }

  if (iterations < 0) {
    throw new TypeError('Bad iterations')
  }

  if (typeof keylen !== 'number') {
    throw new TypeError('Key length not a number')
  }

  if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) { /* eslint no-self-compare: 0 */
    throw new TypeError('Bad key length')
  }
}

},{}],151:[function(require,module,exports){
var md5 = require('create-hash/md5')
var RIPEMD160 = require('ripemd160')
var sha = require('sha.js')
var Buffer = require('safe-buffer').Buffer

var checkParameters = require('./precondition')
var defaultEncoding = require('./default-encoding')
var toBuffer = require('./to-buffer')

var ZEROS = Buffer.alloc(128)
var sizes = {
  md5: 16,
  sha1: 20,
  sha224: 28,
  sha256: 32,
  sha384: 48,
  sha512: 64,
  rmd160: 20,
  ripemd160: 20
}

function Hmac (alg, key, saltLen) {
  var hash = getDigest(alg)
  var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64

  if (key.length > blocksize) {
    key = hash(key)
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = Buffer.allocUnsafe(blocksize + sizes[alg])
  var opad = Buffer.allocUnsafe(blocksize + sizes[alg])
  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }

  var ipad1 = Buffer.allocUnsafe(blocksize + saltLen + 4)
  ipad.copy(ipad1, 0, 0, blocksize)
  this.ipad1 = ipad1
  this.ipad2 = ipad
  this.opad = opad
  this.alg = alg
  this.blocksize = blocksize
  this.hash = hash
  this.size = sizes[alg]
}

Hmac.prototype.run = function (data, ipad) {
  data.copy(ipad, this.blocksize)
  var h = this.hash(ipad)
  h.copy(this.opad, this.blocksize)
  return this.hash(this.opad)
}

function getDigest (alg) {
  function shaFunc (data) {
    return sha(alg).update(data).digest()
  }
  function rmd160Func (data) {
    return new RIPEMD160().update(data).digest()
  }

  if (alg === 'rmd160' || alg === 'ripemd160') return rmd160Func
  if (alg === 'md5') return md5
  return shaFunc
}

function pbkdf2 (password, salt, iterations, keylen, digest) {
  checkParameters(iterations, keylen)
  password = toBuffer(password, defaultEncoding, 'Password')
  salt = toBuffer(salt, defaultEncoding, 'Salt')

  digest = digest || 'sha1'

  var hmac = new Hmac(digest, password, salt.length)

  var DK = Buffer.allocUnsafe(keylen)
  var block1 = Buffer.allocUnsafe(salt.length + 4)
  salt.copy(block1, 0, 0, salt.length)

  var destPos = 0
  var hLen = sizes[digest]
  var l = Math.ceil(keylen / hLen)

  for (var i = 1; i <= l; i++) {
    block1.writeUInt32BE(i, salt.length)

    var T = hmac.run(block1, hmac.ipad1)
    var U = T

    for (var j = 1; j < iterations; j++) {
      U = hmac.run(U, hmac.ipad2)
      for (var k = 0; k < hLen; k++) T[k] ^= U[k]
    }

    T.copy(DK, destPos)
    destPos += hLen
  }

  return DK
}

module.exports = pbkdf2

},{"./default-encoding":149,"./precondition":150,"./to-buffer":152,"create-hash/md5":70,"ripemd160":163,"safe-buffer":164,"sha.js":167}],152:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer

module.exports = function (thing, encoding, name) {
  if (Buffer.isBuffer(thing)) {
    return thing
  } else if (typeof thing === 'string') {
    return Buffer.from(thing, encoding)
  } else if (ArrayBuffer.isView(thing)) {
    return Buffer.from(thing.buffer)
  } else {
    throw new TypeError(name + ' must be a string, a Buffer, a typed array or a DataView')
  }
}

},{"safe-buffer":164}],153:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],154:[function(require,module,exports){
exports.publicEncrypt = require('./publicEncrypt')
exports.privateDecrypt = require('./privateDecrypt')

exports.privateEncrypt = function privateEncrypt (key, buf) {
  return exports.publicEncrypt(key, buf, true)
}

exports.publicDecrypt = function publicDecrypt (key, buf) {
  return exports.privateDecrypt(key, buf, true)
}

},{"./privateDecrypt":157,"./publicEncrypt":158}],155:[function(require,module,exports){
var createHash = require('create-hash')
var Buffer = require('safe-buffer').Buffer

module.exports = function (seed, len) {
  var t = Buffer.alloc(0)
  var i = 0
  var c
  while (t.length < len) {
    c = i2ops(i++)
    t = Buffer.concat([t, createHash('sha1').update(seed).update(c).digest()])
  }
  return t.slice(0, len)
}

function i2ops (c) {
  var out = Buffer.allocUnsafe(4)
  out.writeUInt32BE(c, 0)
  return out
}

},{"create-hash":69,"safe-buffer":164}],156:[function(require,module,exports){
arguments[4][16][0].apply(exports,arguments)
},{"buffer":20,"dup":16}],157:[function(require,module,exports){
var parseKeys = require('parse-asn1')
var mgf = require('./mgf')
var xor = require('./xor')
var BN = require('bn.js')
var crt = require('browserify-rsa')
var createHash = require('create-hash')
var withPublic = require('./withPublic')
var Buffer = require('safe-buffer').Buffer

module.exports = function privateDecrypt (privateKey, enc, reverse) {
  var padding
  if (privateKey.padding) {
    padding = privateKey.padding
  } else if (reverse) {
    padding = 1
  } else {
    padding = 4
  }

  var key = parseKeys(privateKey)
  var k = key.modulus.byteLength()
  if (enc.length > k || new BN(enc).cmp(key.modulus) >= 0) {
    throw new Error('decryption error')
  }
  var msg
  if (reverse) {
    msg = withPublic(new BN(enc), key)
  } else {
    msg = crt(enc, key)
  }
  var zBuffer = Buffer.alloc(k - msg.length)
  msg = Buffer.concat([zBuffer, msg], k)
  if (padding === 4) {
    return oaep(key, msg)
  } else if (padding === 1) {
    return pkcs1(key, msg, reverse)
  } else if (padding === 3) {
    return msg
  } else {
    throw new Error('unknown padding')
  }
}

function oaep (key, msg) {
  var k = key.modulus.byteLength()
  var iHash = createHash('sha1').update(Buffer.alloc(0)).digest()
  var hLen = iHash.length
  if (msg[0] !== 0) {
    throw new Error('decryption error')
  }
  var maskedSeed = msg.slice(1, hLen + 1)
  var maskedDb = msg.slice(hLen + 1)
  var seed = xor(maskedSeed, mgf(maskedDb, hLen))
  var db = xor(maskedDb, mgf(seed, k - hLen - 1))
  if (compare(iHash, db.slice(0, hLen))) {
    throw new Error('decryption error')
  }
  var i = hLen
  while (db[i] === 0) {
    i++
  }
  if (db[i++] !== 1) {
    throw new Error('decryption error')
  }
  return db.slice(i)
}

function pkcs1 (key, msg, reverse) {
  var p1 = msg.slice(0, 2)
  var i = 2
  var status = 0
  while (msg[i++] !== 0) {
    if (i >= msg.length) {
      status++
      break
    }
  }
  var ps = msg.slice(2, i - 1)

  if ((p1.toString('hex') !== '0002' && !reverse) || (p1.toString('hex') !== '0001' && reverse)) {
    status++
  }
  if (ps.length < 8) {
    status++
  }
  if (status) {
    throw new Error('decryption error')
  }
  return msg.slice(i)
}
function compare (a, b) {
  a = Buffer.from(a)
  b = Buffer.from(b)
  var dif = 0
  var len = a.length
  if (a.length !== b.length) {
    dif++
    len = Math.min(a.length, b.length)
  }
  var i = -1
  while (++i < len) {
    dif += (a[i] ^ b[i])
  }
  return dif
}

},{"./mgf":155,"./withPublic":159,"./xor":160,"bn.js":156,"browserify-rsa":41,"create-hash":69,"parse-asn1":145,"safe-buffer":164}],158:[function(require,module,exports){
var parseKeys = require('parse-asn1')
var randomBytes = require('randombytes')
var createHash = require('create-hash')
var mgf = require('./mgf')
var xor = require('./xor')
var BN = require('bn.js')
var withPublic = require('./withPublic')
var crt = require('browserify-rsa')
var Buffer = require('safe-buffer').Buffer

module.exports = function publicEncrypt (publicKey, msg, reverse) {
  var padding
  if (publicKey.padding) {
    padding = publicKey.padding
  } else if (reverse) {
    padding = 1
  } else {
    padding = 4
  }
  var key = parseKeys(publicKey)
  var paddedMsg
  if (padding === 4) {
    paddedMsg = oaep(key, msg)
  } else if (padding === 1) {
    paddedMsg = pkcs1(key, msg, reverse)
  } else if (padding === 3) {
    paddedMsg = new BN(msg)
    if (paddedMsg.cmp(key.modulus) >= 0) {
      throw new Error('data too long for modulus')
    }
  } else {
    throw new Error('unknown padding')
  }
  if (reverse) {
    return crt(paddedMsg, key)
  } else {
    return withPublic(paddedMsg, key)
  }
}

function oaep (key, msg) {
  var k = key.modulus.byteLength()
  var mLen = msg.length
  var iHash = createHash('sha1').update(Buffer.alloc(0)).digest()
  var hLen = iHash.length
  var hLen2 = 2 * hLen
  if (mLen > k - hLen2 - 2) {
    throw new Error('message too long')
  }
  var ps = Buffer.alloc(k - mLen - hLen2 - 2)
  var dblen = k - hLen - 1
  var seed = randomBytes(hLen)
  var maskedDb = xor(Buffer.concat([iHash, ps, Buffer.alloc(1, 1), msg], dblen), mgf(seed, dblen))
  var maskedSeed = xor(seed, mgf(maskedDb, hLen))
  return new BN(Buffer.concat([Buffer.alloc(1), maskedSeed, maskedDb], k))
}
function pkcs1 (key, msg, reverse) {
  var mLen = msg.length
  var k = key.modulus.byteLength()
  if (mLen > k - 11) {
    throw new Error('message too long')
  }
  var ps
  if (reverse) {
    ps = Buffer.alloc(k - mLen - 3, 0xff)
  } else {
    ps = nonZero(k - mLen - 3)
  }
  return new BN(Buffer.concat([Buffer.from([0, reverse ? 1 : 2]), ps, Buffer.alloc(1), msg], k))
}
function nonZero (len) {
  var out = Buffer.allocUnsafe(len)
  var i = 0
  var cache = randomBytes(len * 2)
  var cur = 0
  var num
  while (i < len) {
    if (cur === cache.length) {
      cache = randomBytes(len * 2)
      cur = 0
    }
    num = cache[cur++]
    if (num) {
      out[i++] = num
    }
  }
  return out
}

},{"./mgf":155,"./withPublic":159,"./xor":160,"bn.js":156,"browserify-rsa":41,"create-hash":69,"parse-asn1":145,"randombytes":161,"safe-buffer":164}],159:[function(require,module,exports){
var BN = require('bn.js')
var Buffer = require('safe-buffer').Buffer

function withPublic (paddedMsg, key) {
  return Buffer.from(paddedMsg
    .toRed(BN.mont(key.modulus))
    .redPow(new BN(key.publicExponent))
    .fromRed()
    .toArray())
}

module.exports = withPublic

},{"bn.js":156,"safe-buffer":164}],160:[function(require,module,exports){
module.exports = function xor (a, b) {
  var len = a.length
  var i = -1
  while (++i < len) {
    a[i] ^= b[i]
  }
  return a
}

},{}],161:[function(require,module,exports){
(function (process,global){(function (){
'use strict'

// limit of Crypto.getRandomValues()
// https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues
var MAX_BYTES = 65536

// Node supports requesting up to this number of bytes
// https://github.com/nodejs/node/blob/master/lib/internal/crypto/random.js#L48
var MAX_UINT32 = 4294967295

function oldBrowser () {
  throw new Error('Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11')
}

var Buffer = require('safe-buffer').Buffer
var crypto = global.crypto || global.msCrypto

if (crypto && crypto.getRandomValues) {
  module.exports = randomBytes
} else {
  module.exports = oldBrowser
}

function randomBytes (size, cb) {
  // phantomjs needs to throw
  if (size > MAX_UINT32) throw new RangeError('requested too many random bytes')

  var bytes = Buffer.allocUnsafe(size)

  if (size > 0) {  // getRandomValues fails on IE if size == 0
    if (size > MAX_BYTES) { // this is the max bytes crypto.getRandomValues
      // can do at once see https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
      for (var generated = 0; generated < size; generated += MAX_BYTES) {
        // buffer.slice automatically checks if the end is past the end of
        // the buffer so we don't have to here
        crypto.getRandomValues(bytes.slice(generated, generated + MAX_BYTES))
      }
    } else {
      crypto.getRandomValues(bytes)
    }
  }

  if (typeof cb === 'function') {
    return process.nextTick(function () {
      cb(null, bytes)
    })
  }

  return bytes
}

}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"_process":153,"safe-buffer":164}],162:[function(require,module,exports){
(function (process,global){(function (){
'use strict'

function oldBrowser () {
  throw new Error('secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11')
}
var safeBuffer = require('safe-buffer')
var randombytes = require('randombytes')
var Buffer = safeBuffer.Buffer
var kBufferMaxLength = safeBuffer.kMaxLength
var crypto = global.crypto || global.msCrypto
var kMaxUint32 = Math.pow(2, 32) - 1
function assertOffset (offset, length) {
  if (typeof offset !== 'number' || offset !== offset) { // eslint-disable-line no-self-compare
    throw new TypeError('offset must be a number')
  }

  if (offset > kMaxUint32 || offset < 0) {
    throw new TypeError('offset must be a uint32')
  }

  if (offset > kBufferMaxLength || offset > length) {
    throw new RangeError('offset out of range')
  }
}

function assertSize (size, offset, length) {
  if (typeof size !== 'number' || size !== size) { // eslint-disable-line no-self-compare
    throw new TypeError('size must be a number')
  }

  if (size > kMaxUint32 || size < 0) {
    throw new TypeError('size must be a uint32')
  }

  if (size + offset > length || size > kBufferMaxLength) {
    throw new RangeError('buffer too small')
  }
}
if ((crypto && crypto.getRandomValues) || !process.browser) {
  exports.randomFill = randomFill
  exports.randomFillSync = randomFillSync
} else {
  exports.randomFill = oldBrowser
  exports.randomFillSync = oldBrowser
}
function randomFill (buf, offset, size, cb) {
  if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {
    throw new TypeError('"buf" argument must be a Buffer or Uint8Array')
  }

  if (typeof offset === 'function') {
    cb = offset
    offset = 0
    size = buf.length
  } else if (typeof size === 'function') {
    cb = size
    size = buf.length - offset
  } else if (typeof cb !== 'function') {
    throw new TypeError('"cb" argument must be a function')
  }
  assertOffset(offset, buf.length)
  assertSize(size, offset, buf.length)
  return actualFill(buf, offset, size, cb)
}

function actualFill (buf, offset, size, cb) {
  if (process.browser) {
    var ourBuf = buf.buffer
    var uint = new Uint8Array(ourBuf, offset, size)
    crypto.getRandomValues(uint)
    if (cb) {
      process.nextTick(function () {
        cb(null, buf)
      })
      return
    }
    return buf
  }
  if (cb) {
    randombytes(size, function (err, bytes) {
      if (err) {
        return cb(err)
      }
      bytes.copy(buf, offset)
      cb(null, buf)
    })
    return
  }
  var bytes = randombytes(size)
  bytes.copy(buf, offset)
  return buf
}
function randomFillSync (buf, offset, size) {
  if (typeof offset === 'undefined') {
    offset = 0
  }
  if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {
    throw new TypeError('"buf" argument must be a Buffer or Uint8Array')
  }

  assertOffset(offset, buf.length)

  if (size === undefined) size = buf.length - offset

  assertSize(size, offset, buf.length)

  return actualFill(buf, offset, size)
}

}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"_process":153,"randombytes":161,"safe-buffer":164}],163:[function(require,module,exports){
'use strict'
var Buffer = require('buffer').Buffer
var inherits = require('inherits')
var HashBase = require('hash-base')

var ARRAY16 = new Array(16)

var zl = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
]

var zr = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
]

var sl = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
]

var sr = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
]

var hl = [0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e]
var hr = [0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000]

function RIPEMD160 () {
  HashBase.call(this, 64)

  // state
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0
}

inherits(RIPEMD160, HashBase)

RIPEMD160.prototype._update = function () {
  var words = ARRAY16
  for (var j = 0; j < 16; ++j) words[j] = this._block.readInt32LE(j * 4)

  var al = this._a | 0
  var bl = this._b | 0
  var cl = this._c | 0
  var dl = this._d | 0
  var el = this._e | 0

  var ar = this._a | 0
  var br = this._b | 0
  var cr = this._c | 0
  var dr = this._d | 0
  var er = this._e | 0

  // computation
  for (var i = 0; i < 80; i += 1) {
    var tl
    var tr
    if (i < 16) {
      tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i])
      tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i])
    } else if (i < 32) {
      tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i])
      tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i])
    } else if (i < 48) {
      tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i])
      tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i])
    } else if (i < 64) {
      tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i])
      tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i])
    } else { // if (i<80) {
      tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i])
      tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i])
    }

    al = el
    el = dl
    dl = rotl(cl, 10)
    cl = bl
    bl = tl

    ar = er
    er = dr
    dr = rotl(cr, 10)
    cr = br
    br = tr
  }

  // update state
  var t = (this._b + cl + dr) | 0
  this._b = (this._c + dl + er) | 0
  this._c = (this._d + el + ar) | 0
  this._d = (this._e + al + br) | 0
  this._e = (this._a + bl + cr) | 0
  this._a = t
}

RIPEMD160.prototype._digest = function () {
  // create padding and handle blocks
  this._block[this._blockOffset++] = 0x80
  if (this._blockOffset > 56) {
    this._block.fill(0, this._blockOffset, 64)
    this._update()
    this._blockOffset = 0
  }

  this._block.fill(0, this._blockOffset, 56)
  this._block.writeUInt32LE(this._length[0], 56)
  this._block.writeUInt32LE(this._length[1], 60)
  this._update()

  // produce result
  var buffer = Buffer.alloc ? Buffer.alloc(20) : new Buffer(20)
  buffer.writeInt32LE(this._a, 0)
  buffer.writeInt32LE(this._b, 4)
  buffer.writeInt32LE(this._c, 8)
  buffer.writeInt32LE(this._d, 12)
  buffer.writeInt32LE(this._e, 16)
  return buffer
}

function rotl (x, n) {
  return (x << n) | (x >>> (32 - n))
}

function fn1 (a, b, c, d, e, m, k, s) {
  return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + e) | 0
}

function fn2 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + e) | 0
}

function fn3 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b | (~c)) ^ d) + m + k) | 0, s) + e) | 0
}

function fn4 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + e) | 0
}

function fn5 (a, b, c, d, e, m, k, s) {
  return (rotl((a + (b ^ (c | (~d))) + m + k) | 0, s) + e) | 0
}

module.exports = RIPEMD160

},{"buffer":65,"hash-base":104,"inherits":134}],164:[function(require,module,exports){
/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
/* eslint-disable node/no-deprecated-api */
var buffer = require('buffer')
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.prototype = Object.create(Buffer.prototype)

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}

},{"buffer":65}],165:[function(require,module,exports){
(function (process){(function (){
/* eslint-disable node/no-deprecated-api */

'use strict'

var buffer = require('buffer')
var Buffer = buffer.Buffer

var safer = {}

var key

for (key in buffer) {
  if (!buffer.hasOwnProperty(key)) continue
  if (key === 'SlowBuffer' || key === 'Buffer') continue
  safer[key] = buffer[key]
}

var Safer = safer.Buffer = {}
for (key in Buffer) {
  if (!Buffer.hasOwnProperty(key)) continue
  if (key === 'allocUnsafe' || key === 'allocUnsafeSlow') continue
  Safer[key] = Buffer[key]
}

safer.Buffer.prototype = Buffer.prototype

if (!Safer.from || Safer.from === Uint8Array.from) {
  Safer.from = function (value, encodingOrOffset, length) {
    if (typeof value === 'number') {
      throw new TypeError('The "value" argument must not be of type number. Received type ' + typeof value)
    }
    if (value && typeof value.length === 'undefined') {
      throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type ' + typeof value)
    }
    return Buffer(value, encodingOrOffset, length)
  }
}

if (!Safer.alloc) {
  Safer.alloc = function (size, fill, encoding) {
    if (typeof size !== 'number') {
      throw new TypeError('The "size" argument must be of type number. Received type ' + typeof size)
    }
    if (size < 0 || size >= 2 * (1 << 30)) {
      throw new RangeError('The value "' + size + '" is invalid for option "size"')
    }
    var buf = Buffer(size)
    if (!fill || fill.length === 0) {
      buf.fill(0)
    } else if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
    return buf
  }
}

if (!safer.kStringMaxLength) {
  try {
    safer.kStringMaxLength = process.binding('buffer').kStringMaxLength
  } catch (e) {
    // we can't determine kStringMaxLength in environments where process.binding
    // is unsupported, so let's not set it
  }
}

if (!safer.constants) {
  safer.constants = {
    MAX_LENGTH: safer.kMaxLength
  }
  if (safer.kStringMaxLength) {
    safer.constants.MAX_STRING_LENGTH = safer.kStringMaxLength
  }
}

module.exports = safer

}).call(this)}).call(this,require('_process'))
},{"_process":153,"buffer":65}],166:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer

// prototype class for hash functions
function Hash (blockSize, finalSize) {
  this._block = Buffer.alloc(blockSize)
  this._finalSize = finalSize
  this._blockSize = blockSize
  this._len = 0
}

Hash.prototype.update = function (data, enc) {
  if (typeof data === 'string') {
    enc = enc || 'utf8'
    data = Buffer.from(data, enc)
  }

  var block = this._block
  var blockSize = this._blockSize
  var length = data.length
  var accum = this._len

  for (var offset = 0; offset < length;) {
    var assigned = accum % blockSize
    var remainder = Math.min(length - offset, blockSize - assigned)

    for (var i = 0; i < remainder; i++) {
      block[assigned + i] = data[offset + i]
    }

    accum += remainder
    offset += remainder

    if ((accum % blockSize) === 0) {
      this._update(block)
    }
  }

  this._len += length
  return this
}

Hash.prototype.digest = function (enc) {
  var rem = this._len % this._blockSize

  this._block[rem] = 0x80

  // zero (rem + 1) trailing bits, where (rem + 1) is the smallest
  // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize
  this._block.fill(0, rem + 1)

  if (rem >= this._finalSize) {
    this._update(this._block)
    this._block.fill(0)
  }

  var bits = this._len * 8

  // uint32
  if (bits <= 0xffffffff) {
    this._block.writeUInt32BE(bits, this._blockSize - 4)

  // uint64
  } else {
    var lowBits = (bits & 0xffffffff) >>> 0
    var highBits = (bits - lowBits) / 0x100000000

    this._block.writeUInt32BE(highBits, this._blockSize - 8)
    this._block.writeUInt32BE(lowBits, this._blockSize - 4)
  }

  this._update(this._block)
  var hash = this._hash()

  return enc ? hash.toString(enc) : hash
}

Hash.prototype._update = function () {
  throw new Error('_update must be implemented by subclass')
}

module.exports = Hash

},{"safe-buffer":164}],167:[function(require,module,exports){
var exports = module.exports = function SHA (algorithm) {
  algorithm = algorithm.toLowerCase()

  var Algorithm = exports[algorithm]
  if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)')

  return new Algorithm()
}

exports.sha = require('./sha')
exports.sha1 = require('./sha1')
exports.sha224 = require('./sha224')
exports.sha256 = require('./sha256')
exports.sha384 = require('./sha384')
exports.sha512 = require('./sha512')

},{"./sha":168,"./sha1":169,"./sha224":170,"./sha256":171,"./sha384":172,"./sha512":173}],168:[function(require,module,exports){
/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
 * in FIPS PUB 180-1
 * This source code is derived from sha1.js of the same repository.
 * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
 * operation was added.
 */

var inherits = require('inherits')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var K = [
  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
]

var W = new Array(80)

function Sha () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha, Hash)

Sha.prototype.init = function () {
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0

  return this
}

function rotl5 (num) {
  return (num << 5) | (num >>> 27)
}

function rotl30 (num) {
  return (num << 30) | (num >>> 2)
}

function ft (s, b, c, d) {
  if (s === 0) return (b & c) | ((~b) & d)
  if (s === 2) return (b & c) | (b & d) | (c & d)
  return b ^ c ^ d
}

Sha.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 80; ++i) W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]

  for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20)
    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

    e = d
    d = c
    c = rotl30(b)
    b = a
    a = t
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha.prototype._hash = function () {
  var H = Buffer.allocUnsafe(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha

},{"./hash":166,"inherits":134,"safe-buffer":164}],169:[function(require,module,exports){
/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS PUB 180-1
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */

var inherits = require('inherits')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var K = [
  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
]

var W = new Array(80)

function Sha1 () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha1, Hash)

Sha1.prototype.init = function () {
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0

  return this
}

function rotl1 (num) {
  return (num << 1) | (num >>> 31)
}

function rotl5 (num) {
  return (num << 5) | (num >>> 27)
}

function rotl30 (num) {
  return (num << 30) | (num >>> 2)
}

function ft (s, b, c, d) {
  if (s === 0) return (b & c) | ((~b) & d)
  if (s === 2) return (b & c) | (b & d) | (c & d)
  return b ^ c ^ d
}

Sha1.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 80; ++i) W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16])

  for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20)
    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

    e = d
    d = c
    c = rotl30(b)
    b = a
    a = t
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha1.prototype._hash = function () {
  var H = Buffer.allocUnsafe(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha1

},{"./hash":166,"inherits":134,"safe-buffer":164}],170:[function(require,module,exports){
/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = require('inherits')
var Sha256 = require('./sha256')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var W = new Array(64)

function Sha224 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha224, Sha256)

Sha224.prototype.init = function () {
  this._a = 0xc1059ed8
  this._b = 0x367cd507
  this._c = 0x3070dd17
  this._d = 0xf70e5939
  this._e = 0xffc00b31
  this._f = 0x68581511
  this._g = 0x64f98fa7
  this._h = 0xbefa4fa4

  return this
}

Sha224.prototype._hash = function () {
  var H = Buffer.allocUnsafe(28)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)

  return H
}

module.exports = Sha224

},{"./hash":166,"./sha256":171,"inherits":134,"safe-buffer":164}],171:[function(require,module,exports){
/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = require('inherits')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var K = [
  0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
  0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
  0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
  0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
  0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
  0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
  0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
  0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
  0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
  0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
  0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
  0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
  0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
  0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
  0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
  0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
]

var W = new Array(64)

function Sha256 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha256, Hash)

Sha256.prototype.init = function () {
  this._a = 0x6a09e667
  this._b = 0xbb67ae85
  this._c = 0x3c6ef372
  this._d = 0xa54ff53a
  this._e = 0x510e527f
  this._f = 0x9b05688c
  this._g = 0x1f83d9ab
  this._h = 0x5be0cd19

  return this
}

function ch (x, y, z) {
  return z ^ (x & (y ^ z))
}

function maj (x, y, z) {
  return (x & y) | (z & (x | y))
}

function sigma0 (x) {
  return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10)
}

function sigma1 (x) {
  return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7)
}

function gamma0 (x) {
  return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ (x >>> 3)
}

function gamma1 (x) {
  return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ (x >>> 10)
}

Sha256.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0
  var f = this._f | 0
  var g = this._g | 0
  var h = this._h | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 64; ++i) W[i] = (gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16]) | 0

  for (var j = 0; j < 64; ++j) {
    var T1 = (h + sigma1(e) + ch(e, f, g) + K[j] + W[j]) | 0
    var T2 = (sigma0(a) + maj(a, b, c)) | 0

    h = g
    g = f
    f = e
    e = (d + T1) | 0
    d = c
    c = b
    b = a
    a = (T1 + T2) | 0
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
  this._f = (f + this._f) | 0
  this._g = (g + this._g) | 0
  this._h = (h + this._h) | 0
}

Sha256.prototype._hash = function () {
  var H = Buffer.allocUnsafe(32)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)
  H.writeInt32BE(this._h, 28)

  return H
}

module.exports = Sha256

},{"./hash":166,"inherits":134,"safe-buffer":164}],172:[function(require,module,exports){
var inherits = require('inherits')
var SHA512 = require('./sha512')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var W = new Array(160)

function Sha384 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha384, SHA512)

Sha384.prototype.init = function () {
  this._ah = 0xcbbb9d5d
  this._bh = 0x629a292a
  this._ch = 0x9159015a
  this._dh = 0x152fecd8
  this._eh = 0x67332667
  this._fh = 0x8eb44a87
  this._gh = 0xdb0c2e0d
  this._hh = 0x47b5481d

  this._al = 0xc1059ed8
  this._bl = 0x367cd507
  this._cl = 0x3070dd17
  this._dl = 0xf70e5939
  this._el = 0xffc00b31
  this._fl = 0x68581511
  this._gl = 0x64f98fa7
  this._hl = 0xbefa4fa4

  return this
}

Sha384.prototype._hash = function () {
  var H = Buffer.allocUnsafe(48)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._ah, this._al, 0)
  writeInt64BE(this._bh, this._bl, 8)
  writeInt64BE(this._ch, this._cl, 16)
  writeInt64BE(this._dh, this._dl, 24)
  writeInt64BE(this._eh, this._el, 32)
  writeInt64BE(this._fh, this._fl, 40)

  return H
}

module.exports = Sha384

},{"./hash":166,"./sha512":173,"inherits":134,"safe-buffer":164}],173:[function(require,module,exports){
var inherits = require('inherits')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
]

var W = new Array(160)

function Sha512 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha512, Hash)

Sha512.prototype.init = function () {
  this._ah = 0x6a09e667
  this._bh = 0xbb67ae85
  this._ch = 0x3c6ef372
  this._dh = 0xa54ff53a
  this._eh = 0x510e527f
  this._fh = 0x9b05688c
  this._gh = 0x1f83d9ab
  this._hh = 0x5be0cd19

  this._al = 0xf3bcc908
  this._bl = 0x84caa73b
  this._cl = 0xfe94f82b
  this._dl = 0x5f1d36f1
  this._el = 0xade682d1
  this._fl = 0x2b3e6c1f
  this._gl = 0xfb41bd6b
  this._hl = 0x137e2179

  return this
}

function Ch (x, y, z) {
  return z ^ (x & (y ^ z))
}

function maj (x, y, z) {
  return (x & y) | (z & (x | y))
}

function sigma0 (x, xl) {
  return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25)
}

function sigma1 (x, xl) {
  return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23)
}

function Gamma0 (x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7)
}

function Gamma0l (x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25)
}

function Gamma1 (x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6)
}

function Gamma1l (x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26)
}

function getCarry (a, b) {
  return (a >>> 0) < (b >>> 0) ? 1 : 0
}

Sha512.prototype._update = function (M) {
  var W = this._w

  var ah = this._ah | 0
  var bh = this._bh | 0
  var ch = this._ch | 0
  var dh = this._dh | 0
  var eh = this._eh | 0
  var fh = this._fh | 0
  var gh = this._gh | 0
  var hh = this._hh | 0

  var al = this._al | 0
  var bl = this._bl | 0
  var cl = this._cl | 0
  var dl = this._dl | 0
  var el = this._el | 0
  var fl = this._fl | 0
  var gl = this._gl | 0
  var hl = this._hl | 0

  for (var i = 0; i < 32; i += 2) {
    W[i] = M.readInt32BE(i * 4)
    W[i + 1] = M.readInt32BE(i * 4 + 4)
  }
  for (; i < 160; i += 2) {
    var xh = W[i - 15 * 2]
    var xl = W[i - 15 * 2 + 1]
    var gamma0 = Gamma0(xh, xl)
    var gamma0l = Gamma0l(xl, xh)

    xh = W[i - 2 * 2]
    xl = W[i - 2 * 2 + 1]
    var gamma1 = Gamma1(xh, xl)
    var gamma1l = Gamma1l(xl, xh)

    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
    var Wi7h = W[i - 7 * 2]
    var Wi7l = W[i - 7 * 2 + 1]

    var Wi16h = W[i - 16 * 2]
    var Wi16l = W[i - 16 * 2 + 1]

    var Wil = (gamma0l + Wi7l) | 0
    var Wih = (gamma0 + Wi7h + getCarry(Wil, gamma0l)) | 0
    Wil = (Wil + gamma1l) | 0
    Wih = (Wih + gamma1 + getCarry(Wil, gamma1l)) | 0
    Wil = (Wil + Wi16l) | 0
    Wih = (Wih + Wi16h + getCarry(Wil, Wi16l)) | 0

    W[i] = Wih
    W[i + 1] = Wil
  }

  for (var j = 0; j < 160; j += 2) {
    Wih = W[j]
    Wil = W[j + 1]

    var majh = maj(ah, bh, ch)
    var majl = maj(al, bl, cl)

    var sigma0h = sigma0(ah, al)
    var sigma0l = sigma0(al, ah)
    var sigma1h = sigma1(eh, el)
    var sigma1l = sigma1(el, eh)

    // t1 = h + sigma1 + ch + K[j] + W[j]
    var Kih = K[j]
    var Kil = K[j + 1]

    var chh = Ch(eh, fh, gh)
    var chl = Ch(el, fl, gl)

    var t1l = (hl + sigma1l) | 0
    var t1h = (hh + sigma1h + getCarry(t1l, hl)) | 0
    t1l = (t1l + chl) | 0
    t1h = (t1h + chh + getCarry(t1l, chl)) | 0
    t1l = (t1l + Kil) | 0
    t1h = (t1h + Kih + getCarry(t1l, Kil)) | 0
    t1l = (t1l + Wil) | 0
    t1h = (t1h + Wih + getCarry(t1l, Wil)) | 0

    // t2 = sigma0 + maj
    var t2l = (sigma0l + majl) | 0
    var t2h = (sigma0h + majh + getCarry(t2l, sigma0l)) | 0

    hh = gh
    hl = gl
    gh = fh
    gl = fl
    fh = eh
    fl = el
    el = (dl + t1l) | 0
    eh = (dh + t1h + getCarry(el, dl)) | 0
    dh = ch
    dl = cl
    ch = bh
    cl = bl
    bh = ah
    bl = al
    al = (t1l + t2l) | 0
    ah = (t1h + t2h + getCarry(al, t1l)) | 0
  }

  this._al = (this._al + al) | 0
  this._bl = (this._bl + bl) | 0
  this._cl = (this._cl + cl) | 0
  this._dl = (this._dl + dl) | 0
  this._el = (this._el + el) | 0
  this._fl = (this._fl + fl) | 0
  this._gl = (this._gl + gl) | 0
  this._hl = (this._hl + hl) | 0

  this._ah = (this._ah + ah + getCarry(this._al, al)) | 0
  this._bh = (this._bh + bh + getCarry(this._bl, bl)) | 0
  this._ch = (this._ch + ch + getCarry(this._cl, cl)) | 0
  this._dh = (this._dh + dh + getCarry(this._dl, dl)) | 0
  this._eh = (this._eh + eh + getCarry(this._el, el)) | 0
  this._fh = (this._fh + fh + getCarry(this._fl, fl)) | 0
  this._gh = (this._gh + gh + getCarry(this._gl, gl)) | 0
  this._hh = (this._hh + hh + getCarry(this._hl, hl)) | 0
}

Sha512.prototype._hash = function () {
  var H = Buffer.allocUnsafe(64)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._ah, this._al, 0)
  writeInt64BE(this._bh, this._bl, 8)
  writeInt64BE(this._ch, this._cl, 16)
  writeInt64BE(this._dh, this._dl, 24)
  writeInt64BE(this._eh, this._el, 32)
  writeInt64BE(this._fh, this._fl, 40)
  writeInt64BE(this._gh, this._gl, 48)
  writeInt64BE(this._hh, this._hl, 56)

  return H
}

module.exports = Sha512

},{"./hash":166,"inherits":134,"safe-buffer":164}],174:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = require('events').EventEmitter;
var inherits = require('inherits');

inherits(Stream, EE);
Stream.Readable = require('readable-stream/lib/_stream_readable.js');
Stream.Writable = require('readable-stream/lib/_stream_writable.js');
Stream.Duplex = require('readable-stream/lib/_stream_duplex.js');
Stream.Transform = require('readable-stream/lib/_stream_transform.js');
Stream.PassThrough = require('readable-stream/lib/_stream_passthrough.js');
Stream.finished = require('readable-stream/lib/internal/streams/end-of-stream.js')
Stream.pipeline = require('readable-stream/lib/internal/streams/pipeline.js')

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};

},{"events":102,"inherits":134,"readable-stream/lib/_stream_duplex.js":176,"readable-stream/lib/_stream_passthrough.js":177,"readable-stream/lib/_stream_readable.js":178,"readable-stream/lib/_stream_transform.js":179,"readable-stream/lib/_stream_writable.js":180,"readable-stream/lib/internal/streams/end-of-stream.js":184,"readable-stream/lib/internal/streams/pipeline.js":186}],175:[function(require,module,exports){
arguments[4][48][0].apply(exports,arguments)
},{"dup":48}],176:[function(require,module,exports){
arguments[4][49][0].apply(exports,arguments)
},{"./_stream_readable":178,"./_stream_writable":180,"_process":153,"dup":49,"inherits":134}],177:[function(require,module,exports){
arguments[4][50][0].apply(exports,arguments)
},{"./_stream_transform":179,"dup":50,"inherits":134}],178:[function(require,module,exports){
arguments[4][51][0].apply(exports,arguments)
},{"../errors":175,"./_stream_duplex":176,"./internal/streams/async_iterator":181,"./internal/streams/buffer_list":182,"./internal/streams/destroy":183,"./internal/streams/from":185,"./internal/streams/state":187,"./internal/streams/stream":188,"_process":153,"buffer":65,"dup":51,"events":102,"inherits":134,"string_decoder/":189,"util":20}],179:[function(require,module,exports){
arguments[4][52][0].apply(exports,arguments)
},{"../errors":175,"./_stream_duplex":176,"dup":52,"inherits":134}],180:[function(require,module,exports){
arguments[4][53][0].apply(exports,arguments)
},{"../errors":175,"./_stream_duplex":176,"./internal/streams/destroy":183,"./internal/streams/state":187,"./internal/streams/stream":188,"_process":153,"buffer":65,"dup":53,"inherits":134,"util-deprecate":190}],181:[function(require,module,exports){
arguments[4][54][0].apply(exports,arguments)
},{"./end-of-stream":184,"_process":153,"dup":54}],182:[function(require,module,exports){
arguments[4][55][0].apply(exports,arguments)
},{"buffer":65,"dup":55,"util":20}],183:[function(require,module,exports){
arguments[4][56][0].apply(exports,arguments)
},{"_process":153,"dup":56}],184:[function(require,module,exports){
arguments[4][57][0].apply(exports,arguments)
},{"../../../errors":175,"dup":57}],185:[function(require,module,exports){
arguments[4][58][0].apply(exports,arguments)
},{"dup":58}],186:[function(require,module,exports){
arguments[4][59][0].apply(exports,arguments)
},{"../../../errors":175,"./end-of-stream":184,"dup":59}],187:[function(require,module,exports){
arguments[4][60][0].apply(exports,arguments)
},{"../../../errors":175,"dup":60}],188:[function(require,module,exports){
arguments[4][61][0].apply(exports,arguments)
},{"dup":61,"events":102}],189:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

/*<replacement>*/

var Buffer = require('safe-buffer').Buffer;
/*</replacement>*/

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return byte >> 6 === 0x02 ? -1 : -2;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd';
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd';
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd';
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd';
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}
},{"safe-buffer":164}],190:[function(require,module,exports){
(function (global){(function (){

/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}]},{},[1]);
